
using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Microsoft.Win32
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Microsoft.Win32"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Microsoft.Win32.FileDialog"/> class.
        /// </summary>
        public static RxFileDialogEvents Events(this global::Microsoft.Win32.FileDialog item) => new RxFileDialogEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Microsoft.Win32.FileDialog"/> class as observables.
    /// </summary>
    public class RxFileDialogEvents
    {
        private readonly global::Microsoft.Win32.FileDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Microsoft.Win32.FileDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileDialogEvents(global::Microsoft.Win32.FileDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Win32.FileDialog.FileOk"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> FileOk => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FileOk += x, x => _data.FileOk -= x);
    }
}

namespace System.ComponentModel
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.ComponentModel"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.ICollectionView"/> class.
        /// </summary>
        public static RxICollectionViewEvents Events(this global::System.ComponentModel.ICollectionView item) => new RxICollectionViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.ICollectionView"/> class as observables.
    /// </summary>
    public class RxICollectionViewEvents
    {
        private readonly global::System.ComponentModel.ICollectionView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.ICollectionView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICollectionViewEvents(global::System.ComponentModel.ICollectionView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.ComponentModel.ICollectionView.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.ComponentModel.ICollectionView.CurrentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CurrentChangingEventArgs> CurrentChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CurrentChangingEventHandler, global::System.ComponentModel.CurrentChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CurrentChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanging += x, x => _data.CurrentChanging -= x);
    }
}

namespace System.IO.Packaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.IO.Packaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class.
        /// </summary>
        public static RxPackageDigitalSignatureManagerEvents Events(this global::System.IO.Packaging.PackageDigitalSignatureManager item) => new RxPackageDigitalSignatureManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class as observables.
    /// </summary>
    public class RxPackageDigitalSignatureManagerEvents
    {
        private readonly global::System.IO.Packaging.PackageDigitalSignatureManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPackageDigitalSignatureManagerEvents(global::System.IO.Packaging.PackageDigitalSignatureManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.Packaging.SignatureVerificationEventArgs> InvalidSignatureEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.IO.Packaging.InvalidSignatureEventHandler, global::System.IO.Packaging.SignatureVerificationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.IO.Packaging.SignatureVerificationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InvalidSignatureEvent += x, x => _data.InvalidSignatureEvent -= x);
    }
}

namespace System.Windows
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Application"/> class.
        /// </summary>
        public static RxApplicationEvents Events(this global::System.Windows.Application item) => new RxApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.ContentElement"/> class.
        /// </summary>
        public static RxContentElementEvents Events(this global::System.Windows.ContentElement item) => new RxContentElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.FrameworkContentElement"/> class.
        /// </summary>
        public static RxFrameworkContentElementEvents Events(this global::System.Windows.FrameworkContentElement item) => new RxFrameworkContentElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.FrameworkElement"/> class.
        /// </summary>
        public static RxFrameworkElementEvents Events(this global::System.Windows.FrameworkElement item) => new RxFrameworkElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Freezable"/> class.
        /// </summary>
        public static RxFreezableEvents Events(this global::System.Windows.Freezable item) => new RxFreezableEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.IInputElement"/> class.
        /// </summary>
        public static RxIInputElementEvents Events(this global::System.Windows.IInputElement item) => new RxIInputElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.PresentationSource"/> class.
        /// </summary>
        public static RxPresentationSourceEvents Events(this global::System.Windows.PresentationSource item) => new RxPresentationSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.UIElement"/> class.
        /// </summary>
        public static RxUIElementEvents Events(this global::System.Windows.UIElement item) => new RxUIElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.UIElement3D"/> class.
        /// </summary>
        public static RxUIElement3DEvents Events(this global::System.Windows.UIElement3D item) => new RxUIElement3DEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.VisualStateGroup"/> class.
        /// </summary>
        public static RxVisualStateGroupEvents Events(this global::System.Windows.VisualStateGroup item) => new RxVisualStateGroupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Window"/> class.
        /// </summary>
        public static RxWindowEvents Events(this global::System.Windows.Window item) => new RxWindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Application"/> class as observables.
    /// </summary>
    public class RxApplicationEvents
    {
        private readonly global::System.Windows.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationEvents(global::System.Windows.Application data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.DispatcherUnhandledException"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs> DispatcherUnhandledException => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherUnhandledExceptionEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DispatcherUnhandledException += x, x => _data.DispatcherUnhandledException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Exit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExitEventArgs> Exit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.ExitEventHandler, global::System.Windows.ExitEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.ExitEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Exit += x, x => _data.Exit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.SessionEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.SessionEndingCancelEventArgs> SessionEnding => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.SessionEndingCancelEventHandler, global::System.Windows.SessionEndingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.SessionEndingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SessionEnding += x, x => _data.SessionEnding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Startup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.StartupEventArgs> Startup => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.StartupEventHandler, global::System.Windows.StartupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.StartupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Startup += x, x => _data.Startup -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.ContentElement"/> class as observables.
    /// </summary>
    public class RxContentElementEvents
    {
        private readonly global::System.Windows.ContentElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.ContentElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContentElementEvents(global::System.Windows.ContentElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Drop += x, x => _data.Drop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.QueryCursorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryCursor += x, x => _data.QueryCursor -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchDown += x, x => _data.TouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnter += x, x => _data.TouchEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchLeave += x, x => _data.TouchLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchUp += x, x => _data.TouchUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.FrameworkContentElement"/> class as observables.
    /// </summary>
    public class RxFrameworkContentElementEvents : global::System.Windows.RxContentElementEvents
    {
        private readonly global::System.Windows.FrameworkContentElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.FrameworkContentElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameworkContentElementEvents(global::System.Windows.FrameworkContentElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Initialized += x, x => _data.Initialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Loaded += x, x => _data.Loaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.SourceUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> SourceUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SourceUpdated += x, x => _data.SourceUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.TargetUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> TargetUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TargetUpdated += x, x => _data.TargetUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ToolTipClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipClosing += x, x => _data.ToolTipClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ToolTipOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipOpening += x, x => _data.ToolTipOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unloaded += x, x => _data.Unloaded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.FrameworkElement"/> class as observables.
    /// </summary>
    public class RxFrameworkElementEvents : global::System.Windows.RxUIElementEvents
    {
        private readonly global::System.Windows.FrameworkElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.FrameworkElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameworkElementEvents(global::System.Windows.FrameworkElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Initialized += x, x => _data.Initialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Loaded += x, x => _data.Loaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.RequestBringIntoView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RequestBringIntoViewEventArgs> RequestBringIntoView => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RequestBringIntoViewEventHandler, global::System.Windows.RequestBringIntoViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RequestBringIntoViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RequestBringIntoView += x, x => _data.RequestBringIntoView -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.SizeChangedEventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.SizeChangedEventHandler, global::System.Windows.SizeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.SizeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.SourceUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> SourceUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SourceUpdated += x, x => _data.SourceUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.TargetUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> TargetUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TargetUpdated += x, x => _data.TargetUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ToolTipClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipClosing += x, x => _data.ToolTipClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ToolTipOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipOpening += x, x => _data.ToolTipOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unloaded += x, x => _data.Unloaded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Freezable"/> class as observables.
    /// </summary>
    public class RxFreezableEvents
    {
        private readonly global::System.Windows.Freezable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Freezable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFreezableEvents(global::System.Windows.Freezable data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Freezable.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.IInputElement"/> class as observables.
    /// </summary>
    public class RxIInputElementEvents
    {
        private readonly global::System.Windows.IInputElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.IInputElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIInputElementEvents(global::System.Windows.IInputElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.PresentationSource"/> class as observables.
    /// </summary>
    public class RxPresentationSourceEvents
    {
        private readonly global::System.Windows.PresentationSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.PresentationSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPresentationSourceEvents(global::System.Windows.PresentationSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.PresentationSource.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContentRendered += x, x => _data.ContentRendered -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.UIElement"/> class as observables.
    /// </summary>
    public class RxUIElementEvents
    {
        private readonly global::System.Windows.UIElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.UIElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUIElementEvents(global::System.Windows.UIElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Drop += x, x => _data.Drop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsHitTestVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsHitTestVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsHitTestVisibleChanged += x, x => _data.IsHitTestVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsVisibleChanged += x, x => _data.IsVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationBoundaryFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>, global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationBoundaryFeedback += x, x => _data.ManipulationBoundaryFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationCompletedEventArgs>, global::System.Windows.Input.ManipulationCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationCompleted += x, x => _data.ManipulationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationDeltaEventArgs>, global::System.Windows.Input.ManipulationDeltaEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationDeltaEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationDelta += x, x => _data.ManipulationDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationInertiaStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationInertiaStartingEventArgs>, global::System.Windows.Input.ManipulationInertiaStartingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationInertiaStartingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationInertiaStarting += x, x => _data.ManipulationInertiaStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationStartedEventArgs>, global::System.Windows.Input.ManipulationStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationStartedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationStarted += x, x => _data.ManipulationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationStartingEventArgs>, global::System.Windows.Input.ManipulationStartingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationStartingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationStarting += x, x => _data.ManipulationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.QueryCursorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryCursor += x, x => _data.QueryCursor -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchDown += x, x => _data.TouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnter += x, x => _data.TouchEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchLeave += x, x => _data.TouchLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchUp += x, x => _data.TouchUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.UIElement3D"/> class as observables.
    /// </summary>
    public class RxUIElement3DEvents
    {
        private readonly global::System.Windows.UIElement3D _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.UIElement3D"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUIElement3DEvents(global::System.Windows.UIElement3D data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Drop += x, x => _data.Drop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsHitTestVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsHitTestVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsHitTestVisibleChanged += x, x => _data.IsHitTestVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsVisibleChanged += x, x => _data.IsVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.QueryCursorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryCursor += x, x => _data.QueryCursor -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchDown += x, x => _data.TouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnter += x, x => _data.TouchEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchLeave += x, x => _data.TouchLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchUp += x, x => _data.TouchUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.VisualStateGroup"/> class as observables.
    /// </summary>
    public class RxVisualStateGroupEvents
    {
        private readonly global::System.Windows.VisualStateGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.VisualStateGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualStateGroupEvents(global::System.Windows.VisualStateGroup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.VisualStateGroup.CurrentStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.VisualStateChangedEventArgs> CurrentStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.VisualStateChangedEventArgs>, global::System.Windows.VisualStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.VisualStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateChanged += x, x => _data.CurrentStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.VisualStateGroup.CurrentStateChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.VisualStateChangedEventArgs> CurrentStateChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.VisualStateChangedEventArgs>, global::System.Windows.VisualStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.VisualStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateChanging += x, x => _data.CurrentStateChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Window"/> class as observables.
    /// </summary>
    public class RxWindowEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWindowEvents(global::System.Windows.Window data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContentRendered += x, x => _data.ContentRendered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DpiChangedEventHandler, global::System.Windows.DpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.SourceInitialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SourceInitialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SourceInitialized += x, x => _data.SourceInitialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace System.Windows.Annotations
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Annotations"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Annotations.Annotation"/> class.
        /// </summary>
        public static RxAnnotationEvents Events(this global::System.Windows.Annotations.Annotation item) => new RxAnnotationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Annotations.Annotation"/> class as observables.
    /// </summary>
    public class RxAnnotationEvents
    {
        private readonly global::System.Windows.Annotations.Annotation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Annotations.Annotation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAnnotationEvents(global::System.Windows.Annotations.Annotation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Annotation.AnchorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> AnchorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AnchorChanged += x, x => _data.AnchorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Annotation.AuthorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs> AuthorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationAuthorChangedEventHandler, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AuthorChanged += x, x => _data.AuthorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Annotation.CargoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> CargoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CargoChanged += x, x => _data.CargoChanged -= x);
    }
}

namespace System.Windows.Annotations.Storage
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Annotations.Storage"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class.
        /// </summary>
        public static RxAnnotationStoreEvents Events(this global::System.Windows.Annotations.Storage.AnnotationStore item) => new RxAnnotationStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class as observables.
    /// </summary>
    public class RxAnnotationStoreEvents
    {
        private readonly global::System.Windows.Annotations.Storage.AnnotationStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAnnotationStoreEvents(global::System.Windows.Annotations.Storage.AnnotationStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.AnchorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> AnchorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AnchorChanged += x, x => _data.AnchorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.AuthorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs> AuthorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationAuthorChangedEventHandler, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AuthorChanged += x, x => _data.AuthorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.CargoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> CargoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CargoChanged += x, x => _data.CargoChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.StoreContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs> StoreContentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.Storage.StoreContentChangedEventHandler, global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StoreContentChanged += x, x => _data.StoreContentChanged -= x);
    }
}

namespace System.Windows.Controls
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Controls"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Calendar"/> class.
        /// </summary>
        public static RxCalendarEvents Events(this global::System.Windows.Controls.Calendar item) => new RxCalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class.
        /// </summary>
        public static RxCalendarDateRangeEvents Events(this global::System.Windows.Controls.CalendarDateRange item) => new RxCalendarDateRangeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ComboBox"/> class.
        /// </summary>
        public static RxComboBoxEvents Events(this global::System.Windows.Controls.ComboBox item) => new RxComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ContextMenu"/> class.
        /// </summary>
        public static RxContextMenuEvents Events(this global::System.Windows.Controls.ContextMenu item) => new RxContextMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Control"/> class.
        /// </summary>
        public static RxControlEvents Events(this global::System.Windows.Controls.Control item) => new RxControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGrid"/> class.
        /// </summary>
        public static RxDataGridEvents Events(this global::System.Windows.Controls.DataGrid item) => new RxDataGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridCell"/> class.
        /// </summary>
        public static RxDataGridCellEvents Events(this global::System.Windows.Controls.DataGridCell item) => new RxDataGridCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class.
        /// </summary>
        public static RxDataGridColumnEvents Events(this global::System.Windows.Controls.DataGridColumn item) => new RxDataGridColumnEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridRow"/> class.
        /// </summary>
        public static RxDataGridRowEvents Events(this global::System.Windows.Controls.DataGridRow item) => new RxDataGridRowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DatePicker"/> class.
        /// </summary>
        public static RxDatePickerEvents Events(this global::System.Windows.Controls.DatePicker item) => new RxDatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Expander"/> class.
        /// </summary>
        public static RxExpanderEvents Events(this global::System.Windows.Controls.Expander item) => new RxExpanderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Frame"/> class.
        /// </summary>
        public static RxFrameEvents Events(this global::System.Windows.Controls.Frame item) => new RxFrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Image"/> class.
        /// </summary>
        public static RxImageEvents Events(this global::System.Windows.Controls.Image item) => new RxImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.InkCanvas"/> class.
        /// </summary>
        public static RxInkCanvasEvents Events(this global::System.Windows.Controls.InkCanvas item) => new RxInkCanvasEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        public static RxItemContainerGeneratorEvents Events(this global::System.Windows.Controls.ItemContainerGenerator item) => new RxItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class.
        /// </summary>
        public static RxListBoxItemEvents Events(this global::System.Windows.Controls.ListBoxItem item) => new RxListBoxItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.MediaElement"/> class.
        /// </summary>
        public static RxMediaElementEvents Events(this global::System.Windows.Controls.MediaElement item) => new RxMediaElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.MenuItem"/> class.
        /// </summary>
        public static RxMenuItemEvents Events(this global::System.Windows.Controls.MenuItem item) => new RxMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.PasswordBox"/> class.
        /// </summary>
        public static RxPasswordBoxEvents Events(this global::System.Windows.Controls.PasswordBox item) => new RxPasswordBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class.
        /// </summary>
        public static RxScrollViewerEvents Events(this global::System.Windows.Controls.ScrollViewer item) => new RxScrollViewerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ToolTip"/> class.
        /// </summary>
        public static RxToolTipEvents Events(this global::System.Windows.Controls.ToolTip item) => new RxToolTipEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.TreeView"/> class.
        /// </summary>
        public static RxTreeViewEvents Events(this global::System.Windows.Controls.TreeView item) => new RxTreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class.
        /// </summary>
        public static RxTreeViewItemEvents Events(this global::System.Windows.Controls.TreeViewItem item) => new RxTreeViewItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.WebBrowser"/> class.
        /// </summary>
        public static RxWebBrowserEvents Events(this global::System.Windows.Controls.WebBrowser item) => new RxWebBrowserEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Calendar"/> class as observables.
    /// </summary>
    public class RxCalendarEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Calendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Calendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarEvents(global::System.Windows.Controls.Calendar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.DisplayDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.CalendarDateChangedEventArgs> DisplayDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.CalendarDateChangedEventArgs>, global::System.Windows.Controls.CalendarDateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.CalendarDateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayDateChanged += x, x => _data.DisplayDateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.DisplayModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.CalendarModeChangedEventArgs> DisplayModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.CalendarModeChangedEventArgs>, global::System.Windows.Controls.CalendarModeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.CalendarModeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayModeChanged += x, x => _data.DisplayModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.SelectedDatesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectedDatesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.SelectionChangedEventArgs>, global::System.Windows.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedDatesChanged += x, x => _data.SelectedDatesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.SelectionModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionModeChanged += x, x => _data.SelectionModeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class as observables.
    /// </summary>
    public class RxCalendarDateRangeEvents
    {
        private readonly global::System.Windows.Controls.CalendarDateRange _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarDateRangeEvents(global::System.Windows.Controls.CalendarDateRange data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.CalendarDateRange.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ComboBox"/> class as observables.
    /// </summary>
    public class RxComboBoxEvents : global::System.Windows.Controls.Primitives.RxSelectorEvents
    {
        private readonly global::System.Windows.Controls.ComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComboBoxEvents(global::System.Windows.Controls.ComboBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ComboBox.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ContextMenu"/> class as observables.
    /// </summary>
    public class RxContextMenuEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ContextMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ContextMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContextMenuEvents(global::System.Windows.Controls.ContextMenu data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ContextMenu.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ContextMenu.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Control"/> class as observables.
    /// </summary>
    public class RxControlEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Control _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Control"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxControlEvents(global::System.Windows.Controls.Control data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Control.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Control.PreviewMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDoubleClick += x, x => _data.PreviewMouseDoubleClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGrid"/> class as observables.
    /// </summary>
    public class RxDataGridEvents : global::System.Windows.Controls.Primitives.RxSelectorEvents
    {
        private readonly global::System.Windows.Controls.DataGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridEvents(global::System.Windows.Controls.DataGrid data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.AddingNewItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.AddingNewItemEventArgs> AddingNewItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.AddingNewItemEventArgs>, global::System.Windows.Controls.AddingNewItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.AddingNewItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AddingNewItem += x, x => _data.AddingNewItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.AutoGeneratedColumns"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoGeneratedColumns => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoGeneratedColumns += x, x => _data.AutoGeneratedColumns -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.AutoGeneratingColumn"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs> AutoGeneratingColumn => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs>, global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoGeneratingColumn += x, x => _data.AutoGeneratingColumn -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.BeginningEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridBeginningEditEventArgs> BeginningEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridBeginningEditEventArgs>, global::System.Windows.Controls.DataGridBeginningEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridBeginningEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeginningEdit += x, x => _data.BeginningEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.CellEditEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellEditEndingEventArgs> CellEditEnding => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridCellEditEndingEventArgs>, global::System.Windows.Controls.DataGridCellEditEndingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridCellEditEndingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellEditEnding += x, x => _data.CellEditEnding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnEventArgs> ColumnDisplayIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnEventArgs>, global::System.Windows.Controls.DataGridColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDisplayIndexChanged += x, x => _data.ColumnDisplayIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnHeaderDragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragCompletedEventArgs> ColumnHeaderDragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragCompletedEventArgs>, global::System.Windows.Controls.Primitives.DragCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderDragCompleted += x, x => _data.ColumnHeaderDragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnHeaderDragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragDeltaEventArgs> ColumnHeaderDragDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragDeltaEventArgs>, global::System.Windows.Controls.Primitives.DragDeltaEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragDeltaEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderDragDelta += x, x => _data.ColumnHeaderDragDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnHeaderDragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragStartedEventArgs> ColumnHeaderDragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragStartedEventArgs>, global::System.Windows.Controls.Primitives.DragStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragStartedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderDragStarted += x, x => _data.ColumnHeaderDragStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnEventArgs> ColumnReordered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnEventArgs>, global::System.Windows.Controls.DataGridColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnReordered += x, x => _data.ColumnReordered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnReordering"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnReorderingEventArgs> ColumnReordering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnReorderingEventArgs>, global::System.Windows.Controls.DataGridColumnReorderingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridColumnReorderingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnReordering += x, x => _data.ColumnReordering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.CopyingRowClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowClipboardEventArgs> CopyingRowClipboardContent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowClipboardEventArgs>, global::System.Windows.Controls.DataGridRowClipboardEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowClipboardEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CopyingRowClipboardContent += x, x => _data.CopyingRowClipboardContent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.CurrentCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentCellChanged += x, x => _data.CurrentCellChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.InitializingNewItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InitializingNewItemEventArgs> InitializingNewItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InitializingNewItemEventHandler, global::System.Windows.Controls.InitializingNewItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InitializingNewItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InitializingNewItem += x, x => _data.InitializingNewItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.LoadingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEventArgs> LoadingRow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEventArgs>, global::System.Windows.Controls.DataGridRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadingRow += x, x => _data.LoadingRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.LoadingRowDetails"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> LoadingRowDetails => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowDetailsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadingRowDetails += x, x => _data.LoadingRowDetails -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.PreparingCellForEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs> PreparingCellForEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs>, global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreparingCellForEdit += x, x => _data.PreparingCellForEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> RowDetailsVisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowDetailsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowDetailsVisibilityChanged += x, x => _data.RowDetailsVisibilityChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.RowEditEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEditEndingEventArgs> RowEditEnding => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEditEndingEventArgs>, global::System.Windows.Controls.DataGridRowEditEndingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowEditEndingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowEditEnding += x, x => _data.RowEditEnding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.SelectedCellsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectedCellsChangedEventArgs> SelectedCellsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.SelectedCellsChangedEventHandler, global::System.Windows.Controls.SelectedCellsChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectedCellsChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedCellsChanged += x, x => _data.SelectedCellsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.Sorting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridSortingEventArgs> Sorting => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.DataGridSortingEventHandler, global::System.Windows.Controls.DataGridSortingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridSortingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Sorting += x, x => _data.Sorting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.UnloadingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEventArgs> UnloadingRow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEventArgs>, global::System.Windows.Controls.DataGridRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnloadingRow += x, x => _data.UnloadingRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.UnloadingRowDetails"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> UnloadingRowDetails => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowDetailsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnloadingRowDetails += x, x => _data.UnloadingRowDetails -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridCell"/> class as observables.
    /// </summary>
    public class RxDataGridCellEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.DataGridCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridCellEvents(global::System.Windows.Controls.DataGridCell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridCell.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridCell.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class as observables.
    /// </summary>
    public class RxDataGridColumnEvents
    {
        private readonly global::System.Windows.Controls.DataGridColumn _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridColumnEvents(global::System.Windows.Controls.DataGridColumn data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridColumn.CopyingCellClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellClipboardEventArgs> CopyingCellClipboardContent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridCellClipboardEventArgs>, global::System.Windows.Controls.DataGridCellClipboardEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridCellClipboardEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CopyingCellClipboardContent += x, x => _data.CopyingCellClipboardContent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridColumn.PastingCellClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellClipboardEventArgs> PastingCellClipboardContent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridCellClipboardEventArgs>, global::System.Windows.Controls.DataGridCellClipboardEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridCellClipboardEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PastingCellClipboardContent += x, x => _data.PastingCellClipboardContent -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridRow"/> class as observables.
    /// </summary>
    public class RxDataGridRowEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.DataGridRow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridRow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridRowEvents(global::System.Windows.Controls.DataGridRow data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridRow.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridRow.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DatePicker"/> class as observables.
    /// </summary>
    public class RxDatePickerEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickerEvents(global::System.Windows.Controls.DatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.CalendarClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> CalendarClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarClosed += x, x => _data.CalendarClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.CalendarOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> CalendarOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarOpened += x, x => _data.CalendarOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.DateValidationError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs> DateValidationError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs>, global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DateValidationError += x, x => _data.DateValidationError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.SelectedDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectedDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.SelectionChangedEventArgs>, global::System.Windows.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedDateChanged += x, x => _data.SelectedDateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Expander"/> class as observables.
    /// </summary>
    public class RxExpanderEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Expander _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Expander"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxExpanderEvents(global::System.Windows.Controls.Expander data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Expander.Collapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Collapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Collapsed += x, x => _data.Collapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Expander.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Expanded += x, x => _data.Expanded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Frame"/> class as observables.
    /// </summary>
    public class RxFrameEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Frame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Frame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameEvents(global::System.Windows.Controls.Frame data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContentRendered += x, x => _data.ContentRendered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Image"/> class as observables.
    /// </summary>
    public class RxImageEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Image _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Image"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImageEvents(global::System.Windows.Controls.Image data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Image.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DpiChangedEventHandler, global::System.Windows.DpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Image.ImageFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExceptionRoutedEventArgs> ImageFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.ExceptionRoutedEventArgs>, global::System.Windows.ExceptionRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.ExceptionRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImageFailed += x, x => _data.ImageFailed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.InkCanvas"/> class as observables.
    /// </summary>
    public class RxInkCanvasEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.InkCanvas _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.InkCanvas"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkCanvasEvents(global::System.Windows.Controls.InkCanvas data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.ActiveEditingModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> ActiveEditingModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ActiveEditingModeChanged += x, x => _data.ActiveEditingModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.DrawingAttributesReplacedEventArgs> DefaultDrawingAttributesReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.DrawingAttributesReplacedEventHandler, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DefaultDrawingAttributesReplaced += x, x => _data.DefaultDrawingAttributesReplaced -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.EditingModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> EditingModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditingModeChanged += x, x => _data.EditingModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.EditingModeInvertedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> EditingModeInvertedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditingModeInvertedChanged += x, x => _data.EditingModeInvertedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.Gesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasGestureEventArgs> Gesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasGestureEventHandler, global::System.Windows.Controls.InkCanvasGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Gesture += x, x => _data.Gesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs> SelectionChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasSelectionChangingEventHandler, global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanging += x, x => _data.SelectionChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionMoved += x, x => _data.SelectionMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs> SelectionMoving => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasSelectionEditingEventHandler, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionMoving += x, x => _data.SelectionMoving -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionResized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionResized += x, x => _data.SelectionResized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionResizing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs> SelectionResizing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasSelectionEditingEventHandler, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionResizing += x, x => _data.SelectionResizing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokeCollected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs> StrokeCollected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasStrokeCollectedEventHandler, global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeCollected += x, x => _data.StrokeCollected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokeErased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> StrokeErased => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeErased += x, x => _data.StrokeErased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokeErasing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs> StrokeErasing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasStrokeErasingEventHandler, global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeErasing += x, x => _data.StrokeErasing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs> StrokesReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasStrokesReplacedEventHandler, global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokesReplaced += x, x => _data.StrokesReplaced -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class as observables.
    /// </summary>
    public class RxItemContainerGeneratorEvents
    {
        private readonly global::System.Windows.Controls.ItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemContainerGeneratorEvents(global::System.Windows.Controls.ItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.ItemsChangedEventArgs> ItemsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.ItemsChangedEventHandler, global::System.Windows.Controls.Primitives.ItemsChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.ItemsChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemsChanged += x, x => _data.ItemsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ItemContainerGenerator.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class as observables.
    /// </summary>
    public class RxListBoxItemEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ListBoxItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListBoxItemEvents(global::System.Windows.Controls.ListBoxItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ListBoxItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ListBoxItem.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.MediaElement"/> class as observables.
    /// </summary>
    public class RxMediaElementEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.MediaElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.MediaElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaElementEvents(global::System.Windows.Controls.MediaElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> BufferingEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> BufferingStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> MediaEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaEnded += x, x => _data.MediaEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExceptionRoutedEventArgs> MediaFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.ExceptionRoutedEventArgs>, global::System.Windows.ExceptionRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.ExceptionRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaFailed += x, x => _data.MediaFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> MediaOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaOpened += x, x => _data.MediaOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.ScriptCommand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.MediaScriptCommandRoutedEventArgs> ScriptCommand => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.MediaScriptCommandRoutedEventArgs>, global::System.Windows.MediaScriptCommandRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.MediaScriptCommandRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScriptCommand += x, x => _data.ScriptCommand -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.MenuItem"/> class as observables.
    /// </summary>
    public class RxMenuItemEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuItemEvents(global::System.Windows.Controls.MenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Checked += x, x => _data.Checked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.SubmenuClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SubmenuClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SubmenuClosed += x, x => _data.SubmenuClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.SubmenuOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SubmenuOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SubmenuOpened += x, x => _data.SubmenuOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unchecked += x, x => _data.Unchecked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.PasswordBox"/> class as observables.
    /// </summary>
    public class RxPasswordBoxEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.PasswordBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.PasswordBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPasswordBoxEvents(global::System.Windows.Controls.PasswordBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.PasswordBox.PasswordChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> PasswordChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PasswordChanged += x, x => _data.PasswordChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class as observables.
    /// </summary>
    public class RxScrollViewerEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ScrollViewer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollViewerEvents(global::System.Windows.Controls.ScrollViewer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ScrollViewer.ScrollChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ScrollChangedEventArgs> ScrollChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ScrollChangedEventHandler, global::System.Windows.Controls.ScrollChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ScrollChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScrollChanged += x, x => _data.ScrollChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ToolTip"/> class as observables.
    /// </summary>
    public class RxToolTipEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ToolTip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ToolTip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolTipEvents(global::System.Windows.Controls.ToolTip data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ToolTip.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ToolTip.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.TreeView"/> class as observables.
    /// </summary>
    public class RxTreeViewEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewEvents(global::System.Windows.Controls.TreeView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeView.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedPropertyChangedEventArgs<object>> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedPropertyChangedEventHandler<object>, global::System.Windows.RoutedPropertyChangedEventArgs<object>>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedPropertyChangedEventArgs<object> e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class as observables.
    /// </summary>
    public class RxTreeViewItemEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.TreeViewItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewItemEvents(global::System.Windows.Controls.TreeViewItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Collapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Collapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Collapsed += x, x => _data.Collapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Expanded += x, x => _data.Expanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.WebBrowser"/> class as observables.
    /// </summary>
    public class RxWebBrowserEvents : global::System.Windows.Interop.RxHwndHostEvents
    {
        private readonly global::System.Windows.Controls.WebBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.WebBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebBrowserEvents(global::System.Windows.Controls.WebBrowser data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.WebBrowser.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.WebBrowser.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.WebBrowser.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
    }
}

namespace System.Windows.Controls.Primitives
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Controls.Primitives"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        public static RxButtonBaseEvents Events(this global::System.Windows.Controls.Primitives.ButtonBase item) => new RxButtonBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class.
        /// </summary>
        public static RxDocumentPageViewEvents Events(this global::System.Windows.Controls.Primitives.DocumentPageView item) => new RxDocumentPageViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class.
        /// </summary>
        public static RxDocumentViewerBaseEvents Events(this global::System.Windows.Controls.Primitives.DocumentViewerBase item) => new RxDocumentViewerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class.
        /// </summary>
        public static RxPopupEvents Events(this global::System.Windows.Controls.Primitives.Popup item) => new RxPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        public static RxRangeBaseEvents Events(this global::System.Windows.Controls.Primitives.RangeBase item) => new RxRangeBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        public static RxScrollBarEvents Events(this global::System.Windows.Controls.Primitives.ScrollBar item) => new RxScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class.
        /// </summary>
        public static RxSelectorEvents Events(this global::System.Windows.Controls.Primitives.Selector item) => new RxSelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class.
        /// </summary>
        public static RxTextBoxBaseEvents Events(this global::System.Windows.Controls.Primitives.TextBoxBase item) => new RxTextBoxBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class.
        /// </summary>
        public static RxThumbEvents Events(this global::System.Windows.Controls.Primitives.Thumb item) => new RxThumbEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        public static RxToggleButtonEvents Events(this global::System.Windows.Controls.Primitives.ToggleButton item) => new RxToggleButtonEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class as observables.
    /// </summary>
    public class RxButtonBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ButtonBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonBaseEvents(global::System.Windows.Controls.Primitives.ButtonBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class as observables.
    /// </summary>
    public class RxDocumentPageViewEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Primitives.DocumentPageView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentPageViewEvents(global::System.Windows.Controls.Primitives.DocumentPageView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView.PageConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageConnected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageConnected += x, x => _data.PageConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView.PageDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageDisconnected += x, x => _data.PageDisconnected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class as observables.
    /// </summary>
    public class RxDocumentViewerBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.DocumentViewerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentViewerBaseEvents(global::System.Windows.Controls.Primitives.DocumentViewerBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase.PageViewsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageViewsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageViewsChanged += x, x => _data.PageViewsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class as observables.
    /// </summary>
    public class RxPopupEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPopupEvents(global::System.Windows.Controls.Primitives.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Popup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Popup.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class as observables.
    /// </summary>
    public class RxRangeBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.RangeBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRangeBaseEvents(global::System.Windows.Controls.Primitives.RangeBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.RangeBase.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedPropertyChangedEventArgs<double>> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedPropertyChangedEventHandler<double>, global::System.Windows.RoutedPropertyChangedEventArgs<double>>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedPropertyChangedEventArgs<double> e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class as observables.
    /// </summary>
    public class RxScrollBarEvents : global::System.Windows.Controls.Primitives.RxRangeBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollBarEvents(global::System.Windows.Controls.Primitives.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.ScrollEventHandler, global::System.Windows.Controls.Primitives.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class as observables.
    /// </summary>
    public class RxSelectorEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Selector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSelectorEvents(global::System.Windows.Controls.Primitives.Selector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Selector.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.SelectionChangedEventHandler, global::System.Windows.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class as observables.
    /// </summary>
    public class RxTextBoxBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.TextBoxBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBoxBaseEvents(global::System.Windows.Controls.Primitives.TextBoxBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.TextChangedEventHandler, global::System.Windows.Controls.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class as observables.
    /// </summary>
    public class RxThumbEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Thumb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxThumbEvents(global::System.Windows.Controls.Primitives.Thumb data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Thumb.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragCompletedEventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.DragCompletedEventHandler, global::System.Windows.Controls.Primitives.DragCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragCompleted += x, x => _data.DragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Thumb.DragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragDeltaEventArgs> DragDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.DragDeltaEventHandler, global::System.Windows.Controls.Primitives.DragDeltaEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragDeltaEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDelta += x, x => _data.DragDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Thumb.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragStartedEventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.DragStartedEventHandler, global::System.Windows.Controls.Primitives.DragStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragStartedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragStarted += x, x => _data.DragStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class as observables.
    /// </summary>
    public class RxToggleButtonEvents : global::System.Windows.Controls.Primitives.RxButtonBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ToggleButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToggleButtonEvents(global::System.Windows.Controls.Primitives.ToggleButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Checked += x, x => _data.Checked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton.Indeterminate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Indeterminate => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Indeterminate += x, x => _data.Indeterminate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unchecked += x, x => _data.Unchecked -= x);
    }
}

namespace System.Windows.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Data"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.CollectionView"/> class.
        /// </summary>
        public static RxCollectionViewEvents Events(this global::System.Windows.Data.CollectionView item) => new RxCollectionViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class.
        /// </summary>
        public static RxCollectionViewSourceEvents Events(this global::System.Windows.Data.CollectionViewSource item) => new RxCollectionViewSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class.
        /// </summary>
        public static RxDataSourceProviderEvents Events(this global::System.Windows.Data.DataSourceProvider item) => new RxDataSourceProviderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.CollectionView"/> class as observables.
    /// </summary>
    public class RxCollectionViewEvents
    {
        private readonly global::System.Windows.Data.CollectionView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.CollectionView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCollectionViewEvents(global::System.Windows.Data.CollectionView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.CollectionView.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.CollectionView.CurrentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CurrentChangingEventArgs> CurrentChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CurrentChangingEventHandler, global::System.ComponentModel.CurrentChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CurrentChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanging += x, x => _data.CurrentChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class as observables.
    /// </summary>
    public class RxCollectionViewSourceEvents
    {
        private readonly global::System.Windows.Data.CollectionViewSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCollectionViewSourceEvents(global::System.Windows.Data.CollectionViewSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.CollectionViewSource.Filter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.FilterEventArgs> Filter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Data.FilterEventHandler, global::System.Windows.Data.FilterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.FilterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Filter += x, x => _data.Filter -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class as observables.
    /// </summary>
    public class RxDataSourceProviderEvents
    {
        private readonly global::System.Windows.Data.DataSourceProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataSourceProviderEvents(global::System.Windows.Data.DataSourceProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.DataSourceProvider.DataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataChanged += x, x => _data.DataChanged -= x);
    }
}

namespace System.Windows.Documents
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Documents"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentPage"/> class.
        /// </summary>
        public static RxDocumentPageEvents Events(this global::System.Windows.Documents.DocumentPage item) => new RxDocumentPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class.
        /// </summary>
        public static RxDocumentPaginatorEvents Events(this global::System.Windows.Documents.DocumentPaginator item) => new RxDocumentPaginatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class.
        /// </summary>
        public static RxDocumentReferenceCollectionEvents Events(this global::System.Windows.Documents.DocumentReferenceCollection item) => new RxDocumentReferenceCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class.
        /// </summary>
        public static RxDynamicDocumentPaginatorEvents Events(this global::System.Windows.Documents.DynamicDocumentPaginator item) => new RxDynamicDocumentPaginatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.Hyperlink"/> class.
        /// </summary>
        public static RxHyperlinkEvents Events(this global::System.Windows.Documents.Hyperlink item) => new RxHyperlinkEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.PageContent"/> class.
        /// </summary>
        public static RxPageContentEvents Events(this global::System.Windows.Documents.PageContent item) => new RxPageContentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.TextRange"/> class.
        /// </summary>
        public static RxTextRangeEvents Events(this global::System.Windows.Documents.TextRange item) => new RxTextRangeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentPage"/> class as observables.
    /// </summary>
    public class RxDocumentPageEvents
    {
        private readonly global::System.Windows.Documents.DocumentPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentPageEvents(global::System.Windows.Documents.DocumentPage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPage.PageDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageDestroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageDestroyed += x, x => _data.PageDestroyed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class as observables.
    /// </summary>
    public class RxDocumentPaginatorEvents
    {
        private readonly global::System.Windows.Documents.DocumentPaginator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentPaginatorEvents(global::System.Windows.Documents.DocumentPaginator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> ComputePageCountCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.AsyncCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ComputePageCountCompleted += x, x => _data.ComputePageCountCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPaginator.GetPageCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageCompletedEventArgs> GetPageCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.GetPageCompletedEventHandler, global::System.Windows.Documents.GetPageCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.GetPageCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GetPageCompleted += x, x => _data.GetPageCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPaginator.PagesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.PagesChangedEventArgs> PagesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.PagesChangedEventHandler, global::System.Windows.Documents.PagesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.PagesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PagesChanged += x, x => _data.PagesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class as observables.
    /// </summary>
    public class RxDocumentReferenceCollectionEvents
    {
        private readonly global::System.Windows.Documents.DocumentReferenceCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentReferenceCollectionEvents(global::System.Windows.Documents.DocumentReferenceCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class as observables.
    /// </summary>
    public class RxDynamicDocumentPaginatorEvents : global::System.Windows.Documents.RxDocumentPaginatorEvents
    {
        private readonly global::System.Windows.Documents.DynamicDocumentPaginator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDynamicDocumentPaginatorEvents(global::System.Windows.Documents.DynamicDocumentPaginator data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageNumberCompletedEventArgs> GetPageNumberCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.GetPageNumberCompletedEventHandler, global::System.Windows.Documents.GetPageNumberCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.GetPageNumberCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GetPageNumberCompleted += x, x => _data.GetPageNumberCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaginationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaginationCompleted += x, x => _data.PaginationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.PaginationProgressEventArgs> PaginationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.PaginationProgressEventHandler, global::System.Windows.Documents.PaginationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.PaginationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaginationProgress += x, x => _data.PaginationProgress -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.Hyperlink"/> class as observables.
    /// </summary>
    public class RxHyperlinkEvents : global::System.Windows.RxFrameworkContentElementEvents
    {
        private readonly global::System.Windows.Documents.Hyperlink _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.Hyperlink"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHyperlinkEvents(global::System.Windows.Documents.Hyperlink data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Hyperlink.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Hyperlink.RequestNavigate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.RequestNavigateEventArgs> RequestNavigate => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.RequestNavigateEventHandler, global::System.Windows.Navigation.RequestNavigateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.RequestNavigateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RequestNavigate += x, x => _data.RequestNavigate -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.PageContent"/> class as observables.
    /// </summary>
    public class RxPageContentEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Documents.PageContent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.PageContent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPageContentEvents(global::System.Windows.Documents.PageContent data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.PageContent.GetPageRootCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageRootCompletedEventArgs> GetPageRootCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.GetPageRootCompletedEventHandler, global::System.Windows.Documents.GetPageRootCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.GetPageRootCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GetPageRootCompleted += x, x => _data.GetPageRootCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.TextRange"/> class as observables.
    /// </summary>
    public class RxTextRangeEvents
    {
        private readonly global::System.Windows.Documents.TextRange _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.TextRange"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextRangeEvents(global::System.Windows.Documents.TextRange data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.TextRange.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }
}

namespace System.Windows.Documents.Serialization
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Documents.Serialization"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class.
        /// </summary>
        public static RxSerializerWriterEvents Events(this global::System.Windows.Documents.Serialization.SerializerWriter item) => new RxSerializerWriterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class as observables.
    /// </summary>
    public class RxSerializerWriterEvents
    {
        private readonly global::System.Windows.Documents.Serialization.SerializerWriter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSerializerWriterEvents(global::System.Windows.Documents.Serialization.SerializerWriter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingCancelledEventArgs> WritingCancelled => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingCancelledEventHandler, global::System.Windows.Documents.Serialization.WritingCancelledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingCancelledEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingCancelled += x, x => _data.WritingCancelled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingCompletedEventArgs> WritingCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingCompletedEventHandler, global::System.Windows.Documents.Serialization.WritingCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingCompleted += x, x => _data.WritingCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs> WritingPrintTicketRequired => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler, global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingPrintTicketRequired += x, x => _data.WritingPrintTicketRequired -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs> WritingProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingProgressChangedEventHandler, global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingProgressChanged += x, x => _data.WritingProgressChanged -= x);
    }
}

namespace System.Windows.Ink
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Ink"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class.
        /// </summary>
        public static RxDrawingAttributesEvents Events(this global::System.Windows.Ink.DrawingAttributes item) => new RxDrawingAttributesEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class.
        /// </summary>
        public static RxIncrementalLassoHitTesterEvents Events(this global::System.Windows.Ink.IncrementalLassoHitTester item) => new RxIncrementalLassoHitTesterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class.
        /// </summary>
        public static RxIncrementalStrokeHitTesterEvents Events(this global::System.Windows.Ink.IncrementalStrokeHitTester item) => new RxIncrementalStrokeHitTesterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.Stroke"/> class.
        /// </summary>
        public static RxStrokeEvents Events(this global::System.Windows.Ink.Stroke item) => new RxStrokeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class.
        /// </summary>
        public static RxStrokeCollectionEvents Events(this global::System.Windows.Ink.StrokeCollection item) => new RxStrokeCollectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class as observables.
    /// </summary>
    public class RxDrawingAttributesEvents
    {
        private readonly global::System.Windows.Ink.DrawingAttributes _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDrawingAttributesEvents(global::System.Windows.Ink.DrawingAttributes data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.DrawingAttributes.AttributeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> AttributeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AttributeChanged += x, x => _data.AttributeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.DrawingAttributes.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class as observables.
    /// </summary>
    public class RxIncrementalLassoHitTesterEvents
    {
        private readonly global::System.Windows.Ink.IncrementalLassoHitTester _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIncrementalLassoHitTesterEvents(global::System.Windows.Ink.IncrementalLassoHitTester data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.LassoSelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.LassoSelectionChangedEventHandler, global::System.Windows.Ink.LassoSelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.LassoSelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class as observables.
    /// </summary>
    public class RxIncrementalStrokeHitTesterEvents
    {
        private readonly global::System.Windows.Ink.IncrementalStrokeHitTester _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIncrementalStrokeHitTesterEvents(global::System.Windows.Ink.IncrementalStrokeHitTester data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StrokeHitEventArgs> StrokeHit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.StrokeHitEventHandler, global::System.Windows.Ink.StrokeHitEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.StrokeHitEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeHit += x, x => _data.StrokeHit -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.Stroke"/> class as observables.
    /// </summary>
    public class RxStrokeEvents
    {
        private readonly global::System.Windows.Ink.Stroke _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.Stroke"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStrokeEvents(global::System.Windows.Ink.Stroke data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.DrawingAttributesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> DrawingAttributesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawingAttributesChanged += x, x => _data.DrawingAttributesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.DrawingAttributesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.DrawingAttributesReplacedEventArgs> DrawingAttributesReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.DrawingAttributesReplacedEventHandler, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawingAttributesReplaced += x, x => _data.DrawingAttributesReplaced -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Invalidated += x, x => _data.Invalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.StylusPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StylusPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusPointsChanged += x, x => _data.StylusPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.StylusPointsReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StylusPointsReplacedEventArgs> StylusPointsReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.StylusPointsReplacedEventHandler, global::System.Windows.Ink.StylusPointsReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.StylusPointsReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusPointsReplaced += x, x => _data.StylusPointsReplaced -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class as observables.
    /// </summary>
    public class RxStrokeCollectionEvents
    {
        private readonly global::System.Windows.Ink.StrokeCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStrokeCollectionEvents(global::System.Windows.Ink.StrokeCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.StrokeCollection.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.StrokeCollection.StrokesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StrokeCollectionChangedEventArgs> StrokesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.StrokeCollectionChangedEventHandler, global::System.Windows.Ink.StrokeCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.StrokeCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokesChanged += x, x => _data.StrokesChanged -= x);
    }
}

namespace System.Windows.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.CommandBinding"/> class.
        /// </summary>
        public static RxCommandBindingEvents Events(this global::System.Windows.Input.CommandBinding item) => new RxCommandBindingEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.IManipulator"/> class.
        /// </summary>
        public static RxIManipulatorEvents Events(this global::System.Windows.Input.IManipulator item) => new RxIManipulatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.InputLanguageManager"/> class.
        /// </summary>
        public static RxInputLanguageManagerEvents Events(this global::System.Windows.Input.InputLanguageManager item) => new RxInputLanguageManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.InputManager"/> class.
        /// </summary>
        public static RxInputManagerEvents Events(this global::System.Windows.Input.InputManager item) => new RxInputManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.InputMethod"/> class.
        /// </summary>
        public static RxInputMethodEvents Events(this global::System.Windows.Input.InputMethod item) => new RxInputMethodEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.RoutedCommand"/> class.
        /// </summary>
        public static RxRoutedCommandEvents Events(this global::System.Windows.Input.RoutedCommand item) => new RxRoutedCommandEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.StylusPointCollection"/> class.
        /// </summary>
        public static RxStylusPointCollectionEvents Events(this global::System.Windows.Input.StylusPointCollection item) => new RxStylusPointCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.TouchDevice"/> class.
        /// </summary>
        public static RxTouchDeviceEvents Events(this global::System.Windows.Input.TouchDevice item) => new RxTouchDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.CommandBinding"/> class as observables.
    /// </summary>
    public class RxCommandBindingEvents
    {
        private readonly global::System.Windows.Input.CommandBinding _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.CommandBinding"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommandBindingEvents(global::System.Windows.Input.CommandBinding data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.CanExecute"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.CanExecuteRoutedEventArgs> CanExecute => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.CanExecuteRoutedEventHandler, global::System.Windows.Input.CanExecuteRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.CanExecuteRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CanExecute += x, x => _data.CanExecute -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.Executed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ExecutedRoutedEventArgs> Executed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.ExecutedRoutedEventHandler, global::System.Windows.Input.ExecutedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ExecutedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Executed += x, x => _data.Executed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.PreviewCanExecute"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.CanExecuteRoutedEventArgs> PreviewCanExecute => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.CanExecuteRoutedEventHandler, global::System.Windows.Input.CanExecuteRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.CanExecuteRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewCanExecute += x, x => _data.PreviewCanExecute -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.PreviewExecuted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ExecutedRoutedEventArgs> PreviewExecuted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.ExecutedRoutedEventHandler, global::System.Windows.Input.ExecutedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ExecutedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewExecuted += x, x => _data.PreviewExecuted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.IManipulator"/> class as observables.
    /// </summary>
    public class RxIManipulatorEvents
    {
        private readonly global::System.Windows.Input.IManipulator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.IManipulator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIManipulatorEvents(global::System.Windows.Input.IManipulator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.IManipulator.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Updated += x, x => _data.Updated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.InputLanguageManager"/> class as observables.
    /// </summary>
    public class RxInputLanguageManagerEvents
    {
        private readonly global::System.Windows.Input.InputLanguageManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.InputLanguageManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputLanguageManagerEvents(global::System.Windows.Input.InputLanguageManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputLanguageManager.InputLanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.InputLanguageEventArgs> InputLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.InputLanguageEventHandler, global::System.Windows.Input.InputLanguageEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.InputLanguageEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InputLanguageChanged += x, x => _data.InputLanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputLanguageManager.InputLanguageChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.InputLanguageEventArgs> InputLanguageChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.InputLanguageEventHandler, global::System.Windows.Input.InputLanguageEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.InputLanguageEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InputLanguageChanging += x, x => _data.InputLanguageChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.InputManager"/> class as observables.
    /// </summary>
    public class RxInputManagerEvents
    {
        private readonly global::System.Windows.Input.InputManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.InputManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputManagerEvents(global::System.Windows.Input.InputManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.EnterMenuMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnterMenuMode => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnterMenuMode += x, x => _data.EnterMenuMode -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.HitTestInvalidatedAsync"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HitTestInvalidatedAsync => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HitTestInvalidatedAsync += x, x => _data.HitTestInvalidatedAsync -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.LeaveMenuMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LeaveMenuMode => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LeaveMenuMode += x, x => _data.LeaveMenuMode -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PostNotifyInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.NotifyInputEventArgs> PostNotifyInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.NotifyInputEventHandler, global::System.Windows.Input.NotifyInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.NotifyInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PostNotifyInput += x, x => _data.PostNotifyInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PostProcessInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ProcessInputEventArgs> PostProcessInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.ProcessInputEventHandler, global::System.Windows.Input.ProcessInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ProcessInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PostProcessInput += x, x => _data.PostProcessInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PreNotifyInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.NotifyInputEventArgs> PreNotifyInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.NotifyInputEventHandler, global::System.Windows.Input.NotifyInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.NotifyInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreNotifyInput += x, x => _data.PreNotifyInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PreProcessInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.PreProcessInputEventArgs> PreProcessInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.PreProcessInputEventHandler, global::System.Windows.Input.PreProcessInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.PreProcessInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreProcessInput += x, x => _data.PreProcessInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.InputMethod"/> class as observables.
    /// </summary>
    public class RxInputMethodEvents
    {
        private readonly global::System.Windows.Input.InputMethod _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.InputMethod"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputMethodEvents(global::System.Windows.Input.InputMethod data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputMethod.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.InputMethodStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.InputMethodStateChangedEventHandler, global::System.Windows.Input.InputMethodStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.InputMethodStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.RoutedCommand"/> class as observables.
    /// </summary>
    public class RxRoutedCommandEvents
    {
        private readonly global::System.Windows.Input.RoutedCommand _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.RoutedCommand"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRoutedCommandEvents(global::System.Windows.Input.RoutedCommand data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.RoutedCommand.CanExecuteChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanExecuteChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CanExecuteChanged += x, x => _data.CanExecuteChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.StylusPointCollection"/> class as observables.
    /// </summary>
    public class RxStylusPointCollectionEvents
    {
        private readonly global::System.Windows.Input.StylusPointCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.StylusPointCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStylusPointCollectionEvents(global::System.Windows.Input.StylusPointCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.StylusPointCollection.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.TouchDevice"/> class as observables.
    /// </summary>
    public class RxTouchDeviceEvents
    {
        private readonly global::System.Windows.Input.TouchDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.TouchDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTouchDeviceEvents(global::System.Windows.Input.TouchDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.TouchDevice.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.TouchDevice.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.TouchDevice.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Updated += x, x => _data.Updated -= x);
    }
}

namespace System.Windows.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Interop"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.D3DImage"/> class.
        /// </summary>
        public static RxD3DImageEvents Events(this global::System.Windows.Interop.D3DImage item) => new RxD3DImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.HwndHost"/> class.
        /// </summary>
        public static RxHwndHostEvents Events(this global::System.Windows.Interop.HwndHost item) => new RxHwndHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.HwndSource"/> class.
        /// </summary>
        public static RxHwndSourceEvents Events(this global::System.Windows.Interop.HwndSource item) => new RxHwndSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.D3DImage"/> class as observables.
    /// </summary>
    public class RxD3DImageEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Interop.D3DImage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.D3DImage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxD3DImageEvents(global::System.Windows.Interop.D3DImage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsFrontBufferAvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsFrontBufferAvailableChanged += x, x => _data.IsFrontBufferAvailableChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.HwndHost"/> class as observables.
    /// </summary>
    public class RxHwndHostEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Interop.HwndHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.HwndHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHwndHostEvents(global::System.Windows.Interop.HwndHost data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndHost.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DpiChangedEventHandler, global::System.Windows.DpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.HwndSource"/> class as observables.
    /// </summary>
    public class RxHwndSourceEvents : global::System.Windows.RxPresentationSourceEvents
    {
        private readonly global::System.Windows.Interop.HwndSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.HwndSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHwndSourceEvents(global::System.Windows.Interop.HwndSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.AutoResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.AutoResizedEventArgs> AutoResized => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.AutoResizedEventHandler, global::System.Windows.AutoResizedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.AutoResizedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoResized += x, x => _data.AutoResized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disposed += x, x => _data.Disposed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.HwndDpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.HwndDpiChangedEventHandler, global::System.Windows.HwndDpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.HwndDpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.SizeToContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeToContentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeToContentChanged += x, x => _data.SizeToContentChanged -= x);
    }
}

namespace System.Windows.Markup
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Markup"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Markup.XamlReader"/> class.
        /// </summary>
        public static RxXamlReaderEvents Events(this global::System.Windows.Markup.XamlReader item) => new RxXamlReaderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Markup.XamlReader"/> class as observables.
    /// </summary>
    public class RxXamlReaderEvents
    {
        private readonly global::System.Windows.Markup.XamlReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Markup.XamlReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxXamlReaderEvents(global::System.Windows.Markup.XamlReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Markup.XamlReader.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.AsyncCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
    }
}

namespace System.Windows.Markup.Localizer
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Markup.Localizer"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class.
        /// </summary>
        public static RxBamlLocalizerEvents Events(this global::System.Windows.Markup.Localizer.BamlLocalizer item) => new RxBamlLocalizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class as observables.
    /// </summary>
    public class RxBamlLocalizerEvents
    {
        private readonly global::System.Windows.Markup.Localizer.BamlLocalizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBamlLocalizerEvents(global::System.Windows.Markup.Localizer.BamlLocalizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer.ErrorNotify"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs> ErrorNotify => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventHandler, global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ErrorNotify += x, x => _data.ErrorNotify -= x);
    }
}

namespace System.Windows.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.MediaPlayer"/> class.
        /// </summary>
        public static RxMediaPlayerEvents Events(this global::System.Windows.Media.MediaPlayer item) => new RxMediaPlayerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.MediaPlayer"/> class as observables.
    /// </summary>
    public class RxMediaPlayerEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Media.MediaPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.MediaPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlayerEvents(global::System.Windows.Media.MediaPlayer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BufferingEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BufferingStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MediaEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaEnded += x, x => _data.MediaEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> MediaFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaFailed += x, x => _data.MediaFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MediaOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaOpened += x, x => _data.MediaOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.ScriptCommand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.MediaScriptCommandEventArgs> ScriptCommand => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.MediaScriptCommandEventArgs>, global::System.Windows.Media.MediaScriptCommandEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.MediaScriptCommandEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScriptCommand += x, x => _data.ScriptCommand -= x);
    }
}

namespace System.Windows.Media.Animation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media.Animation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Animation.Clock"/> class.
        /// </summary>
        public static RxClockEvents Events(this global::System.Windows.Media.Animation.Clock item) => new RxClockEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class.
        /// </summary>
        public static RxTimelineEvents Events(this global::System.Windows.Media.Animation.Timeline item) => new RxTimelineEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Animation.Clock"/> class as observables.
    /// </summary>
    public class RxClockEvents
    {
        private readonly global::System.Windows.Media.Animation.Clock _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Animation.Clock"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClockEvents(global::System.Windows.Media.Animation.Clock data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentGlobalSpeedInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentGlobalSpeedInvalidated += x, x => _data.CurrentGlobalSpeedInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.CurrentStateInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentStateInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateInvalidated += x, x => _data.CurrentStateInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.CurrentTimeInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentTimeInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentTimeInvalidated += x, x => _data.CurrentTimeInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.RemoveRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemoveRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RemoveRequested += x, x => _data.RemoveRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class as observables.
    /// </summary>
    public class RxTimelineEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Media.Animation.Timeline _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimelineEvents(global::System.Windows.Media.Animation.Timeline data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentGlobalSpeedInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentGlobalSpeedInvalidated += x, x => _data.CurrentGlobalSpeedInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.CurrentStateInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentStateInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateInvalidated += x, x => _data.CurrentStateInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.CurrentTimeInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentTimeInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentTimeInvalidated += x, x => _data.CurrentTimeInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.RemoveRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemoveRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RemoveRequested += x, x => _data.RemoveRequested -= x);
    }
}

namespace System.Windows.Media.Imaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media.Imaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class.
        /// </summary>
        public static RxBitmapDecoderEvents Events(this global::System.Windows.Media.Imaging.BitmapDecoder item) => new RxBitmapDecoderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class.
        /// </summary>
        public static RxBitmapSourceEvents Events(this global::System.Windows.Media.Imaging.BitmapSource item) => new RxBitmapSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class as observables.
    /// </summary>
    public class RxBitmapDecoderEvents
    {
        private readonly global::System.Windows.Media.Imaging.BitmapDecoder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBitmapDecoderEvents(global::System.Windows.Media.Imaging.BitmapDecoder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder.DownloadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DownloadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadCompleted += x, x => _data.DownloadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder.DownloadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DownloadFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadFailed += x, x => _data.DownloadFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder.DownloadProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.Imaging.DownloadProgressEventArgs>, global::System.Windows.Media.Imaging.DownloadProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.Imaging.DownloadProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadProgress += x, x => _data.DownloadProgress -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class as observables.
    /// </summary>
    public class RxBitmapSourceEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Media.Imaging.BitmapSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBitmapSourceEvents(global::System.Windows.Media.Imaging.BitmapSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DecodeFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DecodeFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DecodeFailed += x, x => _data.DecodeFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DownloadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DownloadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadCompleted += x, x => _data.DownloadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DownloadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DownloadFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadFailed += x, x => _data.DownloadFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DownloadProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.Imaging.DownloadProgressEventArgs>, global::System.Windows.Media.Imaging.DownloadProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.Imaging.DownloadProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadProgress += x, x => _data.DownloadProgress -= x);
    }
}

namespace System.Windows.Navigation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Navigation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Navigation.NavigationService"/> class.
        /// </summary>
        public static RxNavigationServiceEvents Events(this global::System.Windows.Navigation.NavigationService item) => new RxNavigationServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class.
        /// </summary>
        public static RxNavigationWindowEvents Events(this global::System.Windows.Navigation.NavigationWindow item) => new RxNavigationWindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Navigation.NavigationService"/> class as observables.
    /// </summary>
    public class RxNavigationServiceEvents
    {
        private readonly global::System.Windows.Navigation.NavigationService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Navigation.NavigationService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationServiceEvents(global::System.Windows.Navigation.NavigationService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class as observables.
    /// </summary>
    public class RxNavigationWindowEvents : global::System.Windows.RxWindowEvents
    {
        private readonly global::System.Windows.Navigation.NavigationWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationWindowEvents(global::System.Windows.Navigation.NavigationWindow data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
    }
}

namespace System.Windows.Shell
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Shell"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Shell.JumpList"/> class.
        /// </summary>
        public static RxJumpListEvents Events(this global::System.Windows.Shell.JumpList item) => new RxJumpListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class.
        /// </summary>
        public static RxThumbButtonInfoEvents Events(this global::System.Windows.Shell.ThumbButtonInfo item) => new RxThumbButtonInfoEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Shell.JumpList"/> class as observables.
    /// </summary>
    public class RxJumpListEvents
    {
        private readonly global::System.Windows.Shell.JumpList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Shell.JumpList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxJumpListEvents(global::System.Windows.Shell.JumpList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Shell.JumpList.JumpItemsRejected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Shell.JumpItemsRejectedEventArgs> JumpItemsRejected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Shell.JumpItemsRejectedEventArgs>, global::System.Windows.Shell.JumpItemsRejectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Shell.JumpItemsRejectedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.JumpItemsRejected += x, x => _data.JumpItemsRejected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Shell.JumpList.JumpItemsRemovedByUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Shell.JumpItemsRemovedEventArgs> JumpItemsRemovedByUser => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Shell.JumpItemsRemovedEventArgs>, global::System.Windows.Shell.JumpItemsRemovedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Shell.JumpItemsRemovedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.JumpItemsRemovedByUser += x, x => _data.JumpItemsRemovedByUser -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class as observables.
    /// </summary>
    public class RxThumbButtonInfoEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Shell.ThumbButtonInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxThumbButtonInfoEvents(global::System.Windows.Shell.ThumbButtonInfo data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Shell.ThumbButtonInfo.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }
}

namespace System.Windows.Threading
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Threading"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.Dispatcher"/> class.
        /// </summary>
        public static RxDispatcherEvents Events(this global::System.Windows.Threading.Dispatcher item) => new RxDispatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class.
        /// </summary>
        public static RxDispatcherHooksEvents Events(this global::System.Windows.Threading.DispatcherHooks item) => new RxDispatcherHooksEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class.
        /// </summary>
        public static RxDispatcherOperationEvents Events(this global::System.Windows.Threading.DispatcherOperation item) => new RxDispatcherOperationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class.
        /// </summary>
        public static RxDispatcherTimerEvents Events(this global::System.Windows.Threading.DispatcherTimer item) => new RxDispatcherTimerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.Dispatcher"/> class as observables.
    /// </summary>
    public class RxDispatcherEvents
    {
        private readonly global::System.Windows.Threading.Dispatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.Dispatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherEvents(global::System.Windows.Threading.Dispatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.ShutdownFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShutdownFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ShutdownFinished += x, x => _data.ShutdownFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.ShutdownStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShutdownStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ShutdownStarted += x, x => _data.ShutdownStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.UnhandledException"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs> UnhandledException => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherUnhandledExceptionEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnhandledException += x, x => _data.UnhandledException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.UnhandledExceptionFilter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> UnhandledExceptionFilter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnhandledExceptionFilter += x, x => _data.UnhandledExceptionFilter -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class as observables.
    /// </summary>
    public class RxDispatcherHooksEvents
    {
        private readonly global::System.Windows.Threading.DispatcherHooks _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherHooksEvents(global::System.Windows.Threading.DispatcherHooks data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.DispatcherInactive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DispatcherInactive => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DispatcherInactive += x, x => _data.DispatcherInactive -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationAborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationAborted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationAborted += x, x => _data.OperationAborted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationCompleted += x, x => _data.OperationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationPosted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationPosted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationPosted += x, x => _data.OperationPosted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationPriorityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationPriorityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationPriorityChanged += x, x => _data.OperationPriorityChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationStarted += x, x => _data.OperationStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class as observables.
    /// </summary>
    public class RxDispatcherOperationEvents
    {
        private readonly global::System.Windows.Threading.DispatcherOperation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherOperationEvents(global::System.Windows.Threading.DispatcherOperation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherOperation.Aborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Aborted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Aborted += x, x => _data.Aborted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherOperation.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Completed += x, x => _data.Completed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class as observables.
    /// </summary>
    public class RxDispatcherTimerEvents
    {
        private readonly global::System.Windows.Threading.DispatcherTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherTimerEvents(global::System.Windows.Threading.DispatcherTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }
}

namespace System.Windows
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.SystemParameters.StaticPropertyChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> SystemParametersStaticPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.SystemParameters.StaticPropertyChanged += x, x => global::System.Windows.SystemParameters.StaticPropertyChanged -= x);
    }
}

namespace System.Windows.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Data"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.BindingOperations.CollectionRegistering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Data.CollectionRegisteringEventArgs> BindingOperationsCollectionRegistering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.CollectionRegisteringEventArgs>, global::System.Windows.Data.CollectionRegisteringEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.CollectionRegisteringEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Data.BindingOperations.CollectionRegistering += x, x => global::System.Windows.Data.BindingOperations.CollectionRegistering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.BindingOperations.CollectionViewRegistering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Data.CollectionViewRegisteringEventArgs> BindingOperationsCollectionViewRegistering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.CollectionViewRegisteringEventArgs>, global::System.Windows.Data.CollectionViewRegisteringEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.CollectionViewRegisteringEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Data.BindingOperations.CollectionViewRegistering += x, x => global::System.Windows.Data.BindingOperations.CollectionViewRegistering -= x);
    }
}

namespace System.Windows.Diagnostics
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Diagnostics"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.GenericResourceDictionaryLoaded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs> ResourceDictionaryDiagnosticsGenericResourceDictionaryLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.GenericResourceDictionaryLoaded += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.GenericResourceDictionaryLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.StaticResourceResolved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs> ResourceDictionaryDiagnosticsStaticResourceResolved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs>, global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.StaticResourceResolved += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.StaticResourceResolved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryLoaded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs> ResourceDictionaryDiagnosticsThemedResourceDictionaryLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryLoaded += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryUnloaded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs> ResourceDictionaryDiagnosticsThemedResourceDictionaryUnloaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs>, global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryUnloaded += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryUnloaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.VisualTreeChangeEventArgs> VisualDiagnosticsVisualTreeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.VisualTreeChangeEventArgs>, global::System.Windows.Diagnostics.VisualTreeChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.VisualTreeChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged += x, x => global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged -= x);
    }
}

namespace System.Windows.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Input"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandManager.RequerySuggested"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> CommandManagerRequerySuggested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Input.CommandManager.RequerySuggested += x, x => global::System.Windows.Input.CommandManager.RequerySuggested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.Touch.FrameReported"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Input.TouchFrameEventArgs> TouchFrameReported => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TouchFrameEventHandler, global::System.Windows.Input.TouchFrameEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchFrameEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Input.Touch.FrameReported += x, x => global::System.Windows.Input.Touch.FrameReported -= x);
    }
}

namespace System.Windows.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Interop"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherEnterThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal += x, x => global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherLeaveThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal += x, x => global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.ComponentDispatcher.ThreadIdle"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherThreadIdle => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Interop.ComponentDispatcher.ThreadIdle += x, x => global::System.Windows.Interop.ComponentDispatcher.ThreadIdle -= x);
    }
}

namespace System.Windows.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Media"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.CompositionTarget.Rendering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> CompositionTargetRendering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Media.CompositionTarget.Rendering += x, x => global::System.Windows.Media.CompositionTarget.Rendering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.RenderCapability.TierChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> RenderCapabilityTierChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Media.RenderCapability.TierChanged += x, x => global::System.Windows.Media.RenderCapability.TierChanged -= x);
    }
}

namespace System.Windows.Media.Effects
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Media.Effects"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> PixelShaderInvalidPixelShaderEncountered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered += x, x => global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered -= x);
    }
}