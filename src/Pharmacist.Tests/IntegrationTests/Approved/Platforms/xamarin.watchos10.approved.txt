
using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace AVFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AVFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class.
        /// </summary>
        public static RxAVSpeechSynthesizerEvents Events(this global::AVFoundation.AVSpeechSynthesizer item) => new RxAVSpeechSynthesizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class as observables.
    /// </summary>
    public class RxAVSpeechSynthesizerEvents
    {
        private readonly global::AVFoundation.AVSpeechSynthesizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAVSpeechSynthesizerEvents(global::AVFoundation.AVSpeechSynthesizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizer.DidCancelSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidCancelSpeechUtterance => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidCancelSpeechUtterance += x, x => _data.DidCancelSpeechUtterance -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizer.DidContinueSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidContinueSpeechUtterance => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidContinueSpeechUtterance += x, x => _data.DidContinueSpeechUtterance -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizer.DidFinishSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidFinishSpeechUtterance => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidFinishSpeechUtterance += x, x => _data.DidFinishSpeechUtterance -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizer.DidPauseSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidPauseSpeechUtterance => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidPauseSpeechUtterance += x, x => _data.DidPauseSpeechUtterance -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizer.DidStartSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidStartSpeechUtterance => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidStartSpeechUtterance += x, x => _data.DidStartSpeechUtterance -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizer.WillSpeakRangeOfSpeechString"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs> WillSpeakRangeOfSpeechString => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs>, global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WillSpeakRangeOfSpeechString += x, x => _data.WillSpeakRangeOfSpeechString -= x);
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreBluetooth"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        public static RxCBCentralManagerEvents Events(this global::CoreBluetooth.CBCentralManager item) => new RxCBCentralManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        public static RxCBPeripheralEvents Events(this global::CoreBluetooth.CBPeripheral item) => new RxCBPeripheralEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        public static RxCBPeripheralManagerEvents Events(this global::CoreBluetooth.CBPeripheralManager item) => new RxCBPeripheralManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class as observables.
    /// </summary>
    public class RxCBCentralManagerEvents
    {
        private readonly global::CoreBluetooth.CBCentralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCBCentralManagerEvents(global::CoreBluetooth.CBCentralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.ConnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralEventArgs> ConnectedPeripheral => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralEventArgs>, global::CoreBluetooth.CBPeripheralEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ConnectedPeripheral += x, x => _data.ConnectedPeripheral -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.ConnectionEventDidOccur"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralConnectionEventEventArgs> ConnectionEventDidOccur => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralConnectionEventEventArgs>, global::CoreBluetooth.CBPeripheralConnectionEventEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralConnectionEventEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ConnectionEventDidOccur += x, x => _data.ConnectionEventDidOccur -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.DidUpdateAncsAuthorization"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBAncsAuthorizationUpdateEventArgs> DidUpdateAncsAuthorization => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBAncsAuthorizationUpdateEventArgs>, global::CoreBluetooth.CBAncsAuthorizationUpdateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBAncsAuthorizationUpdateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateAncsAuthorization += x, x => _data.DidUpdateAncsAuthorization -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.DisconnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> DisconnectedPeripheral => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisconnectedPeripheral += x, x => _data.DisconnectedPeripheral -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.DiscoveredPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs> DiscoveredPeripheral => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>, global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBDiscoveredPeripheralEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DiscoveredPeripheral += x, x => _data.DiscoveredPeripheral -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.FailedToConnectPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> FailedToConnectPeripheral => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FailedToConnectPeripheral += x, x => _data.FailedToConnectPeripheral -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.UpdatedState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedState => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UpdatedState += x, x => _data.UpdatedState -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBWillRestoreEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class as observables.
    /// </summary>
    public class RxCBPeripheralEvents
    {
        private readonly global::CoreBluetooth.CBPeripheral _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCBPeripheralEvents(global::CoreBluetooth.CBPeripheral data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.DiscoveredCharacteristic"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredCharacteristic => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBServiceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DiscoveredCharacteristic += x, x => _data.DiscoveredCharacteristic -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.DiscoveredDescriptor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> DiscoveredDescriptor => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBCharacteristicEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DiscoveredDescriptor += x, x => _data.DiscoveredDescriptor -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.DiscoveredIncludedService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredIncludedService => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBServiceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DiscoveredIncludedService += x, x => _data.DiscoveredIncludedService -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.DiscoveredService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DiscoveredService => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DiscoveredService += x, x => _data.DiscoveredService -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.IsReadyToSendWriteWithoutResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsReadyToSendWriteWithoutResponse => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsReadyToSendWriteWithoutResponse += x, x => _data.IsReadyToSendWriteWithoutResponse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.ModifiedServices"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralServicesEventArgs> ModifiedServices => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralServicesEventArgs>, global::CoreBluetooth.CBPeripheralServicesEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralServicesEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ModifiedServices += x, x => _data.ModifiedServices -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.RssiRead"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBRssiEventArgs> RssiRead => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBRssiEventArgs>, global::CoreBluetooth.CBRssiEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBRssiEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RssiRead += x, x => _data.RssiRead -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.RssiUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> RssiUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RssiUpdated += x, x => _data.RssiUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.UpdatedCharacterteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedCharacterteristicValue => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBCharacteristicEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UpdatedCharacterteristicValue += x, x => _data.UpdatedCharacterteristicValue -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.UpdatedName"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedName => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UpdatedName += x, x => _data.UpdatedName -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.UpdatedNotificationState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedNotificationState => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBCharacteristicEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UpdatedNotificationState += x, x => _data.UpdatedNotificationState -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.UpdatedValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> UpdatedValue => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBDescriptorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UpdatedValue += x, x => _data.UpdatedValue -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.WroteCharacteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> WroteCharacteristicValue => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBCharacteristicEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WroteCharacteristicValue += x, x => _data.WroteCharacteristicValue -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheral.WroteDescriptorValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> WroteDescriptorValue => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBDescriptorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WroteDescriptorValue += x, x => _data.WroteDescriptorValue -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class as observables.
    /// </summary>
    public class RxCBPeripheralManagerEvents
    {
        private readonly global::CoreBluetooth.CBPeripheralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCBPeripheralManagerEvents(global::CoreBluetooth.CBPeripheralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.AdvertisingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> AdvertisingStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AdvertisingStarted += x, x => _data.AdvertisingStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.CharacteristicSubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicSubscribed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CharacteristicSubscribed += x, x => _data.CharacteristicSubscribed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.CharacteristicUnsubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicUnsubscribed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CharacteristicUnsubscribed += x, x => _data.CharacteristicUnsubscribed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.DidPublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidPublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidPublishL2CapChannel += x, x => _data.DidPublishL2CapChannel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.DidUnpublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidUnpublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUnpublishL2CapChannel += x, x => _data.DidUnpublishL2CapChannel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.ReadRequestReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestEventArgs> ReadRequestReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBATTRequestEventArgs>, global::CoreBluetooth.CBATTRequestEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBATTRequestEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadRequestReceived += x, x => _data.ReadRequestReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.ReadyToUpdateSubscribers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadyToUpdateSubscribers => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadyToUpdateSubscribers += x, x => _data.ReadyToUpdateSubscribers -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.ServiceAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs> ServiceAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>, global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBPeripheralManagerServiceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ServiceAdded += x, x => _data.ServiceAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.StateUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StateUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StateUpdated += x, x => _data.StateUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBWillRestoreEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManager.WriteRequestsReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestsEventArgs> WriteRequestsReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreBluetooth.CBATTRequestsEventArgs>, global::CoreBluetooth.CBATTRequestsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreBluetooth.CBATTRequestsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WriteRequestsReceived += x, x => _data.WriteRequestsReceived -= x);
    }
}

namespace CoreFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        public static RxCFSocketEvents Events(this global::CoreFoundation.CFSocket item) => new RxCFSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        public static RxCFStreamEvents Events(this global::CoreFoundation.CFStream item) => new RxCFStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class as observables.
    /// </summary>
    public class RxCFSocketEvents
    {
        private readonly global::CoreFoundation.CFSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCFSocketEvents(global::CoreFoundation.CFSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFSocket.AcceptEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs> AcceptEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>, global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AcceptEvent += x, x => _data.AcceptEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFSocket.ConnectEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs> ConnectEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>, global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFSocket.CFSocketConnectEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ConnectEvent += x, x => _data.ConnectEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFSocket.DataEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketDataEventArgs> DataEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketDataEventArgs>, global::CoreFoundation.CFSocket.CFSocketDataEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFSocket.CFSocketDataEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataEvent += x, x => _data.DataEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFSocket.ReadEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketReadEventArgs> ReadEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketReadEventArgs>, global::CoreFoundation.CFSocket.CFSocketReadEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFSocket.CFSocketReadEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadEvent += x, x => _data.ReadEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFSocket.WriteEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs> WriteEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>, global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFSocket.CFSocketWriteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WriteEvent += x, x => _data.WriteEvent -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class as observables.
    /// </summary>
    public class RxCFStreamEvents
    {
        private readonly global::CoreFoundation.CFStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCFStreamEvents(global::CoreFoundation.CFStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFStream.CanAcceptBytesEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> CanAcceptBytesEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFStream.StreamEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CanAcceptBytesEvent += x, x => _data.CanAcceptBytesEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFStream.ClosedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ClosedEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFStream.StreamEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ClosedEvent += x, x => _data.ClosedEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFStream.ErrorEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ErrorEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFStream.StreamEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ErrorEvent += x, x => _data.ErrorEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFStream.HasBytesAvailableEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> HasBytesAvailableEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFStream.StreamEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HasBytesAvailableEvent += x, x => _data.HasBytesAvailableEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreFoundation.CFStream.OpenCompletedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> OpenCompletedEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreFoundation.CFStream.StreamEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OpenCompletedEvent += x, x => _data.OpenCompletedEvent -= x);
    }
}

namespace CoreLocation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreLocation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        public static RxCLLocationManagerEvents Events(this global::CoreLocation.CLLocationManager item) => new RxCLLocationManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class as observables.
    /// </summary>
    public class RxCLLocationManagerEvents
    {
        private readonly global::CoreLocation.CLLocationManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCLLocationManagerEvents(global::CoreLocation.CLLocationManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManager.AuthorizationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLAuthorizationChangedEventArgs> AuthorizationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreLocation.CLAuthorizationChangedEventArgs>, global::CoreLocation.CLAuthorizationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreLocation.CLAuthorizationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AuthorizationChanged += x, x => _data.AuthorizationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManager.DidChangeAuthorization"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeAuthorization => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidChangeAuthorization += x, x => _data.DidChangeAuthorization -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManager.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Failed += x, x => _data.Failed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManager.LocationsUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationsUpdatedEventArgs> LocationsUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreLocation.CLLocationsUpdatedEventArgs>, global::CoreLocation.CLLocationsUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreLocation.CLLocationsUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationsUpdated += x, x => _data.LocationsUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManager.UpdatedHeading"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLHeadingUpdatedEventArgs> UpdatedHeading => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::CoreLocation.CLHeadingUpdatedEventArgs>, global::CoreLocation.CLHeadingUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::CoreLocation.CLHeadingUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UpdatedHeading += x, x => _data.UpdatedHeading -= x);
    }
}

namespace Foundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Foundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        public static RxNSCacheEvents Events(this global::Foundation.NSCache item) => new RxNSCacheEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        public static RxNSKeyedArchiverEvents Events(this global::Foundation.NSKeyedArchiver item) => new RxNSKeyedArchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        public static RxNSKeyedUnarchiverEvents Events(this global::Foundation.NSKeyedUnarchiver item) => new RxNSKeyedUnarchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        public static RxNSStreamEvents Events(this global::Foundation.NSStream item) => new RxNSStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSCache"/> class as observables.
    /// </summary>
    public class RxNSCacheEvents
    {
        private readonly global::Foundation.NSCache _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNSCacheEvents(global::Foundation.NSCache data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSCache.WillEvictObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> WillEvictObject => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSObjectEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WillEvictObject += x, x => _data.WillEvictObject -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class as observables.
    /// </summary>
    public class RxNSKeyedArchiverEvents
    {
        private readonly global::Foundation.NSKeyedArchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNSKeyedArchiverEvents(global::Foundation.NSKeyedArchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiver.EncodedObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> EncodedObject => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSObjectEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EncodedObject += x, x => _data.EncodedObject -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Finished += x, x => _data.Finished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Finishing += x, x => _data.Finishing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSArchiveReplaceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class as observables.
    /// </summary>
    public class RxNSKeyedUnarchiverEvents
    {
        private readonly global::Foundation.NSKeyedUnarchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNSKeyedUnarchiverEvents(global::Foundation.NSKeyedUnarchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedUnarchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Finished += x, x => _data.Finished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedUnarchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Finishing += x, x => _data.Finishing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedUnarchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSArchiveReplaceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSStream"/> class as observables.
    /// </summary>
    public class RxNSStreamEvents
    {
        private readonly global::Foundation.NSStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNSStreamEvents(global::Foundation.NSStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSStream.OnEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSStreamEventArgs> OnEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Foundation.NSStreamEventArgs>, global::Foundation.NSStreamEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Foundation.NSStreamEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OnEvent += x, x => _data.OnEvent -= x);
    }
}

namespace HomeKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "HomeKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMAccessory"/> class.
        /// </summary>
        public static RxHMAccessoryEvents Events(this global::HomeKit.HMAccessory item) => new RxHMAccessoryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMHome"/> class.
        /// </summary>
        public static RxHMHomeEvents Events(this global::HomeKit.HMHome item) => new RxHMHomeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMHomeManager"/> class.
        /// </summary>
        public static RxHMHomeManagerEvents Events(this global::HomeKit.HMHomeManager item) => new RxHMHomeManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMAccessory"/> class as observables.
    /// </summary>
    public class RxHMAccessoryEvents
    {
        private readonly global::HomeKit.HMAccessory _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMAccessory"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHMAccessoryEvents(global::HomeKit.HMAccessory data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidAddProfile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryProfileEventArgs> DidAddProfile => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMAccessoryProfileEventArgs>, global::HomeKit.HMAccessoryProfileEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMAccessoryProfileEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddProfile += x, x => _data.DidAddProfile -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidRemoveProfile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryProfileEventArgs> DidRemoveProfile => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMAccessoryProfileEventArgs>, global::HomeKit.HMAccessoryProfileEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMAccessoryProfileEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveProfile += x, x => _data.DidRemoveProfile -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidUpdateAssociatedServiceType"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryUpdateEventArgs> DidUpdateAssociatedServiceType => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMAccessoryUpdateEventArgs>, global::HomeKit.HMAccessoryUpdateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMAccessoryUpdateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateAssociatedServiceType += x, x => _data.DidUpdateAssociatedServiceType -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidUpdateFirmwareVersion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryFirmwareVersionEventArgs> DidUpdateFirmwareVersion => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMAccessoryFirmwareVersionEventArgs>, global::HomeKit.HMAccessoryFirmwareVersionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMAccessoryFirmwareVersionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateFirmwareVersion += x, x => _data.DidUpdateFirmwareVersion -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidUpdateName"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateName => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateName += x, x => _data.DidUpdateName -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidUpdateNameForService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryUpdateEventArgs> DidUpdateNameForService => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMAccessoryUpdateEventArgs>, global::HomeKit.HMAccessoryUpdateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMAccessoryUpdateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateNameForService += x, x => _data.DidUpdateNameForService -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidUpdateReachability"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateReachability => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateReachability += x, x => _data.DidUpdateReachability -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidUpdateServices"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateServices => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateServices += x, x => _data.DidUpdateServices -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessory.DidUpdateValueForCharacteristic"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs> DidUpdateValueForCharacteristic => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs>, global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateValueForCharacteristic += x, x => _data.DidUpdateValueForCharacteristic -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMHome"/> class as observables.
    /// </summary>
    public class RxHMHomeEvents
    {
        private readonly global::HomeKit.HMHome _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMHome"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHMHomeEvents(global::HomeKit.HMHome data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidAddAccessory => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeAccessoryEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddAccessory += x, x => _data.DidAddAccessory -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidAddActionSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeActionSetEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddActionSet += x, x => _data.DidAddActionSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidAddRoom => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeRoomEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddRoom += x, x => _data.DidAddRoom -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddRoomToZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomZoneEventArgs> DidAddRoomToZone => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeRoomZoneEventArgs>, global::HomeKit.HMHomeRoomZoneEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeRoomZoneEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddRoomToZone += x, x => _data.DidAddRoomToZone -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceServiceGroupEventArgs> DidAddService => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeServiceServiceGroupEventArgs>, global::HomeKit.HMHomeServiceServiceGroupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeServiceServiceGroupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddService += x, x => _data.DidAddService -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidAddServiceGroup => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeServiceGroupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddServiceGroup += x, x => _data.DidAddServiceGroup -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidAddTrigger => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeTriggerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddTrigger += x, x => _data.DidAddTrigger -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeUserEventArgs> DidAddUser => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeUserEventArgs>, global::HomeKit.HMHomeUserEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeUserEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddUser += x, x => _data.DidAddUser -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidAddZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidAddZone => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeZoneEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddZone += x, x => _data.DidAddZone -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidEncounterError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeErrorAccessoryEventArgs> DidEncounterError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeErrorAccessoryEventArgs>, global::HomeKit.HMHomeErrorAccessoryEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeErrorAccessoryEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidEncounterError += x, x => _data.DidEncounterError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidRemoveAccessory => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeAccessoryEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveAccessory += x, x => _data.DidRemoveAccessory -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidRemoveActionSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeActionSetEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveActionSet += x, x => _data.DidRemoveActionSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidRemoveRoom => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeRoomEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveRoom += x, x => _data.DidRemoveRoom -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveRoomFromZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomZoneEventArgs> DidRemoveRoomFromZone => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeRoomZoneEventArgs>, global::HomeKit.HMHomeRoomZoneEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeRoomZoneEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveRoomFromZone += x, x => _data.DidRemoveRoomFromZone -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceServiceGroupEventArgs> DidRemoveService => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeServiceServiceGroupEventArgs>, global::HomeKit.HMHomeServiceServiceGroupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeServiceServiceGroupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveService += x, x => _data.DidRemoveService -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidRemoveServiceGroup => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeServiceGroupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveServiceGroup += x, x => _data.DidRemoveServiceGroup -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidRemoveTrigger => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeTriggerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveTrigger += x, x => _data.DidRemoveTrigger -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeUserEventArgs> DidRemoveUser => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeUserEventArgs>, global::HomeKit.HMHomeUserEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeUserEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveUser += x, x => _data.DidRemoveUser -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidRemoveZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidRemoveZone => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeZoneEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveZone += x, x => _data.DidRemoveZone -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUnblockAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidUnblockAccessory => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeAccessoryEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUnblockAccessory += x, x => _data.DidUnblockAccessory -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateAccessControlForCurrentUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateAccessControlForCurrentUser => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateAccessControlForCurrentUser += x, x => _data.DidUpdateAccessControlForCurrentUser -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateActionsForActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidUpdateActionsForActionSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeActionSetEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateActionsForActionSet += x, x => _data.DidUpdateActionsForActionSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateHomeHubState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeHubStateEventArgs> DidUpdateHomeHubState => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeHubStateEventArgs>, global::HomeKit.HMHomeHubStateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeHubStateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateHomeHubState += x, x => _data.DidUpdateHomeHubState -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateNameForActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidUpdateNameForActionSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeActionSetEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateNameForActionSet += x, x => _data.DidUpdateNameForActionSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateNameForHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateNameForHome => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateNameForHome += x, x => _data.DidUpdateNameForHome -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateNameForRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidUpdateNameForRoom => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeRoomEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateNameForRoom += x, x => _data.DidUpdateNameForRoom -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateNameForServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidUpdateNameForServiceGroup => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeServiceGroupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateNameForServiceGroup += x, x => _data.DidUpdateNameForServiceGroup -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateNameForTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidUpdateNameForTrigger => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeTriggerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateNameForTrigger += x, x => _data.DidUpdateNameForTrigger -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateNameForZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidUpdateNameForZone => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeZoneEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateNameForZone += x, x => _data.DidUpdateNameForZone -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomAccessoryEventArgs> DidUpdateRoom => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeRoomAccessoryEventArgs>, global::HomeKit.HMHomeRoomAccessoryEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeRoomAccessoryEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateRoom += x, x => _data.DidUpdateRoom -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateSupportedFeatures"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateSupportedFeatures => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateSupportedFeatures += x, x => _data.DidUpdateSupportedFeatures -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHome.DidUpdateTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidUpdateTrigger => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeTriggerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateTrigger += x, x => _data.DidUpdateTrigger -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMHomeManager"/> class as observables.
    /// </summary>
    public class RxHMHomeManagerEvents
    {
        private readonly global::HomeKit.HMHomeManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMHomeManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHMHomeManagerEvents(global::HomeKit.HMHomeManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManager.DidAddHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManagerEventArgs> DidAddHome => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeManagerEventArgs>, global::HomeKit.HMHomeManagerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeManagerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidAddHome += x, x => _data.DidAddHome -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManager.DidRemoveHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManagerEventArgs> DidRemoveHome => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeManagerEventArgs>, global::HomeKit.HMHomeManagerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeManagerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidRemoveHome += x, x => _data.DidRemoveHome -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManager.DidUpdateAuthorizationStatus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManagerAuthorizationStatusEventArgs> DidUpdateAuthorizationStatus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::HomeKit.HMHomeManagerAuthorizationStatusEventArgs>, global::HomeKit.HMHomeManagerAuthorizationStatusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::HomeKit.HMHomeManagerAuthorizationStatusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateAuthorizationStatus += x, x => _data.DidUpdateAuthorizationStatus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManager.DidUpdateHomes"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateHomes => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateHomes += x, x => _data.DidUpdateHomes -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManager.DidUpdatePrimaryHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdatePrimaryHome => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdatePrimaryHome += x, x => _data.DidUpdatePrimaryHome -= x);
    }
}

namespace SceneKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SceneKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        public static RxSCNPhysicsWorldEvents Events(this global::SceneKit.SCNPhysicsWorld item) => new RxSCNPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class as observables.
    /// </summary>
    public class RxSCNPhysicsWorldEvents
    {
        private readonly global::SceneKit.SCNPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSCNPhysicsWorldEvents(global::SceneKit.SCNPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::SceneKit.SCNPhysicsContactEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::SceneKit.SCNPhysicsContactEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidEndContact += x, x => _data.DidEndContact -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNPhysicsWorld.DidUpdateContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidUpdateContact => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::SceneKit.SCNPhysicsContactEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidUpdateContact += x, x => _data.DidUpdateContact -= x);
    }
}

namespace SpriteKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SpriteKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        public static RxSKPhysicsWorldEvents Events(this global::SpriteKit.SKPhysicsWorld item) => new RxSKPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class as observables.
    /// </summary>
    public class RxSKPhysicsWorldEvents
    {
        private readonly global::SpriteKit.SKPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSKPhysicsWorldEvents(global::SpriteKit.SKPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DidEndContact += x, x => _data.DidEndContact -= x);
    }
}

namespace StoreKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "StoreKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        public static RxSKProductsRequestEvents Events(this global::StoreKit.SKProductsRequest item) => new RxSKProductsRequestEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        public static RxSKRequestEvents Events(this global::StoreKit.SKRequest item) => new RxSKRequestEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class as observables.
    /// </summary>
    public class RxSKProductsRequestEvents : global::StoreKit.RxSKRequestEvents
    {
        private readonly global::StoreKit.SKProductsRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSKProductsRequestEvents(global::StoreKit.SKProductsRequest data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::StoreKit.SKProductsRequest.ReceivedResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKProductsRequestResponseEventArgs> ReceivedResponse => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::StoreKit.SKProductsRequestResponseEventArgs>, global::StoreKit.SKProductsRequestResponseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::StoreKit.SKProductsRequestResponseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReceivedResponse += x, x => _data.ReceivedResponse -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKRequest"/> class as observables.
    /// </summary>
    public class RxSKRequestEvents
    {
        private readonly global::StoreKit.SKRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSKRequestEvents(global::StoreKit.SKRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::StoreKit.SKRequest.RequestFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequestErrorEventArgs> RequestFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::StoreKit.SKRequestErrorEventArgs>, global::StoreKit.SKRequestErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::StoreKit.SKRequestErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RequestFailed += x, x => _data.RequestFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::StoreKit.SKRequest.RequestFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RequestFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RequestFinished += x, x => _data.RequestFinished -= x);
    }
}

namespace ObjCRuntime
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "ObjCRuntime"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ObjCRuntime.Runtime.MarshalManagedException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalManagedExceptionEventArgs> RuntimeMarshalManagedException => global::System.Reactive.Linq.Observable.FromEvent<global::ObjCRuntime.MarshalManagedExceptionHandler, global::ObjCRuntime.MarshalManagedExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ObjCRuntime.MarshalManagedExceptionEventArgs args) => eventHandler(args);
            return Handler;
        }, x => global::ObjCRuntime.Runtime.MarshalManagedException += x, x => global::ObjCRuntime.Runtime.MarshalManagedException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ObjCRuntime.Runtime.MarshalObjectiveCException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs> RuntimeMarshalObjectiveCException => global::System.Reactive.Linq.Observable.FromEvent<global::ObjCRuntime.MarshalObjectiveCExceptionHandler, global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs args) => eventHandler(args);
            return Handler;
        }, x => global::ObjCRuntime.Runtime.MarshalObjectiveCException += x, x => global::ObjCRuntime.Runtime.MarshalObjectiveCException -= x);
    }
}

namespace AuthenticationServices
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AuthenticationServices.ASAuthorizationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class ASAuthorizationControllerDelegateRx : global::AuthenticationServices.ASAuthorizationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AuthenticationServices.ASAuthorizationController controller, global::AuthenticationServices.ASAuthorization authorization)> _didComplete = new Pharmacist.Common.SingleAwaitSubject<(global::AuthenticationServices.ASAuthorizationController controller, global::AuthenticationServices.ASAuthorization authorization)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AuthenticationServices.ASAuthorizationControllerDelegate.DidComplete(global::AuthenticationServices.ASAuthorizationController, global::AuthenticationServices.ASAuthorization)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AuthenticationServices.ASAuthorizationController controller, global::AuthenticationServices.ASAuthorization authorization)> DidCompleteObs => _didComplete;
        /// <inheritdoc/>
        public override void DidComplete(global::AuthenticationServices.ASAuthorizationController controller, global::AuthenticationServices.ASAuthorization authorization) => _didComplete.OnNext((controller, authorization));
    }
}

namespace AVFoundation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioPlayerDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioPlayerDelegateRx : global::AVFoundation.AVAudioPlayerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioPlayer> _beginInterruption = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioPlayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> _decoderError = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> _endInterruption = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)> _finishedPlaying = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioPlayerDelegate.BeginInterruption(global::AVFoundation.AVAudioPlayer)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVAudioPlayer> BeginInterruptionObs => _beginInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioPlayerDelegate.DecoderError(global::AVFoundation.AVAudioPlayer, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> DecoderErrorObs => _decoderError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioPlayerDelegate.EndInterruption(global::AVFoundation.AVAudioPlayer, global::AVFoundation.AVAudioSessionInterruptionFlags)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> EndInterruptionObs => _endInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioPlayerDelegate.FinishedPlaying(global::AVFoundation.AVAudioPlayer, bool)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, bool flag)> FinishedPlayingObs => _finishedPlaying;
        /// <inheritdoc/>
        public override void BeginInterruption(global::AVFoundation.AVAudioPlayer player) => _beginInterruption.OnNext(player);
        /// <inheritdoc/>
        public override void DecoderError(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error) => _decoderError.OnNext((player, error));
        /// <inheritdoc/>
        public override void EndInterruption(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags) => _endInterruption.OnNext((player, flags));
        /// <inheritdoc/>
        public override void FinishedPlaying(global::AVFoundation.AVAudioPlayer player, bool flag) => _finishedPlaying.OnNext((player, flag));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioRecorderDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioRecorderDelegateRx : global::AVFoundation.AVAudioRecorderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioRecorder> _beginInterruption = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioRecorder>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)> _encoderError = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> _endInterruption = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, bool flag)> _finishedRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, bool flag)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioRecorderDelegate.BeginInterruption(global::AVFoundation.AVAudioRecorder)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVAudioRecorder> BeginInterruptionObs => _beginInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioRecorderDelegate.EncoderError(global::AVFoundation.AVAudioRecorder, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)> EncoderErrorObs => _encoderError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioRecorderDelegate.EndInterruption(global::AVFoundation.AVAudioRecorder, global::AVFoundation.AVAudioSessionInterruptionFlags)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> EndInterruptionObs => _endInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVAudioRecorderDelegate.FinishedRecording(global::AVFoundation.AVAudioRecorder, bool)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, bool flag)> FinishedRecordingObs => _finishedRecording;
        /// <inheritdoc/>
        public override void BeginInterruption(global::AVFoundation.AVAudioRecorder recorder) => _beginInterruption.OnNext(recorder);
        /// <inheritdoc/>
        public override void EncoderError(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error) => _encoderError.OnNext((recorder, error));
        /// <inheritdoc/>
        public override void EndInterruption(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags) => _endInterruption.OnNext((recorder, flags));
        /// <inheritdoc/>
        public override void FinishedRecording(global::AVFoundation.AVAudioRecorder recorder, bool flag) => _finishedRecording.OnNext((recorder, flag));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVContentKeySessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVContentKeySessionDelegateRx : global::AVFoundation.AVContentKeySessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didGenerateExpiredSessionReport = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> _didProvidePersistableContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideRenewingContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didSucceed = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier)> _didUpdate = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidChange(global::AVFoundation.AVContentKeySession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidChangeObs => _didChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidFail(global::AVFoundation.AVContentKeySession, global::AVFoundation.AVContentKeyRequest, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidGenerateExpiredSessionReport(global::AVFoundation.AVContentKeySession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidGenerateExpiredSessionReportObs => _didGenerateExpiredSessionReport;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidProvideContentKeyRequest(global::AVFoundation.AVContentKeySession, global::AVFoundation.AVContentKeyRequest)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideContentKeyRequestObs => _didProvideContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidProvidePersistableContentKeyRequest(global::AVFoundation.AVContentKeySession, global::AVFoundation.AVPersistableContentKeyRequest)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> DidProvidePersistableContentKeyRequestObs => _didProvidePersistableContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidProvideRenewingContentKeyRequest(global::AVFoundation.AVContentKeySession, global::AVFoundation.AVContentKeyRequest)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideRenewingContentKeyRequestObs => _didProvideRenewingContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidSucceed(global::AVFoundation.AVContentKeySession, global::AVFoundation.AVContentKeyRequest)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidSucceedObs => _didSucceed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVContentKeySessionDelegate.DidUpdate(global::AVFoundation.AVContentKeySession, global::Foundation.NSData, global::Foundation.NSObject)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier)> DidUpdateObs => _didUpdate;
        /// <inheritdoc/>
        public override void DidChange(global::AVFoundation.AVContentKeySession session) => _didChange.OnNext(session);
        /// <inheritdoc/>
        public override void DidFail(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err) => _didFail.OnNext((session, keyRequest, err));
        /// <inheritdoc/>
        public override void DidGenerateExpiredSessionReport(global::AVFoundation.AVContentKeySession session) => _didGenerateExpiredSessionReport.OnNext(session);
        /// <inheritdoc/>
        public override void DidProvideContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvidePersistableContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest) => _didProvidePersistableContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvideRenewingContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideRenewingContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidSucceed(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didSucceed.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidUpdate(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier) => _didUpdate.OnNext((session, persistableContentKey, keyIdentifier));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVPlayerItemMetadataCollectorPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> _didCollectDateRange = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate.DidCollectDateRange(global::AVFoundation.AVPlayerItemMetadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[], global::Foundation.NSIndexSet, global::Foundation.NSIndexSet)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> DidCollectDateRangeObs => _didCollectDateRange;
        /// <inheritdoc/>
        public override void DidCollectDateRange(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups) => _didCollectDateRange.OnNext((metadataCollector, metadataGroups, indexesOfNewGroups, indexesOfModifiedGroups));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemMetadataOutputPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> _didOutputTimedMetadataGroups = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate.DidOutputTimedMetadataGroups(global::AVFoundation.AVPlayerItemMetadataOutput, global::AVFoundation.AVTimedMetadataGroup[], global::AVFoundation.AVPlayerItemTrack)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> DidOutputTimedMetadataGroupsObs => _didOutputTimedMetadataGroups;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate.OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void DidOutputTimedMetadataGroups(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track) => _didOutputTimedMetadataGroups.OnNext((output, groups, track));
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPullDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPullDelegateRx : global::AVFoundation.AVPlayerItemOutputPullDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputMediaDataWillChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVPlayerItemOutputPullDelegate.OutputMediaDataWillChange(global::AVFoundation.AVPlayerItemOutput)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputMediaDataWillChangeObs => _outputMediaDataWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVPlayerItemOutputPullDelegate.OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputMediaDataWillChange(global::AVFoundation.AVPlayerItemOutput sender) => _outputMediaDataWillChange.OnNext(sender);
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPushDelegateRx : global::AVFoundation.AVPlayerItemOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVPlayerItemOutputPushDelegate.OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate"/> into Observables.
    /// </summary>
    public partial class AVSpeechSynthesizerDelegateRx : global::AVFoundation.AVSpeechSynthesizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didCancelSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didContinueSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didFinishSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didPauseSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didStartSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)> _willSpeakRangeOfSpeechString = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate.DidCancelSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer, global::AVFoundation.AVSpeechUtterance)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidCancelSpeechUtteranceObs => _didCancelSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate.DidContinueSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer, global::AVFoundation.AVSpeechUtterance)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidContinueSpeechUtteranceObs => _didContinueSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate.DidFinishSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer, global::AVFoundation.AVSpeechUtterance)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidFinishSpeechUtteranceObs => _didFinishSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate.DidPauseSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer, global::AVFoundation.AVSpeechUtterance)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidPauseSpeechUtteranceObs => _didPauseSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate.DidStartSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer, global::AVFoundation.AVSpeechUtterance)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidStartSpeechUtteranceObs => _didStartSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate.WillSpeakRangeOfSpeechString(global::AVFoundation.AVSpeechSynthesizer, global::Foundation.NSRange, global::AVFoundation.AVSpeechUtterance)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)> WillSpeakRangeOfSpeechStringObs => _willSpeakRangeOfSpeechString;
        /// <inheritdoc/>
        public override void DidCancelSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didCancelSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidContinueSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didContinueSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidFinishSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didFinishSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidPauseSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didPauseSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidStartSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didStartSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void WillSpeakRangeOfSpeechString(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance) => _willSpeakRangeOfSpeechString.OnNext((synthesizer, characterRange, utterance));
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBCentralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBCentralManagerDelegateRx : global::CoreBluetooth.CBCentralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> _connectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBConnectionEvent connectionEvent, global::CoreBluetooth.CBPeripheral peripheral)> _connectionEventDidOccur = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBConnectionEvent connectionEvent, global::CoreBluetooth.CBPeripheral peripheral)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> _didUpdateAncsAuthorization = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _disconnectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> _discoveredPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _failedToConnectPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager> _updatedState = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.ConnectedPeripheral(global::CoreBluetooth.CBCentralManager, global::CoreBluetooth.CBPeripheral)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> ConnectedPeripheralObs => _connectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.ConnectionEventDidOccur(global::CoreBluetooth.CBCentralManager, global::CoreBluetooth.CBConnectionEvent, global::CoreBluetooth.CBPeripheral)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBConnectionEvent connectionEvent, global::CoreBluetooth.CBPeripheral peripheral)> ConnectionEventDidOccurObs => _connectionEventDidOccur;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.DidUpdateAncsAuthorization(global::CoreBluetooth.CBCentralManager, global::CoreBluetooth.CBPeripheral)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> DidUpdateAncsAuthorizationObs => _didUpdateAncsAuthorization;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.DisconnectedPeripheral(global::CoreBluetooth.CBCentralManager, global::CoreBluetooth.CBPeripheral, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DisconnectedPeripheralObs => _disconnectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.DiscoveredPeripheral(global::CoreBluetooth.CBCentralManager, global::CoreBluetooth.CBPeripheral, global::Foundation.NSDictionary, global::Foundation.NSNumber)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> DiscoveredPeripheralObs => _discoveredPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.FailedToConnectPeripheral(global::CoreBluetooth.CBCentralManager, global::CoreBluetooth.CBPeripheral, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> FailedToConnectPeripheralObs => _failedToConnectPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.UpdatedState(global::CoreBluetooth.CBCentralManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCentralManager> UpdatedStateObs => _updatedState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBCentralManagerDelegate.WillRestoreState(global::CoreBluetooth.CBCentralManager, global::Foundation.NSDictionary)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <inheritdoc/>
        public override void ConnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral) => _connectedPeripheral.OnNext((central, peripheral));
        /// <inheritdoc/>
        public override void ConnectionEventDidOccur(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBConnectionEvent connectionEvent, global::CoreBluetooth.CBPeripheral peripheral) => _connectionEventDidOccur.OnNext((central, connectionEvent, peripheral));
        /// <inheritdoc/>
        public override void DidUpdateAncsAuthorization(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral) => _didUpdateAncsAuthorization.OnNext((central, peripheral));
        /// <inheritdoc/>
        public override void DisconnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _disconnectedPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void DiscoveredPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI) => _discoveredPeripheral.OnNext((central, peripheral, advertisementData, RSSI));
        /// <inheritdoc/>
        public override void FailedToConnectPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _failedToConnectPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void UpdatedState(global::CoreBluetooth.CBCentralManager central) => _updatedState.OnNext(central);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((central, dict));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralDelegate"/> into Observables.
    /// </summary>
    public partial class CBPeripheralDelegateRx : global::CoreBluetooth.CBPeripheralDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredCharacteristic = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _discoveredDescriptor = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredIncludedService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _discoveredService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _isReadyToSendWriteWithoutResponse = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> _modifiedServices = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> _rssiRead = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _rssiUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedCharacterteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _updatedName = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedNotificationState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _updatedValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _wroteCharacteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _wroteDescriptorValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBL2CapChannel, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.DiscoveredCharacteristic(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBService, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredCharacteristicObs => _discoveredCharacteristic;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.DiscoveredDescriptor(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBCharacteristic, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> DiscoveredDescriptorObs => _discoveredDescriptor;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.DiscoveredIncludedService(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBService, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredIncludedServiceObs => _discoveredIncludedService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.DiscoveredService(global::CoreBluetooth.CBPeripheral, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DiscoveredServiceObs => _discoveredService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.IsReadyToSendWriteWithoutResponse(global::CoreBluetooth.CBPeripheral)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> IsReadyToSendWriteWithoutResponseObs => _isReadyToSendWriteWithoutResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.ModifiedServices(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBService[])"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> ModifiedServicesObs => _modifiedServices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.RssiRead(global::CoreBluetooth.CBPeripheral, global::Foundation.NSNumber, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> RssiReadObs => _rssiRead;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.RssiUpdated(global::CoreBluetooth.CBPeripheral, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> RssiUpdatedObs => _rssiUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.UpdatedCharacterteristicValue(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBCharacteristic, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedCharacterteristicValueObs => _updatedCharacterteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.UpdatedName(global::CoreBluetooth.CBPeripheral)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> UpdatedNameObs => _updatedName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.UpdatedNotificationState(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBCharacteristic, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedNotificationStateObs => _updatedNotificationState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.UpdatedValue(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBDescriptor, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> UpdatedValueObs => _updatedValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.WroteCharacteristicValue(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBCharacteristic, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> WroteCharacteristicValueObs => _wroteCharacteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralDelegate.WroteDescriptorValue(global::CoreBluetooth.CBPeripheral, global::CoreBluetooth.CBDescriptor, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> WroteDescriptorValueObs => _wroteDescriptorValue;
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DiscoveredCharacteristic(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredCharacteristic.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredDescriptor(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _discoveredDescriptor.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void DiscoveredIncludedService(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredIncludedService.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredService(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _discoveredService.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void IsReadyToSendWriteWithoutResponse(global::CoreBluetooth.CBPeripheral peripheral) => _isReadyToSendWriteWithoutResponse.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ModifiedServices(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services) => _modifiedServices.OnNext((peripheral, services));
        /// <inheritdoc/>
        public override void RssiRead(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error) => _rssiRead.OnNext((peripheral, rssi, error));
        /// <inheritdoc/>
        public override void RssiUpdated(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _rssiUpdated.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void UpdatedCharacterteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedCharacterteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedName(global::CoreBluetooth.CBPeripheral peripheral) => _updatedName.OnNext(peripheral);
        /// <inheritdoc/>
        public override void UpdatedNotificationState(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedNotificationState.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _updatedValue.OnNext((peripheral, descriptor, error));
        /// <inheritdoc/>
        public override void WroteCharacteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _wroteCharacteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void WroteDescriptorValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _wroteDescriptorValue.OnNext((peripheral, descriptor, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBPeripheralManagerDelegateRx : global::CoreBluetooth.CBPeripheralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> _advertisingStarted = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicSubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicUnsubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didPublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didUnpublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> _readRequestReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _readyToUpdateSubscribers = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _serviceAdded = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _stateUpdated = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> _writeRequestsReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.AdvertisingStarted(global::CoreBluetooth.CBPeripheralManager, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> AdvertisingStartedObs => _advertisingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicSubscribed(global::CoreBluetooth.CBPeripheralManager, global::CoreBluetooth.CBCentral, global::CoreBluetooth.CBCharacteristic)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicSubscribedObs => _characteristicSubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicUnsubscribed(global::CoreBluetooth.CBPeripheralManager, global::CoreBluetooth.CBCentral, global::CoreBluetooth.CBCharacteristic)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicUnsubscribedObs => _characteristicUnsubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheralManager, global::CoreBluetooth.CBL2CapChannel, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.DidPublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager, ushort, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidPublishL2CapChannelObs => _didPublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.DidUnpublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager, ushort, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidUnpublishL2CapChannelObs => _didUnpublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.ReadRequestReceived(global::CoreBluetooth.CBPeripheralManager, global::CoreBluetooth.CBATTRequest)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> ReadRequestReceivedObs => _readRequestReceived;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.ReadyToUpdateSubscribers(global::CoreBluetooth.CBPeripheralManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> ReadyToUpdateSubscribersObs => _readyToUpdateSubscribers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.ServiceAdded(global::CoreBluetooth.CBPeripheralManager, global::CoreBluetooth.CBService, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> ServiceAddedObs => _serviceAdded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.StateUpdated(global::CoreBluetooth.CBPeripheralManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> StateUpdatedObs => _stateUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState(global::CoreBluetooth.CBPeripheralManager, global::Foundation.NSDictionary)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate.WriteRequestsReceived(global::CoreBluetooth.CBPeripheralManager, global::CoreBluetooth.CBATTRequest[])"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> WriteRequestsReceivedObs => _writeRequestsReceived;
        /// <inheritdoc/>
        public override void AdvertisingStarted(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error) => _advertisingStarted.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void CharacteristicSubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicSubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void CharacteristicUnsubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicUnsubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DidPublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didPublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void DidUnpublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didUnpublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void ReadRequestReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request) => _readRequestReceived.OnNext((peripheral, request));
        /// <inheritdoc/>
        public override void ReadyToUpdateSubscribers(global::CoreBluetooth.CBPeripheralManager peripheral) => _readyToUpdateSubscribers.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ServiceAdded(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _serviceAdded.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void StateUpdated(global::CoreBluetooth.CBPeripheralManager peripheral) => _stateUpdated.OnNext(peripheral);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((peripheral, dict));
        /// <inheritdoc/>
        public override void WriteRequestsReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests) => _writeRequestsReceived.OnNext((peripheral, requests));
    }
}

namespace CoreData
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreData.NSFetchedResultsControllerDelegate"/> into Observables.
    /// </summary>
    public partial class NSFetchedResultsControllerDelegateRx : global::CoreData.NSFetchedResultsControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController> _didChangeContent = new Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)> _didChangeObject = new Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)> _didChangeSection = new Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController> _willChangeContent = new Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreData.NSFetchedResultsControllerDelegate.DidChangeContent(global::CoreData.NSFetchedResultsController)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreData.NSFetchedResultsController> DidChangeContentObs => _didChangeContent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreData.NSFetchedResultsControllerDelegate.DidChangeObject(global::CoreData.NSFetchedResultsController, global::Foundation.NSObject, global::Foundation.NSIndexPath, global::CoreData.NSFetchedResultsChangeType, global::Foundation.NSIndexPath)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)> DidChangeObjectObs => _didChangeObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreData.NSFetchedResultsControllerDelegate.DidChangeSection(global::CoreData.NSFetchedResultsController, global::CoreData.INSFetchedResultsSectionInfo, global::System.nuint, global::CoreData.NSFetchedResultsChangeType)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)> DidChangeSectionObs => _didChangeSection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreData.NSFetchedResultsControllerDelegate.WillChangeContent(global::CoreData.NSFetchedResultsController)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreData.NSFetchedResultsController> WillChangeContentObs => _willChangeContent;
        /// <inheritdoc/>
        public override void DidChangeContent(global::CoreData.NSFetchedResultsController controller) => _didChangeContent.OnNext(controller);
        /// <inheritdoc/>
        public override void DidChangeObject(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath) => _didChangeObject.OnNext((controller, anObject, indexPath, type, newIndexPath));
        /// <inheritdoc/>
        public override void DidChangeSection(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type) => _didChangeSection.OnNext((controller, sectionInfo, sectionIndex, type));
        /// <inheritdoc/>
        public override void WillChangeContent(global::CoreData.NSFetchedResultsController controller) => _willChangeContent.OnNext(controller);
    }
}

namespace CoreLocation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreLocation.CLLocationManagerDelegate"/> into Observables.
    /// </summary>
    public partial class CLLocationManagerDelegateRx : global::CoreLocation.CLLocationManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> _authorizationChanged = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager> _didChangeAuthorization = new Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> _locationsUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading)> _updatedHeading = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManagerDelegate.AuthorizationChanged(global::CoreLocation.CLLocationManager, global::CoreLocation.CLAuthorizationStatus)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> AuthorizationChangedObs => _authorizationChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManagerDelegate.DidChangeAuthorization(global::CoreLocation.CLLocationManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationManager> DidChangeAuthorizationObs => _didChangeAuthorization;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManagerDelegate.Failed(global::CoreLocation.CLLocationManager, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManagerDelegate.LocationsUpdated(global::CoreLocation.CLLocationManager, global::CoreLocation.CLLocation[])"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> LocationsUpdatedObs => _locationsUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreLocation.CLLocationManagerDelegate.UpdatedHeading(global::CoreLocation.CLLocationManager, global::CoreLocation.CLHeading)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading)> UpdatedHeadingObs => _updatedHeading;
        /// <inheritdoc/>
        public override void AuthorizationChanged(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status) => _authorizationChanged.OnNext((manager, status));
        /// <inheritdoc/>
        public override void DidChangeAuthorization(global::CoreLocation.CLLocationManager manager) => _didChangeAuthorization.OnNext(manager);
        /// <inheritdoc/>
        public override void Failed(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error) => _failed.OnNext((manager, error));
        /// <inheritdoc/>
        public override void LocationsUpdated(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations) => _locationsUpdated.OnNext((manager, locations));
        /// <inheritdoc/>
        public override void UpdatedHeading(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading) => _updatedHeading.OnNext((manager, newHeading));
    }
}

namespace CoreMotion
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreMotion.CMHeadphoneMotionManagerDelegate"/> into Observables.
    /// </summary>
    public partial class CMHeadphoneMotionManagerDelegateRx : global::CoreMotion.CMHeadphoneMotionManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreMotion.CMHeadphoneMotionManager> _didConnect = new Pharmacist.Common.SingleAwaitSubject<global::CoreMotion.CMHeadphoneMotionManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreMotion.CMHeadphoneMotionManager> _didDisconnect = new Pharmacist.Common.SingleAwaitSubject<global::CoreMotion.CMHeadphoneMotionManager>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreMotion.CMHeadphoneMotionManagerDelegate.DidConnect(global::CoreMotion.CMHeadphoneMotionManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreMotion.CMHeadphoneMotionManager> DidConnectObs => _didConnect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::CoreMotion.CMHeadphoneMotionManagerDelegate.DidDisconnect(global::CoreMotion.CMHeadphoneMotionManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreMotion.CMHeadphoneMotionManager> DidDisconnectObs => _didDisconnect;
        /// <inheritdoc/>
        public override void DidConnect(global::CoreMotion.CMHeadphoneMotionManager manager) => _didConnect.OnNext(manager);
        /// <inheritdoc/>
        public override void DidDisconnect(global::CoreMotion.CMHeadphoneMotionManager manager) => _didDisconnect.OnNext(manager);
    }
}

namespace Foundation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSCacheDelegate"/> into Observables.
    /// </summary>
    public partial class NSCacheDelegateRx : global::Foundation.NSCacheDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> _willEvictObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSCacheDelegate.WillEvictObject(global::Foundation.NSCache, global::Foundation.NSObject)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> WillEvictObjectObs => _willEvictObject;
        /// <inheritdoc/>
        public override void WillEvictObject(global::Foundation.NSCache cache, global::Foundation.NSObject obj) => _willEvictObject.OnNext((cache, obj));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedArchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedArchiverDelegateRx : global::Foundation.NSKeyedArchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> _encodedObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiverDelegate.EncodedObject(global::Foundation.NSKeyedArchiver, global::Foundation.NSObject)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> EncodedObjectObs => _encodedObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiverDelegate.Finished(global::Foundation.NSKeyedArchiver)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiverDelegate.Finishing(global::Foundation.NSKeyedArchiver)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedArchiverDelegate.ReplacingObject(global::Foundation.NSKeyedArchiver, global::Foundation.NSObject, global::Foundation.NSObject)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void EncodedObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj) => _encodedObject.OnNext((archiver, obj));
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedArchiver archiver) => _finished.OnNext(archiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedArchiver archiver) => _finishing.OnNext(archiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((archiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedUnarchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedUnarchiverDelegateRx : global::Foundation.NSKeyedUnarchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedUnarchiverDelegate.Finished(global::Foundation.NSKeyedUnarchiver)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedUnarchiverDelegate.Finishing(global::Foundation.NSKeyedUnarchiver)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSKeyedUnarchiverDelegate.ReplacingObject(global::Foundation.NSKeyedUnarchiver, global::Foundation.NSObject, global::Foundation.NSObject)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedUnarchiver unarchiver) => _finished.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedUnarchiver unarchiver) => _finishing.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((unarchiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSMachPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSMachPortDelegateRx : global::Foundation.NSMachPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr> _machMessageReceived = new Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSMachPortDelegate.MachMessageReceived(global::System.IntPtr)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.IntPtr> MachMessageReceivedObs => _machMessageReceived;
        /// <inheritdoc/>
        public override void MachMessageReceived(global::System.IntPtr msgHeader) => _machMessageReceived.OnNext(msgHeader);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSPortDelegateRx : global::Foundation.NSPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage> _messageReceived = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSPortDelegate.MessageReceived(global::Foundation.NSPortMessage)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSPortMessage> MessageReceivedObs => _messageReceived;
        /// <inheritdoc/>
        public override void MessageReceived(global::Foundation.NSPortMessage message) => _messageReceived.OnNext(message);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSStreamDelegateRx : global::Foundation.NSStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> _handleEvent = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSStreamDelegate.HandleEvent(global::Foundation.NSStream, global::Foundation.NSStreamEvent)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> HandleEventObs => _handleEvent;
        /// <inheritdoc/>
        public override void HandleEvent(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent) => _handleEvent.OnNext((theStream, streamEvent));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDataDelegateRx : global::Foundation.NSUrlConnectionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection> _finishedLoading = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> _receivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> _sentBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDataDelegate.FinishedLoading(global::Foundation.NSUrlConnection)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlConnection> FinishedLoadingObs => _finishedLoading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDataDelegate.ReceivedData(global::Foundation.NSUrlConnection, global::Foundation.NSData)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> ReceivedDataObs => _receivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDataDelegate.ReceivedResponse(global::Foundation.NSUrlConnection, global::Foundation.NSUrlResponse)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDataDelegate.SentBodyData(global::Foundation.NSUrlConnection, global::System.nint, global::System.nint, global::System.nint)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> SentBodyDataObs => _sentBodyData;
        /// <inheritdoc/>
        public override void FinishedLoading(global::Foundation.NSUrlConnection connection) => _finishedLoading.OnNext(connection);
        /// <inheritdoc/>
        public override void ReceivedData(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data) => _receivedData.OnNext((connection, data));
        /// <inheritdoc/>
        public override void ReceivedResponse(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response) => _receivedResponse.OnNext((connection, response));
        /// <inheritdoc/>
        public override void SentBodyData(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite) => _sentBodyData.OnNext((connection, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDelegateRx : global::Foundation.NSUrlConnectionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _canceledAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _receivedAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _willSendRequestForAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDelegate.CanceledAuthenticationChallenge(global::Foundation.NSUrlConnection, global::Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> CanceledAuthenticationChallengeObs => _canceledAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDelegate.FailedWithError(global::Foundation.NSUrlConnection, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDelegate.ReceivedAuthenticationChallenge(global::Foundation.NSUrlConnection, global::Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> ReceivedAuthenticationChallengeObs => _receivedAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDelegate.WillSendRequestForAuthenticationChallenge(global::Foundation.NSUrlConnection, global::Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> WillSendRequestForAuthenticationChallengeObs => _willSendRequestForAuthenticationChallenge;
        /// <inheritdoc/>
        public override void CanceledAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _canceledAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void FailedWithError(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error) => _failedWithError.OnNext((connection, error));
        /// <inheritdoc/>
        public override void ReceivedAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _receivedAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void WillSendRequestForAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _willSendRequestForAuthenticationChallenge.OnNext((connection, challenge));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlConnectionDownloadDelegateRx : global::Foundation.NSUrlConnectionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> _finishedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> _resumedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> _wroteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDownloadDelegate.FinishedDownloading(global::Foundation.NSUrlConnection, global::Foundation.NSUrl)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> FinishedDownloadingObs => _finishedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDownloadDelegate.ResumedDownloading(global::Foundation.NSUrlConnection, long, long)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> ResumedDownloadingObs => _resumedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlConnectionDownloadDelegate.WroteData(global::Foundation.NSUrlConnection, long, long, long)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> WroteDataObs => _wroteData;
        /// <inheritdoc/>
        public override void FinishedDownloading(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl) => _finishedDownloading.OnNext((connection, destinationUrl));
        /// <inheritdoc/>
        public override void ResumedDownloading(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes) => _resumedDownloading.OnNext((connection, totalBytesWritten, expectedTotalBytes));
        /// <inheritdoc/>
        public override void WroteData(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes) => _wroteData.OnNext((connection, bytesWritten, totalBytesWritten, expectedTotalBytes));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDataDelegateRx : global::Foundation.NSUrlSessionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> _didBecomeDownloadTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> _didBecomeStreamTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> _didReceiveData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> _didReceiveResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> _willCacheResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDataDelegate.DidBecomeDownloadTask(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDataTask, global::Foundation.NSUrlSessionDownloadTask)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> DidBecomeDownloadTaskObs => _didBecomeDownloadTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDataDelegate.DidBecomeStreamTask(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDataTask, global::Foundation.NSUrlSessionStreamTask)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> DidBecomeStreamTaskObs => _didBecomeStreamTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDataDelegate.DidReceiveData(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDataTask, global::Foundation.NSData)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> DidReceiveDataObs => _didReceiveData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDataDelegate.DidReceiveResponse(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDataTask, global::Foundation.NSUrlResponse, global::System.Action{global::Foundation.NSUrlSessionResponseDisposition})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> DidReceiveResponseObs => _didReceiveResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDataDelegate.WillCacheResponse(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDataTask, global::Foundation.NSCachedUrlResponse, global::System.Action{global::Foundation.NSCachedUrlResponse})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> WillCacheResponseObs => _willCacheResponse;
        /// <inheritdoc/>
        public override void DidBecomeDownloadTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask) => _didBecomeDownloadTask.OnNext((session, dataTask, downloadTask));
        /// <inheritdoc/>
        public override void DidBecomeStreamTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask) => _didBecomeStreamTask.OnNext((session, dataTask, streamTask));
        /// <inheritdoc/>
        public override void DidReceiveData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data) => _didReceiveData.OnNext((session, dataTask, data));
        /// <inheritdoc/>
        public override void DidReceiveResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler) => _didReceiveResponse.OnNext((session, dataTask, response, completionHandler));
        /// <inheritdoc/>
        public override void WillCacheResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler) => _willCacheResponse.OnNext((session, dataTask, proposedResponse, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDelegateRx : global::Foundation.NSUrlSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> _didBecomeInvalid = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession> _didFinishEventsForBackgroundSession = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDelegate.DidBecomeInvalid(global::Foundation.NSUrlSession, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> DidBecomeInvalidObs => _didBecomeInvalid;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDelegate.DidFinishEventsForBackgroundSession(global::Foundation.NSUrlSession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlSession> DidFinishEventsForBackgroundSessionObs => _didFinishEventsForBackgroundSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDelegate.DidReceiveChallenge(global::Foundation.NSUrlSession, global::Foundation.NSUrlAuthenticationChallenge, global::System.Action{global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <inheritdoc/>
        public override void DidBecomeInvalid(global::Foundation.NSUrlSession session, global::Foundation.NSError error) => _didBecomeInvalid.OnNext((session, error));
        /// <inheritdoc/>
        public override void DidFinishEventsForBackgroundSession(global::Foundation.NSUrlSession session) => _didFinishEventsForBackgroundSession.OnNext(session);
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, challenge, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlSessionDownloadDelegateRx : global::Foundation.NSUrlSessionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> _didFinishDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> _didResume = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> _didWriteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDownloadDelegate.DidFinishDownloading(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDownloadTask, global::Foundation.NSUrl)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> DidFinishDownloadingObs => _didFinishDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDownloadDelegate.DidResume(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDownloadTask, long, long)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> DidResumeObs => _didResume;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionDownloadDelegate.DidWriteData(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionDownloadTask, long, long, long)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> DidWriteDataObs => _didWriteData;
        /// <inheritdoc/>
        public override void DidFinishDownloading(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location) => _didFinishDownloading.OnNext((session, downloadTask, location));
        /// <inheritdoc/>
        public override void DidResume(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes) => _didResume.OnNext((session, downloadTask, resumeFileOffset, expectedTotalBytes));
        /// <inheritdoc/>
        public override void DidWriteData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite) => _didWriteData.OnNext((session, downloadTask, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionStreamDelegateRx : global::Foundation.NSUrlSessionStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _betterRouteDiscovered = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _completedTaskCaptureStreams = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _readClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _writeClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionStreamDelegate.BetterRouteDiscovered(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionStreamTask)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> BetterRouteDiscoveredObs => _betterRouteDiscovered;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionStreamDelegate.CompletedTaskCaptureStreams(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionStreamTask, global::Foundation.NSInputStream, global::Foundation.NSOutputStream)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> CompletedTaskCaptureStreamsObs => _completedTaskCaptureStreams;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionStreamDelegate.ReadClosed(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionStreamTask)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> ReadClosedObs => _readClosed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionStreamDelegate.WriteClosed(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionStreamTask)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> WriteClosedObs => _writeClosed;
        /// <inheritdoc/>
        public override void BetterRouteDiscovered(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _betterRouteDiscovered.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void CompletedTaskCaptureStreams(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _completedTaskCaptureStreams.OnNext((session, streamTask, inputStream, outputStream));
        /// <inheritdoc/>
        public override void ReadClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _readClosed.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void WriteClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _writeClosed.OnNext((session, streamTask));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionTaskDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionTaskDelegateRx : global::Foundation.NSUrlSessionTaskDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> _didCompleteWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> _didFinishCollectingMetrics = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> _didSendBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> _needNewBodyStream = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> _taskIsWaitingForConnectivity = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> _willBeginDelayedRequest = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> _willPerformHttpRedirection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.DidCompleteWithError(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> DidCompleteWithErrorObs => _didCompleteWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.DidFinishCollectingMetrics(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask, global::Foundation.NSUrlSessionTaskMetrics)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> DidFinishCollectingMetricsObs => _didFinishCollectingMetrics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.DidReceiveChallenge(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask, global::Foundation.NSUrlAuthenticationChallenge, global::System.Action{global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.DidSendBodyData(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask, long, long, long)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> DidSendBodyDataObs => _didSendBodyData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.NeedNewBodyStream(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask, global::System.Action{global::Foundation.NSInputStream})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> NeedNewBodyStreamObs => _needNewBodyStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.TaskIsWaitingForConnectivity(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> TaskIsWaitingForConnectivityObs => _taskIsWaitingForConnectivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.WillBeginDelayedRequest(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask, global::Foundation.NSUrlRequest, global::System.Action{global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> WillBeginDelayedRequestObs => _willBeginDelayedRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionTaskDelegate.WillPerformHttpRedirection(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionTask, global::Foundation.NSHttpUrlResponse, global::Foundation.NSUrlRequest, global::System.Action{global::Foundation.NSUrlRequest})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> WillPerformHttpRedirectionObs => _willPerformHttpRedirection;
        /// <inheritdoc/>
        public override void DidCompleteWithError(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error) => _didCompleteWithError.OnNext((session, task, error));
        /// <inheritdoc/>
        public override void DidFinishCollectingMetrics(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics) => _didFinishCollectingMetrics.OnNext((session, task, metrics));
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, task, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidSendBodyData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend) => _didSendBodyData.OnNext((session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend));
        /// <inheritdoc/>
        public override void NeedNewBodyStream(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler) => _needNewBodyStream.OnNext((session, task, completionHandler));
        /// <inheritdoc/>
        public override void TaskIsWaitingForConnectivity(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task) => _taskIsWaitingForConnectivity.OnNext((session, task));
        /// <inheritdoc/>
        public override void WillBeginDelayedRequest(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler) => _willBeginDelayedRequest.OnNext((session, task, request, completionHandler));
        /// <inheritdoc/>
        public override void WillPerformHttpRedirection(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler) => _willPerformHttpRedirection.OnNext((session, task, response, newRequest, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionWebSocketDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionWebSocketDelegateRx : global::Foundation.NSUrlSessionWebSocketDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, global::Foundation.NSUrlSessionWebSocketCloseCode closeCode, global::Foundation.NSData reason)> _didClose = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, global::Foundation.NSUrlSessionWebSocketCloseCode closeCode, global::Foundation.NSData reason)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, string protocol)> _didOpen = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, string protocol)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionWebSocketDelegate.DidClose(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionWebSocketTask, global::Foundation.NSUrlSessionWebSocketCloseCode, global::Foundation.NSData)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, global::Foundation.NSUrlSessionWebSocketCloseCode closeCode, global::Foundation.NSData reason)> DidCloseObs => _didClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUrlSessionWebSocketDelegate.DidOpen(global::Foundation.NSUrlSession, global::Foundation.NSUrlSessionWebSocketTask, string)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, string protocol)> DidOpenObs => _didOpen;
        /// <inheritdoc/>
        public override void DidClose(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, global::Foundation.NSUrlSessionWebSocketCloseCode closeCode, global::Foundation.NSData reason) => _didClose.OnNext((session, webSocketTask, closeCode, reason));
        /// <inheritdoc/>
        public override void DidOpen(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionWebSocketTask webSocketTask, string protocol) => _didOpen.OnNext((session, webSocketTask, protocol));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUserActivityDelegate"/> into Observables.
    /// </summary>
    public partial class NSUserActivityDelegateRx : global::Foundation.NSUserActivityDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _userActivityReceivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWasContinued = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWillSave = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUserActivityDelegate.UserActivityReceivedData(global::Foundation.NSUserActivity, global::Foundation.NSInputStream, global::Foundation.NSOutputStream)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> UserActivityReceivedDataObs => _userActivityReceivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUserActivityDelegate.UserActivityWasContinued(global::Foundation.NSUserActivity)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWasContinuedObs => _userActivityWasContinued;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Foundation.NSUserActivityDelegate.UserActivityWillSave(global::Foundation.NSUserActivity)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWillSaveObs => _userActivityWillSave;
        /// <inheritdoc/>
        public override void UserActivityReceivedData(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _userActivityReceivedData.OnNext((userActivity, inputStream, outputStream));
        /// <inheritdoc/>
        public override void UserActivityWasContinued(global::Foundation.NSUserActivity userActivity) => _userActivityWasContinued.OnNext(userActivity);
        /// <inheritdoc/>
        public override void UserActivityWillSave(global::Foundation.NSUserActivity userActivity) => _userActivityWillSave.OnNext(userActivity);
    }
}

namespace GameKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKTurnBasedEventHandlerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKTurnBasedEventHandlerDelegateRx : global::GameKit.GKTurnBasedEventHandlerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSString[]> _handleInviteFromGameCenter = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSString[]>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch> _handleMatchEnded = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatch match, bool activated)> _handleTurnEvent = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatch match, bool activated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch> _handleTurnEventForMatch = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::GameKit.GKTurnBasedEventHandlerDelegate.HandleInviteFromGameCenter(global::Foundation.NSString[])"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSString[]> HandleInviteFromGameCenterObs => _handleInviteFromGameCenter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::GameKit.GKTurnBasedEventHandlerDelegate.HandleMatchEnded(global::GameKit.GKTurnBasedMatch)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatch> HandleMatchEndedObs => _handleMatchEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEvent(global::GameKit.GKTurnBasedMatch, bool)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatch match, bool activated)> HandleTurnEventObs => _handleTurnEvent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEventForMatch(global::GameKit.GKTurnBasedMatch)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatch> HandleTurnEventForMatchObs => _handleTurnEventForMatch;
        /// <inheritdoc/>
        public override void HandleInviteFromGameCenter(global::Foundation.NSString[] playersToInvite) => _handleInviteFromGameCenter.OnNext(playersToInvite);
        /// <inheritdoc/>
        public override void HandleMatchEnded(global::GameKit.GKTurnBasedMatch match) => _handleMatchEnded.OnNext(match);
        /// <inheritdoc/>
        public override void HandleTurnEvent(global::GameKit.GKTurnBasedMatch match, bool activated) => _handleTurnEvent.OnNext((match, activated));
        /// <inheritdoc/>
        public override void HandleTurnEventForMatch(global::GameKit.GKTurnBasedMatch match) => _handleTurnEventForMatch.OnNext(match);
    }
}

namespace HealthKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::HealthKit.HKLiveWorkoutBuilderDelegate"/> into Observables.
    /// </summary>
    public abstract partial class HKLiveWorkoutBuilderDelegateRx : global::HealthKit.HKLiveWorkoutBuilderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKLiveWorkoutBuilder workoutBuilder, global::Foundation.NSSet<global::HealthKit.HKSampleType> collectedTypes)> _didCollectData = new Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKLiveWorkoutBuilder workoutBuilder, global::Foundation.NSSet<global::HealthKit.HKSampleType> collectedTypes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HealthKit.HKLiveWorkoutBuilder> _didCollectEvent = new Pharmacist.Common.SingleAwaitSubject<global::HealthKit.HKLiveWorkoutBuilder>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HealthKit.HKLiveWorkoutBuilderDelegate.DidCollectData(global::HealthKit.HKLiveWorkoutBuilder, global::Foundation.NSSet{global::HealthKit.HKSampleType})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HealthKit.HKLiveWorkoutBuilder workoutBuilder, global::Foundation.NSSet<global::HealthKit.HKSampleType> collectedTypes)> DidCollectDataObs => _didCollectData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HealthKit.HKLiveWorkoutBuilderDelegate.DidCollectEvent(global::HealthKit.HKLiveWorkoutBuilder)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HealthKit.HKLiveWorkoutBuilder> DidCollectEventObs => _didCollectEvent;
        /// <inheritdoc/>
        public override void DidCollectData(global::HealthKit.HKLiveWorkoutBuilder workoutBuilder, global::Foundation.NSSet<global::HealthKit.HKSampleType> collectedTypes) => _didCollectData.OnNext((workoutBuilder, collectedTypes));
        /// <inheritdoc/>
        public override void DidCollectEvent(global::HealthKit.HKLiveWorkoutBuilder workoutBuilder) => _didCollectEvent.OnNext(workoutBuilder);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HealthKit.HKWorkoutSessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class HKWorkoutSessionDelegateRx : global::HealthKit.HKWorkoutSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutSessionState toState, global::HealthKit.HKWorkoutSessionState fromState, global::Foundation.NSDate date)> _didChangeToState = new Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutSessionState toState, global::HealthKit.HKWorkoutSessionState fromState, global::Foundation.NSDate date)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKWorkoutSession workoutSession, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKWorkoutSession workoutSession, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutEvent event)> _didGenerateEvent = new Pharmacist.Common.SingleAwaitSubject<(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutEvent event)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HealthKit.HKWorkoutSessionDelegate.DidChangeToState(global::HealthKit.HKWorkoutSession, global::HealthKit.HKWorkoutSessionState, global::HealthKit.HKWorkoutSessionState, global::Foundation.NSDate)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutSessionState toState, global::HealthKit.HKWorkoutSessionState fromState, global::Foundation.NSDate date)> DidChangeToStateObs => _didChangeToState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HealthKit.HKWorkoutSessionDelegate.DidFail(global::HealthKit.HKWorkoutSession, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HealthKit.HKWorkoutSession workoutSession, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HealthKit.HKWorkoutSessionDelegate.DidGenerateEvent(global::HealthKit.HKWorkoutSession, global::HealthKit.HKWorkoutEvent)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutEvent event)> DidGenerateEventObs => _didGenerateEvent;
        /// <inheritdoc/>
        public override void DidChangeToState(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutSessionState toState, global::HealthKit.HKWorkoutSessionState fromState, global::Foundation.NSDate date) => _didChangeToState.OnNext((workoutSession, toState, fromState, date));
        /// <inheritdoc/>
        public override void DidFail(global::HealthKit.HKWorkoutSession workoutSession, global::Foundation.NSError error) => _didFail.OnNext((workoutSession, error));
        /// <inheritdoc/>
        public override void DidGenerateEvent(global::HealthKit.HKWorkoutSession workoutSession, global::HealthKit.HKWorkoutEvent @event) => _didGenerateEvent.OnNext((workoutSession, @event));
    }
}

namespace HomeKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMAccessoryDelegate"/> into Observables.
    /// </summary>
    public partial class HMAccessoryDelegateRx : global::HomeKit.HMAccessoryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> _didAddProfile = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> _didRemoveProfile = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> _didUpdateAssociatedServiceType = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, string firmwareVersion)> _didUpdateFirmwareVersion = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, string firmwareVersion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateName = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> _didUpdateNameForService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateReachability = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateServices = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)> _didUpdateValueForCharacteristic = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidAddProfile(global::HomeKit.HMAccessory, global::HomeKit.HMAccessoryProfile)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> DidAddProfileObs => _didAddProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidRemoveProfile(global::HomeKit.HMAccessory, global::HomeKit.HMAccessoryProfile)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> DidRemoveProfileObs => _didRemoveProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidUpdateAssociatedServiceType(global::HomeKit.HMAccessory, global::HomeKit.HMService)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> DidUpdateAssociatedServiceTypeObs => _didUpdateAssociatedServiceType;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidUpdateFirmwareVersion(global::HomeKit.HMAccessory, string)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, string firmwareVersion)> DidUpdateFirmwareVersionObs => _didUpdateFirmwareVersion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidUpdateName(global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateNameObs => _didUpdateName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidUpdateNameForService(global::HomeKit.HMAccessory, global::HomeKit.HMService)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> DidUpdateNameForServiceObs => _didUpdateNameForService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidUpdateReachability(global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateReachabilityObs => _didUpdateReachability;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidUpdateServices(global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateServicesObs => _didUpdateServices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMAccessoryDelegate.DidUpdateValueForCharacteristic(global::HomeKit.HMAccessory, global::HomeKit.HMService, global::HomeKit.HMCharacteristic)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)> DidUpdateValueForCharacteristicObs => _didUpdateValueForCharacteristic;
        /// <inheritdoc/>
        public override void DidAddProfile(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile) => _didAddProfile.OnNext((accessory, profile));
        /// <inheritdoc/>
        public override void DidRemoveProfile(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile) => _didRemoveProfile.OnNext((accessory, profile));
        /// <inheritdoc/>
        public override void DidUpdateAssociatedServiceType(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service) => _didUpdateAssociatedServiceType.OnNext((accessory, service));
        /// <inheritdoc/>
        public override void DidUpdateFirmwareVersion(global::HomeKit.HMAccessory accessory, string firmwareVersion) => _didUpdateFirmwareVersion.OnNext((accessory, firmwareVersion));
        /// <inheritdoc/>
        public override void DidUpdateName(global::HomeKit.HMAccessory accessory) => _didUpdateName.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateNameForService(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service) => _didUpdateNameForService.OnNext((accessory, service));
        /// <inheritdoc/>
        public override void DidUpdateReachability(global::HomeKit.HMAccessory accessory) => _didUpdateReachability.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateServices(global::HomeKit.HMAccessory accessory) => _didUpdateServices.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateValueForCharacteristic(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic) => _didUpdateValueForCharacteristic.OnNext((accessory, service, characteristic));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMCameraSnapshotControlDelegate"/> into Observables.
    /// </summary>
    public partial class HMCameraSnapshotControlDelegateRx : global::HomeKit.HMCameraSnapshotControlDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)> _didTakeSnapshot = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraSnapshotControl> _didUpdateMostRecentSnapshot = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraSnapshotControl>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMCameraSnapshotControlDelegate.DidTakeSnapshot(global::HomeKit.HMCameraSnapshotControl, global::HomeKit.HMCameraSnapshot, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)> DidTakeSnapshotObs => _didTakeSnapshot;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMCameraSnapshotControlDelegate.DidUpdateMostRecentSnapshot(global::HomeKit.HMCameraSnapshotControl)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMCameraSnapshotControl> DidUpdateMostRecentSnapshotObs => _didUpdateMostRecentSnapshot;
        /// <inheritdoc/>
        public override void DidTakeSnapshot(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error) => _didTakeSnapshot.OnNext((cameraSnapshotControl, snapshot, error));
        /// <inheritdoc/>
        public override void DidUpdateMostRecentSnapshot(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl) => _didUpdateMostRecentSnapshot.OnNext(cameraSnapshotControl);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMCameraStreamControlDelegate"/> into Observables.
    /// </summary>
    public partial class HMCameraStreamControlDelegateRx : global::HomeKit.HMCameraStreamControlDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraStreamControl> _didStartStream = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraStreamControl>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)> _didStopStream = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMCameraStreamControlDelegate.DidStartStream(global::HomeKit.HMCameraStreamControl)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMCameraStreamControl> DidStartStreamObs => _didStartStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMCameraStreamControlDelegate.DidStopStream(global::HomeKit.HMCameraStreamControl, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)> DidStopStreamObs => _didStopStream;
        /// <inheritdoc/>
        public override void DidStartStream(global::HomeKit.HMCameraStreamControl cameraStreamControl) => _didStartStream.OnNext(cameraStreamControl);
        /// <inheritdoc/>
        public override void DidStopStream(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error) => _didStopStream.OnNext((cameraStreamControl, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMHomeDelegate"/> into Observables.
    /// </summary>
    public partial class HMHomeDelegateRx : global::HomeKit.HMHomeDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didAddAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didAddActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didAddRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> _didAddRoomToZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> _didAddService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didAddServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didAddTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> _didAddUser = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didAddZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didRemoveAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didRemoveActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didRemoveRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> _didRemoveRoomFromZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> _didRemoveService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didRemoveServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didRemoveTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> _didRemoveUser = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didRemoveZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didUnblockAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome> _didUpdateAccessControlForCurrentUser = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didUpdateActionsForActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)> _didUpdateHomeHubState = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didUpdateNameForActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome> _didUpdateNameForHome = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didUpdateNameForRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didUpdateNameForServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didUpdateNameForTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didUpdateNameForZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)> _didUpdateRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome> _didUpdateSupportedFeatures = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didUpdateTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddAccessory(global::HomeKit.HMHome, global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidAddAccessoryObs => _didAddAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddActionSet(global::HomeKit.HMHome, global::HomeKit.HMActionSet)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidAddActionSetObs => _didAddActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddRoom(global::HomeKit.HMHome, global::HomeKit.HMRoom)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidAddRoomObs => _didAddRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddRoomToZone(global::HomeKit.HMHome, global::HomeKit.HMRoom, global::HomeKit.HMZone)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> DidAddRoomToZoneObs => _didAddRoomToZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddService(global::HomeKit.HMHome, global::HomeKit.HMService, global::HomeKit.HMServiceGroup)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> DidAddServiceObs => _didAddService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddServiceGroup(global::HomeKit.HMHome, global::HomeKit.HMServiceGroup)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidAddServiceGroupObs => _didAddServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddTrigger(global::HomeKit.HMHome, global::HomeKit.HMTrigger)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidAddTriggerObs => _didAddTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddUser(global::HomeKit.HMHome, global::HomeKit.HMUser)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> DidAddUserObs => _didAddUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidAddZone(global::HomeKit.HMHome, global::HomeKit.HMZone)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidAddZoneObs => _didAddZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidEncounterError(global::HomeKit.HMHome, global::Foundation.NSError, global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveAccessory(global::HomeKit.HMHome, global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidRemoveAccessoryObs => _didRemoveAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveActionSet(global::HomeKit.HMHome, global::HomeKit.HMActionSet)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidRemoveActionSetObs => _didRemoveActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveRoom(global::HomeKit.HMHome, global::HomeKit.HMRoom)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidRemoveRoomObs => _didRemoveRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveRoomFromZone(global::HomeKit.HMHome, global::HomeKit.HMRoom, global::HomeKit.HMZone)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> DidRemoveRoomFromZoneObs => _didRemoveRoomFromZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveService(global::HomeKit.HMHome, global::HomeKit.HMService, global::HomeKit.HMServiceGroup)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> DidRemoveServiceObs => _didRemoveService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveServiceGroup(global::HomeKit.HMHome, global::HomeKit.HMServiceGroup)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidRemoveServiceGroupObs => _didRemoveServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveTrigger(global::HomeKit.HMHome, global::HomeKit.HMTrigger)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidRemoveTriggerObs => _didRemoveTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveUser(global::HomeKit.HMHome, global::HomeKit.HMUser)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> DidRemoveUserObs => _didRemoveUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidRemoveZone(global::HomeKit.HMHome, global::HomeKit.HMZone)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidRemoveZoneObs => _didRemoveZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUnblockAccessory(global::HomeKit.HMHome, global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidUnblockAccessoryObs => _didUnblockAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateAccessControlForCurrentUser(global::HomeKit.HMHome)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHome> DidUpdateAccessControlForCurrentUserObs => _didUpdateAccessControlForCurrentUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateActionsForActionSet(global::HomeKit.HMHome, global::HomeKit.HMActionSet)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidUpdateActionsForActionSetObs => _didUpdateActionsForActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateHomeHubState(global::HomeKit.HMHome, global::HomeKit.HMHomeHubState)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)> DidUpdateHomeHubStateObs => _didUpdateHomeHubState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateNameForActionSet(global::HomeKit.HMHome, global::HomeKit.HMActionSet)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidUpdateNameForActionSetObs => _didUpdateNameForActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateNameForHome(global::HomeKit.HMHome)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHome> DidUpdateNameForHomeObs => _didUpdateNameForHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateNameForRoom(global::HomeKit.HMHome, global::HomeKit.HMRoom)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidUpdateNameForRoomObs => _didUpdateNameForRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateNameForServiceGroup(global::HomeKit.HMHome, global::HomeKit.HMServiceGroup)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidUpdateNameForServiceGroupObs => _didUpdateNameForServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateNameForTrigger(global::HomeKit.HMHome, global::HomeKit.HMTrigger)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidUpdateNameForTriggerObs => _didUpdateNameForTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateNameForZone(global::HomeKit.HMHome, global::HomeKit.HMZone)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidUpdateNameForZoneObs => _didUpdateNameForZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateRoom(global::HomeKit.HMHome, global::HomeKit.HMRoom, global::HomeKit.HMAccessory)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)> DidUpdateRoomObs => _didUpdateRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateSupportedFeatures(global::HomeKit.HMHome)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHome> DidUpdateSupportedFeaturesObs => _didUpdateSupportedFeatures;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeDelegate.DidUpdateTrigger(global::HomeKit.HMHome, global::HomeKit.HMTrigger)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidUpdateTriggerObs => _didUpdateTrigger;
        /// <inheritdoc/>
        public override void DidAddAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didAddAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidAddActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didAddActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidAddRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didAddRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidAddRoomToZone(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone) => _didAddRoomToZone.OnNext((home, room, zone));
        /// <inheritdoc/>
        public override void DidAddService(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group) => _didAddService.OnNext((home, service, group));
        /// <inheritdoc/>
        public override void DidAddServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didAddServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidAddTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didAddTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidAddUser(global::HomeKit.HMHome home, global::HomeKit.HMUser user) => _didAddUser.OnNext((home, user));
        /// <inheritdoc/>
        public override void DidAddZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didAddZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidEncounterError(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory) => _didEncounterError.OnNext((home, error, accessory));
        /// <inheritdoc/>
        public override void DidRemoveAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didRemoveAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidRemoveActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didRemoveActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidRemoveRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didRemoveRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidRemoveRoomFromZone(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone) => _didRemoveRoomFromZone.OnNext((home, room, zone));
        /// <inheritdoc/>
        public override void DidRemoveService(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group) => _didRemoveService.OnNext((home, service, group));
        /// <inheritdoc/>
        public override void DidRemoveServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didRemoveServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidRemoveTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didRemoveTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidRemoveUser(global::HomeKit.HMHome home, global::HomeKit.HMUser user) => _didRemoveUser.OnNext((home, user));
        /// <inheritdoc/>
        public override void DidRemoveZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didRemoveZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidUnblockAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didUnblockAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidUpdateAccessControlForCurrentUser(global::HomeKit.HMHome home) => _didUpdateAccessControlForCurrentUser.OnNext(home);
        /// <inheritdoc/>
        public override void DidUpdateActionsForActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didUpdateActionsForActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidUpdateHomeHubState(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState) => _didUpdateHomeHubState.OnNext((home, homeHubState));
        /// <inheritdoc/>
        public override void DidUpdateNameForActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didUpdateNameForActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidUpdateNameForHome(global::HomeKit.HMHome home) => _didUpdateNameForHome.OnNext(home);
        /// <inheritdoc/>
        public override void DidUpdateNameForRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didUpdateNameForRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidUpdateNameForServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didUpdateNameForServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidUpdateNameForTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didUpdateNameForTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidUpdateNameForZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didUpdateNameForZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidUpdateRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory) => _didUpdateRoom.OnNext((home, room, accessory));
        /// <inheritdoc/>
        public override void DidUpdateSupportedFeatures(global::HomeKit.HMHome home) => _didUpdateSupportedFeatures.OnNext(home);
        /// <inheritdoc/>
        public override void DidUpdateTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didUpdateTrigger.OnNext((home, trigger));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMHomeManagerDelegate"/> into Observables.
    /// </summary>
    public partial class HMHomeManagerDelegateRx : global::HomeKit.HMHomeManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> _didAddHome = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> _didRemoveHome = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHomeManagerAuthorizationStatus status)> _didUpdateAuthorizationStatus = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHomeManagerAuthorizationStatus status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager> _didUpdateHomes = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager> _didUpdatePrimaryHome = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManagerDelegate.DidAddHome(global::HomeKit.HMHomeManager, global::HomeKit.HMHome)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> DidAddHomeObs => _didAddHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManagerDelegate.DidRemoveHome(global::HomeKit.HMHomeManager, global::HomeKit.HMHome)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> DidRemoveHomeObs => _didRemoveHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManagerDelegate.DidUpdateAuthorizationStatus(global::HomeKit.HMHomeManager, global::HomeKit.HMHomeManagerAuthorizationStatus)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHomeManagerAuthorizationStatus status)> DidUpdateAuthorizationStatusObs => _didUpdateAuthorizationStatus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManagerDelegate.DidUpdateHomes(global::HomeKit.HMHomeManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManager> DidUpdateHomesObs => _didUpdateHomes;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMHomeManagerDelegate.DidUpdatePrimaryHome(global::HomeKit.HMHomeManager)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManager> DidUpdatePrimaryHomeObs => _didUpdatePrimaryHome;
        /// <inheritdoc/>
        public override void DidAddHome(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home) => _didAddHome.OnNext((manager, home));
        /// <inheritdoc/>
        public override void DidRemoveHome(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home) => _didRemoveHome.OnNext((manager, home));
        /// <inheritdoc/>
        public override void DidUpdateAuthorizationStatus(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHomeManagerAuthorizationStatus status) => _didUpdateAuthorizationStatus.OnNext((manager, status));
        /// <inheritdoc/>
        public override void DidUpdateHomes(global::HomeKit.HMHomeManager manager) => _didUpdateHomes.OnNext(manager);
        /// <inheritdoc/>
        public override void DidUpdatePrimaryHome(global::HomeKit.HMHomeManager manager) => _didUpdatePrimaryHome.OnNext(manager);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMNetworkConfigurationProfileDelegate"/> into Observables.
    /// </summary>
    public partial class HMNetworkConfigurationProfileDelegateRx : global::HomeKit.HMNetworkConfigurationProfileDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMNetworkConfigurationProfile> _didUpdateNetworkAccessMode = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMNetworkConfigurationProfile>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::HomeKit.HMNetworkConfigurationProfileDelegate.DidUpdateNetworkAccessMode(global::HomeKit.HMNetworkConfigurationProfile)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMNetworkConfigurationProfile> DidUpdateNetworkAccessModeObs => _didUpdateNetworkAccessMode;
        /// <inheritdoc/>
        public override void DidUpdateNetworkAccessMode(global::HomeKit.HMNetworkConfigurationProfile profile) => _didUpdateNetworkAccessMode.OnNext(profile);
    }
}

namespace PassKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class PKPaymentAuthorizationControllerDelegateRx : global::PassKit.PKPaymentAuthorizationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)> _didAuthorizePayment = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::System.Action<global::PassKit.PKPaymentRequestMerchantSessionUpdate> handler)> _didRequestMerchantSessionUpdate = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::System.Action<global::PassKit.PKPaymentRequestMerchantSessionUpdate> handler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)> _didSelectPaymentMethod = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion)> _didSelectShippingContact = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion)> _didSelectShippingMethod = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController> _willAuthorizePayment = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate.DidAuthorizePayment(global::PassKit.PKPaymentAuthorizationController, global::PassKit.PKPayment, global::System.Action{global::PassKit.PKPaymentAuthorizationStatus})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)> DidAuthorizePaymentObs => _didAuthorizePayment;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate.DidFinish(global::PassKit.PKPaymentAuthorizationController)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationController> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate.DidRequestMerchantSessionUpdate(global::PassKit.PKPaymentAuthorizationController, global::System.Action{global::PassKit.PKPaymentRequestMerchantSessionUpdate})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::System.Action<global::PassKit.PKPaymentRequestMerchantSessionUpdate> handler)> DidRequestMerchantSessionUpdateObs => _didRequestMerchantSessionUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectPaymentMethod(global::PassKit.PKPaymentAuthorizationController, global::PassKit.PKPaymentMethod, global::System.Action{global::PassKit.PKPaymentSummaryItem[]})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)> DidSelectPaymentMethodObs => _didSelectPaymentMethod;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectShippingContact(global::PassKit.PKPaymentAuthorizationController, global::PassKit.PKContact, global::System.Action{global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion)> DidSelectShippingContactObs => _didSelectShippingContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectShippingMethod(global::PassKit.PKPaymentAuthorizationController, global::PassKit.PKShippingMethod, global::System.Action{global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion)> DidSelectShippingMethodObs => _didSelectShippingMethod;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate.WillAuthorizePayment(global::PassKit.PKPaymentAuthorizationController)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationController> WillAuthorizePaymentObs => _willAuthorizePayment;
        /// <inheritdoc/>
        public override void DidAuthorizePayment(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion) => _didAuthorizePayment.OnNext((controller, payment, completion));
        /// <inheritdoc/>
        public override void DidFinish(global::PassKit.PKPaymentAuthorizationController controller) => _didFinish.OnNext(controller);
        /// <inheritdoc/>
        public override void DidRequestMerchantSessionUpdate(global::PassKit.PKPaymentAuthorizationController controller, global::System.Action<global::PassKit.PKPaymentRequestMerchantSessionUpdate> handler) => _didRequestMerchantSessionUpdate.OnNext((controller, handler));
        /// <inheritdoc/>
        public override void DidSelectPaymentMethod(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion) => _didSelectPaymentMethod.OnNext((controller, paymentMethod, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingContact(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion) => _didSelectShippingContact.OnNext((controller, contact, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingMethod(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion) => _didSelectShippingMethod.OnNext((controller, shippingMethod, completion));
        /// <inheritdoc/>
        public override void WillAuthorizePayment(global::PassKit.PKPaymentAuthorizationController controller) => _willAuthorizePayment.OnNext(controller);
    }
}

namespace PushKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PushKit.PKPushRegistryDelegate"/> into Observables.
    /// </summary>
    public abstract partial class PKPushRegistryDelegateRx : global::PushKit.PKPushRegistryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, string type)> _didInvalidatePushToken = new Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, string type)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion)> _didReceiveIncomingPush = new Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type)> _didUpdatePushCredentials = new Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PushKit.PKPushRegistryDelegate.DidInvalidatePushToken(global::PushKit.PKPushRegistry, string)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PushKit.PKPushRegistry registry, string type)> DidInvalidatePushTokenObs => _didInvalidatePushToken;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PushKit.PKPushRegistryDelegate.DidReceiveIncomingPush(global::PushKit.PKPushRegistry, global::PushKit.PKPushPayload, string, global::System.Action)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion)> DidReceiveIncomingPushObs => _didReceiveIncomingPush;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::PushKit.PKPushRegistryDelegate.DidUpdatePushCredentials(global::PushKit.PKPushRegistry, global::PushKit.PKPushCredentials, string)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type)> DidUpdatePushCredentialsObs => _didUpdatePushCredentials;
        /// <inheritdoc/>
        public override void DidInvalidatePushToken(global::PushKit.PKPushRegistry registry, string type) => _didInvalidatePushToken.OnNext((registry, type));
        /// <inheritdoc/>
        public override void DidReceiveIncomingPush(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion) => _didReceiveIncomingPush.OnNext((registry, payload, type, completion));
        /// <inheritdoc/>
        public override void DidUpdatePushCredentials(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type) => _didUpdatePushCredentials.OnNext((registry, credentials, type));
    }
}

namespace SceneKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNAvoidOccluderConstraintDelegate"/> into Observables.
    /// </summary>
    public partial class SCNAvoidOccluderConstraintDelegateRx : global::SceneKit.SCNAvoidOccluderConstraintDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> _didAvoidOccluder = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNAvoidOccluderConstraintDelegate.DidAvoidOccluder(global::SceneKit.SCNAvoidOccluderConstraint, global::SceneKit.SCNNode, global::SceneKit.SCNNode)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> DidAvoidOccluderObs => _didAvoidOccluder;
        /// <inheritdoc/>
        public override void DidAvoidOccluder(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node) => _didAvoidOccluder.OnNext((constraint, occluder, node));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNCameraControllerDelegate"/> into Observables.
    /// </summary>
    public partial class SCNCameraControllerDelegateRx : global::SceneKit.SCNCameraControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaDidEnd = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaWillStart = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNCameraControllerDelegate.CameraInertiaDidEnd(global::SceneKit.SCNCameraController)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaDidEndObs => _cameraInertiaDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNCameraControllerDelegate.CameraInertiaWillStart(global::SceneKit.SCNCameraController)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaWillStartObs => _cameraInertiaWillStart;
        /// <inheritdoc/>
        public override void CameraInertiaDidEnd(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaDidEnd.OnNext(cameraController);
        /// <inheritdoc/>
        public override void CameraInertiaWillStart(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaWillStart.OnNext(cameraController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SCNPhysicsContactDelegateRx : global::SceneKit.SCNPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didUpdateContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNPhysicsContactDelegate.DidBeginContact(global::SceneKit.SCNPhysicsWorld, global::SceneKit.SCNPhysicsContact)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNPhysicsContactDelegate.DidEndContact(global::SceneKit.SCNPhysicsWorld, global::SceneKit.SCNPhysicsContact)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidEndContactObs => _didEndContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNPhysicsContactDelegate.DidUpdateContact(global::SceneKit.SCNPhysicsWorld, global::SceneKit.SCNPhysicsContact)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidUpdateContactObs => _didUpdateContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didBeginContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidEndContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didEndContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidUpdateContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didUpdateContact.OnNext((world, contact));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNSceneRendererDelegate"/> into Observables.
    /// </summary>
    public partial class SCNSceneRendererDelegateRx : global::SceneKit.SCNSceneRendererDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didApplyAnimations = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _didRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _update = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _willRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNSceneRendererDelegate.DidApplyAnimations(global::SceneKit.ISCNSceneRenderer, double)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidApplyAnimationsObs => _didApplyAnimations;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNSceneRendererDelegate.DidApplyConstraints(global::SceneKit.ISCNSceneRenderer, double)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNSceneRendererDelegate.DidRenderScene(global::SceneKit.ISCNSceneRenderer, global::SceneKit.SCNScene, double)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> DidRenderSceneObs => _didRenderScene;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNSceneRendererDelegate.DidSimulatePhysics(global::SceneKit.ISCNSceneRenderer, double)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNSceneRendererDelegate.Update(global::SceneKit.ISCNSceneRenderer, double)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> UpdateObs => _update;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SceneKit.SCNSceneRendererDelegate.WillRenderScene(global::SceneKit.ISCNSceneRenderer, global::SceneKit.SCNScene, double)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> WillRenderSceneObs => _willRenderScene;
        /// <inheritdoc/>
        public override void DidApplyAnimations(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didApplyAnimations.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SceneKit.ISCNSceneRenderer renderer, double atTime) => _didApplyConstraints.OnNext((renderer, atTime));
        /// <inheritdoc/>
        public override void DidRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _didRenderScene.OnNext((renderer, scene, timeInSeconds));
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didSimulatePhysics.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void Update(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _update.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void WillRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _willRenderScene.OnNext((renderer, scene, timeInSeconds));
    }
}

namespace SpriteKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SKPhysicsContactDelegateRx : global::SpriteKit.SKPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKPhysicsContactDelegate.DidBeginContact(global::SpriteKit.SKPhysicsContact)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKPhysicsContactDelegate.DidEndContact(global::SpriteKit.SKPhysicsContact)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidEndContactObs => _didEndContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SpriteKit.SKPhysicsContact contact) => _didBeginContact.OnNext(contact);
        /// <inheritdoc/>
        public override void DidEndContact(global::SpriteKit.SKPhysicsContact contact) => _didEndContact.OnNext(contact);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKSceneDelegate"/> into Observables.
    /// </summary>
    public partial class SKSceneDelegateRx : global::SpriteKit.SKSceneDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didEvaluateActions = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didFinishUpdate = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)> _update = new Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKSceneDelegate.DidApplyConstraints(global::SpriteKit.SKScene)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKSceneDelegate.DidEvaluateActions(global::SpriteKit.SKScene)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidEvaluateActionsObs => _didEvaluateActions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKSceneDelegate.DidFinishUpdate(global::SpriteKit.SKScene)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidFinishUpdateObs => _didFinishUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKSceneDelegate.DidSimulatePhysics(global::SpriteKit.SKScene)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::SpriteKit.SKSceneDelegate.Update(double, global::SpriteKit.SKScene)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(double currentTime, global::SpriteKit.SKScene scene)> UpdateObs => _update;
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SpriteKit.SKScene scene) => _didApplyConstraints.OnNext(scene);
        /// <inheritdoc/>
        public override void DidEvaluateActions(global::SpriteKit.SKScene scene) => _didEvaluateActions.OnNext(scene);
        /// <inheritdoc/>
        public override void DidFinishUpdate(global::SpriteKit.SKScene scene) => _didFinishUpdate.OnNext(scene);
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SpriteKit.SKScene scene) => _didSimulatePhysics.OnNext(scene);
        /// <inheritdoc/>
        public override void Update(double currentTime, global::SpriteKit.SKScene scene) => _update.OnNext((currentTime, scene));
    }
}

namespace StoreKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKProductsRequestDelegate"/> into Observables.
    /// </summary>
    public abstract partial class SKProductsRequestDelegateRx : global::StoreKit.SKProductsRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::StoreKit.SKProductsRequestDelegate.ReceivedResponse(global::StoreKit.SKProductsRequest, global::StoreKit.SKProductsResponse)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <inheritdoc/>
        public override void ReceivedResponse(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response) => _receivedResponse.OnNext((request, response));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKRequestDelegate"/> into Observables.
    /// </summary>
    public partial class SKRequestDelegateRx : global::StoreKit.SKRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> _requestFailed = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest> _requestFinished = new Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::StoreKit.SKRequestDelegate.RequestFailed(global::StoreKit.SKRequest, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> RequestFailedObs => _requestFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::StoreKit.SKRequestDelegate.RequestFinished(global::StoreKit.SKRequest)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequest> RequestFinishedObs => _requestFinished;
        /// <inheritdoc/>
        public override void RequestFailed(global::StoreKit.SKRequest request, global::Foundation.NSError error) => _requestFailed.OnNext((request, error));
        /// <inheritdoc/>
        public override void RequestFinished(global::StoreKit.SKRequest request) => _requestFinished.OnNext(request);
    }
}

namespace UserNotifications
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::UserNotifications.UNUserNotificationCenterDelegate"/> into Observables.
    /// </summary>
    public partial class UNUserNotificationCenterDelegateRx : global::UserNotifications.UNUserNotificationCenterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)> _didReceiveNotificationResponse = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> _willPresentNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::UserNotifications.UNUserNotificationCenterDelegate.DidReceiveNotificationResponse(global::UserNotifications.UNUserNotificationCenter, global::UserNotifications.UNNotificationResponse, global::System.Action)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)> DidReceiveNotificationResponseObs => _didReceiveNotificationResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::UserNotifications.UNUserNotificationCenterDelegate.WillPresentNotification(global::UserNotifications.UNUserNotificationCenter, global::UserNotifications.UNNotification, global::System.Action{global::UserNotifications.UNNotificationPresentationOptions})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> WillPresentNotificationObs => _willPresentNotification;
        /// <inheritdoc/>
        public override void DidReceiveNotificationResponse(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler) => _didReceiveNotificationResponse.OnNext((center, response, completionHandler));
        /// <inheritdoc/>
        public override void WillPresentNotification(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler) => _willPresentNotification.OnNext((center, notification, completionHandler));
    }
}

namespace WatchConnectivity
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::WatchConnectivity.WCSessionDelegate"/> into Observables.
    /// </summary>
    public partial class WCSessionDelegateRx : global::WatchConnectivity.WCSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error)> _activationDidComplete = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession> _companionAppInstalledDidChange = new Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error)> _didFinishFileTransfer = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error)> _didFinishUserInfoTransfer = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext)> _didReceiveApplicationContext = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file)> _didReceiveFile = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler)> _didReceiveMessage = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler)> _didReceiveMessageData = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo)> _didReceiveUserInfo = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession> _sessionReachabilityDidChange = new Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.ActivationDidComplete(global::WatchConnectivity.WCSession, global::WatchConnectivity.WCSessionActivationState, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error)> ActivationDidCompleteObs => _activationDidComplete;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.CompanionAppInstalledDidChange(global::WatchConnectivity.WCSession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchConnectivity.WCSession> CompanionAppInstalledDidChangeObs => _companionAppInstalledDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.DidFinishFileTransfer(global::WatchConnectivity.WCSession, global::WatchConnectivity.WCSessionFileTransfer, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error)> DidFinishFileTransferObs => _didFinishFileTransfer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.DidFinishUserInfoTransfer(global::WatchConnectivity.WCSession, global::WatchConnectivity.WCSessionUserInfoTransfer, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error)> DidFinishUserInfoTransferObs => _didFinishUserInfoTransfer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.DidReceiveApplicationContext(global::WatchConnectivity.WCSession, global::Foundation.NSDictionary{global::Foundation.NSString, global::Foundation.NSObject})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext)> DidReceiveApplicationContextObs => _didReceiveApplicationContext;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.DidReceiveFile(global::WatchConnectivity.WCSession, global::WatchConnectivity.WCSessionFile)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file)> DidReceiveFileObs => _didReceiveFile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.DidReceiveMessage(global::WatchConnectivity.WCSession, global::Foundation.NSDictionary{global::Foundation.NSString, global::Foundation.NSObject}, global::WatchConnectivity.WCSessionReplyHandler)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler)> DidReceiveMessageObs => _didReceiveMessage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.DidReceiveMessageData(global::WatchConnectivity.WCSession, global::Foundation.NSData, global::WatchConnectivity.WCSessionReplyDataHandler)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler)> DidReceiveMessageDataObs => _didReceiveMessageData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.DidReceiveUserInfo(global::WatchConnectivity.WCSession, global::Foundation.NSDictionary{global::Foundation.NSString, global::Foundation.NSObject})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo)> DidReceiveUserInfoObs => _didReceiveUserInfo;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchConnectivity.WCSessionDelegate.SessionReachabilityDidChange(global::WatchConnectivity.WCSession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchConnectivity.WCSession> SessionReachabilityDidChangeObs => _sessionReachabilityDidChange;
        /// <inheritdoc/>
        public override void ActivationDidComplete(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error) => _activationDidComplete.OnNext((session, activationState, error));
        /// <inheritdoc/>
        public override void CompanionAppInstalledDidChange(global::WatchConnectivity.WCSession session) => _companionAppInstalledDidChange.OnNext(session);
        /// <inheritdoc/>
        public override void DidFinishFileTransfer(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error) => _didFinishFileTransfer.OnNext((session, fileTransfer, error));
        /// <inheritdoc/>
        public override void DidFinishUserInfoTransfer(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error) => _didFinishUserInfoTransfer.OnNext((session, userInfoTransfer, error));
        /// <inheritdoc/>
        public override void DidReceiveApplicationContext(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext) => _didReceiveApplicationContext.OnNext((session, applicationContext));
        /// <inheritdoc/>
        public override void DidReceiveFile(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file) => _didReceiveFile.OnNext((session, file));
        /// <inheritdoc/>
        public override void DidReceiveMessage(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler) => _didReceiveMessage.OnNext((session, message, replyHandler));
        /// <inheritdoc/>
        public override void DidReceiveMessageData(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler) => _didReceiveMessageData.OnNext((session, messageData, replyHandler));
        /// <inheritdoc/>
        public override void DidReceiveUserInfo(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo) => _didReceiveUserInfo.OnNext((session, userInfo));
        /// <inheritdoc/>
        public override void SessionReachabilityDidChange(global::WatchConnectivity.WCSession session) => _sessionReachabilityDidChange.OnNext(session);
    }
}

namespace WatchKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::WatchKit.WKCrownDelegate"/> into Observables.
    /// </summary>
    public partial class WKCrownDelegateRx : global::WatchKit.WKCrownDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKCrownSequencer> _crownDidBecomeIdle = new Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKCrownSequencer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchKit.WKCrownSequencer crownSequencer, double rotationalDelta)> _crownDidRotate = new Pharmacist.Common.SingleAwaitSubject<(global::WatchKit.WKCrownSequencer crownSequencer, double rotationalDelta)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKCrownDelegate.CrownDidBecomeIdle(global::WatchKit.WKCrownSequencer)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchKit.WKCrownSequencer> CrownDidBecomeIdleObs => _crownDidBecomeIdle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKCrownDelegate.CrownDidRotate(global::WatchKit.WKCrownSequencer, double)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchKit.WKCrownSequencer crownSequencer, double rotationalDelta)> CrownDidRotateObs => _crownDidRotate;
        /// <inheritdoc/>
        public override void CrownDidBecomeIdle(global::WatchKit.WKCrownSequencer crownSequencer) => _crownDidBecomeIdle.OnNext(crownSequencer);
        /// <inheritdoc/>
        public override void CrownDidRotate(global::WatchKit.WKCrownSequencer crownSequencer, double rotationalDelta) => _crownDidRotate.OnNext((crownSequencer, rotationalDelta));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WatchKit.WKExtendedRuntimeSessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class WKExtendedRuntimeSessionDelegateRx : global::WatchKit.WKExtendedRuntimeSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchKit.WKExtendedRuntimeSession extendedRuntimeSession, global::WatchKit.WKExtendedRuntimeSessionInvalidationReason reason, global::Foundation.NSError error)> _didInvalidate = new Pharmacist.Common.SingleAwaitSubject<(global::WatchKit.WKExtendedRuntimeSession extendedRuntimeSession, global::WatchKit.WKExtendedRuntimeSessionInvalidationReason reason, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKExtendedRuntimeSession> _didStart = new Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKExtendedRuntimeSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKExtendedRuntimeSession> _willExpire = new Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKExtendedRuntimeSession>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtendedRuntimeSessionDelegate.DidInvalidate(global::WatchKit.WKExtendedRuntimeSession, global::WatchKit.WKExtendedRuntimeSessionInvalidationReason, global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchKit.WKExtendedRuntimeSession extendedRuntimeSession, global::WatchKit.WKExtendedRuntimeSessionInvalidationReason reason, global::Foundation.NSError error)> DidInvalidateObs => _didInvalidate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtendedRuntimeSessionDelegate.DidStart(global::WatchKit.WKExtendedRuntimeSession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchKit.WKExtendedRuntimeSession> DidStartObs => _didStart;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtendedRuntimeSessionDelegate.WillExpire(global::WatchKit.WKExtendedRuntimeSession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchKit.WKExtendedRuntimeSession> WillExpireObs => _willExpire;
        /// <inheritdoc/>
        public override void DidInvalidate(global::WatchKit.WKExtendedRuntimeSession extendedRuntimeSession, global::WatchKit.WKExtendedRuntimeSessionInvalidationReason reason, global::Foundation.NSError error) => _didInvalidate.OnNext((extendedRuntimeSession, reason, error));
        /// <inheritdoc/>
        public override void DidStart(global::WatchKit.WKExtendedRuntimeSession extendedRuntimeSession) => _didStart.OnNext(extendedRuntimeSession);
        /// <inheritdoc/>
        public override void WillExpire(global::WatchKit.WKExtendedRuntimeSession extendedRuntimeSession) => _willExpire.OnNext(extendedRuntimeSession);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WatchKit.WKExtensionDelegate"/> into Observables.
    /// </summary>
    public partial class WKExtensionDelegateRx : global::WatchKit.WKExtensionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _applicationDidBecomeActive = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _applicationDidEnterBackground = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _applicationDidFinishLaunching = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _applicationWillEnterForeground = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _applicationWillResignActive = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _deviceOrientationDidChange = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSError> _didFailToRegisterForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSError>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UILocalNotification> _didReceiveLocalNotification = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UILocalNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSDictionary userInfo, global::System.Action<global::WatchKit.WKBackgroundFetchResult> completionHandler)> _didReceiveRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSDictionary userInfo, global::System.Action<global::WatchKit.WKBackgroundFetchResult> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSData> _didRegisterForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSData>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(string identifier, global::Foundation.NSDictionary remoteNotification, global::Foundation.NSDictionary responseInfo)> _handleAction = new Pharmacist.Common.SingleAwaitSubject<(string identifier, global::Foundation.NSDictionary remoteNotification, global::Foundation.NSDictionary responseInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _handleActiveWorkoutRecovery = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSSet<global::WatchKit.WKRefreshBackgroundTask>> _handleBackgroundTasks = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSSet<global::WatchKit.WKRefreshBackgroundTask>>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKExtendedRuntimeSession> _handleExtendedRuntimeSession = new Pharmacist.Common.SingleAwaitSubject<global::WatchKit.WKExtendedRuntimeSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)> _handleIntent = new Pharmacist.Common.SingleAwaitSubject<(global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _handleRemoteNowPlayingActivity = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSDictionary> _handleUserActivity = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSDictionary>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HealthKit.HKWorkoutConfiguration> _handleWorkoutConfiguration = new Pharmacist.Common.SingleAwaitSubject<global::HealthKit.HKWorkoutConfiguration>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CloudKit.CKShareMetadata> _userDidAcceptCloudKitShare = new Pharmacist.Common.SingleAwaitSubject<global::CloudKit.CKShareMetadata>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.ApplicationDidBecomeActive()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> ApplicationDidBecomeActiveObs => _applicationDidBecomeActive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.ApplicationDidEnterBackground()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> ApplicationDidEnterBackgroundObs => _applicationDidEnterBackground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.ApplicationDidFinishLaunching()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> ApplicationDidFinishLaunchingObs => _applicationDidFinishLaunching;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.ApplicationWillEnterForeground()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> ApplicationWillEnterForegroundObs => _applicationWillEnterForeground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.ApplicationWillResignActive()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> ApplicationWillResignActiveObs => _applicationWillResignActive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.DeviceOrientationDidChange()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> DeviceOrientationDidChangeObs => _deviceOrientationDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.DidFailToRegisterForRemoteNotifications(global::Foundation.NSError)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSError> DidFailToRegisterForRemoteNotificationsObs => _didFailToRegisterForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.DidReceiveLocalNotification(global::UIKit.UILocalNotification)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UILocalNotification> DidReceiveLocalNotificationObs => _didReceiveLocalNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.DidReceiveRemoteNotification(global::Foundation.NSDictionary, global::System.Action{global::WatchKit.WKBackgroundFetchResult})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSDictionary userInfo, global::System.Action<global::WatchKit.WKBackgroundFetchResult> completionHandler)> DidReceiveRemoteNotificationObs => _didReceiveRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.DidRegisterForRemoteNotifications(global::Foundation.NSData)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSData> DidRegisterForRemoteNotificationsObs => _didRegisterForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleAction(string, global::Foundation.NSDictionary, global::Foundation.NSDictionary)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(string identifier, global::Foundation.NSDictionary remoteNotification, global::Foundation.NSDictionary responseInfo)> HandleActionObs => _handleAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleActiveWorkoutRecovery()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> HandleActiveWorkoutRecoveryObs => _handleActiveWorkoutRecovery;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleBackgroundTasks(global::Foundation.NSSet{global::WatchKit.WKRefreshBackgroundTask})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSSet<global::WatchKit.WKRefreshBackgroundTask>> HandleBackgroundTasksObs => _handleBackgroundTasks;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleExtendedRuntimeSession(global::WatchKit.WKExtendedRuntimeSession)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchKit.WKExtendedRuntimeSession> HandleExtendedRuntimeSessionObs => _handleExtendedRuntimeSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleIntent(global::Intents.INIntent, global::System.Action{global::Intents.INIntentResponse})"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)> HandleIntentObs => _handleIntent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleRemoteNowPlayingActivity()"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> HandleRemoteNowPlayingActivityObs => _handleRemoteNowPlayingActivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleUserActivity(global::Foundation.NSDictionary)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSDictionary> HandleUserActivityObs => _handleUserActivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.HandleWorkoutConfiguration(global::HealthKit.HKWorkoutConfiguration)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HealthKit.HKWorkoutConfiguration> HandleWorkoutConfigurationObs => _handleWorkoutConfiguration;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::WatchKit.WKExtensionDelegate.UserDidAcceptCloudKitShare(global::CloudKit.CKShareMetadata)"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CloudKit.CKShareMetadata> UserDidAcceptCloudKitShareObs => _userDidAcceptCloudKitShare;
        /// <inheritdoc/>
        public override void ApplicationDidBecomeActive() => _applicationDidBecomeActive.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void ApplicationDidEnterBackground() => _applicationDidEnterBackground.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void ApplicationDidFinishLaunching() => _applicationDidFinishLaunching.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void ApplicationWillEnterForeground() => _applicationWillEnterForeground.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void ApplicationWillResignActive() => _applicationWillResignActive.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void DeviceOrientationDidChange() => _deviceOrientationDidChange.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void DidFailToRegisterForRemoteNotifications(global::Foundation.NSError error) => _didFailToRegisterForRemoteNotifications.OnNext(error);
        /// <inheritdoc/>
        public override void DidReceiveLocalNotification(global::UIKit.UILocalNotification notification) => _didReceiveLocalNotification.OnNext(notification);
        /// <inheritdoc/>
        public override void DidReceiveRemoteNotification(global::Foundation.NSDictionary userInfo, global::System.Action<global::WatchKit.WKBackgroundFetchResult> completionHandler) => _didReceiveRemoteNotification.OnNext((userInfo, completionHandler));
        /// <inheritdoc/>
        public override void DidRegisterForRemoteNotifications(global::Foundation.NSData deviceToken) => _didRegisterForRemoteNotifications.OnNext(deviceToken);
        /// <inheritdoc/>
        public override void HandleAction(string identifier, global::Foundation.NSDictionary remoteNotification, global::Foundation.NSDictionary responseInfo) => _handleAction.OnNext((identifier, remoteNotification, responseInfo));
        /// <inheritdoc/>
        public override void HandleActiveWorkoutRecovery() => _handleActiveWorkoutRecovery.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void HandleBackgroundTasks(global::Foundation.NSSet<global::WatchKit.WKRefreshBackgroundTask> backgroundTasks) => _handleBackgroundTasks.OnNext(backgroundTasks);
        /// <inheritdoc/>
        public override void HandleExtendedRuntimeSession(global::WatchKit.WKExtendedRuntimeSession extendedRuntimeSession) => _handleExtendedRuntimeSession.OnNext(extendedRuntimeSession);
        /// <inheritdoc/>
        public override void HandleIntent(global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler) => _handleIntent.OnNext((intent, completionHandler));
        /// <inheritdoc/>
        public override void HandleRemoteNowPlayingActivity() => _handleRemoteNowPlayingActivity.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void HandleUserActivity(global::Foundation.NSDictionary userInfo) => _handleUserActivity.OnNext(userInfo);
        /// <inheritdoc/>
        public override void HandleWorkoutConfiguration(global::HealthKit.HKWorkoutConfiguration workoutConfiguration) => _handleWorkoutConfiguration.OnNext(workoutConfiguration);
        /// <inheritdoc/>
        public override void UserDidAcceptCloudKitShare(global::CloudKit.CKShareMetadata cloudKitShareMetadata) => _userDidAcceptCloudKitShare.OnNext(cloudKitShareMetadata);
    }
}