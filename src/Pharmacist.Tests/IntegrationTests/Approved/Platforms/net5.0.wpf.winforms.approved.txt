
using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Microsoft.Win32
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Microsoft.Win32"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Microsoft.Win32.FileDialog"/> class.
        /// </summary>
        public static RxFileDialogEvents Events(this global::Microsoft.Win32.FileDialog item) => new RxFileDialogEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Microsoft.Win32.FileDialog"/> class as observables.
    /// </summary>
    public class RxFileDialogEvents
    {
        private readonly global::Microsoft.Win32.FileDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Microsoft.Win32.FileDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileDialogEvents(global::Microsoft.Win32.FileDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Win32.FileDialog.FileOk"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> FileOk => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FileOk += x, x => _data.FileOk -= x);
    }
}

namespace System.ComponentModel
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.ComponentModel"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.Component"/> class.
        /// </summary>
        public static RxComponentEvents Events(this global::System.ComponentModel.Component item) => new RxComponentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.ICollectionView"/> class.
        /// </summary>
        public static RxICollectionViewEvents Events(this global::System.ComponentModel.ICollectionView item) => new RxICollectionViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.Component"/> class as observables.
    /// </summary>
    public class RxComponentEvents
    {
        private readonly global::System.ComponentModel.Component _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.Component"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComponentEvents(global::System.ComponentModel.Component data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.ComponentModel.Component.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disposed += x, x => _data.Disposed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.ICollectionView"/> class as observables.
    /// </summary>
    public class RxICollectionViewEvents
    {
        private readonly global::System.ComponentModel.ICollectionView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.ICollectionView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICollectionViewEvents(global::System.ComponentModel.ICollectionView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.ComponentModel.ICollectionView.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.ComponentModel.ICollectionView.CurrentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CurrentChangingEventArgs> CurrentChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CurrentChangingEventHandler, global::System.ComponentModel.CurrentChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CurrentChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanging += x, x => _data.CurrentChanging -= x);
    }
}

namespace System.Drawing.Design
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Drawing.Design"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Drawing.Design.IPropertyValueUIService"/> class.
        /// </summary>
        public static RxIPropertyValueUIServiceEvents Events(this global::System.Drawing.Design.IPropertyValueUIService item) => new RxIPropertyValueUIServiceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Drawing.Design.IPropertyValueUIService"/> class as observables.
    /// </summary>
    public class RxIPropertyValueUIServiceEvents
    {
        private readonly global::System.Drawing.Design.IPropertyValueUIService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Drawing.Design.IPropertyValueUIService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIPropertyValueUIServiceEvents(global::System.Drawing.Design.IPropertyValueUIService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Drawing.Design.IPropertyValueUIService.PropertyUIValueItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PropertyUIValueItemsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyUIValueItemsChanged += x, x => _data.PropertyUIValueItemsChanged -= x);
    }
}

namespace System.IO.Packaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.IO.Packaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class.
        /// </summary>
        public static RxPackageDigitalSignatureManagerEvents Events(this global::System.IO.Packaging.PackageDigitalSignatureManager item) => new RxPackageDigitalSignatureManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class as observables.
    /// </summary>
    public class RxPackageDigitalSignatureManagerEvents
    {
        private readonly global::System.IO.Packaging.PackageDigitalSignatureManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPackageDigitalSignatureManagerEvents(global::System.IO.Packaging.PackageDigitalSignatureManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.Packaging.SignatureVerificationEventArgs> InvalidSignatureEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.IO.Packaging.InvalidSignatureEventHandler, global::System.IO.Packaging.SignatureVerificationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.IO.Packaging.SignatureVerificationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InvalidSignatureEvent += x, x => _data.InvalidSignatureEvent -= x);
    }
}

namespace System.Windows
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Application"/> class.
        /// </summary>
        public static RxApplicationEvents Events(this global::System.Windows.Application item) => new RxApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.ContentElement"/> class.
        /// </summary>
        public static RxContentElementEvents Events(this global::System.Windows.ContentElement item) => new RxContentElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.FrameworkContentElement"/> class.
        /// </summary>
        public static RxFrameworkContentElementEvents Events(this global::System.Windows.FrameworkContentElement item) => new RxFrameworkContentElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.FrameworkElement"/> class.
        /// </summary>
        public static RxFrameworkElementEvents Events(this global::System.Windows.FrameworkElement item) => new RxFrameworkElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Freezable"/> class.
        /// </summary>
        public static RxFreezableEvents Events(this global::System.Windows.Freezable item) => new RxFreezableEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.IInputElement"/> class.
        /// </summary>
        public static RxIInputElementEvents Events(this global::System.Windows.IInputElement item) => new RxIInputElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.PresentationSource"/> class.
        /// </summary>
        public static RxPresentationSourceEvents Events(this global::System.Windows.PresentationSource item) => new RxPresentationSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.UIElement"/> class.
        /// </summary>
        public static RxUIElementEvents Events(this global::System.Windows.UIElement item) => new RxUIElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.UIElement3D"/> class.
        /// </summary>
        public static RxUIElement3DEvents Events(this global::System.Windows.UIElement3D item) => new RxUIElement3DEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.VisualStateGroup"/> class.
        /// </summary>
        public static RxVisualStateGroupEvents Events(this global::System.Windows.VisualStateGroup item) => new RxVisualStateGroupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Window"/> class.
        /// </summary>
        public static RxWindowEvents Events(this global::System.Windows.Window item) => new RxWindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Application"/> class as observables.
    /// </summary>
    public class RxApplicationEvents
    {
        private readonly global::System.Windows.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationEvents(global::System.Windows.Application data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.DispatcherUnhandledException"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs> DispatcherUnhandledException => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherUnhandledExceptionEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DispatcherUnhandledException += x, x => _data.DispatcherUnhandledException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Exit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExitEventArgs> Exit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.ExitEventHandler, global::System.Windows.ExitEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.ExitEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Exit += x, x => _data.Exit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.SessionEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.SessionEndingCancelEventArgs> SessionEnding => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.SessionEndingCancelEventHandler, global::System.Windows.SessionEndingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.SessionEndingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SessionEnding += x, x => _data.SessionEnding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Application.Startup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.StartupEventArgs> Startup => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.StartupEventHandler, global::System.Windows.StartupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.StartupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Startup += x, x => _data.Startup -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.ContentElement"/> class as observables.
    /// </summary>
    public class RxContentElementEvents
    {
        private readonly global::System.Windows.ContentElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.ContentElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContentElementEvents(global::System.Windows.ContentElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Drop += x, x => _data.Drop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.QueryCursorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryCursor += x, x => _data.QueryCursor -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchDown += x, x => _data.TouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnter += x, x => _data.TouchEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchLeave += x, x => _data.TouchLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.ContentElement.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchUp += x, x => _data.TouchUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.FrameworkContentElement"/> class as observables.
    /// </summary>
    public class RxFrameworkContentElementEvents : global::System.Windows.RxContentElementEvents
    {
        private readonly global::System.Windows.FrameworkContentElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.FrameworkContentElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameworkContentElementEvents(global::System.Windows.FrameworkContentElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Initialized += x, x => _data.Initialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Loaded += x, x => _data.Loaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.SourceUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> SourceUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SourceUpdated += x, x => _data.SourceUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.TargetUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> TargetUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TargetUpdated += x, x => _data.TargetUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ToolTipClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipClosing += x, x => _data.ToolTipClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.ToolTipOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipOpening += x, x => _data.ToolTipOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkContentElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unloaded += x, x => _data.Unloaded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.FrameworkElement"/> class as observables.
    /// </summary>
    public class RxFrameworkElementEvents : global::System.Windows.RxUIElementEvents
    {
        private readonly global::System.Windows.FrameworkElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.FrameworkElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameworkElementEvents(global::System.Windows.FrameworkElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Initialized += x, x => _data.Initialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Loaded += x, x => _data.Loaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.RequestBringIntoView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RequestBringIntoViewEventArgs> RequestBringIntoView => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RequestBringIntoViewEventHandler, global::System.Windows.RequestBringIntoViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RequestBringIntoViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RequestBringIntoView += x, x => _data.RequestBringIntoView -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.SizeChangedEventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.SizeChangedEventHandler, global::System.Windows.SizeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.SizeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.SourceUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> SourceUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SourceUpdated += x, x => _data.SourceUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.TargetUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> TargetUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.DataTransferEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TargetUpdated += x, x => _data.TargetUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ToolTipClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipClosing += x, x => _data.ToolTipClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.ToolTipOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipOpening += x, x => _data.ToolTipOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.FrameworkElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unloaded += x, x => _data.Unloaded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Freezable"/> class as observables.
    /// </summary>
    public class RxFreezableEvents
    {
        private readonly global::System.Windows.Freezable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Freezable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFreezableEvents(global::System.Windows.Freezable data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Freezable.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.IInputElement"/> class as observables.
    /// </summary>
    public class RxIInputElementEvents
    {
        private readonly global::System.Windows.IInputElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.IInputElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIInputElementEvents(global::System.Windows.IInputElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.IInputElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.PresentationSource"/> class as observables.
    /// </summary>
    public class RxPresentationSourceEvents
    {
        private readonly global::System.Windows.PresentationSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.PresentationSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPresentationSourceEvents(global::System.Windows.PresentationSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.PresentationSource.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContentRendered += x, x => _data.ContentRendered -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.UIElement"/> class as observables.
    /// </summary>
    public class RxUIElementEvents
    {
        private readonly global::System.Windows.UIElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.UIElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUIElementEvents(global::System.Windows.UIElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Drop += x, x => _data.Drop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsHitTestVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsHitTestVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsHitTestVisibleChanged += x, x => _data.IsHitTestVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.IsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsVisibleChanged += x, x => _data.IsVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationBoundaryFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>, global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationBoundaryFeedback += x, x => _data.ManipulationBoundaryFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationCompletedEventArgs>, global::System.Windows.Input.ManipulationCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationCompleted += x, x => _data.ManipulationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationDeltaEventArgs>, global::System.Windows.Input.ManipulationDeltaEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationDeltaEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationDelta += x, x => _data.ManipulationDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationInertiaStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationInertiaStartingEventArgs>, global::System.Windows.Input.ManipulationInertiaStartingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationInertiaStartingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationInertiaStarting += x, x => _data.ManipulationInertiaStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationStartedEventArgs>, global::System.Windows.Input.ManipulationStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationStartedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationStarted += x, x => _data.ManipulationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.ManipulationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.ManipulationStartingEventArgs>, global::System.Windows.Input.ManipulationStartingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ManipulationStartingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ManipulationStarting += x, x => _data.ManipulationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.QueryCursorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryCursor += x, x => _data.QueryCursor -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchDown += x, x => _data.TouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnter += x, x => _data.TouchEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchLeave += x, x => _data.TouchLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchUp += x, x => _data.TouchUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.UIElement3D"/> class as observables.
    /// </summary>
    public class RxUIElement3DEvents
    {
        private readonly global::System.Windows.UIElement3D _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.UIElement3D"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUIElement3DEvents(global::System.Windows.UIElement3D data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Drop += x, x => _data.Drop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsHitTestVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsHitTestVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsHitTestVisibleChanged += x, x => _data.IsHitTestVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.IsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsVisibleChanged += x, x => _data.IsVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.KeyboardFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.QueryCursorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryCursor += x, x => _data.QueryCursor -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusDown += x, x => _data.StylusDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusEnter += x, x => _data.StylusEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusInRange += x, x => _data.StylusInRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusLeave += x, x => _data.StylusLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusMove += x, x => _data.StylusMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusSystemGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.StylusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusUp += x, x => _data.StylusUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TextCompositionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchDown += x, x => _data.TouchDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnter += x, x => _data.TouchEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchLeave += x, x => _data.TouchLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.UIElement3D.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchUp += x, x => _data.TouchUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.VisualStateGroup"/> class as observables.
    /// </summary>
    public class RxVisualStateGroupEvents
    {
        private readonly global::System.Windows.VisualStateGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.VisualStateGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualStateGroupEvents(global::System.Windows.VisualStateGroup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.VisualStateGroup.CurrentStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.VisualStateChangedEventArgs> CurrentStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.VisualStateChangedEventArgs>, global::System.Windows.VisualStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.VisualStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateChanged += x, x => _data.CurrentStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.VisualStateGroup.CurrentStateChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.VisualStateChangedEventArgs> CurrentStateChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.VisualStateChangedEventArgs>, global::System.Windows.VisualStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.VisualStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateChanging += x, x => _data.CurrentStateChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Window"/> class as observables.
    /// </summary>
    public class RxWindowEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWindowEvents(global::System.Windows.Window data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContentRendered += x, x => _data.ContentRendered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DpiChangedEventHandler, global::System.Windows.DpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.SourceInitialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SourceInitialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SourceInitialized += x, x => _data.SourceInitialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Window.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace System.Windows.Annotations
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Annotations"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Annotations.Annotation"/> class.
        /// </summary>
        public static RxAnnotationEvents Events(this global::System.Windows.Annotations.Annotation item) => new RxAnnotationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Annotations.Annotation"/> class as observables.
    /// </summary>
    public class RxAnnotationEvents
    {
        private readonly global::System.Windows.Annotations.Annotation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Annotations.Annotation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAnnotationEvents(global::System.Windows.Annotations.Annotation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Annotation.AnchorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> AnchorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AnchorChanged += x, x => _data.AnchorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Annotation.AuthorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs> AuthorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationAuthorChangedEventHandler, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AuthorChanged += x, x => _data.AuthorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Annotation.CargoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> CargoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CargoChanged += x, x => _data.CargoChanged -= x);
    }
}

namespace System.Windows.Annotations.Storage
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Annotations.Storage"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class.
        /// </summary>
        public static RxAnnotationStoreEvents Events(this global::System.Windows.Annotations.Storage.AnnotationStore item) => new RxAnnotationStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class as observables.
    /// </summary>
    public class RxAnnotationStoreEvents
    {
        private readonly global::System.Windows.Annotations.Storage.AnnotationStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAnnotationStoreEvents(global::System.Windows.Annotations.Storage.AnnotationStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.AnchorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> AnchorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AnchorChanged += x, x => _data.AnchorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.AuthorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs> AuthorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationAuthorChangedEventHandler, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AuthorChanged += x, x => _data.AuthorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.CargoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> CargoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CargoChanged += x, x => _data.CargoChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore.StoreContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs> StoreContentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Annotations.Storage.StoreContentChangedEventHandler, global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StoreContentChanged += x, x => _data.StoreContentChanged -= x);
    }
}

namespace System.Windows.Controls
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Controls"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Calendar"/> class.
        /// </summary>
        public static RxCalendarEvents Events(this global::System.Windows.Controls.Calendar item) => new RxCalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class.
        /// </summary>
        public static RxCalendarDateRangeEvents Events(this global::System.Windows.Controls.CalendarDateRange item) => new RxCalendarDateRangeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ComboBox"/> class.
        /// </summary>
        public static RxComboBoxEvents Events(this global::System.Windows.Controls.ComboBox item) => new RxComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ContextMenu"/> class.
        /// </summary>
        public static RxContextMenuEvents Events(this global::System.Windows.Controls.ContextMenu item) => new RxContextMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Control"/> class.
        /// </summary>
        public static RxControlEvents Events(this global::System.Windows.Controls.Control item) => new RxControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGrid"/> class.
        /// </summary>
        public static RxDataGridEvents Events(this global::System.Windows.Controls.DataGrid item) => new RxDataGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridCell"/> class.
        /// </summary>
        public static RxDataGridCellEvents Events(this global::System.Windows.Controls.DataGridCell item) => new RxDataGridCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class.
        /// </summary>
        public static RxDataGridColumnEvents Events(this global::System.Windows.Controls.DataGridColumn item) => new RxDataGridColumnEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridRow"/> class.
        /// </summary>
        public static RxDataGridRowEvents Events(this global::System.Windows.Controls.DataGridRow item) => new RxDataGridRowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DatePicker"/> class.
        /// </summary>
        public static RxDatePickerEvents Events(this global::System.Windows.Controls.DatePicker item) => new RxDatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Expander"/> class.
        /// </summary>
        public static RxExpanderEvents Events(this global::System.Windows.Controls.Expander item) => new RxExpanderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Frame"/> class.
        /// </summary>
        public static RxFrameEvents Events(this global::System.Windows.Controls.Frame item) => new RxFrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Image"/> class.
        /// </summary>
        public static RxImageEvents Events(this global::System.Windows.Controls.Image item) => new RxImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.InkCanvas"/> class.
        /// </summary>
        public static RxInkCanvasEvents Events(this global::System.Windows.Controls.InkCanvas item) => new RxInkCanvasEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        public static RxItemContainerGeneratorEvents Events(this global::System.Windows.Controls.ItemContainerGenerator item) => new RxItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class.
        /// </summary>
        public static RxListBoxItemEvents Events(this global::System.Windows.Controls.ListBoxItem item) => new RxListBoxItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.MediaElement"/> class.
        /// </summary>
        public static RxMediaElementEvents Events(this global::System.Windows.Controls.MediaElement item) => new RxMediaElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.MenuItem"/> class.
        /// </summary>
        public static RxMenuItemEvents Events(this global::System.Windows.Controls.MenuItem item) => new RxMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.PasswordBox"/> class.
        /// </summary>
        public static RxPasswordBoxEvents Events(this global::System.Windows.Controls.PasswordBox item) => new RxPasswordBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class.
        /// </summary>
        public static RxScrollViewerEvents Events(this global::System.Windows.Controls.ScrollViewer item) => new RxScrollViewerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ToolTip"/> class.
        /// </summary>
        public static RxToolTipEvents Events(this global::System.Windows.Controls.ToolTip item) => new RxToolTipEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.TreeView"/> class.
        /// </summary>
        public static RxTreeViewEvents Events(this global::System.Windows.Controls.TreeView item) => new RxTreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class.
        /// </summary>
        public static RxTreeViewItemEvents Events(this global::System.Windows.Controls.TreeViewItem item) => new RxTreeViewItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.WebBrowser"/> class.
        /// </summary>
        public static RxWebBrowserEvents Events(this global::System.Windows.Controls.WebBrowser item) => new RxWebBrowserEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Calendar"/> class as observables.
    /// </summary>
    public class RxCalendarEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Calendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Calendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarEvents(global::System.Windows.Controls.Calendar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.DisplayDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.CalendarDateChangedEventArgs> DisplayDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.CalendarDateChangedEventArgs>, global::System.Windows.Controls.CalendarDateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.CalendarDateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayDateChanged += x, x => _data.DisplayDateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.DisplayModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.CalendarModeChangedEventArgs> DisplayModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.CalendarModeChangedEventArgs>, global::System.Windows.Controls.CalendarModeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.CalendarModeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayModeChanged += x, x => _data.DisplayModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.SelectedDatesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectedDatesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.SelectionChangedEventArgs>, global::System.Windows.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedDatesChanged += x, x => _data.SelectedDatesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Calendar.SelectionModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionModeChanged += x, x => _data.SelectionModeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class as observables.
    /// </summary>
    public class RxCalendarDateRangeEvents
    {
        private readonly global::System.Windows.Controls.CalendarDateRange _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarDateRangeEvents(global::System.Windows.Controls.CalendarDateRange data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.CalendarDateRange.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ComboBox"/> class as observables.
    /// </summary>
    public class RxComboBoxEvents : global::System.Windows.Controls.Primitives.RxSelectorEvents
    {
        private readonly global::System.Windows.Controls.ComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComboBoxEvents(global::System.Windows.Controls.ComboBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ComboBox.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ContextMenu"/> class as observables.
    /// </summary>
    public class RxContextMenuEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ContextMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ContextMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContextMenuEvents(global::System.Windows.Controls.ContextMenu data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ContextMenu.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ContextMenu.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Control"/> class as observables.
    /// </summary>
    public class RxControlEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Control _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Control"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxControlEvents(global::System.Windows.Controls.Control data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Control.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Control.PreviewMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.MouseButtonEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewMouseDoubleClick += x, x => _data.PreviewMouseDoubleClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGrid"/> class as observables.
    /// </summary>
    public class RxDataGridEvents : global::System.Windows.Controls.Primitives.RxSelectorEvents
    {
        private readonly global::System.Windows.Controls.DataGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridEvents(global::System.Windows.Controls.DataGrid data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.AddingNewItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.AddingNewItemEventArgs> AddingNewItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.AddingNewItemEventArgs>, global::System.Windows.Controls.AddingNewItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.AddingNewItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AddingNewItem += x, x => _data.AddingNewItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.AutoGeneratedColumns"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoGeneratedColumns => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoGeneratedColumns += x, x => _data.AutoGeneratedColumns -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.AutoGeneratingColumn"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs> AutoGeneratingColumn => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs>, global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoGeneratingColumn += x, x => _data.AutoGeneratingColumn -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.BeginningEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridBeginningEditEventArgs> BeginningEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridBeginningEditEventArgs>, global::System.Windows.Controls.DataGridBeginningEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridBeginningEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeginningEdit += x, x => _data.BeginningEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.CellEditEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellEditEndingEventArgs> CellEditEnding => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridCellEditEndingEventArgs>, global::System.Windows.Controls.DataGridCellEditEndingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridCellEditEndingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellEditEnding += x, x => _data.CellEditEnding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnEventArgs> ColumnDisplayIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnEventArgs>, global::System.Windows.Controls.DataGridColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDisplayIndexChanged += x, x => _data.ColumnDisplayIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnHeaderDragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragCompletedEventArgs> ColumnHeaderDragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragCompletedEventArgs>, global::System.Windows.Controls.Primitives.DragCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderDragCompleted += x, x => _data.ColumnHeaderDragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnHeaderDragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragDeltaEventArgs> ColumnHeaderDragDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragDeltaEventArgs>, global::System.Windows.Controls.Primitives.DragDeltaEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragDeltaEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderDragDelta += x, x => _data.ColumnHeaderDragDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnHeaderDragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragStartedEventArgs> ColumnHeaderDragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragStartedEventArgs>, global::System.Windows.Controls.Primitives.DragStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragStartedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderDragStarted += x, x => _data.ColumnHeaderDragStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnEventArgs> ColumnReordered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnEventArgs>, global::System.Windows.Controls.DataGridColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnReordered += x, x => _data.ColumnReordered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.ColumnReordering"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnReorderingEventArgs> ColumnReordering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnReorderingEventArgs>, global::System.Windows.Controls.DataGridColumnReorderingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridColumnReorderingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnReordering += x, x => _data.ColumnReordering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.CopyingRowClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowClipboardEventArgs> CopyingRowClipboardContent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowClipboardEventArgs>, global::System.Windows.Controls.DataGridRowClipboardEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowClipboardEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CopyingRowClipboardContent += x, x => _data.CopyingRowClipboardContent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.CurrentCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentCellChanged += x, x => _data.CurrentCellChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.InitializingNewItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InitializingNewItemEventArgs> InitializingNewItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InitializingNewItemEventHandler, global::System.Windows.Controls.InitializingNewItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InitializingNewItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InitializingNewItem += x, x => _data.InitializingNewItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.LoadingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEventArgs> LoadingRow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEventArgs>, global::System.Windows.Controls.DataGridRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadingRow += x, x => _data.LoadingRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.LoadingRowDetails"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> LoadingRowDetails => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowDetailsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadingRowDetails += x, x => _data.LoadingRowDetails -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.PreparingCellForEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs> PreparingCellForEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs>, global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreparingCellForEdit += x, x => _data.PreparingCellForEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> RowDetailsVisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowDetailsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowDetailsVisibilityChanged += x, x => _data.RowDetailsVisibilityChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.RowEditEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEditEndingEventArgs> RowEditEnding => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEditEndingEventArgs>, global::System.Windows.Controls.DataGridRowEditEndingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowEditEndingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowEditEnding += x, x => _data.RowEditEnding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.SelectedCellsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectedCellsChangedEventArgs> SelectedCellsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.SelectedCellsChangedEventHandler, global::System.Windows.Controls.SelectedCellsChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectedCellsChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedCellsChanged += x, x => _data.SelectedCellsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.Sorting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridSortingEventArgs> Sorting => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.DataGridSortingEventHandler, global::System.Windows.Controls.DataGridSortingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridSortingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Sorting += x, x => _data.Sorting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.UnloadingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEventArgs> UnloadingRow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEventArgs>, global::System.Windows.Controls.DataGridRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnloadingRow += x, x => _data.UnloadingRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGrid.UnloadingRowDetails"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> UnloadingRowDetails => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridRowDetailsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnloadingRowDetails += x, x => _data.UnloadingRowDetails -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridCell"/> class as observables.
    /// </summary>
    public class RxDataGridCellEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.DataGridCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridCellEvents(global::System.Windows.Controls.DataGridCell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridCell.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridCell.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class as observables.
    /// </summary>
    public class RxDataGridColumnEvents
    {
        private readonly global::System.Windows.Controls.DataGridColumn _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridColumnEvents(global::System.Windows.Controls.DataGridColumn data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridColumn.CopyingCellClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellClipboardEventArgs> CopyingCellClipboardContent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridCellClipboardEventArgs>, global::System.Windows.Controls.DataGridCellClipboardEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridCellClipboardEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CopyingCellClipboardContent += x, x => _data.CopyingCellClipboardContent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridColumn.PastingCellClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellClipboardEventArgs> PastingCellClipboardContent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DataGridCellClipboardEventArgs>, global::System.Windows.Controls.DataGridCellClipboardEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DataGridCellClipboardEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PastingCellClipboardContent += x, x => _data.PastingCellClipboardContent -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridRow"/> class as observables.
    /// </summary>
    public class RxDataGridRowEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.DataGridRow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridRow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridRowEvents(global::System.Windows.Controls.DataGridRow data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridRow.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DataGridRow.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DatePicker"/> class as observables.
    /// </summary>
    public class RxDatePickerEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickerEvents(global::System.Windows.Controls.DatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.CalendarClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> CalendarClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarClosed += x, x => _data.CalendarClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.CalendarOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> CalendarOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarOpened += x, x => _data.CalendarOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.DateValidationError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs> DateValidationError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs>, global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DateValidationError += x, x => _data.DateValidationError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.DatePicker.SelectedDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectedDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Controls.SelectionChangedEventArgs>, global::System.Windows.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedDateChanged += x, x => _data.SelectedDateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Expander"/> class as observables.
    /// </summary>
    public class RxExpanderEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Expander _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Expander"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxExpanderEvents(global::System.Windows.Controls.Expander data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Expander.Collapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Collapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Collapsed += x, x => _data.Collapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Expander.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Expanded += x, x => _data.Expanded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Frame"/> class as observables.
    /// </summary>
    public class RxFrameEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Frame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Frame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameEvents(global::System.Windows.Controls.Frame data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContentRendered += x, x => _data.ContentRendered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Frame.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Image"/> class as observables.
    /// </summary>
    public class RxImageEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Image _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Image"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImageEvents(global::System.Windows.Controls.Image data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Image.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DpiChangedEventHandler, global::System.Windows.DpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Image.ImageFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExceptionRoutedEventArgs> ImageFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.ExceptionRoutedEventArgs>, global::System.Windows.ExceptionRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.ExceptionRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImageFailed += x, x => _data.ImageFailed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.InkCanvas"/> class as observables.
    /// </summary>
    public class RxInkCanvasEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.InkCanvas _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.InkCanvas"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkCanvasEvents(global::System.Windows.Controls.InkCanvas data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.ActiveEditingModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> ActiveEditingModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ActiveEditingModeChanged += x, x => _data.ActiveEditingModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.DrawingAttributesReplacedEventArgs> DefaultDrawingAttributesReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.DrawingAttributesReplacedEventHandler, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DefaultDrawingAttributesReplaced += x, x => _data.DefaultDrawingAttributesReplaced -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.EditingModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> EditingModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditingModeChanged += x, x => _data.EditingModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.EditingModeInvertedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> EditingModeInvertedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditingModeInvertedChanged += x, x => _data.EditingModeInvertedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.Gesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasGestureEventArgs> Gesture => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasGestureEventHandler, global::System.Windows.Controls.InkCanvasGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasGestureEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Gesture += x, x => _data.Gesture -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs> SelectionChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasSelectionChangingEventHandler, global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanging += x, x => _data.SelectionChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionMoved += x, x => _data.SelectionMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs> SelectionMoving => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasSelectionEditingEventHandler, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionMoving += x, x => _data.SelectionMoving -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionResized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionResized += x, x => _data.SelectionResized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.SelectionResizing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs> SelectionResizing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasSelectionEditingEventHandler, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionResizing += x, x => _data.SelectionResizing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokeCollected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs> StrokeCollected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasStrokeCollectedEventHandler, global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeCollected += x, x => _data.StrokeCollected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokeErased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> StrokeErased => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeErased += x, x => _data.StrokeErased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokeErasing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs> StrokeErasing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasStrokeErasingEventHandler, global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeErasing += x, x => _data.StrokeErasing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.InkCanvas.StrokesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs> StrokesReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.InkCanvasStrokesReplacedEventHandler, global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokesReplaced += x, x => _data.StrokesReplaced -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class as observables.
    /// </summary>
    public class RxItemContainerGeneratorEvents
    {
        private readonly global::System.Windows.Controls.ItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemContainerGeneratorEvents(global::System.Windows.Controls.ItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.ItemsChangedEventArgs> ItemsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.ItemsChangedEventHandler, global::System.Windows.Controls.Primitives.ItemsChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.ItemsChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemsChanged += x, x => _data.ItemsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ItemContainerGenerator.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class as observables.
    /// </summary>
    public class RxListBoxItemEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ListBoxItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListBoxItemEvents(global::System.Windows.Controls.ListBoxItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ListBoxItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ListBoxItem.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.MediaElement"/> class as observables.
    /// </summary>
    public class RxMediaElementEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.MediaElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.MediaElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaElementEvents(global::System.Windows.Controls.MediaElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> BufferingEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> BufferingStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> MediaEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaEnded += x, x => _data.MediaEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExceptionRoutedEventArgs> MediaFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.ExceptionRoutedEventArgs>, global::System.Windows.ExceptionRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.ExceptionRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaFailed += x, x => _data.MediaFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> MediaOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaOpened += x, x => _data.MediaOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MediaElement.ScriptCommand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.MediaScriptCommandRoutedEventArgs> ScriptCommand => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.MediaScriptCommandRoutedEventArgs>, global::System.Windows.MediaScriptCommandRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.MediaScriptCommandRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScriptCommand += x, x => _data.ScriptCommand -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.MenuItem"/> class as observables.
    /// </summary>
    public class RxMenuItemEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuItemEvents(global::System.Windows.Controls.MenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Checked += x, x => _data.Checked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.SubmenuClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SubmenuClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SubmenuClosed += x, x => _data.SubmenuClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.SubmenuOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SubmenuOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SubmenuOpened += x, x => _data.SubmenuOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.MenuItem.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unchecked += x, x => _data.Unchecked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.PasswordBox"/> class as observables.
    /// </summary>
    public class RxPasswordBoxEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.PasswordBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.PasswordBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPasswordBoxEvents(global::System.Windows.Controls.PasswordBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.PasswordBox.PasswordChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> PasswordChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PasswordChanged += x, x => _data.PasswordChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class as observables.
    /// </summary>
    public class RxScrollViewerEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ScrollViewer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollViewerEvents(global::System.Windows.Controls.ScrollViewer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ScrollViewer.ScrollChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ScrollChangedEventArgs> ScrollChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.ScrollChangedEventHandler, global::System.Windows.Controls.ScrollChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.ScrollChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScrollChanged += x, x => _data.ScrollChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ToolTip"/> class as observables.
    /// </summary>
    public class RxToolTipEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.ToolTip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ToolTip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolTipEvents(global::System.Windows.Controls.ToolTip data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ToolTip.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.ToolTip.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.TreeView"/> class as observables.
    /// </summary>
    public class RxTreeViewEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewEvents(global::System.Windows.Controls.TreeView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeView.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedPropertyChangedEventArgs<object>> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedPropertyChangedEventHandler<object>, global::System.Windows.RoutedPropertyChangedEventArgs<object>>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedPropertyChangedEventArgs<object> e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class as observables.
    /// </summary>
    public class RxTreeViewItemEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.TreeViewItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewItemEvents(global::System.Windows.Controls.TreeViewItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Collapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Collapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Collapsed += x, x => _data.Collapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Expanded += x, x => _data.Expanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.TreeViewItem.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unselected += x, x => _data.Unselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.WebBrowser"/> class as observables.
    /// </summary>
    public class RxWebBrowserEvents : global::System.Windows.Interop.RxHwndHostEvents
    {
        private readonly global::System.Windows.Controls.WebBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.WebBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebBrowserEvents(global::System.Windows.Controls.WebBrowser data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.WebBrowser.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.WebBrowser.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.WebBrowser.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
    }
}

namespace System.Windows.Controls.Primitives
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Controls.Primitives"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        public static RxButtonBaseEvents Events(this global::System.Windows.Controls.Primitives.ButtonBase item) => new RxButtonBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class.
        /// </summary>
        public static RxDocumentPageViewEvents Events(this global::System.Windows.Controls.Primitives.DocumentPageView item) => new RxDocumentPageViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class.
        /// </summary>
        public static RxDocumentViewerBaseEvents Events(this global::System.Windows.Controls.Primitives.DocumentViewerBase item) => new RxDocumentViewerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class.
        /// </summary>
        public static RxPopupEvents Events(this global::System.Windows.Controls.Primitives.Popup item) => new RxPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        public static RxRangeBaseEvents Events(this global::System.Windows.Controls.Primitives.RangeBase item) => new RxRangeBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        public static RxScrollBarEvents Events(this global::System.Windows.Controls.Primitives.ScrollBar item) => new RxScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class.
        /// </summary>
        public static RxSelectorEvents Events(this global::System.Windows.Controls.Primitives.Selector item) => new RxSelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class.
        /// </summary>
        public static RxTextBoxBaseEvents Events(this global::System.Windows.Controls.Primitives.TextBoxBase item) => new RxTextBoxBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class.
        /// </summary>
        public static RxThumbEvents Events(this global::System.Windows.Controls.Primitives.Thumb item) => new RxThumbEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        public static RxToggleButtonEvents Events(this global::System.Windows.Controls.Primitives.ToggleButton item) => new RxToggleButtonEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class as observables.
    /// </summary>
    public class RxButtonBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ButtonBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonBaseEvents(global::System.Windows.Controls.Primitives.ButtonBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class as observables.
    /// </summary>
    public class RxDocumentPageViewEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Primitives.DocumentPageView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentPageViewEvents(global::System.Windows.Controls.Primitives.DocumentPageView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView.PageConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageConnected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageConnected += x, x => _data.PageConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView.PageDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageDisconnected += x, x => _data.PageDisconnected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class as observables.
    /// </summary>
    public class RxDocumentViewerBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.DocumentViewerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentViewerBaseEvents(global::System.Windows.Controls.Primitives.DocumentViewerBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase.PageViewsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageViewsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageViewsChanged += x, x => _data.PageViewsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class as observables.
    /// </summary>
    public class RxPopupEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPopupEvents(global::System.Windows.Controls.Primitives.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Popup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Popup.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class as observables.
    /// </summary>
    public class RxRangeBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.RangeBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRangeBaseEvents(global::System.Windows.Controls.Primitives.RangeBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.RangeBase.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedPropertyChangedEventArgs<double>> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedPropertyChangedEventHandler<double>, global::System.Windows.RoutedPropertyChangedEventArgs<double>>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedPropertyChangedEventArgs<double> e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class as observables.
    /// </summary>
    public class RxScrollBarEvents : global::System.Windows.Controls.Primitives.RxRangeBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollBarEvents(global::System.Windows.Controls.Primitives.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.ScrollEventHandler, global::System.Windows.Controls.Primitives.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class as observables.
    /// </summary>
    public class RxSelectorEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Selector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSelectorEvents(global::System.Windows.Controls.Primitives.Selector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Selector.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.SelectionChangedEventHandler, global::System.Windows.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class as observables.
    /// </summary>
    public class RxTextBoxBaseEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.TextBoxBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBoxBaseEvents(global::System.Windows.Controls.Primitives.TextBoxBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.TextChangedEventHandler, global::System.Windows.Controls.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class as observables.
    /// </summary>
    public class RxThumbEvents : global::System.Windows.Controls.RxControlEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Thumb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxThumbEvents(global::System.Windows.Controls.Primitives.Thumb data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Thumb.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragCompletedEventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.DragCompletedEventHandler, global::System.Windows.Controls.Primitives.DragCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragCompleted += x, x => _data.DragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Thumb.DragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragDeltaEventArgs> DragDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.DragDeltaEventHandler, global::System.Windows.Controls.Primitives.DragDeltaEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragDeltaEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDelta += x, x => _data.DragDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.Thumb.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragStartedEventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Controls.Primitives.DragStartedEventHandler, global::System.Windows.Controls.Primitives.DragStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Controls.Primitives.DragStartedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragStarted += x, x => _data.DragStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class as observables.
    /// </summary>
    public class RxToggleButtonEvents : global::System.Windows.Controls.Primitives.RxButtonBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ToggleButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToggleButtonEvents(global::System.Windows.Controls.Primitives.ToggleButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Checked += x, x => _data.Checked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton.Indeterminate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Indeterminate => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Indeterminate += x, x => _data.Indeterminate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unchecked += x, x => _data.Unchecked -= x);
    }
}

namespace System.Windows.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Data"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.CollectionView"/> class.
        /// </summary>
        public static RxCollectionViewEvents Events(this global::System.Windows.Data.CollectionView item) => new RxCollectionViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class.
        /// </summary>
        public static RxCollectionViewSourceEvents Events(this global::System.Windows.Data.CollectionViewSource item) => new RxCollectionViewSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class.
        /// </summary>
        public static RxDataSourceProviderEvents Events(this global::System.Windows.Data.DataSourceProvider item) => new RxDataSourceProviderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.CollectionView"/> class as observables.
    /// </summary>
    public class RxCollectionViewEvents
    {
        private readonly global::System.Windows.Data.CollectionView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.CollectionView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCollectionViewEvents(global::System.Windows.Data.CollectionView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.CollectionView.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.CollectionView.CurrentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CurrentChangingEventArgs> CurrentChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CurrentChangingEventHandler, global::System.ComponentModel.CurrentChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CurrentChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanging += x, x => _data.CurrentChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class as observables.
    /// </summary>
    public class RxCollectionViewSourceEvents
    {
        private readonly global::System.Windows.Data.CollectionViewSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCollectionViewSourceEvents(global::System.Windows.Data.CollectionViewSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.CollectionViewSource.Filter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.FilterEventArgs> Filter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Data.FilterEventHandler, global::System.Windows.Data.FilterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.FilterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Filter += x, x => _data.Filter -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class as observables.
    /// </summary>
    public class RxDataSourceProviderEvents
    {
        private readonly global::System.Windows.Data.DataSourceProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataSourceProviderEvents(global::System.Windows.Data.DataSourceProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.DataSourceProvider.DataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataChanged += x, x => _data.DataChanged -= x);
    }
}

namespace System.Windows.Documents
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Documents"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentPage"/> class.
        /// </summary>
        public static RxDocumentPageEvents Events(this global::System.Windows.Documents.DocumentPage item) => new RxDocumentPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class.
        /// </summary>
        public static RxDocumentPaginatorEvents Events(this global::System.Windows.Documents.DocumentPaginator item) => new RxDocumentPaginatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class.
        /// </summary>
        public static RxDocumentReferenceCollectionEvents Events(this global::System.Windows.Documents.DocumentReferenceCollection item) => new RxDocumentReferenceCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class.
        /// </summary>
        public static RxDynamicDocumentPaginatorEvents Events(this global::System.Windows.Documents.DynamicDocumentPaginator item) => new RxDynamicDocumentPaginatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.Hyperlink"/> class.
        /// </summary>
        public static RxHyperlinkEvents Events(this global::System.Windows.Documents.Hyperlink item) => new RxHyperlinkEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.PageContent"/> class.
        /// </summary>
        public static RxPageContentEvents Events(this global::System.Windows.Documents.PageContent item) => new RxPageContentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.TextRange"/> class.
        /// </summary>
        public static RxTextRangeEvents Events(this global::System.Windows.Documents.TextRange item) => new RxTextRangeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentPage"/> class as observables.
    /// </summary>
    public class RxDocumentPageEvents
    {
        private readonly global::System.Windows.Documents.DocumentPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentPageEvents(global::System.Windows.Documents.DocumentPage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPage.PageDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageDestroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PageDestroyed += x, x => _data.PageDestroyed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class as observables.
    /// </summary>
    public class RxDocumentPaginatorEvents
    {
        private readonly global::System.Windows.Documents.DocumentPaginator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentPaginatorEvents(global::System.Windows.Documents.DocumentPaginator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> ComputePageCountCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.AsyncCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ComputePageCountCompleted += x, x => _data.ComputePageCountCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPaginator.GetPageCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageCompletedEventArgs> GetPageCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.GetPageCompletedEventHandler, global::System.Windows.Documents.GetPageCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.GetPageCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GetPageCompleted += x, x => _data.GetPageCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentPaginator.PagesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.PagesChangedEventArgs> PagesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.PagesChangedEventHandler, global::System.Windows.Documents.PagesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.PagesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PagesChanged += x, x => _data.PagesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class as observables.
    /// </summary>
    public class RxDocumentReferenceCollectionEvents
    {
        private readonly global::System.Windows.Documents.DocumentReferenceCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDocumentReferenceCollectionEvents(global::System.Windows.Documents.DocumentReferenceCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class as observables.
    /// </summary>
    public class RxDynamicDocumentPaginatorEvents : global::System.Windows.Documents.RxDocumentPaginatorEvents
    {
        private readonly global::System.Windows.Documents.DynamicDocumentPaginator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDynamicDocumentPaginatorEvents(global::System.Windows.Documents.DynamicDocumentPaginator data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageNumberCompletedEventArgs> GetPageNumberCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.GetPageNumberCompletedEventHandler, global::System.Windows.Documents.GetPageNumberCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.GetPageNumberCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GetPageNumberCompleted += x, x => _data.GetPageNumberCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaginationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaginationCompleted += x, x => _data.PaginationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.PaginationProgressEventArgs> PaginationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.PaginationProgressEventHandler, global::System.Windows.Documents.PaginationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.PaginationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaginationProgress += x, x => _data.PaginationProgress -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.Hyperlink"/> class as observables.
    /// </summary>
    public class RxHyperlinkEvents : global::System.Windows.RxFrameworkContentElementEvents
    {
        private readonly global::System.Windows.Documents.Hyperlink _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.Hyperlink"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHyperlinkEvents(global::System.Windows.Documents.Hyperlink data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Hyperlink.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Hyperlink.RequestNavigate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.RequestNavigateEventArgs> RequestNavigate => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.RequestNavigateEventHandler, global::System.Windows.Navigation.RequestNavigateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.RequestNavigateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RequestNavigate += x, x => _data.RequestNavigate -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.PageContent"/> class as observables.
    /// </summary>
    public class RxPageContentEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Documents.PageContent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.PageContent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPageContentEvents(global::System.Windows.Documents.PageContent data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.PageContent.GetPageRootCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageRootCompletedEventArgs> GetPageRootCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.GetPageRootCompletedEventHandler, global::System.Windows.Documents.GetPageRootCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.GetPageRootCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GetPageRootCompleted += x, x => _data.GetPageRootCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.TextRange"/> class as observables.
    /// </summary>
    public class RxTextRangeEvents
    {
        private readonly global::System.Windows.Documents.TextRange _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.TextRange"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextRangeEvents(global::System.Windows.Documents.TextRange data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.TextRange.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }
}

namespace System.Windows.Documents.Serialization
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Documents.Serialization"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class.
        /// </summary>
        public static RxSerializerWriterEvents Events(this global::System.Windows.Documents.Serialization.SerializerWriter item) => new RxSerializerWriterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class as observables.
    /// </summary>
    public class RxSerializerWriterEvents
    {
        private readonly global::System.Windows.Documents.Serialization.SerializerWriter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSerializerWriterEvents(global::System.Windows.Documents.Serialization.SerializerWriter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingCancelledEventArgs> WritingCancelled => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingCancelledEventHandler, global::System.Windows.Documents.Serialization.WritingCancelledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingCancelledEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingCancelled += x, x => _data.WritingCancelled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingCompletedEventArgs> WritingCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingCompletedEventHandler, global::System.Windows.Documents.Serialization.WritingCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingCompleted += x, x => _data.WritingCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs> WritingPrintTicketRequired => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler, global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingPrintTicketRequired += x, x => _data.WritingPrintTicketRequired -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter.WritingProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs> WritingProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Documents.Serialization.WritingProgressChangedEventHandler, global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WritingProgressChanged += x, x => _data.WritingProgressChanged -= x);
    }
}

namespace System.Windows.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Forms"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ApplicationContext"/> class.
        /// </summary>
        public static RxApplicationContextEvents Events(this global::System.Windows.Forms.ApplicationContext item) => new RxApplicationContextEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.AutoCompleteStringCollection"/> class.
        /// </summary>
        public static RxAutoCompleteStringCollectionEvents Events(this global::System.Windows.Forms.AutoCompleteStringCollection item) => new RxAutoCompleteStringCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.AxHost"/> class.
        /// </summary>
        public static RxAxHostEvents Events(this global::System.Windows.Forms.AxHost item) => new RxAxHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Binding"/> class.
        /// </summary>
        public static RxBindingEvents Events(this global::System.Windows.Forms.Binding item) => new RxBindingEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingContext"/> class.
        /// </summary>
        public static RxBindingContextEvents Events(this global::System.Windows.Forms.BindingContext item) => new RxBindingContextEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingManagerBase"/> class.
        /// </summary>
        public static RxBindingManagerBaseEvents Events(this global::System.Windows.Forms.BindingManagerBase item) => new RxBindingManagerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingNavigator"/> class.
        /// </summary>
        public static RxBindingNavigatorEvents Events(this global::System.Windows.Forms.BindingNavigator item) => new RxBindingNavigatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingsCollection"/> class.
        /// </summary>
        public static RxBindingsCollectionEvents Events(this global::System.Windows.Forms.BindingsCollection item) => new RxBindingsCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingSource"/> class.
        /// </summary>
        public static RxBindingSourceEvents Events(this global::System.Windows.Forms.BindingSource item) => new RxBindingSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Button"/> class.
        /// </summary>
        public static RxButtonEvents Events(this global::System.Windows.Forms.Button item) => new RxButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ButtonBase"/> class.
        /// </summary>
        public static RxButtonBaseEvents Events(this global::System.Windows.Forms.ButtonBase item) => new RxButtonBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CheckBox"/> class.
        /// </summary>
        public static RxCheckBoxEvents Events(this global::System.Windows.Forms.CheckBox item) => new RxCheckBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CheckedListBox"/> class.
        /// </summary>
        public static RxCheckedListBoxEvents Events(this global::System.Windows.Forms.CheckedListBox item) => new RxCheckedListBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ComboBox"/> class.
        /// </summary>
        public static RxComboBoxEvents Events(this global::System.Windows.Forms.ComboBox item) => new RxComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CommonDialog"/> class.
        /// </summary>
        public static RxCommonDialogEvents Events(this global::System.Windows.Forms.CommonDialog item) => new RxCommonDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ContainerControl"/> class.
        /// </summary>
        public static RxContainerControlEvents Events(this global::System.Windows.Forms.ContainerControl item) => new RxContainerControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Control"/> class.
        /// </summary>
        public static RxControlEvents Events(this global::System.Windows.Forms.Control item) => new RxControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CurrencyManager"/> class.
        /// </summary>
        public static RxCurrencyManagerEvents Events(this global::System.Windows.Forms.CurrencyManager item) => new RxCurrencyManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridView"/> class.
        /// </summary>
        public static RxDataGridViewEvents Events(this global::System.Windows.Forms.DataGridView item) => new RxDataGridViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewCellCollection"/> class.
        /// </summary>
        public static RxDataGridViewCellCollectionEvents Events(this global::System.Windows.Forms.DataGridViewCellCollection item) => new RxDataGridViewCellCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumn"/> class.
        /// </summary>
        public static RxDataGridViewColumnEvents Events(this global::System.Windows.Forms.DataGridViewColumn item) => new RxDataGridViewColumnEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumnCollection"/> class.
        /// </summary>
        public static RxDataGridViewColumnCollectionEvents Events(this global::System.Windows.Forms.DataGridViewColumnCollection item) => new RxDataGridViewColumnCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewRowCollection"/> class.
        /// </summary>
        public static RxDataGridViewRowCollectionEvents Events(this global::System.Windows.Forms.DataGridViewRowCollection item) => new RxDataGridViewRowCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DateTimePicker"/> class.
        /// </summary>
        public static RxDateTimePickerEvents Events(this global::System.Windows.Forms.DateTimePicker item) => new RxDateTimePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DomainUpDown"/> class.
        /// </summary>
        public static RxDomainUpDownEvents Events(this global::System.Windows.Forms.DomainUpDown item) => new RxDomainUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ErrorProvider"/> class.
        /// </summary>
        public static RxErrorProviderEvents Events(this global::System.Windows.Forms.ErrorProvider item) => new RxErrorProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.FileDialog"/> class.
        /// </summary>
        public static RxFileDialogEvents Events(this global::System.Windows.Forms.FileDialog item) => new RxFileDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.FolderBrowserDialog"/> class.
        /// </summary>
        public static RxFolderBrowserDialogEvents Events(this global::System.Windows.Forms.FolderBrowserDialog item) => new RxFolderBrowserDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.FontDialog"/> class.
        /// </summary>
        public static RxFontDialogEvents Events(this global::System.Windows.Forms.FontDialog item) => new RxFontDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Form"/> class.
        /// </summary>
        public static RxFormEvents Events(this global::System.Windows.Forms.Form item) => new RxFormEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.GroupBox"/> class.
        /// </summary>
        public static RxGroupBoxEvents Events(this global::System.Windows.Forms.GroupBox item) => new RxGroupBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.HtmlDocument"/> class.
        /// </summary>
        public static RxHtmlDocumentEvents Events(this global::System.Windows.Forms.HtmlDocument item) => new RxHtmlDocumentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.HtmlElement"/> class.
        /// </summary>
        public static RxHtmlElementEvents Events(this global::System.Windows.Forms.HtmlElement item) => new RxHtmlElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.HtmlWindow"/> class.
        /// </summary>
        public static RxHtmlWindowEvents Events(this global::System.Windows.Forms.HtmlWindow item) => new RxHtmlWindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ImageList"/> class.
        /// </summary>
        public static RxImageListEvents Events(this global::System.Windows.Forms.ImageList item) => new RxImageListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Label"/> class.
        /// </summary>
        public static RxLabelEvents Events(this global::System.Windows.Forms.Label item) => new RxLabelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.LinkLabel"/> class.
        /// </summary>
        public static RxLinkLabelEvents Events(this global::System.Windows.Forms.LinkLabel item) => new RxLinkLabelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ListBox"/> class.
        /// </summary>
        public static RxListBoxEvents Events(this global::System.Windows.Forms.ListBox item) => new RxListBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ListControl"/> class.
        /// </summary>
        public static RxListControlEvents Events(this global::System.Windows.Forms.ListControl item) => new RxListControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ListView"/> class.
        /// </summary>
        public static RxListViewEvents Events(this global::System.Windows.Forms.ListView item) => new RxListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MaskedTextBox"/> class.
        /// </summary>
        public static RxMaskedTextBoxEvents Events(this global::System.Windows.Forms.MaskedTextBox item) => new RxMaskedTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MenuStrip"/> class.
        /// </summary>
        public static RxMenuStripEvents Events(this global::System.Windows.Forms.MenuStrip item) => new RxMenuStripEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MonthCalendar"/> class.
        /// </summary>
        public static RxMonthCalendarEvents Events(this global::System.Windows.Forms.MonthCalendar item) => new RxMonthCalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.NotifyIcon"/> class.
        /// </summary>
        public static RxNotifyIconEvents Events(this global::System.Windows.Forms.NotifyIcon item) => new RxNotifyIconEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.NumericUpDown"/> class.
        /// </summary>
        public static RxNumericUpDownEvents Events(this global::System.Windows.Forms.NumericUpDown item) => new RxNumericUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Panel"/> class.
        /// </summary>
        public static RxPanelEvents Events(this global::System.Windows.Forms.Panel item) => new RxPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PictureBox"/> class.
        /// </summary>
        public static RxPictureBoxEvents Events(this global::System.Windows.Forms.PictureBox item) => new RxPictureBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewControl"/> class.
        /// </summary>
        public static RxPrintPreviewControlEvents Events(this global::System.Windows.Forms.PrintPreviewControl item) => new RxPrintPreviewControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewDialog"/> class.
        /// </summary>
        public static RxPrintPreviewDialogEvents Events(this global::System.Windows.Forms.PrintPreviewDialog item) => new RxPrintPreviewDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ProgressBar"/> class.
        /// </summary>
        public static RxProgressBarEvents Events(this global::System.Windows.Forms.ProgressBar item) => new RxProgressBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PropertyGrid"/> class.
        /// </summary>
        public static RxPropertyGridEvents Events(this global::System.Windows.Forms.PropertyGrid item) => new RxPropertyGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.RadioButton"/> class.
        /// </summary>
        public static RxRadioButtonEvents Events(this global::System.Windows.Forms.RadioButton item) => new RxRadioButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.RichTextBox"/> class.
        /// </summary>
        public static RxRichTextBoxEvents Events(this global::System.Windows.Forms.RichTextBox item) => new RxRichTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ScrollableControl"/> class.
        /// </summary>
        public static RxScrollableControlEvents Events(this global::System.Windows.Forms.ScrollableControl item) => new RxScrollableControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ScrollBar"/> class.
        /// </summary>
        public static RxScrollBarEvents Events(this global::System.Windows.Forms.ScrollBar item) => new RxScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.SplitContainer"/> class.
        /// </summary>
        public static RxSplitContainerEvents Events(this global::System.Windows.Forms.SplitContainer item) => new RxSplitContainerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Splitter"/> class.
        /// </summary>
        public static RxSplitterEvents Events(this global::System.Windows.Forms.Splitter item) => new RxSplitterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.SplitterPanel"/> class.
        /// </summary>
        public static RxSplitterPanelEvents Events(this global::System.Windows.Forms.SplitterPanel item) => new RxSplitterPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.StatusStrip"/> class.
        /// </summary>
        public static RxStatusStripEvents Events(this global::System.Windows.Forms.StatusStrip item) => new RxStatusStripEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TabControl"/> class.
        /// </summary>
        public static RxTabControlEvents Events(this global::System.Windows.Forms.TabControl item) => new RxTabControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TableLayoutPanel"/> class.
        /// </summary>
        public static RxTableLayoutPanelEvents Events(this global::System.Windows.Forms.TableLayoutPanel item) => new RxTableLayoutPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TabPage"/> class.
        /// </summary>
        public static RxTabPageEvents Events(this global::System.Windows.Forms.TabPage item) => new RxTabPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogButton"/> class.
        /// </summary>
        public static RxTaskDialogButtonEvents Events(this global::System.Windows.Forms.TaskDialogButton item) => new RxTaskDialogButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogExpander"/> class.
        /// </summary>
        public static RxTaskDialogExpanderEvents Events(this global::System.Windows.Forms.TaskDialogExpander item) => new RxTaskDialogExpanderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogPage"/> class.
        /// </summary>
        public static RxTaskDialogPageEvents Events(this global::System.Windows.Forms.TaskDialogPage item) => new RxTaskDialogPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogRadioButton"/> class.
        /// </summary>
        public static RxTaskDialogRadioButtonEvents Events(this global::System.Windows.Forms.TaskDialogRadioButton item) => new RxTaskDialogRadioButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogVerificationCheckBox"/> class.
        /// </summary>
        public static RxTaskDialogVerificationCheckBoxEvents Events(this global::System.Windows.Forms.TaskDialogVerificationCheckBox item) => new RxTaskDialogVerificationCheckBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TextBox"/> class.
        /// </summary>
        public static RxTextBoxEvents Events(this global::System.Windows.Forms.TextBox item) => new RxTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TextBoxBase"/> class.
        /// </summary>
        public static RxTextBoxBaseEvents Events(this global::System.Windows.Forms.TextBoxBase item) => new RxTextBoxBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ThreadExceptionDialog"/> class.
        /// </summary>
        public static RxThreadExceptionDialogEvents Events(this global::System.Windows.Forms.ThreadExceptionDialog item) => new RxThreadExceptionDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Timer"/> class.
        /// </summary>
        public static RxTimerEvents Events(this global::System.Windows.Forms.Timer item) => new RxTimerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStrip"/> class.
        /// </summary>
        public static RxToolStripEvents Events(this global::System.Windows.Forms.ToolStrip item) => new RxToolStripEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripButton"/> class.
        /// </summary>
        public static RxToolStripButtonEvents Events(this global::System.Windows.Forms.ToolStripButton item) => new RxToolStripButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripComboBox"/> class.
        /// </summary>
        public static RxToolStripComboBoxEvents Events(this global::System.Windows.Forms.ToolStripComboBox item) => new RxToolStripComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContainer"/> class.
        /// </summary>
        public static RxToolStripContainerEvents Events(this global::System.Windows.Forms.ToolStripContainer item) => new RxToolStripContainerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContentPanel"/> class.
        /// </summary>
        public static RxToolStripContentPanelEvents Events(this global::System.Windows.Forms.ToolStripContentPanel item) => new RxToolStripContentPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripControlHost"/> class.
        /// </summary>
        public static RxToolStripControlHostEvents Events(this global::System.Windows.Forms.ToolStripControlHost item) => new RxToolStripControlHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDown"/> class.
        /// </summary>
        public static RxToolStripDropDownEvents Events(this global::System.Windows.Forms.ToolStripDropDown item) => new RxToolStripDropDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem"/> class.
        /// </summary>
        public static RxToolStripDropDownItemEvents Events(this global::System.Windows.Forms.ToolStripDropDownItem item) => new RxToolStripDropDownItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripItem"/> class.
        /// </summary>
        public static RxToolStripItemEvents Events(this global::System.Windows.Forms.ToolStripItem item) => new RxToolStripItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripMenuItem"/> class.
        /// </summary>
        public static RxToolStripMenuItemEvents Events(this global::System.Windows.Forms.ToolStripMenuItem item) => new RxToolStripMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripPanel"/> class.
        /// </summary>
        public static RxToolStripPanelEvents Events(this global::System.Windows.Forms.ToolStripPanel item) => new RxToolStripPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripProgressBar"/> class.
        /// </summary>
        public static RxToolStripProgressBarEvents Events(this global::System.Windows.Forms.ToolStripProgressBar item) => new RxToolStripProgressBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripRenderer"/> class.
        /// </summary>
        public static RxToolStripRendererEvents Events(this global::System.Windows.Forms.ToolStripRenderer item) => new RxToolStripRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSeparator"/> class.
        /// </summary>
        public static RxToolStripSeparatorEvents Events(this global::System.Windows.Forms.ToolStripSeparator item) => new RxToolStripSeparatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSplitButton"/> class.
        /// </summary>
        public static RxToolStripSplitButtonEvents Events(this global::System.Windows.Forms.ToolStripSplitButton item) => new RxToolStripSplitButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripTextBox"/> class.
        /// </summary>
        public static RxToolStripTextBoxEvents Events(this global::System.Windows.Forms.ToolStripTextBox item) => new RxToolStripTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolTip"/> class.
        /// </summary>
        public static RxToolTipEvents Events(this global::System.Windows.Forms.ToolTip item) => new RxToolTipEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TrackBar"/> class.
        /// </summary>
        public static RxTrackBarEvents Events(this global::System.Windows.Forms.TrackBar item) => new RxTrackBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TreeView"/> class.
        /// </summary>
        public static RxTreeViewEvents Events(this global::System.Windows.Forms.TreeView item) => new RxTreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.UpDownBase"/> class.
        /// </summary>
        public static RxUpDownBaseEvents Events(this global::System.Windows.Forms.UpDownBase item) => new RxUpDownBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.UserControl"/> class.
        /// </summary>
        public static RxUserControlEvents Events(this global::System.Windows.Forms.UserControl item) => new RxUserControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.VScrollBar"/> class.
        /// </summary>
        public static RxVScrollBarEvents Events(this global::System.Windows.Forms.VScrollBar item) => new RxVScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.WebBrowser"/> class.
        /// </summary>
        public static RxWebBrowserEvents Events(this global::System.Windows.Forms.WebBrowser item) => new RxWebBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.WebBrowserBase"/> class.
        /// </summary>
        public static RxWebBrowserBaseEvents Events(this global::System.Windows.Forms.WebBrowserBase item) => new RxWebBrowserBaseEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ApplicationContext"/> class as observables.
    /// </summary>
    public class RxApplicationContextEvents
    {
        private readonly global::System.Windows.Forms.ApplicationContext _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ApplicationContext"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationContextEvents(global::System.Windows.Forms.ApplicationContext data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ApplicationContext.ThreadExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ThreadExit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ThreadExit += x, x => _data.ThreadExit -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.AutoCompleteStringCollection"/> class as observables.
    /// </summary>
    public class RxAutoCompleteStringCollectionEvents
    {
        private readonly global::System.Windows.Forms.AutoCompleteStringCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.AutoCompleteStringCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutoCompleteStringCollectionEvents(global::System.Windows.Forms.AutoCompleteStringCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AutoCompleteStringCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.AxHost"/> class as observables.
    /// </summary>
    public class RxAxHostEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.AxHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.AxHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAxHostEvents(global::System.Windows.Forms.AxHost data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.UICuesEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDrop += x, x => _data.DragDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HelpEventArgs hlpevent) => eventHandler(hlpevent);
            return Handler;
        }, x => _data.HelpRequested += x, x => _data.HelpRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.Layout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LayoutEventArgs> Layout => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.LayoutEventHandler, global::System.Windows.Forms.LayoutEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.LayoutEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Layout += x, x => _data.Layout -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.AxHost.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Binding"/> class as observables.
    /// </summary>
    public class RxBindingEvents
    {
        private readonly global::System.Windows.Forms.Binding _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Binding"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingEvents(global::System.Windows.Forms.Binding data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Binding.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.BindingCompleteEventHandler, global::System.Windows.Forms.BindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.BindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingComplete += x, x => _data.BindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Binding.Format"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ConvertEventArgs> Format => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ConvertEventHandler, global::System.Windows.Forms.ConvertEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ConvertEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Format += x, x => _data.Format -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Binding.Parse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ConvertEventArgs> Parse => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ConvertEventHandler, global::System.Windows.Forms.ConvertEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ConvertEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Parse += x, x => _data.Parse -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingContext"/> class as observables.
    /// </summary>
    public class RxBindingContextEvents
    {
        private readonly global::System.Windows.Forms.BindingContext _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingContext"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingContextEvents(global::System.Windows.Forms.BindingContext data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingContext.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingManagerBase"/> class as observables.
    /// </summary>
    public class RxBindingManagerBaseEvents
    {
        private readonly global::System.Windows.Forms.BindingManagerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingManagerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingManagerBaseEvents(global::System.Windows.Forms.BindingManagerBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingManagerBase.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.BindingCompleteEventHandler, global::System.Windows.Forms.BindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.BindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingComplete += x, x => _data.BindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingManagerBase.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingManagerBase.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingManagerDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.BindingManagerDataErrorEventHandler, global::System.Windows.Forms.BindingManagerDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.BindingManagerDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataError += x, x => _data.DataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingManagerBase.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingNavigator"/> class as observables.
    /// </summary>
    public class RxBindingNavigatorEvents : global::System.Windows.Forms.RxToolStripEvents
    {
        private readonly global::System.Windows.Forms.BindingNavigator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingNavigator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingNavigatorEvents(global::System.Windows.Forms.BindingNavigator data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingNavigator.RefreshItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RefreshItems => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RefreshItems += x, x => _data.RefreshItems -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingsCollection"/> class as observables.
    /// </summary>
    public class RxBindingsCollectionEvents
    {
        private readonly global::System.Windows.Forms.BindingsCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingsCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingsCollectionEvents(global::System.Windows.Forms.BindingsCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingsCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingsCollection.CollectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanging += x, x => _data.CollectionChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingSource"/> class as observables.
    /// </summary>
    public class RxBindingSourceEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.BindingSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingSourceEvents(global::System.Windows.Forms.BindingSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.AddingNew"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AddingNewEventArgs> AddingNew => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.AddingNewEventHandler, global::System.ComponentModel.AddingNewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.AddingNewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AddingNew += x, x => _data.AddingNew -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.BindingCompleteEventHandler, global::System.Windows.Forms.BindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.BindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingComplete += x, x => _data.BindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingManagerDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.BindingManagerDataErrorEventHandler, global::System.Windows.Forms.BindingManagerDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.BindingManagerDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataError += x, x => _data.DataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.ListChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ListChangedEventArgs> ListChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.ListChangedEventHandler, global::System.ComponentModel.ListChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.ListChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ListChanged += x, x => _data.ListChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.BindingSource.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Button"/> class as observables.
    /// </summary>
    public class RxButtonEvents : global::System.Windows.Forms.RxButtonBaseEvents
    {
        private readonly global::System.Windows.Forms.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonEvents(global::System.Windows.Forms.Button data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Button.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Button.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ButtonBase"/> class as observables.
    /// </summary>
    public class RxButtonBaseEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.ButtonBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ButtonBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonBaseEvents(global::System.Windows.Forms.ButtonBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ButtonBase.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ButtonBase.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CheckBox"/> class as observables.
    /// </summary>
    public class RxCheckBoxEvents : global::System.Windows.Forms.RxButtonBaseEvents
    {
        private readonly global::System.Windows.Forms.CheckBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CheckBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCheckBoxEvents(global::System.Windows.Forms.CheckBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckBox.AppearanceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AppearanceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AppearanceChanged += x, x => _data.AppearanceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckBox.CheckStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckStateChanged += x, x => _data.CheckStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckBox.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CheckedListBox"/> class as observables.
    /// </summary>
    public class RxCheckedListBoxEvents : global::System.Windows.Forms.RxListBoxEvents
    {
        private readonly global::System.Windows.Forms.CheckedListBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CheckedListBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCheckedListBoxEvents(global::System.Windows.Forms.CheckedListBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.DisplayMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayMemberChanged += x, x => _data.DisplayMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawItem += x, x => _data.DrawItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.ItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemCheckEventArgs> ItemCheck => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ItemCheckEventHandler, global::System.Windows.Forms.ItemCheckEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ItemCheckEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemCheck += x, x => _data.ItemCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.MeasureItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MeasureItemEventArgs> MeasureItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MeasureItemEventHandler, global::System.Windows.Forms.MeasureItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MeasureItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MeasureItem += x, x => _data.MeasureItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CheckedListBox.ValueMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueMemberChanged += x, x => _data.ValueMemberChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ComboBox"/> class as observables.
    /// </summary>
    public class RxComboBoxEvents : global::System.Windows.Forms.RxListControlEvents
    {
        private readonly global::System.Windows.Forms.ComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComboBoxEvents(global::System.Windows.Forms.ComboBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawItem += x, x => _data.DrawItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDown += x, x => _data.DropDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.DropDownStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownStyleChanged += x, x => _data.DropDownStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.MeasureItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MeasureItemEventArgs> MeasureItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MeasureItemEventHandler, global::System.Windows.Forms.MeasureItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MeasureItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MeasureItem += x, x => _data.MeasureItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChangeCommitted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChangeCommitted += x, x => _data.SelectionChangeCommitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComboBox.TextUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextUpdate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextUpdate += x, x => _data.TextUpdate -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CommonDialog"/> class as observables.
    /// </summary>
    public class RxCommonDialogEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.CommonDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CommonDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommonDialogEvents(global::System.Windows.Forms.CommonDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CommonDialog.HelpRequest"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpRequest => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HelpRequest += x, x => _data.HelpRequest -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ContainerControl"/> class as observables.
    /// </summary>
    public class RxContainerControlEvents : global::System.Windows.Forms.RxScrollableControlEvents
    {
        private readonly global::System.Windows.Forms.ContainerControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ContainerControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContainerControlEvents(global::System.Windows.Forms.ContainerControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ContainerControl.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Control"/> class as observables.
    /// </summary>
    public class RxControlEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.Control _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Control"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxControlEvents(global::System.Windows.Forms.Control data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.UICuesEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ClientSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ClientSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ClientSizeChanged += x, x => _data.ClientSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DpiChangedAfterParent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DpiChangedAfterParent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChangedAfterParent += x, x => _data.DpiChangedAfterParent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DpiChangedBeforeParent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DpiChangedBeforeParent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChangedBeforeParent += x, x => _data.DpiChangedBeforeParent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDrop += x, x => _data.DragDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.HandleCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HandleCreated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HandleCreated += x, x => _data.HandleCreated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.HandleDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HandleDestroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HandleDestroyed += x, x => _data.HandleDestroyed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HelpEventArgs hlpevent) => eventHandler(hlpevent);
            return Handler;
        }, x => _data.HelpRequested += x, x => _data.HelpRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.InvalidateEventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.InvalidateEventHandler, global::System.Windows.Forms.InvalidateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.InvalidateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Invalidated += x, x => _data.Invalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Layout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LayoutEventArgs> Layout => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.LayoutEventHandler, global::System.Windows.Forms.LayoutEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.LayoutEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Layout += x, x => _data.Layout -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MarginChanged += x, x => _data.MarginChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseCaptureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseCaptureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseCaptureChanged += x, x => _data.MouseCaptureChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Move"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Move => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Move += x, x => _data.Move -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.ParentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ParentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ParentChanged += x, x => _data.ParentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PreviewKeyDownEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PreviewKeyDownEventHandler, global::System.Windows.Forms.PreviewKeyDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PreviewKeyDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RegionChanged += x, x => _data.RegionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Resize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resize => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Resize += x, x => _data.Resize -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.SystemColorsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SystemColorsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SystemColorsChanged += x, x => _data.SystemColorsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validating += x, x => _data.Validating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Control.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CurrencyManager"/> class as observables.
    /// </summary>
    public class RxCurrencyManagerEvents : global::System.Windows.Forms.RxBindingManagerBaseEvents
    {
        private readonly global::System.Windows.Forms.CurrencyManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CurrencyManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCurrencyManagerEvents(global::System.Windows.Forms.CurrencyManager data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CurrencyManager.ItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemChangedEventArgs> ItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ItemChangedEventHandler, global::System.Windows.Forms.ItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemChanged += x, x => _data.ItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CurrencyManager.ListChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ListChangedEventArgs> ListChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.ListChangedEventHandler, global::System.ComponentModel.ListChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.ListChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ListChanged += x, x => _data.ListChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.CurrencyManager.MetaDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MetaDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MetaDataChanged += x, x => _data.MetaDataChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridView"/> class as observables.
    /// </summary>
    public class RxDataGridViewEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.DataGridView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewEvents(global::System.Windows.Forms.DataGridView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToAddRowsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToAddRowsChanged += x, x => _data.AllowUserToAddRowsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToDeleteRowsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToDeleteRowsChanged += x, x => _data.AllowUserToDeleteRowsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToOrderColumnsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToOrderColumnsChanged += x, x => _data.AllowUserToOrderColumnsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToResizeColumnsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToResizeColumnsChanged += x, x => _data.AllowUserToResizeColumnsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToResizeRowsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToResizeRowsChanged += x, x => _data.AllowUserToResizeRowsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AlternatingRowsDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AlternatingRowsDefaultCellStyleChanged += x, x => _data.AlternatingRowsDefaultCellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoGenerateColumnsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoGenerateColumnsChanged += x, x => _data.AutoGenerateColumnsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs> AutoSizeColumnModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeColumnModeChanged += x, x => _data.AutoSizeColumnModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs> AutoSizeColumnsModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeColumnsModeChanged += x, x => _data.AutoSizeColumnsModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs> AutoSizeRowsModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewAutoSizeModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeRowsModeChanged += x, x => _data.AutoSizeRowsModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.BackgroundColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundColorChanged += x, x => _data.BackgroundColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.BorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BorderStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BorderStyleChanged += x, x => _data.BorderStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CancelRowEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QuestionEventArgs> CancelRowEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QuestionEventHandler, global::System.Windows.Forms.QuestionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QuestionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CancelRowEdit += x, x => _data.CancelRowEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellBeginEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellCancelEventArgs> CellBeginEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellCancelEventHandler, global::System.Windows.Forms.DataGridViewCellCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellBeginEdit += x, x => _data.CellBeginEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellBorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CellBorderStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellBorderStyleChanged += x, x => _data.CellBorderStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellClick += x, x => _data.CellClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellContentClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellContentClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellContentClick += x, x => _data.CellContentClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellContentDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellContentDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellContentDoubleClick += x, x => _data.CellContentDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellContextMenuStripChanged += x, x => _data.CellContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellContextMenuStripNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs> CellContextMenuStripNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler, global::System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellContextMenuStripNeeded += x, x => _data.CellContextMenuStripNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellDoubleClick += x, x => _data.CellDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellEndEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellEndEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellEndEdit += x, x => _data.CellEndEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellEnter += x, x => _data.CellEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellErrorTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellErrorTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellErrorTextChanged += x, x => _data.CellErrorTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellErrorTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs> CellErrorTextNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler, global::System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellErrorTextNeeded += x, x => _data.CellErrorTextNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellFormatting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellFormattingEventArgs> CellFormatting => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellFormattingEventHandler, global::System.Windows.Forms.DataGridViewCellFormattingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellFormattingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellFormatting += x, x => _data.CellFormatting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellLeave += x, x => _data.CellLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseClick += x, x => _data.CellMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseDoubleClick += x, x => _data.CellMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseDown += x, x => _data.CellMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellMouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellMouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseEnter += x, x => _data.CellMouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellMouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellMouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseLeave += x, x => _data.CellMouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseMove += x, x => _data.CellMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseUp += x, x => _data.CellMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellPainting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellPaintingEventArgs> CellPainting => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellPaintingEventHandler, global::System.Windows.Forms.DataGridViewCellPaintingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellPaintingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellPainting += x, x => _data.CellPainting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellParsing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellParsingEventArgs> CellParsing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellParsingEventHandler, global::System.Windows.Forms.DataGridViewCellParsingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellParsingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellParsing += x, x => _data.CellParsing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellStateChangedEventArgs> CellStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellStateChangedEventHandler, global::System.Windows.Forms.DataGridViewCellStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellStateChanged += x, x => _data.CellStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellStyleChanged += x, x => _data.CellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellStyleContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs> CellStyleContentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler, global::System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellStyleContentChanged += x, x => _data.CellStyleContentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellToolTipTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellToolTipTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellToolTipTextChanged += x, x => _data.CellToolTipTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellToolTipTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs> CellToolTipTextNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler, global::System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellToolTipTextNeeded += x, x => _data.CellToolTipTextNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellValidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellValidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValidated += x, x => _data.CellValidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellValidating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellValidatingEventArgs> CellValidating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellValidatingEventHandler, global::System.Windows.Forms.DataGridViewCellValidatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellValidatingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValidating += x, x => _data.CellValidating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValueChanged += x, x => _data.CellValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellValueNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellValueEventArgs> CellValueNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellValueEventHandler, global::System.Windows.Forms.DataGridViewCellValueEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellValueEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValueNeeded += x, x => _data.CellValueNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CellValuePushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellValueEventArgs> CellValuePushed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellValueEventHandler, global::System.Windows.Forms.DataGridViewCellValueEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellValueEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValuePushed += x, x => _data.CellValuePushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnAdded += x, x => _data.ColumnAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnContextMenuStripChanged += x, x => _data.ColumnContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDataPropertyNameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDataPropertyNameChanged += x, x => _data.ColumnDataPropertyNameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDefaultCellStyleChanged += x, x => _data.ColumnDefaultCellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDisplayIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDisplayIndexChanged += x, x => _data.ColumnDisplayIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnDividerDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs> ColumnDividerDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler, global::System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDividerDoubleClick += x, x => _data.ColumnDividerDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnDividerWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDividerWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDividerWidthChanged += x, x => _data.ColumnDividerWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnHeaderCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnHeaderCellChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderCellChanged += x, x => _data.ColumnHeaderCellChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnHeaderMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> ColumnHeaderMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderMouseClick += x, x => _data.ColumnHeaderMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> ColumnHeaderMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderMouseDoubleClick += x, x => _data.ColumnHeaderMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersBorderStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeadersBorderStyleChanged += x, x => _data.ColumnHeadersBorderStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeadersDefaultCellStyleChanged += x, x => _data.ColumnHeadersDefaultCellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeadersHeightChanged += x, x => _data.ColumnHeadersHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs> ColumnHeadersHeightSizeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewAutoSizeModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeadersHeightSizeModeChanged += x, x => _data.ColumnHeadersHeightSizeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnMinimumWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnMinimumWidthChanged += x, x => _data.ColumnMinimumWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnNameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnNameChanged += x, x => _data.ColumnNameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnRemoved += x, x => _data.ColumnRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnSortModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnSortModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnSortModeChanged += x, x => _data.ColumnSortModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnStateChangedEventArgs> ColumnStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnStateChangedEventHandler, global::System.Windows.Forms.DataGridViewColumnStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnStateChanged += x, x => _data.ColumnStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnToolTipTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnToolTipTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnToolTipTextChanged += x, x => _data.ColumnToolTipTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ColumnWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnWidthChanged += x, x => _data.ColumnWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CurrentCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentCellChanged += x, x => _data.CurrentCellChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellDirtyStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentCellDirtyStateChanged += x, x => _data.CurrentCellDirtyStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.DataBindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewBindingCompleteEventArgs> DataBindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewBindingCompleteEventHandler, global::System.Windows.Forms.DataGridViewBindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewBindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataBindingComplete += x, x => _data.DataBindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewDataErrorEventHandler, global::System.Windows.Forms.DataGridViewDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataError += x, x => _data.DataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.DefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DefaultCellStyleChanged += x, x => _data.DefaultCellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.DefaultValuesNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> DefaultValuesNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DefaultValuesNeeded += x, x => _data.DefaultValuesNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.EditingControlShowing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewEditingControlShowingEventArgs> EditingControlShowing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewEditingControlShowingEventHandler, global::System.Windows.Forms.DataGridViewEditingControlShowingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewEditingControlShowingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditingControlShowing += x, x => _data.EditingControlShowing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.EditModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditModeChanged += x, x => _data.EditModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.GridColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GridColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GridColorChanged += x, x => _data.GridColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.MultiSelectChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultiSelectChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MultiSelectChanged += x, x => _data.MultiSelectChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.NewRowNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> NewRowNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NewRowNeeded += x, x => _data.NewRowNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowContextMenuStripChanged += x, x => _data.RowContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowContextMenuStripNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs> RowContextMenuStripNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler, global::System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowContextMenuStripNeeded += x, x => _data.RowContextMenuStripNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowDefaultCellStyleChanged += x, x => _data.RowDefaultCellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowDirtyStateNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QuestionEventArgs> RowDirtyStateNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QuestionEventHandler, global::System.Windows.Forms.QuestionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QuestionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowDirtyStateNeeded += x, x => _data.RowDirtyStateNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowDividerDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs> RowDividerDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler, global::System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowDividerDoubleClick += x, x => _data.RowDividerDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowDividerHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowDividerHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowDividerHeightChanged += x, x => _data.RowDividerHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> RowEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowEnter += x, x => _data.RowEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowErrorTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowErrorTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowErrorTextChanged += x, x => _data.RowErrorTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowErrorTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs> RowErrorTextNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler, global::System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowErrorTextNeeded += x, x => _data.RowErrorTextNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeaderCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowHeaderCellChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeaderCellChanged += x, x => _data.RowHeaderCellChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeaderMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> RowHeaderMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeaderMouseClick += x, x => _data.RowHeaderMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> RowHeaderMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeaderMouseDoubleClick += x, x => _data.RowHeaderMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersBorderStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeadersBorderStyleChanged += x, x => _data.RowHeadersBorderStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeadersDefaultCellStyleChanged += x, x => _data.RowHeadersDefaultCellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeadersWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeadersWidthChanged += x, x => _data.RowHeadersWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs> RowHeadersWidthSizeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewAutoSizeModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeadersWidthSizeModeChanged += x, x => _data.RowHeadersWidthSizeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeightChanged += x, x => _data.RowHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeightInfoNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs> RowHeightInfoNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler, global::System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeightInfoNeeded += x, x => _data.RowHeightInfoNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowHeightInfoPushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs> RowHeightInfoPushed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler, global::System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeightInfoPushed += x, x => _data.RowHeightInfoPushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> RowLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowLeave += x, x => _data.RowLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowMinimumHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowMinimumHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowMinimumHeightChanged += x, x => _data.RowMinimumHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowPostPaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowPostPaintEventArgs> RowPostPaint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowPostPaintEventHandler, global::System.Windows.Forms.DataGridViewRowPostPaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowPostPaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowPostPaint += x, x => _data.RowPostPaint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowPrePaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowPrePaintEventArgs> RowPrePaint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowPrePaintEventHandler, global::System.Windows.Forms.DataGridViewRowPrePaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowPrePaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowPrePaint += x, x => _data.RowPrePaint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowsAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowsAddedEventArgs> RowsAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowsAddedEventHandler, global::System.Windows.Forms.DataGridViewRowsAddedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowsAddedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowsAdded += x, x => _data.RowsAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowsDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowsDefaultCellStyleChanged += x, x => _data.RowsDefaultCellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowsRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowsRemovedEventArgs> RowsRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowsRemovedEventHandler, global::System.Windows.Forms.DataGridViewRowsRemovedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowsRemovedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowsRemoved += x, x => _data.RowsRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowStateChangedEventArgs> RowStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowStateChangedEventHandler, global::System.Windows.Forms.DataGridViewRowStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowStateChanged += x, x => _data.RowStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowUnshared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowUnshared => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowUnshared += x, x => _data.RowUnshared -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowValidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> RowValidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowValidated += x, x => _data.RowValidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.RowValidating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellCancelEventArgs> RowValidating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewCellCancelEventHandler, global::System.Windows.Forms.DataGridViewCellCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewCellCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowValidating += x, x => _data.RowValidating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.SortCompare"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewSortCompareEventArgs> SortCompare => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewSortCompareEventHandler, global::System.Windows.Forms.DataGridViewSortCompareEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewSortCompareEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SortCompare += x, x => _data.SortCompare -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.Sorted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Sorted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Sorted += x, x => _data.Sorted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.UserAddedRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> UserAddedRow => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserAddedRow += x, x => _data.UserAddedRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.UserDeletedRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> UserDeletedRow => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserDeletedRow += x, x => _data.UserDeletedRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridView.UserDeletingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowCancelEventArgs> UserDeletingRow => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DataGridViewRowCancelEventHandler, global::System.Windows.Forms.DataGridViewRowCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DataGridViewRowCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserDeletingRow += x, x => _data.UserDeletingRow -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewCellCollection"/> class as observables.
    /// </summary>
    public class RxDataGridViewCellCollectionEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewCellCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewCellCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewCellCollectionEvents(global::System.Windows.Forms.DataGridViewCellCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridViewCellCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumn"/> class as observables.
    /// </summary>
    public class RxDataGridViewColumnEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewColumn _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewColumn"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewColumnEvents(global::System.Windows.Forms.DataGridViewColumn data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridViewColumn.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disposed += x, x => _data.Disposed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumnCollection"/> class as observables.
    /// </summary>
    public class RxDataGridViewColumnCollectionEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewColumnCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewColumnCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewColumnCollectionEvents(global::System.Windows.Forms.DataGridViewColumnCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridViewColumnCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewRowCollection"/> class as observables.
    /// </summary>
    public class RxDataGridViewRowCollectionEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewRowCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewRowCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewRowCollectionEvents(global::System.Windows.Forms.DataGridViewRowCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DataGridViewRowCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DateTimePicker"/> class as observables.
    /// </summary>
    public class RxDateTimePickerEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.DateTimePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DateTimePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDateTimePickerEvents(global::System.Windows.Forms.DateTimePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.CloseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CloseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CloseUp += x, x => _data.CloseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDown += x, x => _data.DropDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.FormatChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormatChanged += x, x => _data.FormatChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DateTimePicker.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DomainUpDown"/> class as observables.
    /// </summary>
    public class RxDomainUpDownEvents : global::System.Windows.Forms.RxUpDownBaseEvents
    {
        private readonly global::System.Windows.Forms.DomainUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DomainUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDomainUpDownEvents(global::System.Windows.Forms.DomainUpDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DomainUpDown.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.DomainUpDown.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ErrorProvider"/> class as observables.
    /// </summary>
    public class RxErrorProviderEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.ErrorProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ErrorProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxErrorProviderEvents(global::System.Windows.Forms.ErrorProvider data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ErrorProvider.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.FileDialog"/> class as observables.
    /// </summary>
    public class RxFileDialogEvents : global::System.Windows.Forms.RxCommonDialogEvents
    {
        private readonly global::System.Windows.Forms.FileDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.FileDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileDialogEvents(global::System.Windows.Forms.FileDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.FileDialog.FileOk"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> FileOk => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FileOk += x, x => _data.FileOk -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.FolderBrowserDialog"/> class as observables.
    /// </summary>
    public class RxFolderBrowserDialogEvents : global::System.Windows.Forms.RxCommonDialogEvents
    {
        private readonly global::System.Windows.Forms.FolderBrowserDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.FolderBrowserDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFolderBrowserDialogEvents(global::System.Windows.Forms.FolderBrowserDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.FolderBrowserDialog.HelpRequest"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpRequest => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HelpRequest += x, x => _data.HelpRequest -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.FontDialog"/> class as observables.
    /// </summary>
    public class RxFontDialogEvents : global::System.Windows.Forms.RxCommonDialogEvents
    {
        private readonly global::System.Windows.Forms.FontDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.FontDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFontDialogEvents(global::System.Windows.Forms.FontDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.FontDialog.Apply"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Apply => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Apply += x, x => _data.Apply -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Form"/> class as observables.
    /// </summary>
    public class RxFormEvents : global::System.Windows.Forms.RxContainerControlEvents
    {
        private readonly global::System.Windows.Forms.Form _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Form"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFormEvents(global::System.Windows.Forms.Form data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.Deactivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivate += x, x => _data.Deactivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DpiChangedEventHandler, global::System.Windows.Forms.DpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.FormClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.FormClosedEventArgs> FormClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.FormClosedEventHandler, global::System.Windows.Forms.FormClosedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.FormClosedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormClosed += x, x => _data.FormClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.FormClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.FormClosingEventArgs> FormClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.FormClosingEventHandler, global::System.Windows.Forms.FormClosingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.FormClosingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormClosing += x, x => _data.FormClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.HelpButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> HelpButtonClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HelpButtonClicked += x, x => _data.HelpButtonClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.InputLanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.InputLanguageChangedEventArgs> InputLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.InputLanguageChangedEventHandler, global::System.Windows.Forms.InputLanguageChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.InputLanguageChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InputLanguageChanged += x, x => _data.InputLanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.InputLanguageChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.InputLanguageChangingEventArgs> InputLanguageChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.InputLanguageChangingEventHandler, global::System.Windows.Forms.InputLanguageChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.InputLanguageChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InputLanguageChanging += x, x => _data.InputLanguageChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MarginChanged += x, x => _data.MarginChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.MaximizedBoundsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaximizedBoundsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaximizedBoundsChanged += x, x => _data.MaximizedBoundsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.MaximumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaximumSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaximumSizeChanged += x, x => _data.MaximumSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.MdiChildActivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MdiChildActivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MdiChildActivate += x, x => _data.MdiChildActivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.MenuComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuComplete => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuComplete += x, x => _data.MenuComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.MenuStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuStart += x, x => _data.MenuStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.MinimumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MinimumSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MinimumSizeChanged += x, x => _data.MinimumSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.ResizeBegin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ResizeBegin => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResizeBegin += x, x => _data.ResizeBegin -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.ResizeEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ResizeEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResizeEnd += x, x => _data.ResizeEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.Shown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Shown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Shown += x, x => _data.Shown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Form.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.GroupBox"/> class as observables.
    /// </summary>
    public class RxGroupBoxEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.GroupBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.GroupBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGroupBoxEvents(global::System.Windows.Forms.GroupBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.GroupBox.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.HtmlDocument"/> class as observables.
    /// </summary>
    public class RxHtmlDocumentEvents
    {
        private readonly global::System.Windows.Forms.HtmlDocument _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.HtmlDocument"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHtmlDocumentEvents(global::System.Windows.Forms.HtmlDocument data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.ContextMenuShowing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> ContextMenuShowing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuShowing += x, x => _data.ContextMenuShowing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.Focusing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Focusing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Focusing += x, x => _data.Focusing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.LosingFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LosingFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LosingFocus += x, x => _data.LosingFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.MouseOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseOver += x, x => _data.MouseOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlDocument.Stop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Stop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Stop += x, x => _data.Stop -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.HtmlElement"/> class as observables.
    /// </summary>
    public class RxHtmlElementEvents
    {
        private readonly global::System.Windows.Forms.HtmlElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.HtmlElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHtmlElementEvents(global::System.Windows.Forms.HtmlElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.Drag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Drag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Drag += x, x => _data.Drag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.DragEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DragEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnd += x, x => _data.DragEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.Focusing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Focusing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Focusing += x, x => _data.Focusing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.LosingFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LosingFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LosingFocus += x, x => _data.LosingFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.MouseOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseOver += x, x => _data.MouseOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.HtmlWindow"/> class as observables.
    /// </summary>
    public class RxHtmlWindowEvents
    {
        private readonly global::System.Windows.Forms.HtmlWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.HtmlWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHtmlWindowEvents(global::System.Windows.Forms.HtmlWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlWindow.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementErrorEventHandler, global::System.Windows.Forms.HtmlElementErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Error += x, x => _data.Error -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlWindow.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlWindow.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlWindow.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlWindow.Resize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Resize => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Resize += x, x => _data.Resize -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlWindow.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.HtmlWindow.Unload"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Unload => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HtmlElementEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unload += x, x => _data.Unload -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ImageList"/> class as observables.
    /// </summary>
    public class RxImageListEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.ImageList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ImageList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImageListEvents(global::System.Windows.Forms.ImageList data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ImageList.RecreateHandle"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RecreateHandle => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RecreateHandle += x, x => _data.RecreateHandle -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Label"/> class as observables.
    /// </summary>
    public class RxLabelEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.Label _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Label"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLabelEvents(global::System.Windows.Forms.Label data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Label.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.LinkLabel"/> class as observables.
    /// </summary>
    public class RxLinkLabelEvents : global::System.Windows.Forms.RxLabelEvents
    {
        private readonly global::System.Windows.Forms.LinkLabel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.LinkLabel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLinkLabelEvents(global::System.Windows.Forms.LinkLabel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.LinkLabel.LinkClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LinkLabelLinkClickedEventArgs> LinkClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.LinkLabelLinkClickedEventHandler, global::System.Windows.Forms.LinkLabelLinkClickedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.LinkLabelLinkClickedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LinkClicked += x, x => _data.LinkClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.LinkLabel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ListBox"/> class as observables.
    /// </summary>
    public class RxListBoxEvents : global::System.Windows.Forms.RxListControlEvents
    {
        private readonly global::System.Windows.Forms.ListBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ListBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListBoxEvents(global::System.Windows.Forms.ListBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawItem += x, x => _data.DrawItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.MeasureItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MeasureItemEventArgs> MeasureItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MeasureItemEventHandler, global::System.Windows.Forms.MeasureItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MeasureItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MeasureItem += x, x => _data.MeasureItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ListControl"/> class as observables.
    /// </summary>
    public class RxListControlEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.ListControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ListControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListControlEvents(global::System.Windows.Forms.ListControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.DisplayMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayMemberChanged += x, x => _data.DisplayMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.Format"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListControlConvertEventArgs> Format => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ListControlConvertEventHandler, global::System.Windows.Forms.ListControlConvertEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ListControlConvertEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Format += x, x => _data.Format -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.FormatInfoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatInfoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormatInfoChanged += x, x => _data.FormatInfoChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.FormatStringChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatStringChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormatStringChanged += x, x => _data.FormatStringChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.FormattingEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormattingEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormattingEnabledChanged += x, x => _data.FormattingEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.SelectedValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedValueChanged += x, x => _data.SelectedValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListControl.ValueMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueMemberChanged += x, x => _data.ValueMemberChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ListView"/> class as observables.
    /// </summary>
    public class RxListViewEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.ListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListViewEvents(global::System.Windows.Forms.ListView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.AfterLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LabelEditEventArgs> AfterLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.LabelEditEventHandler, global::System.Windows.Forms.LabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.LabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterLabelEdit += x, x => _data.AfterLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.BeforeLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LabelEditEventArgs> BeforeLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.LabelEditEventHandler, global::System.Windows.Forms.LabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.LabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeLabelEdit += x, x => _data.BeforeLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.CacheVirtualItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.CacheVirtualItemsEventArgs> CacheVirtualItems => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.CacheVirtualItemsEventHandler, global::System.Windows.Forms.CacheVirtualItemsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.CacheVirtualItemsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CacheVirtualItems += x, x => _data.CacheVirtualItems -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ColumnClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnClickEventArgs> ColumnClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ColumnClickEventHandler, global::System.Windows.Forms.ColumnClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ColumnClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnClick += x, x => _data.ColumnClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ColumnReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnReorderedEventArgs> ColumnReordered => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ColumnReorderedEventHandler, global::System.Windows.Forms.ColumnReorderedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ColumnReorderedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnReordered += x, x => _data.ColumnReordered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ColumnWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnWidthChangedEventArgs> ColumnWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ColumnWidthChangedEventHandler, global::System.Windows.Forms.ColumnWidthChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ColumnWidthChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnWidthChanged += x, x => _data.ColumnWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ColumnWidthChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnWidthChangingEventArgs> ColumnWidthChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ColumnWidthChangingEventHandler, global::System.Windows.Forms.ColumnWidthChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ColumnWidthChangingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnWidthChanging += x, x => _data.ColumnWidthChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.DrawColumnHeader"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawListViewColumnHeaderEventArgs> DrawColumnHeader => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawListViewColumnHeaderEventHandler, global::System.Windows.Forms.DrawListViewColumnHeaderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawColumnHeader += x, x => _data.DrawColumnHeader -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawListViewItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawListViewItemEventHandler, global::System.Windows.Forms.DrawListViewItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawListViewItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawItem += x, x => _data.DrawItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.DrawSubItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawListViewSubItemEventArgs> DrawSubItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawListViewSubItemEventHandler, global::System.Windows.Forms.DrawListViewSubItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawListViewSubItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawSubItem += x, x => _data.DrawSubItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.GroupCollapsedStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewGroupEventArgs> GroupCollapsedStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Forms.ListViewGroupEventArgs>, global::System.Windows.Forms.ListViewGroupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ListViewGroupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GroupCollapsedStateChanged += x, x => _data.GroupCollapsedStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.GroupTaskLinkClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewGroupEventArgs> GroupTaskLinkClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Forms.ListViewGroupEventArgs>, global::System.Windows.Forms.ListViewGroupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ListViewGroupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GroupTaskLinkClick += x, x => _data.GroupTaskLinkClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ItemActivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ItemActivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemActivate += x, x => _data.ItemActivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemCheckEventArgs> ItemCheck => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ItemCheckEventHandler, global::System.Windows.Forms.ItemCheckEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ItemCheckEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemCheck += x, x => _data.ItemCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ItemChecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemCheckedEventArgs> ItemChecked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ItemCheckedEventHandler, global::System.Windows.Forms.ItemCheckedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ItemCheckedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemChecked += x, x => _data.ItemChecked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ItemDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemDragEventArgs> ItemDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ItemDragEventHandler, global::System.Windows.Forms.ItemDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ItemDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemDrag += x, x => _data.ItemDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ItemMouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewItemMouseHoverEventArgs> ItemMouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ListViewItemMouseHoverEventHandler, global::System.Windows.Forms.ListViewItemMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ListViewItemMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemMouseHover += x, x => _data.ItemMouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.ItemSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewItemSelectionChangedEventArgs> ItemSelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ListViewItemSelectionChangedEventHandler, global::System.Windows.Forms.ListViewItemSelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemSelectionChanged += x, x => _data.ItemSelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.RetrieveVirtualItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.RetrieveVirtualItemEventArgs> RetrieveVirtualItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.RetrieveVirtualItemEventHandler, global::System.Windows.Forms.RetrieveVirtualItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.RetrieveVirtualItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RetrieveVirtualItem += x, x => _data.RetrieveVirtualItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.SearchForVirtualItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SearchForVirtualItemEventArgs> SearchForVirtualItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.SearchForVirtualItemEventHandler, global::System.Windows.Forms.SearchForVirtualItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.SearchForVirtualItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SearchForVirtualItem += x, x => _data.SearchForVirtualItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs> VirtualItemsSelectionRangeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler, global::System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VirtualItemsSelectionRangeChanged += x, x => _data.VirtualItemsSelectionRangeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MaskedTextBox"/> class as observables.
    /// </summary>
    public class RxMaskedTextBoxEvents : global::System.Windows.Forms.RxTextBoxBaseEvents
    {
        private readonly global::System.Windows.Forms.MaskedTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MaskedTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMaskedTextBoxEvents(global::System.Windows.Forms.MaskedTextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MaskedTextBox.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsOverwriteModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsOverwriteModeChanged += x, x => _data.IsOverwriteModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MaskedTextBox.MaskChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaskChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaskChanged += x, x => _data.MaskChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MaskedTextBox.MaskInputRejected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MaskInputRejectedEventArgs> MaskInputRejected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MaskInputRejectedEventHandler, global::System.Windows.Forms.MaskInputRejectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MaskInputRejectedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaskInputRejected += x, x => _data.MaskInputRejected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MaskedTextBox.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MaskedTextBox.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MaskedTextBox.TypeValidationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TypeValidationEventArgs> TypeValidationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TypeValidationEventHandler, global::System.Windows.Forms.TypeValidationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TypeValidationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TypeValidationCompleted += x, x => _data.TypeValidationCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MenuStrip"/> class as observables.
    /// </summary>
    public class RxMenuStripEvents : global::System.Windows.Forms.RxToolStripEvents
    {
        private readonly global::System.Windows.Forms.MenuStrip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MenuStrip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuStripEvents(global::System.Windows.Forms.MenuStrip data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MenuStrip.MenuActivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuActivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuActivate += x, x => _data.MenuActivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MenuStrip.MenuDeactivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuDeactivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuDeactivate += x, x => _data.MenuDeactivate -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MonthCalendar"/> class as observables.
    /// </summary>
    public class RxMonthCalendarEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.MonthCalendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MonthCalendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMonthCalendarEvents(global::System.Windows.Forms.MonthCalendar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.DateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DateRangeEventArgs> DateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DateRangeEventHandler, global::System.Windows.Forms.DateRangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DateRangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DateChanged += x, x => _data.DateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.DateSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DateRangeEventArgs> DateSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DateRangeEventHandler, global::System.Windows.Forms.DateRangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DateRangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DateSelected += x, x => _data.DateSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.MonthCalendar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.NotifyIcon"/> class as observables.
    /// </summary>
    public class RxNotifyIconEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.NotifyIcon _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.NotifyIcon"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNotifyIconEvents(global::System.Windows.Forms.NotifyIcon data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.BalloonTipClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BalloonTipClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BalloonTipClicked += x, x => _data.BalloonTipClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.BalloonTipClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BalloonTipClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BalloonTipClosed += x, x => _data.BalloonTipClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.BalloonTipShown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BalloonTipShown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BalloonTipShown += x, x => _data.BalloonTipShown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NotifyIcon.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.NumericUpDown"/> class as observables.
    /// </summary>
    public class RxNumericUpDownEvents : global::System.Windows.Forms.RxUpDownBaseEvents
    {
        private readonly global::System.Windows.Forms.NumericUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.NumericUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNumericUpDownEvents(global::System.Windows.Forms.NumericUpDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NumericUpDown.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NumericUpDown.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.NumericUpDown.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Panel"/> class as observables.
    /// </summary>
    public class RxPanelEvents : global::System.Windows.Forms.RxScrollableControlEvents
    {
        private readonly global::System.Windows.Forms.Panel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Panel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPanelEvents(global::System.Windows.Forms.Panel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Panel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Panel.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Panel.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Panel.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Panel.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PictureBox"/> class as observables.
    /// </summary>
    public class RxPictureBoxEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.PictureBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PictureBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPictureBoxEvents(global::System.Windows.Forms.PictureBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.AsyncCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.LoadProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ProgressChangedEventArgs> LoadProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.ProgressChangedEventHandler, global::System.ComponentModel.ProgressChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.ProgressChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadProgressChanged += x, x => _data.LoadProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.SizeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeModeChanged += x, x => _data.SizeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PictureBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewControl"/> class as observables.
    /// </summary>
    public class RxPrintPreviewControlEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.PrintPreviewControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PrintPreviewControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintPreviewControlEvents(global::System.Windows.Forms.PrintPreviewControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewControl.StartPageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StartPageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StartPageChanged += x, x => _data.StartPageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewDialog"/> class as observables.
    /// </summary>
    public class RxPrintPreviewDialogEvents : global::System.Windows.Forms.RxFormEvents
    {
        private readonly global::System.Windows.Forms.PrintPreviewDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PrintPreviewDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintPreviewDialogEvents(global::System.Windows.Forms.PrintPreviewDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MarginChanged += x, x => _data.MarginChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.MaximumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaximumSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaximumSizeChanged += x, x => _data.MaximumSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.MinimumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MinimumSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MinimumSizeChanged += x, x => _data.MinimumSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PrintPreviewDialog.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ProgressBar"/> class as observables.
    /// </summary>
    public class RxProgressBarEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.ProgressBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ProgressBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxProgressBarEvents(global::System.Windows.Forms.ProgressBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ProgressBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PropertyGrid"/> class as observables.
    /// </summary>
    public class RxPropertyGridEvents : global::System.Windows.Forms.RxContainerControlEvents
    {
        private readonly global::System.Windows.Forms.PropertyGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PropertyGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPropertyGridEvents(global::System.Windows.Forms.PropertyGrid data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.PropertySortChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PropertySortChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertySortChanged += x, x => _data.PropertySortChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.PropertyTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PropertyTabChangedEventArgs> PropertyTabChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PropertyTabChangedEventHandler, global::System.Windows.Forms.PropertyTabChangedEventArgs>(eventHandler =>
        {
            void Handler(object s, global::System.Windows.Forms.PropertyTabChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyTabChanged += x, x => _data.PropertyTabChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.PropertyValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PropertyValueChangedEventArgs> PropertyValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PropertyValueChangedEventHandler, global::System.Windows.Forms.PropertyValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object s, global::System.Windows.Forms.PropertyValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyValueChanged += x, x => _data.PropertyValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.SelectedGridItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SelectedGridItemChangedEventArgs> SelectedGridItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.SelectedGridItemChangedEventHandler, global::System.Windows.Forms.SelectedGridItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.SelectedGridItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedGridItemChanged += x, x => _data.SelectedGridItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.SelectedObjectsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedObjectsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedObjectsChanged += x, x => _data.SelectedObjectsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.PropertyGrid.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.RadioButton"/> class as observables.
    /// </summary>
    public class RxRadioButtonEvents : global::System.Windows.Forms.RxButtonBaseEvents
    {
        private readonly global::System.Windows.Forms.RadioButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.RadioButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRadioButtonEvents(global::System.Windows.Forms.RadioButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RadioButton.AppearanceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AppearanceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AppearanceChanged += x, x => _data.AppearanceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RadioButton.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RadioButton.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RadioButton.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.RichTextBox"/> class as observables.
    /// </summary>
    public class RxRichTextBoxEvents : global::System.Windows.Forms.RxTextBoxBaseEvents
    {
        private readonly global::System.Windows.Forms.RichTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.RichTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRichTextBoxEvents(global::System.Windows.Forms.RichTextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.ContentsResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ContentsResizedEventArgs> ContentsResized => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ContentsResizedEventHandler, global::System.Windows.Forms.ContentsResizedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ContentsResizedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContentsResized += x, x => _data.ContentsResized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDrop += x, x => _data.DragDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.HScroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HScroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HScroll += x, x => _data.HScroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.ImeChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeChange => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeChange += x, x => _data.ImeChange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.LinkClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LinkClickedEventArgs> LinkClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.LinkClickedEventHandler, global::System.Windows.Forms.LinkClickedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.LinkClickedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LinkClicked += x, x => _data.LinkClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.Protected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Protected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Protected += x, x => _data.Protected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.RichTextBox.VScroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VScroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VScroll += x, x => _data.VScroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ScrollableControl"/> class as observables.
    /// </summary>
    public class RxScrollableControlEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.ScrollableControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ScrollableControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollableControlEvents(global::System.Windows.Forms.ScrollableControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollableControl.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ScrollBar"/> class as observables.
    /// </summary>
    public class RxScrollBarEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollBarEvents(global::System.Windows.Forms.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ScrollBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.SplitContainer"/> class as observables.
    /// </summary>
    public class RxSplitContainerEvents : global::System.Windows.Forms.RxContainerControlEvents
    {
        private readonly global::System.Windows.Forms.SplitContainer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.SplitContainer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitContainerEvents(global::System.Windows.Forms.SplitContainer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.SplitterMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterEventArgs> SplitterMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.SplitterEventHandler, global::System.Windows.Forms.SplitterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.SplitterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SplitterMoved += x, x => _data.SplitterMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.SplitterMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterCancelEventArgs> SplitterMoving => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.SplitterCancelEventHandler, global::System.Windows.Forms.SplitterCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.SplitterCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SplitterMoving += x, x => _data.SplitterMoving -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitContainer.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Splitter"/> class as observables.
    /// </summary>
    public class RxSplitterEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.Splitter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Splitter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitterEvents(global::System.Windows.Forms.Splitter data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.SplitterMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterEventArgs> SplitterMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.SplitterEventHandler, global::System.Windows.Forms.SplitterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.SplitterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SplitterMoved += x, x => _data.SplitterMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.SplitterMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterEventArgs> SplitterMoving => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.SplitterEventHandler, global::System.Windows.Forms.SplitterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.SplitterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SplitterMoving += x, x => _data.SplitterMoving -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Splitter.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.SplitterPanel"/> class as observables.
    /// </summary>
    public class RxSplitterPanelEvents : global::System.Windows.Forms.RxPanelEvents
    {
        private readonly global::System.Windows.Forms.SplitterPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.SplitterPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitterPanelEvents(global::System.Windows.Forms.SplitterPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitterPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitterPanel.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitterPanel.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitterPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitterPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.SplitterPanel.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.StatusStrip"/> class as observables.
    /// </summary>
    public class RxStatusStripEvents : global::System.Windows.Forms.RxToolStripEvents
    {
        private readonly global::System.Windows.Forms.StatusStrip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.StatusStrip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStatusStripEvents(global::System.Windows.Forms.StatusStrip data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.StatusStrip.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TabControl"/> class as observables.
    /// </summary>
    public class RxTabControlEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.TabControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TabControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTabControlEvents(global::System.Windows.Forms.TabControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.Deselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlEventArgs> Deselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TabControlEventHandler, global::System.Windows.Forms.TabControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TabControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deselected += x, x => _data.Deselected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.Deselecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlCancelEventArgs> Deselecting => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TabControlCancelEventHandler, global::System.Windows.Forms.TabControlCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TabControlCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deselecting += x, x => _data.Deselecting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawItem += x, x => _data.DrawItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TabControlEventHandler, global::System.Windows.Forms.TabControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TabControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.Selecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlCancelEventArgs> Selecting => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TabControlCancelEventHandler, global::System.Windows.Forms.TabControlCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TabControlCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selecting += x, x => _data.Selecting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TableLayoutPanel"/> class as observables.
    /// </summary>
    public class RxTableLayoutPanelEvents : global::System.Windows.Forms.RxPanelEvents
    {
        private readonly global::System.Windows.Forms.TableLayoutPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TableLayoutPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTableLayoutPanelEvents(global::System.Windows.Forms.TableLayoutPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TableLayoutPanel.CellPaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TableLayoutCellPaintEventArgs> CellPaint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TableLayoutCellPaintEventHandler, global::System.Windows.Forms.TableLayoutCellPaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TableLayoutCellPaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellPaint += x, x => _data.CellPaint -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TabPage"/> class as observables.
    /// </summary>
    public class RxTabPageEvents : global::System.Windows.Forms.RxPanelEvents
    {
        private readonly global::System.Windows.Forms.TabPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TabPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTabPageEvents(global::System.Windows.Forms.TabPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TabPage.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogButton"/> class as observables.
    /// </summary>
    public class RxTaskDialogButtonEvents
    {
        private readonly global::System.Windows.Forms.TaskDialogButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TaskDialogButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTaskDialogButtonEvents(global::System.Windows.Forms.TaskDialogButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TaskDialogButton.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogExpander"/> class as observables.
    /// </summary>
    public class RxTaskDialogExpanderEvents
    {
        private readonly global::System.Windows.Forms.TaskDialogExpander _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TaskDialogExpander"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTaskDialogExpanderEvents(global::System.Windows.Forms.TaskDialogExpander data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TaskDialogExpander.ExpandedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ExpandedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ExpandedChanged += x, x => _data.ExpandedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogPage"/> class as observables.
    /// </summary>
    public class RxTaskDialogPageEvents
    {
        private readonly global::System.Windows.Forms.TaskDialogPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TaskDialogPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTaskDialogPageEvents(global::System.Windows.Forms.TaskDialogPage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TaskDialogPage.Created"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Created => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Created += x, x => _data.Created -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TaskDialogPage.Destroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Destroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Destroyed += x, x => _data.Destroyed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TaskDialogPage.HelpRequest"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpRequest => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HelpRequest += x, x => _data.HelpRequest -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogRadioButton"/> class as observables.
    /// </summary>
    public class RxTaskDialogRadioButtonEvents
    {
        private readonly global::System.Windows.Forms.TaskDialogRadioButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TaskDialogRadioButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTaskDialogRadioButtonEvents(global::System.Windows.Forms.TaskDialogRadioButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TaskDialogRadioButton.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TaskDialogVerificationCheckBox"/> class as observables.
    /// </summary>
    public class RxTaskDialogVerificationCheckBoxEvents
    {
        private readonly global::System.Windows.Forms.TaskDialogVerificationCheckBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TaskDialogVerificationCheckBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTaskDialogVerificationCheckBoxEvents(global::System.Windows.Forms.TaskDialogVerificationCheckBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TaskDialogVerificationCheckBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TextBox"/> class as observables.
    /// </summary>
    public class RxTextBoxEvents : global::System.Windows.Forms.RxTextBoxBaseEvents
    {
        private readonly global::System.Windows.Forms.TextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBoxEvents(global::System.Windows.Forms.TextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBox.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TextBoxBase"/> class as observables.
    /// </summary>
    public class RxTextBoxBaseEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.TextBoxBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TextBoxBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBoxBaseEvents(global::System.Windows.Forms.TextBoxBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.BorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BorderStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BorderStyleChanged += x, x => _data.BorderStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.HideSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HideSelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HideSelectionChanged += x, x => _data.HideSelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.ModifiedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModifiedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ModifiedChanged += x, x => _data.ModifiedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TextBoxBase.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ThreadExceptionDialog"/> class as observables.
    /// </summary>
    public class RxThreadExceptionDialogEvents : global::System.Windows.Forms.RxFormEvents
    {
        private readonly global::System.Windows.Forms.ThreadExceptionDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ThreadExceptionDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxThreadExceptionDialogEvents(global::System.Windows.Forms.ThreadExceptionDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ThreadExceptionDialog.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Timer"/> class as observables.
    /// </summary>
    public class RxTimerEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.Timer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Timer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimerEvents(global::System.Windows.Forms.Timer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Timer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStrip"/> class as observables.
    /// </summary>
    public class RxToolStripEvents : global::System.Windows.Forms.RxScrollableControlEvents
    {
        private readonly global::System.Windows.Forms.ToolStrip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStrip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripEvents(global::System.Windows.Forms.ToolStrip data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.BeginDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeginDrag += x, x => _data.BeginDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.EndDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EndDrag += x, x => _data.EndDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.ItemAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemEventArgs> ItemAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemEventHandler, global::System.Windows.Forms.ToolStripItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemAdded += x, x => _data.ItemAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.ItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemClickedEventArgs> ItemClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemClickedEventHandler, global::System.Windows.Forms.ToolStripItemClickedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemClickedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemClicked += x, x => _data.ItemClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.ItemRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemEventArgs> ItemRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemEventHandler, global::System.Windows.Forms.ToolStripItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemRemoved += x, x => _data.ItemRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.LayoutCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LayoutCompleted += x, x => _data.LayoutCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.LayoutStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LayoutStyleChanged += x, x => _data.LayoutStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.PaintGrip"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> PaintGrip => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaintGrip += x, x => _data.PaintGrip -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStrip.RendererChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RendererChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RendererChanged += x, x => _data.RendererChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripButton"/> class as observables.
    /// </summary>
    public class RxToolStripButtonEvents : global::System.Windows.Forms.RxToolStripItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripButtonEvents(global::System.Windows.Forms.ToolStripButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripButton.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripButton.CheckStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckStateChanged += x, x => _data.CheckStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripComboBox"/> class as observables.
    /// </summary>
    public class RxToolStripComboBoxEvents : global::System.Windows.Forms.RxToolStripControlHostEvents
    {
        private readonly global::System.Windows.Forms.ToolStripComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripComboBoxEvents(global::System.Windows.Forms.ToolStripComboBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripComboBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripComboBox.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDown += x, x => _data.DropDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripComboBox.DropDownStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownStyleChanged += x, x => _data.DropDownStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripComboBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripComboBox.TextUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextUpdate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextUpdate += x, x => _data.TextUpdate -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContainer"/> class as observables.
    /// </summary>
    public class RxToolStripContainerEvents : global::System.Windows.Forms.RxContainerControlEvents
    {
        private readonly global::System.Windows.Forms.ToolStripContainer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripContainer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripContainerEvents(global::System.Windows.Forms.ToolStripContainer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContainer.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContainer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContainer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContainer.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContainer.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContainer.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContainer.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContentPanel"/> class as observables.
    /// </summary>
    public class RxToolStripContentPanelEvents : global::System.Windows.Forms.RxPanelEvents
    {
        private readonly global::System.Windows.Forms.ToolStripContentPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripContentPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripContentPanelEvents(global::System.Windows.Forms.ToolStripContentPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.RendererChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RendererChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RendererChanged += x, x => _data.RendererChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripContentPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripControlHost"/> class as observables.
    /// </summary>
    public class RxToolStripControlHostEvents : global::System.Windows.Forms.RxToolStripItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripControlHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripControlHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripControlHostEvents(global::System.Windows.Forms.ToolStripControlHost data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.DisplayStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayStyleChanged += x, x => _data.DisplayStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripControlHost.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validating += x, x => _data.Validating -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDown"/> class as observables.
    /// </summary>
    public class RxToolStripDropDownEvents : global::System.Windows.Forms.RxToolStripEvents
    {
        private readonly global::System.Windows.Forms.ToolStripDropDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripDropDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripDropDownEvents(global::System.Windows.Forms.ToolStripDropDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.UICuesEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripDropDownClosedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripDropDownClosedEventHandler, global::System.Windows.Forms.ToolStripDropDownClosedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripDropDownClosedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripDropDownClosingEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripDropDownClosingEventHandler, global::System.Windows.Forms.ToolStripDropDownClosingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripDropDownClosingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HelpEventArgs hlpevent) => eventHandler(hlpevent);
            return Handler;
        }, x => _data.HelpRequested += x, x => _data.HelpRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Opening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Opening => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opening += x, x => _data.Opening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RegionChanged += x, x => _data.RegionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDown.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validating += x, x => _data.Validating -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem"/> class as observables.
    /// </summary>
    public class RxToolStripDropDownItemEvents : global::System.Windows.Forms.RxToolStripItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripDropDownItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripDropDownItemEvents(global::System.Windows.Forms.ToolStripDropDownItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem.DropDownItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemClickedEventArgs> DropDownItemClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemClickedEventHandler, global::System.Windows.Forms.ToolStripItemClickedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemClickedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownItemClicked += x, x => _data.DropDownItemClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem.DropDownOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownOpening += x, x => _data.DropDownOpening -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripItem"/> class as observables.
    /// </summary>
    public class RxToolStripItemEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.ToolStripItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripItemEvents(global::System.Windows.Forms.ToolStripItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.AvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AvailableChanged += x, x => _data.AvailableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.DisplayStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayStyleChanged += x, x => _data.DisplayStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDrop += x, x => _data.DragDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.OwnerChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OwnerChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OwnerChanged += x, x => _data.OwnerChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripItem.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripMenuItem"/> class as observables.
    /// </summary>
    public class RxToolStripMenuItemEvents : global::System.Windows.Forms.RxToolStripDropDownItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripMenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripMenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripMenuItemEvents(global::System.Windows.Forms.ToolStripMenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripMenuItem.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripMenuItem.CheckStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckStateChanged += x, x => _data.CheckStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripPanel"/> class as observables.
    /// </summary>
    public class RxToolStripPanelEvents : global::System.Windows.Forms.RxContainerControlEvents
    {
        private readonly global::System.Windows.Forms.ToolStripPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripPanelEvents(global::System.Windows.Forms.ToolStripPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripPanel.RendererChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RendererChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RendererChanged += x, x => _data.RendererChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripPanel.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripProgressBar"/> class as observables.
    /// </summary>
    public class RxToolStripProgressBarEvents : global::System.Windows.Forms.RxToolStripControlHostEvents
    {
        private readonly global::System.Windows.Forms.ToolStripProgressBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripProgressBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripProgressBarEvents(global::System.Windows.Forms.ToolStripProgressBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.OwnerChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OwnerChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OwnerChanged += x, x => _data.OwnerChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripProgressBar.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validating += x, x => _data.Validating -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripRenderer"/> class as observables.
    /// </summary>
    public class RxToolStripRendererEvents
    {
        private readonly global::System.Windows.Forms.ToolStripRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripRendererEvents(global::System.Windows.Forms.ToolStripRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderArrow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripArrowRenderEventArgs> RenderArrow => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripArrowRenderEventHandler, global::System.Windows.Forms.ToolStripArrowRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripArrowRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderArrow += x, x => _data.RenderArrow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderButtonBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderButtonBackground += x, x => _data.RenderButtonBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderDropDownButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderDropDownButtonBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderDropDownButtonBackground += x, x => _data.RenderDropDownButtonBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderGrip"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripGripRenderEventArgs> RenderGrip => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripGripRenderEventHandler, global::System.Windows.Forms.ToolStripGripRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripGripRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderGrip += x, x => _data.RenderGrip -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderImageMargin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderImageMargin => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderImageMargin += x, x => _data.RenderImageMargin -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderItemBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderItemBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderItemBackground += x, x => _data.RenderItemBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemImageRenderEventArgs> RenderItemCheck => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemImageRenderEventHandler, global::System.Windows.Forms.ToolStripItemImageRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemImageRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderItemCheck += x, x => _data.RenderItemCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderItemImage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemImageRenderEventArgs> RenderItemImage => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemImageRenderEventHandler, global::System.Windows.Forms.ToolStripItemImageRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemImageRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderItemImage += x, x => _data.RenderItemImage -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderItemText"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemTextRenderEventArgs> RenderItemText => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemTextRenderEventHandler, global::System.Windows.Forms.ToolStripItemTextRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemTextRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderItemText += x, x => _data.RenderItemText -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderLabelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderLabelBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderLabelBackground += x, x => _data.RenderLabelBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderMenuItemBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderMenuItemBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderMenuItemBackground += x, x => _data.RenderMenuItemBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderOverflowButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderOverflowButtonBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderOverflowButtonBackground += x, x => _data.RenderOverflowButtonBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderSeparator"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripSeparatorRenderEventArgs> RenderSeparator => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripSeparatorRenderEventHandler, global::System.Windows.Forms.ToolStripSeparatorRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripSeparatorRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderSeparator += x, x => _data.RenderSeparator -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderSplitButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderSplitButtonBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderSplitButtonBackground += x, x => _data.RenderSplitButtonBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderStatusStripSizingGrip"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderStatusStripSizingGrip => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderStatusStripSizingGrip += x, x => _data.RenderStatusStripSizingGrip -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderToolStripBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderToolStripBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderToolStripBackground += x, x => _data.RenderToolStripBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderToolStripBorder"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderToolStripBorder => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderToolStripBorder += x, x => _data.RenderToolStripBorder -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderToolStripContentPanelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripContentPanelRenderEventArgs> RenderToolStripContentPanelBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripContentPanelRenderEventHandler, global::System.Windows.Forms.ToolStripContentPanelRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripContentPanelRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderToolStripContentPanelBackground += x, x => _data.RenderToolStripContentPanelBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderToolStripPanelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripPanelRenderEventArgs> RenderToolStripPanelBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripPanelRenderEventHandler, global::System.Windows.Forms.ToolStripPanelRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripPanelRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderToolStripPanelBackground += x, x => _data.RenderToolStripPanelBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripRenderer.RenderToolStripStatusLabelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderToolStripStatusLabelBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ToolStripItemRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RenderToolStripStatusLabelBackground += x, x => _data.RenderToolStripStatusLabelBackground -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSeparator"/> class as observables.
    /// </summary>
    public class RxToolStripSeparatorEvents : global::System.Windows.Forms.RxToolStripItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripSeparator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripSeparator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripSeparatorEvents(global::System.Windows.Forms.ToolStripSeparator data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripSeparator.DisplayStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayStyleChanged += x, x => _data.DisplayStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripSeparator.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripSeparator.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSplitButton"/> class as observables.
    /// </summary>
    public class RxToolStripSplitButtonEvents : global::System.Windows.Forms.RxToolStripDropDownItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripSplitButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripSplitButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripSplitButtonEvents(global::System.Windows.Forms.ToolStripSplitButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripSplitButton.ButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ButtonClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ButtonClick += x, x => _data.ButtonClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripSplitButton.ButtonDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ButtonDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ButtonDoubleClick += x, x => _data.ButtonDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripSplitButton.DefaultItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DefaultItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DefaultItemChanged += x, x => _data.DefaultItemChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripTextBox"/> class as observables.
    /// </summary>
    public class RxToolStripTextBoxEvents : global::System.Windows.Forms.RxToolStripControlHostEvents
    {
        private readonly global::System.Windows.Forms.ToolStripTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolStripTextBoxEvents(global::System.Windows.Forms.ToolStripTextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripTextBox.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripTextBox.BorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BorderStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BorderStyleChanged += x, x => _data.BorderStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripTextBox.HideSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HideSelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HideSelectionChanged += x, x => _data.HideSelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripTextBox.ModifiedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModifiedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ModifiedChanged += x, x => _data.ModifiedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripTextBox.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripTextBox.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripTextBox.TextBoxTextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextBoxTextAlignChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextBoxTextAlignChanged += x, x => _data.TextBoxTextAlignChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolTip"/> class as observables.
    /// </summary>
    public class RxToolTipEvents : global::System.ComponentModel.RxComponentEvents
    {
        private readonly global::System.Windows.Forms.ToolTip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolTip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolTipEvents(global::System.Windows.Forms.ToolTip data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolTip.Draw"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawToolTipEventArgs> Draw => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawToolTipEventHandler, global::System.Windows.Forms.DrawToolTipEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawToolTipEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Draw += x, x => _data.Draw -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolTip.Popup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PopupEventArgs> Popup => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PopupEventHandler, global::System.Windows.Forms.PopupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PopupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Popup += x, x => _data.Popup -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TrackBar"/> class as observables.
    /// </summary>
    public class RxTrackBarEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.TrackBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TrackBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTrackBarEvents(global::System.Windows.Forms.TrackBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TrackBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TreeView"/> class as observables.
    /// </summary>
    public class RxTreeViewEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewEvents(global::System.Windows.Forms.TreeView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.AfterCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterCheck => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterCheck += x, x => _data.AfterCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.AfterCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterCollapse => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterCollapse += x, x => _data.AfterCollapse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.AfterExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterExpand => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterExpand += x, x => _data.AfterExpand -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.AfterLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.NodeLabelEditEventArgs> AfterLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.NodeLabelEditEventHandler, global::System.Windows.Forms.NodeLabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.NodeLabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterLabelEdit += x, x => _data.AfterLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.AfterSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterSelect => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterSelect += x, x => _data.AfterSelect -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.BeforeCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeCheck => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeCheck += x, x => _data.BeforeCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.BeforeCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeCollapse => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeCollapse += x, x => _data.BeforeCollapse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.BeforeExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeExpand => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeExpand += x, x => _data.BeforeExpand -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.BeforeLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.NodeLabelEditEventArgs> BeforeLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.NodeLabelEditEventHandler, global::System.Windows.Forms.NodeLabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.NodeLabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeLabelEdit += x, x => _data.BeforeLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.BeforeSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeSelect => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeSelect += x, x => _data.BeforeSelect -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.DrawNode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawTreeNodeEventArgs> DrawNode => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DrawTreeNodeEventHandler, global::System.Windows.Forms.DrawTreeNodeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DrawTreeNodeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawNode += x, x => _data.DrawNode -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.ItemDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemDragEventArgs> ItemDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.ItemDragEventHandler, global::System.Windows.Forms.ItemDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.ItemDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemDrag += x, x => _data.ItemDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.NodeMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeNodeMouseClickEventArgs> NodeMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeNodeMouseClickEventHandler, global::System.Windows.Forms.TreeNodeMouseClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeNodeMouseClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseClick += x, x => _data.NodeMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.NodeMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeNodeMouseClickEventArgs> NodeMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeNodeMouseClickEventHandler, global::System.Windows.Forms.TreeNodeMouseClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeNodeMouseClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseDoubleClick += x, x => _data.NodeMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.NodeMouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeNodeMouseHoverEventArgs> NodeMouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.TreeNodeMouseHoverEventHandler, global::System.Windows.Forms.TreeNodeMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.TreeNodeMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseHover += x, x => _data.NodeMouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.TreeView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.UpDownBase"/> class as observables.
    /// </summary>
    public class RxUpDownBaseEvents : global::System.Windows.Forms.RxContainerControlEvents
    {
        private readonly global::System.Windows.Forms.UpDownBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.UpDownBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUpDownBaseEvents(global::System.Windows.Forms.UpDownBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UpDownBase.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UpDownBase.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UpDownBase.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UpDownBase.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UpDownBase.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UpDownBase.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UpDownBase.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.UserControl"/> class as observables.
    /// </summary>
    public class RxUserControlEvents : global::System.Windows.Forms.RxContainerControlEvents
    {
        private readonly global::System.Windows.Forms.UserControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.UserControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserControlEvents(global::System.Windows.Forms.UserControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UserControl.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UserControl.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UserControl.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.UserControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.VScrollBar"/> class as observables.
    /// </summary>
    public class RxVScrollBarEvents : global::System.Windows.Forms.RxScrollBarEvents
    {
        private readonly global::System.Windows.Forms.VScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.VScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVScrollBarEvents(global::System.Windows.Forms.VScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.VScrollBar.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.WebBrowser"/> class as observables.
    /// </summary>
    public class RxWebBrowserEvents : global::System.Windows.Forms.RxWebBrowserBaseEvents
    {
        private readonly global::System.Windows.Forms.WebBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.WebBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebBrowserEvents(global::System.Windows.Forms.WebBrowser data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.CanGoBackChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanGoBackChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CanGoBackChanged += x, x => _data.CanGoBackChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.CanGoForwardChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanGoForwardChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CanGoForwardChanged += x, x => _data.CanGoForwardChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.DocumentCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserDocumentCompletedEventArgs> DocumentCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.WebBrowserDocumentCompletedEventHandler, global::System.Windows.Forms.WebBrowserDocumentCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.WebBrowserDocumentCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DocumentCompleted += x, x => _data.DocumentCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.DocumentTitleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DocumentTitleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DocumentTitleChanged += x, x => _data.DocumentTitleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.EncryptionLevelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EncryptionLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EncryptionLevelChanged += x, x => _data.EncryptionLevelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.FileDownload"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FileDownload => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FileDownload += x, x => _data.FileDownload -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserNavigatedEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.WebBrowserNavigatedEventHandler, global::System.Windows.Forms.WebBrowserNavigatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.WebBrowserNavigatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserNavigatingEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.WebBrowserNavigatingEventHandler, global::System.Windows.Forms.WebBrowserNavigatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.WebBrowserNavigatingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.NewWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> NewWindow => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NewWindow += x, x => _data.NewWindow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.ProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserProgressChangedEventArgs> ProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.WebBrowserProgressChangedEventHandler, global::System.Windows.Forms.WebBrowserProgressChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.WebBrowserProgressChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ProgressChanged += x, x => _data.ProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowser.StatusTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StatusTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StatusTextChanged += x, x => _data.StatusTextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.WebBrowserBase"/> class as observables.
    /// </summary>
    public class RxWebBrowserBaseEvents : global::System.Windows.Forms.RxControlEvents
    {
        private readonly global::System.Windows.Forms.WebBrowserBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.WebBrowserBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebBrowserBaseEvents(global::System.Windows.Forms.WebBrowserBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.UICuesEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDrop += x, x => _data.DragDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.GiveFeedbackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.HelpEventArgs hlpevent) => eventHandler(hlpevent);
            return Handler;
        }, x => _data.HelpRequested += x, x => _data.HelpRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.Layout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LayoutEventArgs> Layout => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.LayoutEventHandler, global::System.Windows.Forms.LayoutEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.LayoutEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Layout += x, x => _data.Layout -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseCaptureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseCaptureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseCaptureChanged += x, x => _data.MouseCaptureChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Forms.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.WebBrowserBase.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }
}

namespace System.Windows.Forms.ComponentModel.Com2Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Forms.ComponentModel.Com2Interop"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser"/> class.
        /// </summary>
        public static RxIComPropertyBrowserEvents Events(this global::System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser item) => new RxIComPropertyBrowserEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser"/> class as observables.
    /// </summary>
    public class RxIComPropertyBrowserEvents
    {
        private readonly global::System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIComPropertyBrowserEvents(global::System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.ComComponentNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.Design.ComponentRenameEventArgs> ComComponentNameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.Design.ComponentRenameEventHandler, global::System.ComponentModel.Design.ComponentRenameEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.Design.ComponentRenameEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ComComponentNameChanged += x, x => _data.ComComponentNameChanged -= x);
    }
}

namespace System.Windows.Forms.Design
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Forms.Design"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Design.ComponentEditorForm"/> class.
        /// </summary>
        public static RxComponentEditorFormEvents Events(this global::System.Windows.Forms.Design.ComponentEditorForm item) => new RxComponentEditorFormEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Design.ComponentEditorPage"/> class.
        /// </summary>
        public static RxComponentEditorPageEvents Events(this global::System.Windows.Forms.Design.ComponentEditorPage item) => new RxComponentEditorPageEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Design.ComponentEditorForm"/> class as observables.
    /// </summary>
    public class RxComponentEditorFormEvents : global::System.Windows.Forms.RxFormEvents
    {
        private readonly global::System.Windows.Forms.Design.ComponentEditorForm _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Design.ComponentEditorForm"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComponentEditorFormEvents(global::System.Windows.Forms.Design.ComponentEditorForm data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Design.ComponentEditorForm.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Design.ComponentEditorPage"/> class as observables.
    /// </summary>
    public class RxComponentEditorPageEvents : global::System.Windows.Forms.RxPanelEvents
    {
        private readonly global::System.Windows.Forms.Design.ComponentEditorPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Design.ComponentEditorPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComponentEditorPageEvents(global::System.Windows.Forms.Design.ComponentEditorPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Design.ComponentEditorPage.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
    }
}

namespace System.Windows.Ink
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Ink"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class.
        /// </summary>
        public static RxDrawingAttributesEvents Events(this global::System.Windows.Ink.DrawingAttributes item) => new RxDrawingAttributesEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class.
        /// </summary>
        public static RxIncrementalLassoHitTesterEvents Events(this global::System.Windows.Ink.IncrementalLassoHitTester item) => new RxIncrementalLassoHitTesterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class.
        /// </summary>
        public static RxIncrementalStrokeHitTesterEvents Events(this global::System.Windows.Ink.IncrementalStrokeHitTester item) => new RxIncrementalStrokeHitTesterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.Stroke"/> class.
        /// </summary>
        public static RxStrokeEvents Events(this global::System.Windows.Ink.Stroke item) => new RxStrokeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class.
        /// </summary>
        public static RxStrokeCollectionEvents Events(this global::System.Windows.Ink.StrokeCollection item) => new RxStrokeCollectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class as observables.
    /// </summary>
    public class RxDrawingAttributesEvents
    {
        private readonly global::System.Windows.Ink.DrawingAttributes _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDrawingAttributesEvents(global::System.Windows.Ink.DrawingAttributes data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.DrawingAttributes.AttributeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> AttributeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AttributeChanged += x, x => _data.AttributeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.DrawingAttributes.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class as observables.
    /// </summary>
    public class RxIncrementalLassoHitTesterEvents
    {
        private readonly global::System.Windows.Ink.IncrementalLassoHitTester _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIncrementalLassoHitTesterEvents(global::System.Windows.Ink.IncrementalLassoHitTester data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.LassoSelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.LassoSelectionChangedEventHandler, global::System.Windows.Ink.LassoSelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.LassoSelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class as observables.
    /// </summary>
    public class RxIncrementalStrokeHitTesterEvents
    {
        private readonly global::System.Windows.Ink.IncrementalStrokeHitTester _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIncrementalStrokeHitTesterEvents(global::System.Windows.Ink.IncrementalStrokeHitTester data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StrokeHitEventArgs> StrokeHit => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.StrokeHitEventHandler, global::System.Windows.Ink.StrokeHitEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.StrokeHitEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokeHit += x, x => _data.StrokeHit -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.Stroke"/> class as observables.
    /// </summary>
    public class RxStrokeEvents
    {
        private readonly global::System.Windows.Ink.Stroke _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.Stroke"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStrokeEvents(global::System.Windows.Ink.Stroke data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.DrawingAttributesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> DrawingAttributesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawingAttributesChanged += x, x => _data.DrawingAttributesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.DrawingAttributesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.DrawingAttributesReplacedEventArgs> DrawingAttributesReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.DrawingAttributesReplacedEventHandler, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DrawingAttributesReplaced += x, x => _data.DrawingAttributesReplaced -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Invalidated += x, x => _data.Invalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.StylusPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StylusPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusPointsChanged += x, x => _data.StylusPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.Stroke.StylusPointsReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StylusPointsReplacedEventArgs> StylusPointsReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.StylusPointsReplacedEventHandler, global::System.Windows.Ink.StylusPointsReplacedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.StylusPointsReplacedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StylusPointsReplaced += x, x => _data.StylusPointsReplaced -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class as observables.
    /// </summary>
    public class RxStrokeCollectionEvents
    {
        private readonly global::System.Windows.Ink.StrokeCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStrokeCollectionEvents(global::System.Windows.Ink.StrokeCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.StrokeCollection.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.PropertyDataChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Ink.StrokeCollection.StrokesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StrokeCollectionChangedEventArgs> StrokesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Ink.StrokeCollectionChangedEventHandler, global::System.Windows.Ink.StrokeCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Ink.StrokeCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StrokesChanged += x, x => _data.StrokesChanged -= x);
    }
}

namespace System.Windows.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.CommandBinding"/> class.
        /// </summary>
        public static RxCommandBindingEvents Events(this global::System.Windows.Input.CommandBinding item) => new RxCommandBindingEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.IManipulator"/> class.
        /// </summary>
        public static RxIManipulatorEvents Events(this global::System.Windows.Input.IManipulator item) => new RxIManipulatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.InputLanguageManager"/> class.
        /// </summary>
        public static RxInputLanguageManagerEvents Events(this global::System.Windows.Input.InputLanguageManager item) => new RxInputLanguageManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.InputManager"/> class.
        /// </summary>
        public static RxInputManagerEvents Events(this global::System.Windows.Input.InputManager item) => new RxInputManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.InputMethod"/> class.
        /// </summary>
        public static RxInputMethodEvents Events(this global::System.Windows.Input.InputMethod item) => new RxInputMethodEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.RoutedCommand"/> class.
        /// </summary>
        public static RxRoutedCommandEvents Events(this global::System.Windows.Input.RoutedCommand item) => new RxRoutedCommandEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.StylusPointCollection"/> class.
        /// </summary>
        public static RxStylusPointCollectionEvents Events(this global::System.Windows.Input.StylusPointCollection item) => new RxStylusPointCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Input.TouchDevice"/> class.
        /// </summary>
        public static RxTouchDeviceEvents Events(this global::System.Windows.Input.TouchDevice item) => new RxTouchDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.CommandBinding"/> class as observables.
    /// </summary>
    public class RxCommandBindingEvents
    {
        private readonly global::System.Windows.Input.CommandBinding _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.CommandBinding"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommandBindingEvents(global::System.Windows.Input.CommandBinding data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.CanExecute"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.CanExecuteRoutedEventArgs> CanExecute => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.CanExecuteRoutedEventHandler, global::System.Windows.Input.CanExecuteRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.CanExecuteRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CanExecute += x, x => _data.CanExecute -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.Executed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ExecutedRoutedEventArgs> Executed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.ExecutedRoutedEventHandler, global::System.Windows.Input.ExecutedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ExecutedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Executed += x, x => _data.Executed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.PreviewCanExecute"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.CanExecuteRoutedEventArgs> PreviewCanExecute => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.CanExecuteRoutedEventHandler, global::System.Windows.Input.CanExecuteRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.CanExecuteRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewCanExecute += x, x => _data.PreviewCanExecute -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandBinding.PreviewExecuted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ExecutedRoutedEventArgs> PreviewExecuted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.ExecutedRoutedEventHandler, global::System.Windows.Input.ExecutedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ExecutedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewExecuted += x, x => _data.PreviewExecuted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.IManipulator"/> class as observables.
    /// </summary>
    public class RxIManipulatorEvents
    {
        private readonly global::System.Windows.Input.IManipulator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.IManipulator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIManipulatorEvents(global::System.Windows.Input.IManipulator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.IManipulator.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Updated += x, x => _data.Updated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.InputLanguageManager"/> class as observables.
    /// </summary>
    public class RxInputLanguageManagerEvents
    {
        private readonly global::System.Windows.Input.InputLanguageManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.InputLanguageManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputLanguageManagerEvents(global::System.Windows.Input.InputLanguageManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputLanguageManager.InputLanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.InputLanguageEventArgs> InputLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.InputLanguageEventHandler, global::System.Windows.Input.InputLanguageEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.InputLanguageEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InputLanguageChanged += x, x => _data.InputLanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputLanguageManager.InputLanguageChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.InputLanguageEventArgs> InputLanguageChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.InputLanguageEventHandler, global::System.Windows.Input.InputLanguageEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.InputLanguageEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InputLanguageChanging += x, x => _data.InputLanguageChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.InputManager"/> class as observables.
    /// </summary>
    public class RxInputManagerEvents
    {
        private readonly global::System.Windows.Input.InputManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.InputManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputManagerEvents(global::System.Windows.Input.InputManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.EnterMenuMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnterMenuMode => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnterMenuMode += x, x => _data.EnterMenuMode -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.HitTestInvalidatedAsync"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HitTestInvalidatedAsync => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HitTestInvalidatedAsync += x, x => _data.HitTestInvalidatedAsync -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.LeaveMenuMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LeaveMenuMode => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LeaveMenuMode += x, x => _data.LeaveMenuMode -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PostNotifyInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.NotifyInputEventArgs> PostNotifyInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.NotifyInputEventHandler, global::System.Windows.Input.NotifyInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.NotifyInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PostNotifyInput += x, x => _data.PostNotifyInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PostProcessInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ProcessInputEventArgs> PostProcessInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.ProcessInputEventHandler, global::System.Windows.Input.ProcessInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.ProcessInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PostProcessInput += x, x => _data.PostProcessInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PreNotifyInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.NotifyInputEventArgs> PreNotifyInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.NotifyInputEventHandler, global::System.Windows.Input.NotifyInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.NotifyInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreNotifyInput += x, x => _data.PreNotifyInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputManager.PreProcessInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.PreProcessInputEventArgs> PreProcessInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.PreProcessInputEventHandler, global::System.Windows.Input.PreProcessInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.PreProcessInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreProcessInput += x, x => _data.PreProcessInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.InputMethod"/> class as observables.
    /// </summary>
    public class RxInputMethodEvents
    {
        private readonly global::System.Windows.Input.InputMethod _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.InputMethod"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputMethodEvents(global::System.Windows.Input.InputMethod data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.InputMethod.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.InputMethodStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.InputMethodStateChangedEventHandler, global::System.Windows.Input.InputMethodStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.InputMethodStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.RoutedCommand"/> class as observables.
    /// </summary>
    public class RxRoutedCommandEvents
    {
        private readonly global::System.Windows.Input.RoutedCommand _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.RoutedCommand"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRoutedCommandEvents(global::System.Windows.Input.RoutedCommand data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.RoutedCommand.CanExecuteChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanExecuteChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CanExecuteChanged += x, x => _data.CanExecuteChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.StylusPointCollection"/> class as observables.
    /// </summary>
    public class RxStylusPointCollectionEvents
    {
        private readonly global::System.Windows.Input.StylusPointCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.StylusPointCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStylusPointCollectionEvents(global::System.Windows.Input.StylusPointCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.StylusPointCollection.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Input.TouchDevice"/> class as observables.
    /// </summary>
    public class RxTouchDeviceEvents
    {
        private readonly global::System.Windows.Input.TouchDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Input.TouchDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTouchDeviceEvents(global::System.Windows.Input.TouchDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.TouchDevice.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.TouchDevice.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.TouchDevice.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Updated += x, x => _data.Updated -= x);
    }
}

namespace System.Windows.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Interop"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.D3DImage"/> class.
        /// </summary>
        public static RxD3DImageEvents Events(this global::System.Windows.Interop.D3DImage item) => new RxD3DImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.HwndHost"/> class.
        /// </summary>
        public static RxHwndHostEvents Events(this global::System.Windows.Interop.HwndHost item) => new RxHwndHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.HwndSource"/> class.
        /// </summary>
        public static RxHwndSourceEvents Events(this global::System.Windows.Interop.HwndSource item) => new RxHwndSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.D3DImage"/> class as observables.
    /// </summary>
    public class RxD3DImageEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Interop.D3DImage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.D3DImage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxD3DImageEvents(global::System.Windows.Interop.D3DImage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsFrontBufferAvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IsFrontBufferAvailableChanged += x, x => _data.IsFrontBufferAvailableChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.HwndHost"/> class as observables.
    /// </summary>
    public class RxHwndHostEvents : global::System.Windows.RxFrameworkElementEvents
    {
        private readonly global::System.Windows.Interop.HwndHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.HwndHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHwndHostEvents(global::System.Windows.Interop.HwndHost data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndHost.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.DpiChangedEventHandler, global::System.Windows.DpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.DpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.HwndSource"/> class as observables.
    /// </summary>
    public class RxHwndSourceEvents : global::System.Windows.RxPresentationSourceEvents
    {
        private readonly global::System.Windows.Interop.HwndSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.HwndSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHwndSourceEvents(global::System.Windows.Interop.HwndSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.AutoResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.AutoResizedEventArgs> AutoResized => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.AutoResizedEventHandler, global::System.Windows.AutoResizedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.AutoResizedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoResized += x, x => _data.AutoResized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disposed += x, x => _data.Disposed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.HwndDpiChangedEventArgs> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.HwndDpiChangedEventHandler, global::System.Windows.HwndDpiChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.HwndDpiChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.HwndSource.SizeToContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeToContentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeToContentChanged += x, x => _data.SizeToContentChanged -= x);
    }
}

namespace System.Windows.Markup
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Markup"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Markup.XamlReader"/> class.
        /// </summary>
        public static RxXamlReaderEvents Events(this global::System.Windows.Markup.XamlReader item) => new RxXamlReaderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Markup.XamlReader"/> class as observables.
    /// </summary>
    public class RxXamlReaderEvents
    {
        private readonly global::System.Windows.Markup.XamlReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Markup.XamlReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxXamlReaderEvents(global::System.Windows.Markup.XamlReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Markup.XamlReader.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.AsyncCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
    }
}

namespace System.Windows.Markup.Localizer
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Markup.Localizer"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class.
        /// </summary>
        public static RxBamlLocalizerEvents Events(this global::System.Windows.Markup.Localizer.BamlLocalizer item) => new RxBamlLocalizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class as observables.
    /// </summary>
    public class RxBamlLocalizerEvents
    {
        private readonly global::System.Windows.Markup.Localizer.BamlLocalizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBamlLocalizerEvents(global::System.Windows.Markup.Localizer.BamlLocalizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer.ErrorNotify"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs> ErrorNotify => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventHandler, global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ErrorNotify += x, x => _data.ErrorNotify -= x);
    }
}

namespace System.Windows.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.MediaPlayer"/> class.
        /// </summary>
        public static RxMediaPlayerEvents Events(this global::System.Windows.Media.MediaPlayer item) => new RxMediaPlayerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.MediaPlayer"/> class as observables.
    /// </summary>
    public class RxMediaPlayerEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Media.MediaPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.MediaPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlayerEvents(global::System.Windows.Media.MediaPlayer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BufferingEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BufferingStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MediaEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaEnded += x, x => _data.MediaEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> MediaFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaFailed += x, x => _data.MediaFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MediaOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MediaOpened += x, x => _data.MediaOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.MediaPlayer.ScriptCommand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.MediaScriptCommandEventArgs> ScriptCommand => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.MediaScriptCommandEventArgs>, global::System.Windows.Media.MediaScriptCommandEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.MediaScriptCommandEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScriptCommand += x, x => _data.ScriptCommand -= x);
    }
}

namespace System.Windows.Media.Animation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media.Animation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Animation.Clock"/> class.
        /// </summary>
        public static RxClockEvents Events(this global::System.Windows.Media.Animation.Clock item) => new RxClockEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class.
        /// </summary>
        public static RxTimelineEvents Events(this global::System.Windows.Media.Animation.Timeline item) => new RxTimelineEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Animation.Clock"/> class as observables.
    /// </summary>
    public class RxClockEvents
    {
        private readonly global::System.Windows.Media.Animation.Clock _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Animation.Clock"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClockEvents(global::System.Windows.Media.Animation.Clock data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentGlobalSpeedInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentGlobalSpeedInvalidated += x, x => _data.CurrentGlobalSpeedInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.CurrentStateInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentStateInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateInvalidated += x, x => _data.CurrentStateInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.CurrentTimeInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentTimeInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentTimeInvalidated += x, x => _data.CurrentTimeInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Clock.RemoveRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemoveRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RemoveRequested += x, x => _data.RemoveRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class as observables.
    /// </summary>
    public class RxTimelineEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Media.Animation.Timeline _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimelineEvents(global::System.Windows.Media.Animation.Timeline data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentGlobalSpeedInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentGlobalSpeedInvalidated += x, x => _data.CurrentGlobalSpeedInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.CurrentStateInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentStateInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentStateInvalidated += x, x => _data.CurrentStateInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.CurrentTimeInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentTimeInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentTimeInvalidated += x, x => _data.CurrentTimeInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Animation.Timeline.RemoveRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemoveRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RemoveRequested += x, x => _data.RemoveRequested -= x);
    }
}

namespace System.Windows.Media.Imaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media.Imaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class.
        /// </summary>
        public static RxBitmapDecoderEvents Events(this global::System.Windows.Media.Imaging.BitmapDecoder item) => new RxBitmapDecoderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class.
        /// </summary>
        public static RxBitmapSourceEvents Events(this global::System.Windows.Media.Imaging.BitmapSource item) => new RxBitmapSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class as observables.
    /// </summary>
    public class RxBitmapDecoderEvents
    {
        private readonly global::System.Windows.Media.Imaging.BitmapDecoder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBitmapDecoderEvents(global::System.Windows.Media.Imaging.BitmapDecoder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder.DownloadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DownloadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadCompleted += x, x => _data.DownloadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder.DownloadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DownloadFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadFailed += x, x => _data.DownloadFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder.DownloadProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.Imaging.DownloadProgressEventArgs>, global::System.Windows.Media.Imaging.DownloadProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.Imaging.DownloadProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadProgress += x, x => _data.DownloadProgress -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class as observables.
    /// </summary>
    public class RxBitmapSourceEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Media.Imaging.BitmapSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBitmapSourceEvents(global::System.Windows.Media.Imaging.BitmapSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DecodeFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DecodeFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DecodeFailed += x, x => _data.DecodeFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DownloadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DownloadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadCompleted += x, x => _data.DownloadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DownloadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DownloadFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.ExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadFailed += x, x => _data.DownloadFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Imaging.BitmapSource.DownloadProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Media.Imaging.DownloadProgressEventArgs>, global::System.Windows.Media.Imaging.DownloadProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Media.Imaging.DownloadProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DownloadProgress += x, x => _data.DownloadProgress -= x);
    }
}

namespace System.Windows.Navigation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Navigation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Navigation.NavigationService"/> class.
        /// </summary>
        public static RxNavigationServiceEvents Events(this global::System.Windows.Navigation.NavigationService item) => new RxNavigationServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class.
        /// </summary>
        public static RxNavigationWindowEvents Events(this global::System.Windows.Navigation.NavigationWindow item) => new RxNavigationWindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Navigation.NavigationService"/> class as observables.
    /// </summary>
    public class RxNavigationServiceEvents
    {
        private readonly global::System.Windows.Navigation.NavigationService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Navigation.NavigationService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationServiceEvents(global::System.Windows.Navigation.NavigationService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationService.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class as observables.
    /// </summary>
    public class RxNavigationWindowEvents : global::System.Windows.RxWindowEvents
    {
        private readonly global::System.Windows.Navigation.NavigationWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationWindowEvents(global::System.Windows.Navigation.NavigationWindow data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.FragmentNavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Navigation.NavigationWindow.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
    }
}

namespace System.Windows.Shell
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Shell"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Shell.JumpList"/> class.
        /// </summary>
        public static RxJumpListEvents Events(this global::System.Windows.Shell.JumpList item) => new RxJumpListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class.
        /// </summary>
        public static RxThumbButtonInfoEvents Events(this global::System.Windows.Shell.ThumbButtonInfo item) => new RxThumbButtonInfoEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Shell.JumpList"/> class as observables.
    /// </summary>
    public class RxJumpListEvents
    {
        private readonly global::System.Windows.Shell.JumpList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Shell.JumpList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxJumpListEvents(global::System.Windows.Shell.JumpList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Shell.JumpList.JumpItemsRejected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Shell.JumpItemsRejectedEventArgs> JumpItemsRejected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Shell.JumpItemsRejectedEventArgs>, global::System.Windows.Shell.JumpItemsRejectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Shell.JumpItemsRejectedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.JumpItemsRejected += x, x => _data.JumpItemsRejected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Shell.JumpList.JumpItemsRemovedByUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Shell.JumpItemsRemovedEventArgs> JumpItemsRemovedByUser => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Shell.JumpItemsRemovedEventArgs>, global::System.Windows.Shell.JumpItemsRemovedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Shell.JumpItemsRemovedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.JumpItemsRemovedByUser += x, x => _data.JumpItemsRemovedByUser -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class as observables.
    /// </summary>
    public class RxThumbButtonInfoEvents : global::System.Windows.RxFreezableEvents
    {
        private readonly global::System.Windows.Shell.ThumbButtonInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxThumbButtonInfoEvents(global::System.Windows.Shell.ThumbButtonInfo data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Shell.ThumbButtonInfo.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }
}

namespace System.Windows.Threading
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Threading"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.Dispatcher"/> class.
        /// </summary>
        public static RxDispatcherEvents Events(this global::System.Windows.Threading.Dispatcher item) => new RxDispatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class.
        /// </summary>
        public static RxDispatcherHooksEvents Events(this global::System.Windows.Threading.DispatcherHooks item) => new RxDispatcherHooksEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class.
        /// </summary>
        public static RxDispatcherOperationEvents Events(this global::System.Windows.Threading.DispatcherOperation item) => new RxDispatcherOperationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class.
        /// </summary>
        public static RxDispatcherTimerEvents Events(this global::System.Windows.Threading.DispatcherTimer item) => new RxDispatcherTimerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.Dispatcher"/> class as observables.
    /// </summary>
    public class RxDispatcherEvents
    {
        private readonly global::System.Windows.Threading.Dispatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.Dispatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherEvents(global::System.Windows.Threading.Dispatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.ShutdownFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShutdownFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ShutdownFinished += x, x => _data.ShutdownFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.ShutdownStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShutdownStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ShutdownStarted += x, x => _data.ShutdownStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.UnhandledException"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs> UnhandledException => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherUnhandledExceptionEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnhandledException += x, x => _data.UnhandledException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.Dispatcher.UnhandledExceptionFilter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> UnhandledExceptionFilter => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnhandledExceptionFilter += x, x => _data.UnhandledExceptionFilter -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class as observables.
    /// </summary>
    public class RxDispatcherHooksEvents
    {
        private readonly global::System.Windows.Threading.DispatcherHooks _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherHooksEvents(global::System.Windows.Threading.DispatcherHooks data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.DispatcherInactive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DispatcherInactive => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DispatcherInactive += x, x => _data.DispatcherInactive -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationAborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationAborted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationAborted += x, x => _data.OperationAborted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationCompleted += x, x => _data.OperationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationPosted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationPosted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationPosted += x, x => _data.OperationPosted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationPriorityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationPriorityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationPriorityChanged += x, x => _data.OperationPriorityChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherHooks.OperationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Threading.DispatcherHookEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OperationStarted += x, x => _data.OperationStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class as observables.
    /// </summary>
    public class RxDispatcherOperationEvents
    {
        private readonly global::System.Windows.Threading.DispatcherOperation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherOperationEvents(global::System.Windows.Threading.DispatcherOperation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherOperation.Aborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Aborted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Aborted += x, x => _data.Aborted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherOperation.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Completed += x, x => _data.Completed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class as observables.
    /// </summary>
    public class RxDispatcherTimerEvents
    {
        private readonly global::System.Windows.Threading.DispatcherTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherTimerEvents(global::System.Windows.Threading.DispatcherTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Threading.DispatcherTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }
}

namespace System.Windows
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.SystemParameters.StaticPropertyChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> SystemParametersStaticPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.SystemParameters.StaticPropertyChanged += x, x => global::System.Windows.SystemParameters.StaticPropertyChanged -= x);
    }
}

namespace System.Windows.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Data"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.BindingOperations.CollectionRegistering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Data.CollectionRegisteringEventArgs> BindingOperationsCollectionRegistering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.CollectionRegisteringEventArgs>, global::System.Windows.Data.CollectionRegisteringEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.CollectionRegisteringEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Data.BindingOperations.CollectionRegistering += x, x => global::System.Windows.Data.BindingOperations.CollectionRegistering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Data.BindingOperations.CollectionViewRegistering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Data.CollectionViewRegisteringEventArgs> BindingOperationsCollectionViewRegistering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Data.CollectionViewRegisteringEventArgs>, global::System.Windows.Data.CollectionViewRegisteringEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Data.CollectionViewRegisteringEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Data.BindingOperations.CollectionViewRegistering += x, x => global::System.Windows.Data.BindingOperations.CollectionViewRegistering -= x);
    }
}

namespace System.Windows.Diagnostics
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Diagnostics"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.BindingDiagnostics.BindingFailed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.BindingFailedEventArgs> BindingDiagnosticsBindingFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.BindingFailedEventArgs>, global::System.Windows.Diagnostics.BindingFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.BindingFailedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.BindingDiagnostics.BindingFailed += x, x => global::System.Windows.Diagnostics.BindingDiagnostics.BindingFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.GenericResourceDictionaryLoaded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs> ResourceDictionaryDiagnosticsGenericResourceDictionaryLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.GenericResourceDictionaryLoaded += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.GenericResourceDictionaryLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.StaticResourceResolved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs> ResourceDictionaryDiagnosticsStaticResourceResolved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs>, global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.StaticResourceResolvedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.StaticResourceResolved += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.StaticResourceResolved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryLoaded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs> ResourceDictionaryDiagnosticsThemedResourceDictionaryLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryLoaded += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryUnloaded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs> ResourceDictionaryDiagnosticsThemedResourceDictionaryUnloaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs>, global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryUnloaded += x, x => global::System.Windows.Diagnostics.ResourceDictionaryDiagnostics.ThemedResourceDictionaryUnloaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.VisualTreeChangeEventArgs> VisualDiagnosticsVisualTreeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.Windows.Diagnostics.VisualTreeChangeEventArgs>, global::System.Windows.Diagnostics.VisualTreeChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Diagnostics.VisualTreeChangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged += x, x => global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged -= x);
    }
}

namespace System.Windows.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Forms"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Application.ApplicationExit"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationApplicationExit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Forms.Application.ApplicationExit += x, x => global::System.Windows.Forms.Application.ApplicationExit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Application.EnterThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationEnterThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Forms.Application.EnterThreadModal += x, x => global::System.Windows.Forms.Application.EnterThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Application.Idle"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationIdle => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Forms.Application.Idle += x, x => global::System.Windows.Forms.Application.Idle -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Application.LeaveThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationLeaveThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Forms.Application.LeaveThreadModal += x, x => global::System.Windows.Forms.Application.LeaveThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Application.ThreadException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Threading.ThreadExceptionEventArgs> ApplicationThreadException => global::System.Reactive.Linq.Observable.FromEvent<global::System.Threading.ThreadExceptionEventHandler, global::System.Threading.ThreadExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Threading.ThreadExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Forms.Application.ThreadException += x, x => global::System.Windows.Forms.Application.ThreadException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.Application.ThreadExit"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationThreadExit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Forms.Application.ThreadExit += x, x => global::System.Windows.Forms.Application.ThreadExit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Forms.ToolStripManager.RendererChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ToolStripManagerRendererChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Forms.ToolStripManager.RendererChanged += x, x => global::System.Windows.Forms.ToolStripManager.RendererChanged -= x);
    }
}

namespace System.Windows.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Input"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.CommandManager.RequerySuggested"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> CommandManagerRequerySuggested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Input.CommandManager.RequerySuggested += x, x => global::System.Windows.Input.CommandManager.RequerySuggested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Input.Touch.FrameReported"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Input.TouchFrameEventArgs> TouchFrameReported => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Input.TouchFrameEventHandler, global::System.Windows.Input.TouchFrameEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Windows.Input.TouchFrameEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Input.Touch.FrameReported += x, x => global::System.Windows.Input.Touch.FrameReported -= x);
    }
}

namespace System.Windows.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Interop"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherEnterThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal += x, x => global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherLeaveThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal += x, x => global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Interop.ComponentDispatcher.ThreadIdle"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherThreadIdle => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Interop.ComponentDispatcher.ThreadIdle += x, x => global::System.Windows.Interop.ComponentDispatcher.ThreadIdle -= x);
    }
}

namespace System.Windows.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Media"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.CompositionTarget.Rendering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> CompositionTargetRendering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Media.CompositionTarget.Rendering += x, x => global::System.Windows.Media.CompositionTarget.Rendering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.RenderCapability.TierChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> RenderCapabilityTierChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Media.RenderCapability.TierChanged += x, x => global::System.Windows.Media.RenderCapability.TierChanged -= x);
    }
}

namespace System.Windows.Media.Effects
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Media.Effects"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> PixelShaderInvalidPixelShaderEncountered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered += x, x => global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered -= x);
    }
}