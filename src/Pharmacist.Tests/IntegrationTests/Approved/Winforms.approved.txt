// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;

using global::Pharmacist.Common;

namespace System.ComponentModel
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.ComponentModel"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.BackgroundWorker"/> class.
        /// </summary>
        public static BackgroundWorkerEvents Events(this global::System.ComponentModel.BackgroundWorker item) => new BackgroundWorkerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.Component"/> class.
        /// </summary>
        public static ComponentEvents Events(this global::System.ComponentModel.Component item) => new ComponentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.IBindingList"/> class.
        /// </summary>
        public static IBindingListEvents Events(this global::System.ComponentModel.IBindingList item) => new IBindingListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.IComponent"/> class.
        /// </summary>
        public static IComponentEvents Events(this global::System.ComponentModel.IComponent item) => new IComponentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.INotifyDataErrorInfo"/> class.
        /// </summary>
        public static INotifyDataErrorInfoEvents Events(this global::System.ComponentModel.INotifyDataErrorInfo item) => new INotifyDataErrorInfoEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.INotifyPropertyChanged"/> class.
        /// </summary>
        public static INotifyPropertyChangedEvents Events(this global::System.ComponentModel.INotifyPropertyChanged item) => new INotifyPropertyChangedEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.INotifyPropertyChanging"/> class.
        /// </summary>
        public static INotifyPropertyChangingEvents Events(this global::System.ComponentModel.INotifyPropertyChanging item) => new INotifyPropertyChangingEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.ISupportInitializeNotification"/> class.
        /// </summary>
        public static ISupportInitializeNotificationEvents Events(this global::System.ComponentModel.ISupportInitializeNotification item) => new ISupportInitializeNotificationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.MarshalByValueComponent"/> class.
        /// </summary>
        public static MarshalByValueComponentEvents Events(this global::System.ComponentModel.MarshalByValueComponent item) => new MarshalByValueComponentEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.BackgroundWorker"/> class as observables.
    /// </summary>
    public class BackgroundWorkerEvents
    {
        private readonly global::System.ComponentModel.BackgroundWorker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.BackgroundWorker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BackgroundWorkerEvents(global::System.ComponentModel.BackgroundWorker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.BackgroundWorker.DoWork"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.DoWorkEventArgs> DoWork => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.DoWorkEventHandler, global::System.ComponentModel.DoWorkEventArgs>(x => _data.DoWork += x, x => _data.DoWork -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.BackgroundWorker.ProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ProgressChangedEventArgs> ProgressChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.ProgressChangedEventHandler, global::System.ComponentModel.ProgressChangedEventArgs>(x => _data.ProgressChanged += x, x => _data.ProgressChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.RunWorkerCompletedEventArgs> RunWorkerCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.RunWorkerCompletedEventHandler, global::System.ComponentModel.RunWorkerCompletedEventArgs>(x => _data.RunWorkerCompleted += x, x => _data.RunWorkerCompleted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.Component"/> class as observables.
    /// </summary>
    public class ComponentEvents
    {
        private readonly global::System.ComponentModel.Component _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.Component"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ComponentEvents(global::System.ComponentModel.Component data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.Component.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disposed += x, x => _data.Disposed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.IBindingList"/> class as observables.
    /// </summary>
    public class IBindingListEvents
    {
        private readonly global::System.ComponentModel.IBindingList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.IBindingList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IBindingListEvents(global::System.ComponentModel.IBindingList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.IBindingList.ListChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ListChangedEventArgs> ListChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.ListChangedEventHandler, global::System.ComponentModel.ListChangedEventArgs>(x => _data.ListChanged += x, x => _data.ListChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.IComponent"/> class as observables.
    /// </summary>
    public class IComponentEvents
    {
        private readonly global::System.ComponentModel.IComponent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.IComponent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IComponentEvents(global::System.ComponentModel.IComponent data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.IComponent.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disposed += x, x => _data.Disposed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.INotifyDataErrorInfo"/> class as observables.
    /// </summary>
    public class INotifyDataErrorInfoEvents
    {
        private readonly global::System.ComponentModel.INotifyDataErrorInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.INotifyDataErrorInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public INotifyDataErrorInfoEvents(global::System.ComponentModel.INotifyDataErrorInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.DataErrorsChangedEventArgs> ErrorsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.ComponentModel.DataErrorsChangedEventArgs>, global::System.ComponentModel.DataErrorsChangedEventArgs>(x => _data.ErrorsChanged += x, x => _data.ErrorsChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.INotifyPropertyChanged"/> class as observables.
    /// </summary>
    public class INotifyPropertyChangedEvents
    {
        private readonly global::System.ComponentModel.INotifyPropertyChanged _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.INotifyPropertyChanged"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public INotifyPropertyChangedEvents(global::System.ComponentModel.INotifyPropertyChanged data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.INotifyPropertyChanging"/> class as observables.
    /// </summary>
    public class INotifyPropertyChangingEvents
    {
        private readonly global::System.ComponentModel.INotifyPropertyChanging _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.INotifyPropertyChanging"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public INotifyPropertyChangingEvents(global::System.ComponentModel.INotifyPropertyChanging data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangingEventArgs> PropertyChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.PropertyChangingEventHandler, global::System.ComponentModel.PropertyChangingEventArgs>(x => _data.PropertyChanging += x, x => _data.PropertyChanging -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.ISupportInitializeNotification"/> class as observables.
    /// </summary>
    public class ISupportInitializeNotificationEvents
    {
        private readonly global::System.ComponentModel.ISupportInitializeNotification _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.ISupportInitializeNotification"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ISupportInitializeNotificationEvents(global::System.ComponentModel.ISupportInitializeNotification data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.ISupportInitializeNotification.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Initialized += x, x => _data.Initialized -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.MarshalByValueComponent"/> class as observables.
    /// </summary>
    public class MarshalByValueComponentEvents
    {
        private readonly global::System.ComponentModel.MarshalByValueComponent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.MarshalByValueComponent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MarshalByValueComponentEvents(global::System.ComponentModel.MarshalByValueComponent data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.MarshalByValueComponent.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disposed += x, x => _data.Disposed -= x).Select(x => x.EventArgs);
    }
}

namespace System.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Data"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.ConstraintCollection"/> class.
        /// </summary>
        public static ConstraintCollectionEvents Events(this global::System.Data.ConstraintCollection item) => new ConstraintCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataColumnCollection"/> class.
        /// </summary>
        public static DataColumnCollectionEvents Events(this global::System.Data.DataColumnCollection item) => new DataColumnCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataRelationCollection"/> class.
        /// </summary>
        public static DataRelationCollectionEvents Events(this global::System.Data.DataRelationCollection item) => new DataRelationCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataRowView"/> class.
        /// </summary>
        public static DataRowViewEvents Events(this global::System.Data.DataRowView item) => new DataRowViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataSet"/> class.
        /// </summary>
        public static DataSetEvents Events(this global::System.Data.DataSet item) => new DataSetEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataTable"/> class.
        /// </summary>
        public static DataTableEvents Events(this global::System.Data.DataTable item) => new DataTableEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataTableCollection"/> class.
        /// </summary>
        public static DataTableCollectionEvents Events(this global::System.Data.DataTableCollection item) => new DataTableCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataView"/> class.
        /// </summary>
        public static DataViewEvents Events(this global::System.Data.DataView item) => new DataViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Data.DataViewManager"/> class.
        /// </summary>
        public static DataViewManagerEvents Events(this global::System.Data.DataViewManager item) => new DataViewManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.ConstraintCollection"/> class as observables.
    /// </summary>
    public class ConstraintCollectionEvents
    {
        private readonly global::System.Data.ConstraintCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.ConstraintCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ConstraintCollectionEvents(global::System.Data.ConstraintCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.ConstraintCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataColumnCollection"/> class as observables.
    /// </summary>
    public class DataColumnCollectionEvents
    {
        private readonly global::System.Data.DataColumnCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataColumnCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataColumnCollectionEvents(global::System.Data.DataColumnCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataColumnCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataRelationCollection"/> class as observables.
    /// </summary>
    public class DataRelationCollectionEvents
    {
        private readonly global::System.Data.DataRelationCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataRelationCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataRelationCollectionEvents(global::System.Data.DataRelationCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataRelationCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataRowView"/> class as observables.
    /// </summary>
    public class DataRowViewEvents
    {
        private readonly global::System.Data.DataRowView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataRowView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataRowViewEvents(global::System.Data.DataRowView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataRowView.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataSet"/> class as observables.
    /// </summary>
    public class DataSetEvents
    {
        private readonly global::System.Data.DataSet _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataSet"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataSetEvents(global::System.Data.DataSet data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataSet.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Initialized += x, x => _data.Initialized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataSet.MergeFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.MergeFailedEventArgs> MergeFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.MergeFailedEventHandler, global::System.Data.MergeFailedEventArgs>(x => _data.MergeFailed += x, x => _data.MergeFailed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataTable"/> class as observables.
    /// </summary>
    public class DataTableEvents
    {
        private readonly global::System.Data.DataTable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataTable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataTableEvents(global::System.Data.DataTable data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.ColumnChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataColumnChangeEventArgs> ColumnChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataColumnChangeEventHandler, global::System.Data.DataColumnChangeEventArgs>(x => _data.ColumnChanged += x, x => _data.ColumnChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.ColumnChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataColumnChangeEventArgs> ColumnChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataColumnChangeEventHandler, global::System.Data.DataColumnChangeEventArgs>(x => _data.ColumnChanging += x, x => _data.ColumnChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Initialized += x, x => _data.Initialized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.RowChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataRowChangeEventArgs> RowChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataRowChangeEventHandler, global::System.Data.DataRowChangeEventArgs>(x => _data.RowChanged += x, x => _data.RowChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.RowChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataRowChangeEventArgs> RowChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataRowChangeEventHandler, global::System.Data.DataRowChangeEventArgs>(x => _data.RowChanging += x, x => _data.RowChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.RowDeleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataRowChangeEventArgs> RowDeleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataRowChangeEventHandler, global::System.Data.DataRowChangeEventArgs>(x => _data.RowDeleted += x, x => _data.RowDeleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.RowDeleting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataRowChangeEventArgs> RowDeleting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataRowChangeEventHandler, global::System.Data.DataRowChangeEventArgs>(x => _data.RowDeleting += x, x => _data.RowDeleting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.TableCleared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataTableClearEventArgs> TableCleared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataTableClearEventHandler, global::System.Data.DataTableClearEventArgs>(x => _data.TableCleared += x, x => _data.TableCleared -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.TableClearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataTableClearEventArgs> TableClearing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataTableClearEventHandler, global::System.Data.DataTableClearEventArgs>(x => _data.TableClearing += x, x => _data.TableClearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTable.TableNewRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Data.DataTableNewRowEventArgs> TableNewRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Data.DataTableNewRowEventHandler, global::System.Data.DataTableNewRowEventArgs>(x => _data.TableNewRow += x, x => _data.TableNewRow -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataTableCollection"/> class as observables.
    /// </summary>
    public class DataTableCollectionEvents
    {
        private readonly global::System.Data.DataTableCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataTableCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataTableCollectionEvents(global::System.Data.DataTableCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTableCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataTableCollection.CollectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanging += x, x => _data.CollectionChanging -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataView"/> class as observables.
    /// </summary>
    public class DataViewEvents
    {
        private readonly global::System.Data.DataView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataViewEvents(global::System.Data.DataView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataView.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Initialized += x, x => _data.Initialized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataView.ListChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ListChangedEventArgs> ListChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.ListChangedEventHandler, global::System.ComponentModel.ListChangedEventArgs>(x => _data.ListChanged += x, x => _data.ListChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Data.DataViewManager"/> class as observables.
    /// </summary>
    public class DataViewManagerEvents
    {
        private readonly global::System.Data.DataViewManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Data.DataViewManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataViewManagerEvents(global::System.Data.DataViewManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Data.DataViewManager.ListChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ListChangedEventArgs> ListChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.ListChangedEventHandler, global::System.ComponentModel.ListChangedEventArgs>(x => _data.ListChanged += x, x => _data.ListChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Diagnostics
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Diagnostics"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Diagnostics.EventLog"/> class.
        /// </summary>
        public static EventLogEvents Events(this global::System.Diagnostics.EventLog item) => new EventLogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Diagnostics.Process"/> class.
        /// </summary>
        public static ProcessEvents Events(this global::System.Diagnostics.Process item) => new ProcessEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Diagnostics.EventLog"/> class as observables.
    /// </summary>
    public class EventLogEvents
    {
        private readonly global::System.Diagnostics.EventLog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Diagnostics.EventLog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EventLogEvents(global::System.Diagnostics.EventLog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Diagnostics.EventLog.EntryWritten"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Diagnostics.EntryWrittenEventArgs> EntryWritten => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Diagnostics.EntryWrittenEventHandler, global::System.Diagnostics.EntryWrittenEventArgs>(x => _data.EntryWritten += x, x => _data.EntryWritten -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Diagnostics.Process"/> class as observables.
    /// </summary>
    public class ProcessEvents
    {
        private readonly global::System.Diagnostics.Process _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Diagnostics.Process"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ProcessEvents(global::System.Diagnostics.Process data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Diagnostics.Process.ErrorDataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Diagnostics.DataReceivedEventArgs> ErrorDataReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Diagnostics.DataReceivedEventHandler, global::System.Diagnostics.DataReceivedEventArgs>(x => _data.ErrorDataReceived += x, x => _data.ErrorDataReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Diagnostics.Process.Exited"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Exited => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Exited += x, x => _data.Exited -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Diagnostics.Process.OutputDataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Diagnostics.DataReceivedEventArgs> OutputDataReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Diagnostics.DataReceivedEventHandler, global::System.Diagnostics.DataReceivedEventArgs>(x => _data.OutputDataReceived += x, x => _data.OutputDataReceived -= x).Select(x => x.EventArgs);
    }
}

namespace System.IO
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.IO"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.IO.FileSystemWatcher"/> class.
        /// </summary>
        public static FileSystemWatcherEvents Events(this global::System.IO.FileSystemWatcher item) => new FileSystemWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.IO.FileSystemWatcher"/> class as observables.
    /// </summary>
    public class FileSystemWatcherEvents
    {
        private readonly global::System.IO.FileSystemWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.IO.FileSystemWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FileSystemWatcherEvents(global::System.IO.FileSystemWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.FileSystemWatcher.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.FileSystemEventArgs> Changed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.FileSystemEventHandler, global::System.IO.FileSystemEventArgs>(x => _data.Changed += x, x => _data.Changed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.FileSystemWatcher.Created"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.FileSystemEventArgs> Created => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.FileSystemEventHandler, global::System.IO.FileSystemEventArgs>(x => _data.Created += x, x => _data.Created -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.FileSystemWatcher.Deleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.FileSystemEventArgs> Deleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.FileSystemEventHandler, global::System.IO.FileSystemEventArgs>(x => _data.Deleted += x, x => _data.Deleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.FileSystemWatcher.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.ErrorEventHandler, global::System.IO.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.FileSystemWatcher.Renamed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.RenamedEventArgs> Renamed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.RenamedEventHandler, global::System.IO.RenamedEventArgs>(x => _data.Renamed += x, x => _data.Renamed -= x).Select(x => x.EventArgs);
    }
}

namespace System.IO.Ports
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.IO.Ports"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.IO.Ports.SerialPort"/> class.
        /// </summary>
        public static SerialPortEvents Events(this global::System.IO.Ports.SerialPort item) => new SerialPortEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.IO.Ports.SerialPort"/> class as observables.
    /// </summary>
    public class SerialPortEvents
    {
        private readonly global::System.IO.Ports.SerialPort _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.IO.Ports.SerialPort"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SerialPortEvents(global::System.IO.Ports.SerialPort data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.Ports.SerialPort.DataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.Ports.SerialDataReceivedEventArgs> DataReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.Ports.SerialDataReceivedEventHandler, global::System.IO.Ports.SerialDataReceivedEventArgs>(x => _data.DataReceived += x, x => _data.DataReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.Ports.SerialPort.ErrorReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.Ports.SerialErrorReceivedEventArgs> ErrorReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.Ports.SerialErrorReceivedEventHandler, global::System.IO.Ports.SerialErrorReceivedEventArgs>(x => _data.ErrorReceived += x, x => _data.ErrorReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.Ports.SerialPort.PinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.Ports.SerialPinChangedEventArgs> PinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.Ports.SerialPinChangedEventHandler, global::System.IO.Ports.SerialPinChangedEventArgs>(x => _data.PinChanged += x, x => _data.PinChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Messaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Messaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Messaging.MessageQueue"/> class.
        /// </summary>
        public static MessageQueueEvents Events(this global::System.Messaging.MessageQueue item) => new MessageQueueEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Messaging.MessageQueue"/> class as observables.
    /// </summary>
    public class MessageQueueEvents
    {
        private readonly global::System.Messaging.MessageQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Messaging.MessageQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MessageQueueEvents(global::System.Messaging.MessageQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Messaging.MessageQueue.PeekCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Messaging.PeekCompletedEventArgs> PeekCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Messaging.PeekCompletedEventHandler, global::System.Messaging.PeekCompletedEventArgs>(x => _data.PeekCompleted += x, x => _data.PeekCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Messaging.MessageQueue.ReceiveCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Messaging.ReceiveCompletedEventArgs> ReceiveCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Messaging.ReceiveCompletedEventHandler, global::System.Messaging.ReceiveCompletedEventArgs>(x => _data.ReceiveCompleted += x, x => _data.ReceiveCompleted -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Forms"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ApplicationContext"/> class.
        /// </summary>
        public static ApplicationContextEvents Events(this global::System.Windows.Forms.ApplicationContext item) => new ApplicationContextEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.AutoCompleteStringCollection"/> class.
        /// </summary>
        public static AutoCompleteStringCollectionEvents Events(this global::System.Windows.Forms.AutoCompleteStringCollection item) => new AutoCompleteStringCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.AxHost"/> class.
        /// </summary>
        public static AxHostEvents Events(this global::System.Windows.Forms.AxHost item) => new AxHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Binding"/> class.
        /// </summary>
        public static BindingEvents Events(this global::System.Windows.Forms.Binding item) => new BindingEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingContext"/> class.
        /// </summary>
        public static BindingContextEvents Events(this global::System.Windows.Forms.BindingContext item) => new BindingContextEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingManagerBase"/> class.
        /// </summary>
        public static BindingManagerBaseEvents Events(this global::System.Windows.Forms.BindingManagerBase item) => new BindingManagerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingNavigator"/> class.
        /// </summary>
        public static BindingNavigatorEvents Events(this global::System.Windows.Forms.BindingNavigator item) => new BindingNavigatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingsCollection"/> class.
        /// </summary>
        public static BindingsCollectionEvents Events(this global::System.Windows.Forms.BindingsCollection item) => new BindingsCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.BindingSource"/> class.
        /// </summary>
        public static BindingSourceEvents Events(this global::System.Windows.Forms.BindingSource item) => new BindingSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Button"/> class.
        /// </summary>
        public static ButtonEvents Events(this global::System.Windows.Forms.Button item) => new ButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ButtonBase"/> class.
        /// </summary>
        public static ButtonBaseEvents Events(this global::System.Windows.Forms.ButtonBase item) => new ButtonBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CheckBox"/> class.
        /// </summary>
        public static CheckBoxEvents Events(this global::System.Windows.Forms.CheckBox item) => new CheckBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CheckedListBox"/> class.
        /// </summary>
        public static CheckedListBoxEvents Events(this global::System.Windows.Forms.CheckedListBox item) => new CheckedListBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ComboBox"/> class.
        /// </summary>
        public static ComboBoxEvents Events(this global::System.Windows.Forms.ComboBox item) => new ComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CommonDialog"/> class.
        /// </summary>
        public static CommonDialogEvents Events(this global::System.Windows.Forms.CommonDialog item) => new CommonDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ContainerControl"/> class.
        /// </summary>
        public static ContainerControlEvents Events(this global::System.Windows.Forms.ContainerControl item) => new ContainerControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ContextMenu"/> class.
        /// </summary>
        public static ContextMenuEvents Events(this global::System.Windows.Forms.ContextMenu item) => new ContextMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Control"/> class.
        /// </summary>
        public static ControlEvents Events(this global::System.Windows.Forms.Control item) => new ControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.CurrencyManager"/> class.
        /// </summary>
        public static CurrencyManagerEvents Events(this global::System.Windows.Forms.CurrencyManager item) => new CurrencyManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGrid"/> class.
        /// </summary>
        public static DataGridEvents Events(this global::System.Windows.Forms.DataGrid item) => new DataGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridBoolColumn"/> class.
        /// </summary>
        public static DataGridBoolColumnEvents Events(this global::System.Windows.Forms.DataGridBoolColumn item) => new DataGridBoolColumnEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridColumnStyle"/> class.
        /// </summary>
        public static DataGridColumnStyleEvents Events(this global::System.Windows.Forms.DataGridColumnStyle item) => new DataGridColumnStyleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridTableStyle"/> class.
        /// </summary>
        public static DataGridTableStyleEvents Events(this global::System.Windows.Forms.DataGridTableStyle item) => new DataGridTableStyleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridView"/> class.
        /// </summary>
        public static DataGridViewEvents Events(this global::System.Windows.Forms.DataGridView item) => new DataGridViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewCellCollection"/> class.
        /// </summary>
        public static DataGridViewCellCollectionEvents Events(this global::System.Windows.Forms.DataGridViewCellCollection item) => new DataGridViewCellCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumn"/> class.
        /// </summary>
        public static DataGridViewColumnEvents Events(this global::System.Windows.Forms.DataGridViewColumn item) => new DataGridViewColumnEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumnCollection"/> class.
        /// </summary>
        public static DataGridViewColumnCollectionEvents Events(this global::System.Windows.Forms.DataGridViewColumnCollection item) => new DataGridViewColumnCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewRowCollection"/> class.
        /// </summary>
        public static DataGridViewRowCollectionEvents Events(this global::System.Windows.Forms.DataGridViewRowCollection item) => new DataGridViewRowCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DateTimePicker"/> class.
        /// </summary>
        public static DateTimePickerEvents Events(this global::System.Windows.Forms.DateTimePicker item) => new DateTimePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DomainUpDown"/> class.
        /// </summary>
        public static DomainUpDownEvents Events(this global::System.Windows.Forms.DomainUpDown item) => new DomainUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ErrorProvider"/> class.
        /// </summary>
        public static ErrorProviderEvents Events(this global::System.Windows.Forms.ErrorProvider item) => new ErrorProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.FileDialog"/> class.
        /// </summary>
        public static FileDialogEvents Events(this global::System.Windows.Forms.FileDialog item) => new FileDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.FolderBrowserDialog"/> class.
        /// </summary>
        public static FolderBrowserDialogEvents Events(this global::System.Windows.Forms.FolderBrowserDialog item) => new FolderBrowserDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.FontDialog"/> class.
        /// </summary>
        public static FontDialogEvents Events(this global::System.Windows.Forms.FontDialog item) => new FontDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Form"/> class.
        /// </summary>
        public static FormEvents Events(this global::System.Windows.Forms.Form item) => new FormEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.GridColumnStylesCollection"/> class.
        /// </summary>
        public static GridColumnStylesCollectionEvents Events(this global::System.Windows.Forms.GridColumnStylesCollection item) => new GridColumnStylesCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.GridTableStylesCollection"/> class.
        /// </summary>
        public static GridTableStylesCollectionEvents Events(this global::System.Windows.Forms.GridTableStylesCollection item) => new GridTableStylesCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.GroupBox"/> class.
        /// </summary>
        public static GroupBoxEvents Events(this global::System.Windows.Forms.GroupBox item) => new GroupBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.HtmlDocument"/> class.
        /// </summary>
        public static HtmlDocumentEvents Events(this global::System.Windows.Forms.HtmlDocument item) => new HtmlDocumentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.HtmlElement"/> class.
        /// </summary>
        public static HtmlElementEvents Events(this global::System.Windows.Forms.HtmlElement item) => new HtmlElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.HtmlWindow"/> class.
        /// </summary>
        public static HtmlWindowEvents Events(this global::System.Windows.Forms.HtmlWindow item) => new HtmlWindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ImageList"/> class.
        /// </summary>
        public static ImageListEvents Events(this global::System.Windows.Forms.ImageList item) => new ImageListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Label"/> class.
        /// </summary>
        public static LabelEvents Events(this global::System.Windows.Forms.Label item) => new LabelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.LinkLabel"/> class.
        /// </summary>
        public static LinkLabelEvents Events(this global::System.Windows.Forms.LinkLabel item) => new LinkLabelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ListBox"/> class.
        /// </summary>
        public static ListBoxEvents Events(this global::System.Windows.Forms.ListBox item) => new ListBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ListControl"/> class.
        /// </summary>
        public static ListControlEvents Events(this global::System.Windows.Forms.ListControl item) => new ListControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ListView"/> class.
        /// </summary>
        public static ListViewEvents Events(this global::System.Windows.Forms.ListView item) => new ListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MainMenu"/> class.
        /// </summary>
        public static MainMenuEvents Events(this global::System.Windows.Forms.MainMenu item) => new MainMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MaskedTextBox"/> class.
        /// </summary>
        public static MaskedTextBoxEvents Events(this global::System.Windows.Forms.MaskedTextBox item) => new MaskedTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MenuItem"/> class.
        /// </summary>
        public static MenuItemEvents Events(this global::System.Windows.Forms.MenuItem item) => new MenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MenuStrip"/> class.
        /// </summary>
        public static MenuStripEvents Events(this global::System.Windows.Forms.MenuStrip item) => new MenuStripEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.MonthCalendar"/> class.
        /// </summary>
        public static MonthCalendarEvents Events(this global::System.Windows.Forms.MonthCalendar item) => new MonthCalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.NotifyIcon"/> class.
        /// </summary>
        public static NotifyIconEvents Events(this global::System.Windows.Forms.NotifyIcon item) => new NotifyIconEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.NumericUpDown"/> class.
        /// </summary>
        public static NumericUpDownEvents Events(this global::System.Windows.Forms.NumericUpDown item) => new NumericUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Panel"/> class.
        /// </summary>
        public static PanelEvents Events(this global::System.Windows.Forms.Panel item) => new PanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PictureBox"/> class.
        /// </summary>
        public static PictureBoxEvents Events(this global::System.Windows.Forms.PictureBox item) => new PictureBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewControl"/> class.
        /// </summary>
        public static PrintPreviewControlEvents Events(this global::System.Windows.Forms.PrintPreviewControl item) => new PrintPreviewControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewDialog"/> class.
        /// </summary>
        public static PrintPreviewDialogEvents Events(this global::System.Windows.Forms.PrintPreviewDialog item) => new PrintPreviewDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ProgressBar"/> class.
        /// </summary>
        public static ProgressBarEvents Events(this global::System.Windows.Forms.ProgressBar item) => new ProgressBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.PropertyGrid"/> class.
        /// </summary>
        public static PropertyGridEvents Events(this global::System.Windows.Forms.PropertyGrid item) => new PropertyGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.RadioButton"/> class.
        /// </summary>
        public static RadioButtonEvents Events(this global::System.Windows.Forms.RadioButton item) => new RadioButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.RichTextBox"/> class.
        /// </summary>
        public static RichTextBoxEvents Events(this global::System.Windows.Forms.RichTextBox item) => new RichTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ScrollableControl"/> class.
        /// </summary>
        public static ScrollableControlEvents Events(this global::System.Windows.Forms.ScrollableControl item) => new ScrollableControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ScrollBar"/> class.
        /// </summary>
        public static ScrollBarEvents Events(this global::System.Windows.Forms.ScrollBar item) => new ScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.SplitContainer"/> class.
        /// </summary>
        public static SplitContainerEvents Events(this global::System.Windows.Forms.SplitContainer item) => new SplitContainerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Splitter"/> class.
        /// </summary>
        public static SplitterEvents Events(this global::System.Windows.Forms.Splitter item) => new SplitterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.SplitterPanel"/> class.
        /// </summary>
        public static SplitterPanelEvents Events(this global::System.Windows.Forms.SplitterPanel item) => new SplitterPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.StatusBar"/> class.
        /// </summary>
        public static StatusBarEvents Events(this global::System.Windows.Forms.StatusBar item) => new StatusBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.StatusStrip"/> class.
        /// </summary>
        public static StatusStripEvents Events(this global::System.Windows.Forms.StatusStrip item) => new StatusStripEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TabControl"/> class.
        /// </summary>
        public static TabControlEvents Events(this global::System.Windows.Forms.TabControl item) => new TabControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TableLayoutPanel"/> class.
        /// </summary>
        public static TableLayoutPanelEvents Events(this global::System.Windows.Forms.TableLayoutPanel item) => new TableLayoutPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TabPage"/> class.
        /// </summary>
        public static TabPageEvents Events(this global::System.Windows.Forms.TabPage item) => new TabPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TextBox"/> class.
        /// </summary>
        public static TextBoxEvents Events(this global::System.Windows.Forms.TextBox item) => new TextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TextBoxBase"/> class.
        /// </summary>
        public static TextBoxBaseEvents Events(this global::System.Windows.Forms.TextBoxBase item) => new TextBoxBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ThreadExceptionDialog"/> class.
        /// </summary>
        public static ThreadExceptionDialogEvents Events(this global::System.Windows.Forms.ThreadExceptionDialog item) => new ThreadExceptionDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.Timer"/> class.
        /// </summary>
        public static TimerEvents Events(this global::System.Windows.Forms.Timer item) => new TimerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolBar"/> class.
        /// </summary>
        public static ToolBarEvents Events(this global::System.Windows.Forms.ToolBar item) => new ToolBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStrip"/> class.
        /// </summary>
        public static ToolStripEvents Events(this global::System.Windows.Forms.ToolStrip item) => new ToolStripEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripButton"/> class.
        /// </summary>
        public static ToolStripButtonEvents Events(this global::System.Windows.Forms.ToolStripButton item) => new ToolStripButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripComboBox"/> class.
        /// </summary>
        public static ToolStripComboBoxEvents Events(this global::System.Windows.Forms.ToolStripComboBox item) => new ToolStripComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContainer"/> class.
        /// </summary>
        public static ToolStripContainerEvents Events(this global::System.Windows.Forms.ToolStripContainer item) => new ToolStripContainerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContentPanel"/> class.
        /// </summary>
        public static ToolStripContentPanelEvents Events(this global::System.Windows.Forms.ToolStripContentPanel item) => new ToolStripContentPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripControlHost"/> class.
        /// </summary>
        public static ToolStripControlHostEvents Events(this global::System.Windows.Forms.ToolStripControlHost item) => new ToolStripControlHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDown"/> class.
        /// </summary>
        public static ToolStripDropDownEvents Events(this global::System.Windows.Forms.ToolStripDropDown item) => new ToolStripDropDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem"/> class.
        /// </summary>
        public static ToolStripDropDownItemEvents Events(this global::System.Windows.Forms.ToolStripDropDownItem item) => new ToolStripDropDownItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripItem"/> class.
        /// </summary>
        public static ToolStripItemEvents Events(this global::System.Windows.Forms.ToolStripItem item) => new ToolStripItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripMenuItem"/> class.
        /// </summary>
        public static ToolStripMenuItemEvents Events(this global::System.Windows.Forms.ToolStripMenuItem item) => new ToolStripMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripPanel"/> class.
        /// </summary>
        public static ToolStripPanelEvents Events(this global::System.Windows.Forms.ToolStripPanel item) => new ToolStripPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripProgressBar"/> class.
        /// </summary>
        public static ToolStripProgressBarEvents Events(this global::System.Windows.Forms.ToolStripProgressBar item) => new ToolStripProgressBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripRenderer"/> class.
        /// </summary>
        public static ToolStripRendererEvents Events(this global::System.Windows.Forms.ToolStripRenderer item) => new ToolStripRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSeparator"/> class.
        /// </summary>
        public static ToolStripSeparatorEvents Events(this global::System.Windows.Forms.ToolStripSeparator item) => new ToolStripSeparatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSplitButton"/> class.
        /// </summary>
        public static ToolStripSplitButtonEvents Events(this global::System.Windows.Forms.ToolStripSplitButton item) => new ToolStripSplitButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolStripTextBox"/> class.
        /// </summary>
        public static ToolStripTextBoxEvents Events(this global::System.Windows.Forms.ToolStripTextBox item) => new ToolStripTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.ToolTip"/> class.
        /// </summary>
        public static ToolTipEvents Events(this global::System.Windows.Forms.ToolTip item) => new ToolTipEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TrackBar"/> class.
        /// </summary>
        public static TrackBarEvents Events(this global::System.Windows.Forms.TrackBar item) => new TrackBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.TreeView"/> class.
        /// </summary>
        public static TreeViewEvents Events(this global::System.Windows.Forms.TreeView item) => new TreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.UpDownBase"/> class.
        /// </summary>
        public static UpDownBaseEvents Events(this global::System.Windows.Forms.UpDownBase item) => new UpDownBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.UserControl"/> class.
        /// </summary>
        public static UserControlEvents Events(this global::System.Windows.Forms.UserControl item) => new UserControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.VScrollBar"/> class.
        /// </summary>
        public static VScrollBarEvents Events(this global::System.Windows.Forms.VScrollBar item) => new VScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.WebBrowser"/> class.
        /// </summary>
        public static WebBrowserEvents Events(this global::System.Windows.Forms.WebBrowser item) => new WebBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.WebBrowserBase"/> class.
        /// </summary>
        public static WebBrowserBaseEvents Events(this global::System.Windows.Forms.WebBrowserBase item) => new WebBrowserBaseEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ApplicationContext"/> class as observables.
    /// </summary>
    public class ApplicationContextEvents
    {
        private readonly global::System.Windows.Forms.ApplicationContext _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ApplicationContext"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ApplicationContextEvents(global::System.Windows.Forms.ApplicationContext data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ApplicationContext.ThreadExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ThreadExit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ThreadExit += x, x => _data.ThreadExit -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.AutoCompleteStringCollection"/> class as observables.
    /// </summary>
    public class AutoCompleteStringCollectionEvents
    {
        private readonly global::System.Windows.Forms.AutoCompleteStringCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.AutoCompleteStringCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AutoCompleteStringCollectionEvents(global::System.Windows.Forms.AutoCompleteStringCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AutoCompleteStringCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.AxHost"/> class as observables.
    /// </summary>
    public class AxHostEvents
    {
        private readonly global::System.Windows.Forms.AxHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.AxHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AxHostEvents(global::System.Windows.Forms.AxHost data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CursorChanged += x, x => _data.CursorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragDrop += x, x => _data.DragDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(x => _data.HelpRequested += x, x => _data.HelpRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.Layout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LayoutEventArgs> Layout => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.LayoutEventHandler, global::System.Windows.Forms.LayoutEventArgs>(x => _data.Layout += x, x => _data.Layout -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseHover += x, x => _data.MouseHover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseWheel += x, x => _data.MouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StyleChanged += x, x => _data.StyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.AxHost.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Binding"/> class as observables.
    /// </summary>
    public class BindingEvents
    {
        private readonly global::System.Windows.Forms.Binding _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Binding"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindingEvents(global::System.Windows.Forms.Binding data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Binding.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.BindingCompleteEventHandler, global::System.Windows.Forms.BindingCompleteEventArgs>(x => _data.BindingComplete += x, x => _data.BindingComplete -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Binding.Format"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ConvertEventArgs> Format => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ConvertEventHandler, global::System.Windows.Forms.ConvertEventArgs>(x => _data.Format += x, x => _data.Format -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Binding.Parse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ConvertEventArgs> Parse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ConvertEventHandler, global::System.Windows.Forms.ConvertEventArgs>(x => _data.Parse += x, x => _data.Parse -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingContext"/> class as observables.
    /// </summary>
    public class BindingContextEvents
    {
        private readonly global::System.Windows.Forms.BindingContext _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingContext"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindingContextEvents(global::System.Windows.Forms.BindingContext data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingContext.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingManagerBase"/> class as observables.
    /// </summary>
    public class BindingManagerBaseEvents
    {
        private readonly global::System.Windows.Forms.BindingManagerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingManagerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindingManagerBaseEvents(global::System.Windows.Forms.BindingManagerBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingManagerBase.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.BindingCompleteEventHandler, global::System.Windows.Forms.BindingCompleteEventArgs>(x => _data.BindingComplete += x, x => _data.BindingComplete -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingManagerBase.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingManagerBase.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingManagerDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.BindingManagerDataErrorEventHandler, global::System.Windows.Forms.BindingManagerDataErrorEventArgs>(x => _data.DataError += x, x => _data.DataError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingManagerBase.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PositionChanged += x, x => _data.PositionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingNavigator"/> class as observables.
    /// </summary>
    public class BindingNavigatorEvents
    {
        private readonly global::System.Windows.Forms.BindingNavigator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingNavigator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindingNavigatorEvents(global::System.Windows.Forms.BindingNavigator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingNavigator.RefreshItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RefreshItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RefreshItems += x, x => _data.RefreshItems -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingsCollection"/> class as observables.
    /// </summary>
    public class BindingsCollectionEvents
    {
        private readonly global::System.Windows.Forms.BindingsCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingsCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindingsCollectionEvents(global::System.Windows.Forms.BindingsCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingsCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingsCollection.CollectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanging += x, x => _data.CollectionChanging -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.BindingSource"/> class as observables.
    /// </summary>
    public class BindingSourceEvents
    {
        private readonly global::System.Windows.Forms.BindingSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.BindingSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindingSourceEvents(global::System.Windows.Forms.BindingSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.AddingNew"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AddingNewEventArgs> AddingNew => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.AddingNewEventHandler, global::System.ComponentModel.AddingNewEventArgs>(x => _data.AddingNew += x, x => _data.AddingNew -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.BindingCompleteEventHandler, global::System.Windows.Forms.BindingCompleteEventArgs>(x => _data.BindingComplete += x, x => _data.BindingComplete -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.BindingManagerDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.BindingManagerDataErrorEventHandler, global::System.Windows.Forms.BindingManagerDataErrorEventArgs>(x => _data.DataError += x, x => _data.DataError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.ListChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ListChangedEventArgs> ListChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.ListChangedEventHandler, global::System.ComponentModel.ListChangedEventArgs>(x => _data.ListChanged += x, x => _data.ListChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.BindingSource.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PositionChanged += x, x => _data.PositionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Button"/> class as observables.
    /// </summary>
    public class ButtonEvents
    {
        private readonly global::System.Windows.Forms.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonEvents(global::System.Windows.Forms.Button data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Button.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Button.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ButtonBase"/> class as observables.
    /// </summary>
    public class ButtonBaseEvents
    {
        private readonly global::System.Windows.Forms.ButtonBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ButtonBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonBaseEvents(global::System.Windows.Forms.ButtonBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ButtonBase.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ButtonBase.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CheckBox"/> class as observables.
    /// </summary>
    public class CheckBoxEvents
    {
        private readonly global::System.Windows.Forms.CheckBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CheckBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CheckBoxEvents(global::System.Windows.Forms.CheckBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckBox.AppearanceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AppearanceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AppearanceChanged += x, x => _data.AppearanceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckBox.CheckStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CheckStateChanged += x, x => _data.CheckStateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckBox.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CheckedListBox"/> class as observables.
    /// </summary>
    public class CheckedListBoxEvents
    {
        private readonly global::System.Windows.Forms.CheckedListBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CheckedListBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CheckedListBoxEvents(global::System.Windows.Forms.CheckedListBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.DisplayMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayMemberChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DisplayMemberChanged += x, x => _data.DisplayMemberChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(x => _data.DrawItem += x, x => _data.DrawItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.ItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemCheckEventArgs> ItemCheck => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ItemCheckEventHandler, global::System.Windows.Forms.ItemCheckEventArgs>(x => _data.ItemCheck += x, x => _data.ItemCheck -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.MeasureItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MeasureItemEventArgs> MeasureItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MeasureItemEventHandler, global::System.Windows.Forms.MeasureItemEventArgs>(x => _data.MeasureItem += x, x => _data.MeasureItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CheckedListBox.ValueMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueMemberChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueMemberChanged += x, x => _data.ValueMemberChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ComboBox"/> class as observables.
    /// </summary>
    public class ComboBoxEvents
    {
        private readonly global::System.Windows.Forms.ComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ComboBoxEvents(global::System.Windows.Forms.ComboBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(x => _data.DrawItem += x, x => _data.DrawItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDown += x, x => _data.DropDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.DropDownStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownStyleChanged += x, x => _data.DropDownStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.MeasureItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MeasureItemEventArgs> MeasureItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MeasureItemEventHandler, global::System.Windows.Forms.MeasureItemEventArgs>(x => _data.MeasureItem += x, x => _data.MeasureItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChangeCommitted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChangeCommitted += x, x => _data.SelectionChangeCommitted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ComboBox.TextUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextUpdate += x, x => _data.TextUpdate -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CommonDialog"/> class as observables.
    /// </summary>
    public class CommonDialogEvents
    {
        private readonly global::System.Windows.Forms.CommonDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CommonDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CommonDialogEvents(global::System.Windows.Forms.CommonDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CommonDialog.HelpRequest"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpRequest => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HelpRequest += x, x => _data.HelpRequest -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ContainerControl"/> class as observables.
    /// </summary>
    public class ContainerControlEvents
    {
        private readonly global::System.Windows.Forms.ContainerControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ContainerControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContainerControlEvents(global::System.Windows.Forms.ContainerControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ContainerControl.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ContextMenu"/> class as observables.
    /// </summary>
    public class ContextMenuEvents
    {
        private readonly global::System.Windows.Forms.ContextMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ContextMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContextMenuEvents(global::System.Windows.Forms.ContextMenu data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ContextMenu.Collapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Collapse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Collapse += x, x => _data.Collapse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ContextMenu.Popup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Popup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Popup += x, x => _data.Popup -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Control"/> class as observables.
    /// </summary>
    public class ControlEvents
    {
        private readonly global::System.Windows.Forms.Control _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Control"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ControlEvents(global::System.Windows.Forms.Control data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ClientSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ClientSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ClientSizeChanged += x, x => _data.ClientSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(x => _data.ControlAdded += x, x => _data.ControlAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CursorChanged += x, x => _data.CursorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DockChanged += x, x => _data.DockChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragDrop += x, x => _data.DragDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Enter += x, x => _data.Enter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.GotFocus += x, x => _data.GotFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.HandleCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HandleCreated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HandleCreated += x, x => _data.HandleCreated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.HandleDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HandleDestroyed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HandleDestroyed += x, x => _data.HandleDestroyed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(x => _data.HelpRequested += x, x => _data.HelpRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.InvalidateEventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.InvalidateEventHandler, global::System.Windows.Forms.InvalidateEventArgs>(x => _data.Invalidated += x, x => _data.Invalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Layout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LayoutEventArgs> Layout => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.LayoutEventHandler, global::System.Windows.Forms.LayoutEventArgs>(x => _data.Layout += x, x => _data.Layout -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Leave += x, x => _data.Leave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LostFocus += x, x => _data.LostFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MarginChanged += x, x => _data.MarginChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseCaptureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseCaptureChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseCaptureChanged += x, x => _data.MouseCaptureChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseHover += x, x => _data.MouseHover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseWheel += x, x => _data.MouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Move"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Move => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Move += x, x => _data.Move -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.ParentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ParentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ParentChanged += x, x => _data.ParentChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PreviewKeyDownEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PreviewKeyDownEventHandler, global::System.Windows.Forms.PreviewKeyDownEventArgs>(x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RegionChanged += x, x => _data.RegionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Resize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Resize += x, x => _data.Resize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SizeChanged += x, x => _data.SizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StyleChanged += x, x => _data.StyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.SystemColorsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SystemColorsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SystemColorsChanged += x, x => _data.SystemColorsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Validated += x, x => _data.Validated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.Validating += x, x => _data.Validating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Control.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.CurrencyManager"/> class as observables.
    /// </summary>
    public class CurrencyManagerEvents
    {
        private readonly global::System.Windows.Forms.CurrencyManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.CurrencyManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CurrencyManagerEvents(global::System.Windows.Forms.CurrencyManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CurrencyManager.ItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemChangedEventArgs> ItemChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ItemChangedEventHandler, global::System.Windows.Forms.ItemChangedEventArgs>(x => _data.ItemChanged += x, x => _data.ItemChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CurrencyManager.ListChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ListChangedEventArgs> ListChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.ListChangedEventHandler, global::System.ComponentModel.ListChangedEventArgs>(x => _data.ListChanged += x, x => _data.ListChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.CurrencyManager.MetaDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MetaDataChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MetaDataChanged += x, x => _data.MetaDataChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGrid"/> class as observables.
    /// </summary>
    public class DataGridEvents
    {
        private readonly global::System.Windows.Forms.DataGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridEvents(global::System.Windows.Forms.DataGrid data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.AllowNavigationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowNavigationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowNavigationChanged += x, x => _data.AllowNavigationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.BackButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackButtonClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackButtonClick += x, x => _data.BackButtonClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.BackgroundColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundColorChanged += x, x => _data.BackgroundColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.BorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BorderStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BorderStyleChanged += x, x => _data.BorderStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.CaptionVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CaptionVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CaptionVisibleChanged += x, x => _data.CaptionVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.CurrentCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentCellChanged += x, x => _data.CurrentCellChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CursorChanged += x, x => _data.CursorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.FlatModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FlatModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FlatModeChanged += x, x => _data.FlatModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.Navigate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.NavigateEventArgs> Navigate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.NavigateEventHandler, global::System.Windows.Forms.NavigateEventArgs>(x => _data.Navigate += x, x => _data.Navigate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.ParentRowsLabelStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ParentRowsLabelStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ParentRowsLabelStyleChanged += x, x => _data.ParentRowsLabelStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.ParentRowsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ParentRowsVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ParentRowsVisibleChanged += x, x => _data.ParentRowsVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.ShowParentDetailsButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShowParentDetailsButtonClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ShowParentDetailsButtonClick += x, x => _data.ShowParentDetailsButtonClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGrid.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridBoolColumn"/> class as observables.
    /// </summary>
    public class DataGridBoolColumnEvents
    {
        private readonly global::System.Windows.Forms.DataGridBoolColumn _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridBoolColumn"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridBoolColumnEvents(global::System.Windows.Forms.DataGridBoolColumn data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridBoolColumn.AllowNullChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowNullChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowNullChanged += x, x => _data.AllowNullChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridBoolColumn.FalseValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FalseValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FalseValueChanged += x, x => _data.FalseValueChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridBoolColumn.TrueValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TrueValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TrueValueChanged += x, x => _data.TrueValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridColumnStyle"/> class as observables.
    /// </summary>
    public class DataGridColumnStyleEvents
    {
        private readonly global::System.Windows.Forms.DataGridColumnStyle _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridColumnStyle"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridColumnStyleEvents(global::System.Windows.Forms.DataGridColumnStyle data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.AlignmentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AlignmentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AlignmentChanged += x, x => _data.AlignmentChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.HeaderTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HeaderTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HeaderTextChanged += x, x => _data.HeaderTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.MappingNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MappingNameChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MappingNameChanged += x, x => _data.MappingNameChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.NullTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> NullTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.NullTextChanged += x, x => _data.NullTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.PropertyDescriptorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PropertyDescriptorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PropertyDescriptorChanged += x, x => _data.PropertyDescriptorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridColumnStyle.WidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WidthChanged += x, x => _data.WidthChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridTableStyle"/> class as observables.
    /// </summary>
    public class DataGridTableStyleEvents
    {
        private readonly global::System.Windows.Forms.DataGridTableStyle _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridTableStyle"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridTableStyleEvents(global::System.Windows.Forms.DataGridTableStyle data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.AllowSortingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowSortingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowSortingChanged += x, x => _data.AllowSortingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.AlternatingBackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AlternatingBackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AlternatingBackColorChanged += x, x => _data.AlternatingBackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.ColumnHeadersVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ColumnHeadersVisibleChanged += x, x => _data.ColumnHeadersVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.GridLineColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GridLineColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.GridLineColorChanged += x, x => _data.GridLineColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.GridLineStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GridLineStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.GridLineStyleChanged += x, x => _data.GridLineStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.HeaderBackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HeaderBackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HeaderBackColorChanged += x, x => _data.HeaderBackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.HeaderFontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HeaderFontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HeaderFontChanged += x, x => _data.HeaderFontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.HeaderForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HeaderForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HeaderForeColorChanged += x, x => _data.HeaderForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.LinkColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LinkColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LinkColorChanged += x, x => _data.LinkColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.LinkHoverColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LinkHoverColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LinkHoverColorChanged += x, x => _data.LinkHoverColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.MappingNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MappingNameChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MappingNameChanged += x, x => _data.MappingNameChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.PreferredColumnWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PreferredColumnWidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PreferredColumnWidthChanged += x, x => _data.PreferredColumnWidthChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.PreferredRowHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PreferredRowHeightChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PreferredRowHeightChanged += x, x => _data.PreferredRowHeightChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.RowHeadersVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RowHeadersVisibleChanged += x, x => _data.RowHeadersVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.RowHeaderWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeaderWidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RowHeaderWidthChanged += x, x => _data.RowHeaderWidthChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.SelectionBackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionBackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionBackColorChanged += x, x => _data.SelectionBackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridTableStyle.SelectionForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionForeColorChanged += x, x => _data.SelectionForeColorChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridView"/> class as observables.
    /// </summary>
    public class DataGridViewEvents
    {
        private readonly global::System.Windows.Forms.DataGridView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridViewEvents(global::System.Windows.Forms.DataGridView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToAddRowsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowUserToAddRowsChanged += x, x => _data.AllowUserToAddRowsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToDeleteRowsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowUserToDeleteRowsChanged += x, x => _data.AllowUserToDeleteRowsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToOrderColumnsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowUserToOrderColumnsChanged += x, x => _data.AllowUserToOrderColumnsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToResizeColumnsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowUserToResizeColumnsChanged += x, x => _data.AllowUserToResizeColumnsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToResizeRowsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllowUserToResizeRowsChanged += x, x => _data.AllowUserToResizeRowsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AlternatingRowsDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AlternatingRowsDefaultCellStyleChanged += x, x => _data.AlternatingRowsDefaultCellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoGenerateColumnsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoGenerateColumnsChanged += x, x => _data.AutoGenerateColumnsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs> AutoSizeColumnModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs>(x => _data.AutoSizeColumnModeChanged += x, x => _data.AutoSizeColumnModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs> AutoSizeColumnsModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs>(x => _data.AutoSizeColumnsModeChanged += x, x => _data.AutoSizeColumnsModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs> AutoSizeRowsModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewAutoSizeModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs>(x => _data.AutoSizeRowsModeChanged += x, x => _data.AutoSizeRowsModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.BackgroundColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundColorChanged += x, x => _data.BackgroundColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.BorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BorderStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BorderStyleChanged += x, x => _data.BorderStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CancelRowEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QuestionEventArgs> CancelRowEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QuestionEventHandler, global::System.Windows.Forms.QuestionEventArgs>(x => _data.CancelRowEdit += x, x => _data.CancelRowEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellBeginEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellCancelEventArgs> CellBeginEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellCancelEventHandler, global::System.Windows.Forms.DataGridViewCellCancelEventArgs>(x => _data.CellBeginEdit += x, x => _data.CellBeginEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellBorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CellBorderStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CellBorderStyleChanged += x, x => _data.CellBorderStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellClick += x, x => _data.CellClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellContentClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellContentClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellContentClick += x, x => _data.CellContentClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellContentDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellContentDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellContentDoubleClick += x, x => _data.CellContentDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellContextMenuStripChanged += x, x => _data.CellContextMenuStripChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellContextMenuStripNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs> CellContextMenuStripNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler, global::System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs>(x => _data.CellContextMenuStripNeeded += x, x => _data.CellContextMenuStripNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellDoubleClick += x, x => _data.CellDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellEndEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellEndEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellEndEdit += x, x => _data.CellEndEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellEnter += x, x => _data.CellEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellErrorTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellErrorTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellErrorTextChanged += x, x => _data.CellErrorTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellErrorTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs> CellErrorTextNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler, global::System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs>(x => _data.CellErrorTextNeeded += x, x => _data.CellErrorTextNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellFormatting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellFormattingEventArgs> CellFormatting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellFormattingEventHandler, global::System.Windows.Forms.DataGridViewCellFormattingEventArgs>(x => _data.CellFormatting += x, x => _data.CellFormatting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellLeave += x, x => _data.CellLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.CellMouseClick += x, x => _data.CellMouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.CellMouseDoubleClick += x, x => _data.CellMouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.CellMouseDown += x, x => _data.CellMouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellMouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellMouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellMouseEnter += x, x => _data.CellMouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellMouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellMouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellMouseLeave += x, x => _data.CellMouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.CellMouseMove += x, x => _data.CellMouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> CellMouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.CellMouseUp += x, x => _data.CellMouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellPainting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellPaintingEventArgs> CellPainting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellPaintingEventHandler, global::System.Windows.Forms.DataGridViewCellPaintingEventArgs>(x => _data.CellPainting += x, x => _data.CellPainting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellParsing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellParsingEventArgs> CellParsing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellParsingEventHandler, global::System.Windows.Forms.DataGridViewCellParsingEventArgs>(x => _data.CellParsing += x, x => _data.CellParsing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellStateChangedEventArgs> CellStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellStateChangedEventHandler, global::System.Windows.Forms.DataGridViewCellStateChangedEventArgs>(x => _data.CellStateChanged += x, x => _data.CellStateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellStyleChanged += x, x => _data.CellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellStyleContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs> CellStyleContentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler, global::System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs>(x => _data.CellStyleContentChanged += x, x => _data.CellStyleContentChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellToolTipTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellToolTipTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellToolTipTextChanged += x, x => _data.CellToolTipTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellToolTipTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs> CellToolTipTextNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler, global::System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs>(x => _data.CellToolTipTextNeeded += x, x => _data.CellToolTipTextNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellValidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellValidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellValidated += x, x => _data.CellValidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellValidating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellValidatingEventArgs> CellValidating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellValidatingEventHandler, global::System.Windows.Forms.DataGridViewCellValidatingEventArgs>(x => _data.CellValidating += x, x => _data.CellValidating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> CellValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.CellValueChanged += x, x => _data.CellValueChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellValueNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellValueEventArgs> CellValueNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellValueEventHandler, global::System.Windows.Forms.DataGridViewCellValueEventArgs>(x => _data.CellValueNeeded += x, x => _data.CellValueNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CellValuePushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellValueEventArgs> CellValuePushed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellValueEventHandler, global::System.Windows.Forms.DataGridViewCellValueEventArgs>(x => _data.CellValuePushed += x, x => _data.CellValuePushed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnAdded += x, x => _data.ColumnAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnContextMenuStripChanged += x, x => _data.ColumnContextMenuStripChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDataPropertyNameChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnDataPropertyNameChanged += x, x => _data.ColumnDataPropertyNameChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnDefaultCellStyleChanged += x, x => _data.ColumnDefaultCellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDisplayIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnDisplayIndexChanged += x, x => _data.ColumnDisplayIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnDividerDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs> ColumnDividerDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler, global::System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs>(x => _data.ColumnDividerDoubleClick += x, x => _data.ColumnDividerDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnDividerWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnDividerWidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnDividerWidthChanged += x, x => _data.ColumnDividerWidthChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnHeaderCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnHeaderCellChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnHeaderCellChanged += x, x => _data.ColumnHeaderCellChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnHeaderMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> ColumnHeaderMouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.ColumnHeaderMouseClick += x, x => _data.ColumnHeaderMouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> ColumnHeaderMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.ColumnHeaderMouseDoubleClick += x, x => _data.ColumnHeaderMouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersBorderStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ColumnHeadersBorderStyleChanged += x, x => _data.ColumnHeadersBorderStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ColumnHeadersDefaultCellStyleChanged += x, x => _data.ColumnHeadersDefaultCellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersHeightChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ColumnHeadersHeightChanged += x, x => _data.ColumnHeadersHeightChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs> ColumnHeadersHeightSizeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewAutoSizeModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs>(x => _data.ColumnHeadersHeightSizeModeChanged += x, x => _data.ColumnHeadersHeightSizeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnMinimumWidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnMinimumWidthChanged += x, x => _data.ColumnMinimumWidthChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnNameChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnNameChanged += x, x => _data.ColumnNameChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnRemoved += x, x => _data.ColumnRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnSortModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnSortModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnSortModeChanged += x, x => _data.ColumnSortModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnStateChangedEventArgs> ColumnStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnStateChangedEventHandler, global::System.Windows.Forms.DataGridViewColumnStateChangedEventArgs>(x => _data.ColumnStateChanged += x, x => _data.ColumnStateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnToolTipTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnToolTipTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnToolTipTextChanged += x, x => _data.ColumnToolTipTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ColumnWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewColumnEventArgs> ColumnWidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewColumnEventHandler, global::System.Windows.Forms.DataGridViewColumnEventArgs>(x => _data.ColumnWidthChanged += x, x => _data.ColumnWidthChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CurrentCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentCellChanged += x, x => _data.CurrentCellChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellDirtyStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentCellDirtyStateChanged += x, x => _data.CurrentCellDirtyStateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.DataBindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewBindingCompleteEventArgs> DataBindingComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewBindingCompleteEventHandler, global::System.Windows.Forms.DataGridViewBindingCompleteEventArgs>(x => _data.DataBindingComplete += x, x => _data.DataBindingComplete -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewDataErrorEventHandler, global::System.Windows.Forms.DataGridViewDataErrorEventArgs>(x => _data.DataError += x, x => _data.DataError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.DefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DefaultCellStyleChanged += x, x => _data.DefaultCellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.DefaultValuesNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> DefaultValuesNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.DefaultValuesNeeded += x, x => _data.DefaultValuesNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.EditingControlShowing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewEditingControlShowingEventArgs> EditingControlShowing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewEditingControlShowingEventHandler, global::System.Windows.Forms.DataGridViewEditingControlShowingEventArgs>(x => _data.EditingControlShowing += x, x => _data.EditingControlShowing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.EditModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditModeChanged += x, x => _data.EditModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.GridColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GridColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.GridColorChanged += x, x => _data.GridColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.MultiSelectChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultiSelectChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MultiSelectChanged += x, x => _data.MultiSelectChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.NewRowNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> NewRowNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.NewRowNeeded += x, x => _data.NewRowNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowContextMenuStripChanged += x, x => _data.RowContextMenuStripChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowContextMenuStripNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs> RowContextMenuStripNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler, global::System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs>(x => _data.RowContextMenuStripNeeded += x, x => _data.RowContextMenuStripNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowDefaultCellStyleChanged += x, x => _data.RowDefaultCellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowDirtyStateNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QuestionEventArgs> RowDirtyStateNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QuestionEventHandler, global::System.Windows.Forms.QuestionEventArgs>(x => _data.RowDirtyStateNeeded += x, x => _data.RowDirtyStateNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowDividerDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs> RowDividerDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler, global::System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs>(x => _data.RowDividerDoubleClick += x, x => _data.RowDividerDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowDividerHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowDividerHeightChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowDividerHeightChanged += x, x => _data.RowDividerHeightChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> RowEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.RowEnter += x, x => _data.RowEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowErrorTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowErrorTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowErrorTextChanged += x, x => _data.RowErrorTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowErrorTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs> RowErrorTextNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler, global::System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs>(x => _data.RowErrorTextNeeded += x, x => _data.RowErrorTextNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeaderCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowHeaderCellChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowHeaderCellChanged += x, x => _data.RowHeaderCellChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeaderMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> RowHeaderMouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.RowHeaderMouseClick += x, x => _data.RowHeaderMouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellMouseEventArgs> RowHeaderMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellMouseEventHandler, global::System.Windows.Forms.DataGridViewCellMouseEventArgs>(x => _data.RowHeaderMouseDoubleClick += x, x => _data.RowHeaderMouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersBorderStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RowHeadersBorderStyleChanged += x, x => _data.RowHeadersBorderStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RowHeadersDefaultCellStyleChanged += x, x => _data.RowHeadersDefaultCellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeadersWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersWidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RowHeadersWidthChanged += x, x => _data.RowHeadersWidthChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs> RowHeadersWidthSizeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewAutoSizeModeEventHandler, global::System.Windows.Forms.DataGridViewAutoSizeModeEventArgs>(x => _data.RowHeadersWidthSizeModeChanged += x, x => _data.RowHeadersWidthSizeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowHeightChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowHeightChanged += x, x => _data.RowHeightChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeightInfoNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs> RowHeightInfoNeeded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler, global::System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs>(x => _data.RowHeightInfoNeeded += x, x => _data.RowHeightInfoNeeded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowHeightInfoPushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs> RowHeightInfoPushed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler, global::System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs>(x => _data.RowHeightInfoPushed += x, x => _data.RowHeightInfoPushed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> RowLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.RowLeave += x, x => _data.RowLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowMinimumHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowMinimumHeightChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowMinimumHeightChanged += x, x => _data.RowMinimumHeightChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowPostPaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowPostPaintEventArgs> RowPostPaint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowPostPaintEventHandler, global::System.Windows.Forms.DataGridViewRowPostPaintEventArgs>(x => _data.RowPostPaint += x, x => _data.RowPostPaint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowPrePaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowPrePaintEventArgs> RowPrePaint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowPrePaintEventHandler, global::System.Windows.Forms.DataGridViewRowPrePaintEventArgs>(x => _data.RowPrePaint += x, x => _data.RowPrePaint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowsAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowsAddedEventArgs> RowsAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowsAddedEventHandler, global::System.Windows.Forms.DataGridViewRowsAddedEventArgs>(x => _data.RowsAdded += x, x => _data.RowsAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowsDefaultCellStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RowsDefaultCellStyleChanged += x, x => _data.RowsDefaultCellStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowsRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowsRemovedEventArgs> RowsRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowsRemovedEventHandler, global::System.Windows.Forms.DataGridViewRowsRemovedEventArgs>(x => _data.RowsRemoved += x, x => _data.RowsRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowStateChangedEventArgs> RowStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowStateChangedEventHandler, global::System.Windows.Forms.DataGridViewRowStateChangedEventArgs>(x => _data.RowStateChanged += x, x => _data.RowStateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowUnshared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> RowUnshared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.RowUnshared += x, x => _data.RowUnshared -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowValidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellEventArgs> RowValidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellEventHandler, global::System.Windows.Forms.DataGridViewCellEventArgs>(x => _data.RowValidated += x, x => _data.RowValidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.RowValidating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewCellCancelEventArgs> RowValidating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewCellCancelEventHandler, global::System.Windows.Forms.DataGridViewCellCancelEventArgs>(x => _data.RowValidating += x, x => _data.RowValidating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.SortCompare"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewSortCompareEventArgs> SortCompare => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewSortCompareEventHandler, global::System.Windows.Forms.DataGridViewSortCompareEventArgs>(x => _data.SortCompare += x, x => _data.SortCompare -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.Sorted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Sorted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Sorted += x, x => _data.Sorted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StyleChanged += x, x => _data.StyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.UserAddedRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> UserAddedRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.UserAddedRow += x, x => _data.UserAddedRow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.UserDeletedRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowEventArgs> UserDeletedRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowEventHandler, global::System.Windows.Forms.DataGridViewRowEventArgs>(x => _data.UserDeletedRow += x, x => _data.UserDeletedRow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridView.UserDeletingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataGridViewRowCancelEventArgs> UserDeletingRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DataGridViewRowCancelEventHandler, global::System.Windows.Forms.DataGridViewRowCancelEventArgs>(x => _data.UserDeletingRow += x, x => _data.UserDeletingRow -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewCellCollection"/> class as observables.
    /// </summary>
    public class DataGridViewCellCollectionEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewCellCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewCellCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridViewCellCollectionEvents(global::System.Windows.Forms.DataGridViewCellCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridViewCellCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumn"/> class as observables.
    /// </summary>
    public class DataGridViewColumnEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewColumn _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewColumn"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridViewColumnEvents(global::System.Windows.Forms.DataGridViewColumn data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridViewColumn.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disposed += x, x => _data.Disposed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewColumnCollection"/> class as observables.
    /// </summary>
    public class DataGridViewColumnCollectionEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewColumnCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewColumnCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridViewColumnCollectionEvents(global::System.Windows.Forms.DataGridViewColumnCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridViewColumnCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataGridViewRowCollection"/> class as observables.
    /// </summary>
    public class DataGridViewRowCollectionEvents
    {
        private readonly global::System.Windows.Forms.DataGridViewRowCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataGridViewRowCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridViewRowCollectionEvents(global::System.Windows.Forms.DataGridViewRowCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataGridViewRowCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DateTimePicker"/> class as observables.
    /// </summary>
    public class DateTimePickerEvents
    {
        private readonly global::System.Windows.Forms.DateTimePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DateTimePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DateTimePickerEvents(global::System.Windows.Forms.DateTimePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.CloseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CloseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CloseUp += x, x => _data.CloseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDown += x, x => _data.DropDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.FormatChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FormatChanged += x, x => _data.FormatChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DateTimePicker.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DomainUpDown"/> class as observables.
    /// </summary>
    public class DomainUpDownEvents
    {
        private readonly global::System.Windows.Forms.DomainUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DomainUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DomainUpDownEvents(global::System.Windows.Forms.DomainUpDown data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DomainUpDown.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DomainUpDown.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ErrorProvider"/> class as observables.
    /// </summary>
    public class ErrorProviderEvents
    {
        private readonly global::System.Windows.Forms.ErrorProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ErrorProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ErrorProviderEvents(global::System.Windows.Forms.ErrorProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ErrorProvider.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.FileDialog"/> class as observables.
    /// </summary>
    public class FileDialogEvents
    {
        private readonly global::System.Windows.Forms.FileDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.FileDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FileDialogEvents(global::System.Windows.Forms.FileDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.FileDialog.FileOk"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> FileOk => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.FileOk += x, x => _data.FileOk -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.FolderBrowserDialog"/> class as observables.
    /// </summary>
    public class FolderBrowserDialogEvents
    {
        private readonly global::System.Windows.Forms.FolderBrowserDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.FolderBrowserDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FolderBrowserDialogEvents(global::System.Windows.Forms.FolderBrowserDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.FolderBrowserDialog.HelpRequest"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpRequest => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HelpRequest += x, x => _data.HelpRequest -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.FontDialog"/> class as observables.
    /// </summary>
    public class FontDialogEvents
    {
        private readonly global::System.Windows.Forms.FontDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.FontDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FontDialogEvents(global::System.Windows.Forms.FontDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.FontDialog.Apply"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Apply => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Apply += x, x => _data.Apply -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Form"/> class as observables.
    /// </summary>
    public class FormEvents
    {
        private readonly global::System.Windows.Forms.Form _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Form"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FormEvents(global::System.Windows.Forms.Form data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Closed += x, x => _data.Closed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.Closing += x, x => _data.Closing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.Deactivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Deactivate += x, x => _data.Deactivate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.FormClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.FormClosedEventArgs> FormClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.FormClosedEventHandler, global::System.Windows.Forms.FormClosedEventArgs>(x => _data.FormClosed += x, x => _data.FormClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.FormClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.FormClosingEventArgs> FormClosing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.FormClosingEventHandler, global::System.Windows.Forms.FormClosingEventArgs>(x => _data.FormClosing += x, x => _data.FormClosing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.HelpButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> HelpButtonClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.HelpButtonClicked += x, x => _data.HelpButtonClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.InputLanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.InputLanguageChangedEventArgs> InputLanguageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.InputLanguageChangedEventHandler, global::System.Windows.Forms.InputLanguageChangedEventArgs>(x => _data.InputLanguageChanged += x, x => _data.InputLanguageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.InputLanguageChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.InputLanguageChangingEventArgs> InputLanguageChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.InputLanguageChangingEventHandler, global::System.Windows.Forms.InputLanguageChangingEventArgs>(x => _data.InputLanguageChanging += x, x => _data.InputLanguageChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Load += x, x => _data.Load -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MarginChanged += x, x => _data.MarginChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.MaximizedBoundsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaximizedBoundsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MaximizedBoundsChanged += x, x => _data.MaximizedBoundsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.MaximumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaximumSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MaximumSizeChanged += x, x => _data.MaximumSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.MdiChildActivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MdiChildActivate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MdiChildActivate += x, x => _data.MdiChildActivate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.MenuComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MenuComplete += x, x => _data.MenuComplete -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.MenuStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuStart => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MenuStart += x, x => _data.MenuStart -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.MinimumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MinimumSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MinimumSizeChanged += x, x => _data.MinimumSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.ResizeBegin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ResizeBegin => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ResizeBegin += x, x => _data.ResizeBegin -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.ResizeEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ResizeEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ResizeEnd += x, x => _data.ResizeEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.Shown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Shown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Shown += x, x => _data.Shown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Form.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.GridColumnStylesCollection"/> class as observables.
    /// </summary>
    public class GridColumnStylesCollectionEvents
    {
        private readonly global::System.Windows.Forms.GridColumnStylesCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.GridColumnStylesCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GridColumnStylesCollectionEvents(global::System.Windows.Forms.GridColumnStylesCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GridColumnStylesCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.GridTableStylesCollection"/> class as observables.
    /// </summary>
    public class GridTableStylesCollectionEvents
    {
        private readonly global::System.Windows.Forms.GridTableStylesCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.GridTableStylesCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GridTableStylesCollectionEvents(global::System.Windows.Forms.GridTableStylesCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GridTableStylesCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CollectionChangeEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CollectionChangeEventHandler, global::System.ComponentModel.CollectionChangeEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.GroupBox"/> class as observables.
    /// </summary>
    public class GroupBoxEvents
    {
        private readonly global::System.Windows.Forms.GroupBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.GroupBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GroupBoxEvents(global::System.Windows.Forms.GroupBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.GroupBox.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.HtmlDocument"/> class as observables.
    /// </summary>
    public class HtmlDocumentEvents
    {
        private readonly global::System.Windows.Forms.HtmlDocument _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.HtmlDocument"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HtmlDocumentEvents(global::System.Windows.Forms.HtmlDocument data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.ContextMenuShowing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> ContextMenuShowing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.ContextMenuShowing += x, x => _data.ContextMenuShowing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.Focusing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Focusing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Focusing += x, x => _data.Focusing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.LosingFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LosingFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.LosingFocus += x, x => _data.LosingFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.MouseOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseOver += x, x => _data.MouseOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlDocument.Stop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Stop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Stop += x, x => _data.Stop -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.HtmlElement"/> class as observables.
    /// </summary>
    public class HtmlElementEvents
    {
        private readonly global::System.Windows.Forms.HtmlElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.HtmlElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HtmlElementEvents(global::System.Windows.Forms.HtmlElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.Drag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Drag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Drag += x, x => _data.Drag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.DragEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DragEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.DragEnd += x, x => _data.DragEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.Focusing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Focusing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Focusing += x, x => _data.Focusing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.GotFocus += x, x => _data.GotFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.LosingFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LosingFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.LosingFocus += x, x => _data.LosingFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.LostFocus += x, x => _data.LostFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.MouseOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseOver += x, x => _data.MouseOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.HtmlWindow"/> class as observables.
    /// </summary>
    public class HtmlWindowEvents
    {
        private readonly global::System.Windows.Forms.HtmlWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.HtmlWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HtmlWindowEvents(global::System.Windows.Forms.HtmlWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlWindow.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementErrorEventHandler, global::System.Windows.Forms.HtmlElementErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlWindow.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.GotFocus += x, x => _data.GotFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlWindow.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Load => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Load += x, x => _data.Load -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlWindow.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.LostFocus += x, x => _data.LostFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlWindow.Resize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Resize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Resize += x, x => _data.Resize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlWindow.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.HtmlWindow.Unload"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HtmlElementEventArgs> Unload => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HtmlElementEventHandler, global::System.Windows.Forms.HtmlElementEventArgs>(x => _data.Unload += x, x => _data.Unload -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ImageList"/> class as observables.
    /// </summary>
    public class ImageListEvents
    {
        private readonly global::System.Windows.Forms.ImageList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ImageList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageListEvents(global::System.Windows.Forms.ImageList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ImageList.RecreateHandle"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RecreateHandle => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RecreateHandle += x, x => _data.RecreateHandle -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Label"/> class as observables.
    /// </summary>
    public class LabelEvents
    {
        private readonly global::System.Windows.Forms.Label _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Label"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LabelEvents(global::System.Windows.Forms.Label data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Label.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.LinkLabel"/> class as observables.
    /// </summary>
    public class LinkLabelEvents
    {
        private readonly global::System.Windows.Forms.LinkLabel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.LinkLabel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LinkLabelEvents(global::System.Windows.Forms.LinkLabel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.LinkLabel.LinkClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LinkLabelLinkClickedEventArgs> LinkClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.LinkLabelLinkClickedEventHandler, global::System.Windows.Forms.LinkLabelLinkClickedEventArgs>(x => _data.LinkClicked += x, x => _data.LinkClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.LinkLabel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ListBox"/> class as observables.
    /// </summary>
    public class ListBoxEvents
    {
        private readonly global::System.Windows.Forms.ListBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ListBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListBoxEvents(global::System.Windows.Forms.ListBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(x => _data.DrawItem += x, x => _data.DrawItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.MeasureItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MeasureItemEventArgs> MeasureItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MeasureItemEventHandler, global::System.Windows.Forms.MeasureItemEventArgs>(x => _data.MeasureItem += x, x => _data.MeasureItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ListControl"/> class as observables.
    /// </summary>
    public class ListControlEvents
    {
        private readonly global::System.Windows.Forms.ListControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ListControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListControlEvents(global::System.Windows.Forms.ListControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.DisplayMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayMemberChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DisplayMemberChanged += x, x => _data.DisplayMemberChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.Format"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListControlConvertEventArgs> Format => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ListControlConvertEventHandler, global::System.Windows.Forms.ListControlConvertEventArgs>(x => _data.Format += x, x => _data.Format -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.FormatInfoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatInfoChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FormatInfoChanged += x, x => _data.FormatInfoChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.FormatStringChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatStringChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FormatStringChanged += x, x => _data.FormatStringChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.FormattingEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormattingEnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FormattingEnabledChanged += x, x => _data.FormattingEnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.SelectedValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedValueChanged += x, x => _data.SelectedValueChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListControl.ValueMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueMemberChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueMemberChanged += x, x => _data.ValueMemberChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ListView"/> class as observables.
    /// </summary>
    public class ListViewEvents
    {
        private readonly global::System.Windows.Forms.ListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListViewEvents(global::System.Windows.Forms.ListView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.AfterLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LabelEditEventArgs> AfterLabelEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.LabelEditEventHandler, global::System.Windows.Forms.LabelEditEventArgs>(x => _data.AfterLabelEdit += x, x => _data.AfterLabelEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.BeforeLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LabelEditEventArgs> BeforeLabelEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.LabelEditEventHandler, global::System.Windows.Forms.LabelEditEventArgs>(x => _data.BeforeLabelEdit += x, x => _data.BeforeLabelEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.CacheVirtualItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.CacheVirtualItemsEventArgs> CacheVirtualItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.CacheVirtualItemsEventHandler, global::System.Windows.Forms.CacheVirtualItemsEventArgs>(x => _data.CacheVirtualItems += x, x => _data.CacheVirtualItems -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ColumnClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnClickEventArgs> ColumnClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ColumnClickEventHandler, global::System.Windows.Forms.ColumnClickEventArgs>(x => _data.ColumnClick += x, x => _data.ColumnClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ColumnReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnReorderedEventArgs> ColumnReordered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ColumnReorderedEventHandler, global::System.Windows.Forms.ColumnReorderedEventArgs>(x => _data.ColumnReordered += x, x => _data.ColumnReordered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ColumnWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnWidthChangedEventArgs> ColumnWidthChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ColumnWidthChangedEventHandler, global::System.Windows.Forms.ColumnWidthChangedEventArgs>(x => _data.ColumnWidthChanged += x, x => _data.ColumnWidthChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ColumnWidthChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ColumnWidthChangingEventArgs> ColumnWidthChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ColumnWidthChangingEventHandler, global::System.Windows.Forms.ColumnWidthChangingEventArgs>(x => _data.ColumnWidthChanging += x, x => _data.ColumnWidthChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.DrawColumnHeader"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawListViewColumnHeaderEventArgs> DrawColumnHeader => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawListViewColumnHeaderEventHandler, global::System.Windows.Forms.DrawListViewColumnHeaderEventArgs>(x => _data.DrawColumnHeader += x, x => _data.DrawColumnHeader -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawListViewItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawListViewItemEventHandler, global::System.Windows.Forms.DrawListViewItemEventArgs>(x => _data.DrawItem += x, x => _data.DrawItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.DrawSubItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawListViewSubItemEventArgs> DrawSubItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawListViewSubItemEventHandler, global::System.Windows.Forms.DrawListViewSubItemEventArgs>(x => _data.DrawSubItem += x, x => _data.DrawSubItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ItemActivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ItemActivate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ItemActivate += x, x => _data.ItemActivate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemCheckEventArgs> ItemCheck => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ItemCheckEventHandler, global::System.Windows.Forms.ItemCheckEventArgs>(x => _data.ItemCheck += x, x => _data.ItemCheck -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ItemChecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemCheckedEventArgs> ItemChecked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ItemCheckedEventHandler, global::System.Windows.Forms.ItemCheckedEventArgs>(x => _data.ItemChecked += x, x => _data.ItemChecked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ItemDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemDragEventArgs> ItemDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ItemDragEventHandler, global::System.Windows.Forms.ItemDragEventArgs>(x => _data.ItemDrag += x, x => _data.ItemDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ItemMouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewItemMouseHoverEventArgs> ItemMouseHover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ListViewItemMouseHoverEventHandler, global::System.Windows.Forms.ListViewItemMouseHoverEventArgs>(x => _data.ItemMouseHover += x, x => _data.ItemMouseHover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.ItemSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewItemSelectionChangedEventArgs> ItemSelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ListViewItemSelectionChangedEventHandler, global::System.Windows.Forms.ListViewItemSelectionChangedEventArgs>(x => _data.ItemSelectionChanged += x, x => _data.ItemSelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.RetrieveVirtualItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.RetrieveVirtualItemEventArgs> RetrieveVirtualItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.RetrieveVirtualItemEventHandler, global::System.Windows.Forms.RetrieveVirtualItemEventArgs>(x => _data.RetrieveVirtualItem += x, x => _data.RetrieveVirtualItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.SearchForVirtualItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SearchForVirtualItemEventArgs> SearchForVirtualItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.SearchForVirtualItemEventHandler, global::System.Windows.Forms.SearchForVirtualItemEventArgs>(x => _data.SearchForVirtualItem += x, x => _data.SearchForVirtualItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs> VirtualItemsSelectionRangeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler, global::System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs>(x => _data.VirtualItemsSelectionRangeChanged += x, x => _data.VirtualItemsSelectionRangeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MainMenu"/> class as observables.
    /// </summary>
    public class MainMenuEvents
    {
        private readonly global::System.Windows.Forms.MainMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MainMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MainMenuEvents(global::System.Windows.Forms.MainMenu data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MainMenu.Collapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Collapse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Collapse += x, x => _data.Collapse -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MaskedTextBox"/> class as observables.
    /// </summary>
    public class MaskedTextBoxEvents
    {
        private readonly global::System.Windows.Forms.MaskedTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MaskedTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MaskedTextBoxEvents(global::System.Windows.Forms.MaskedTextBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MaskedTextBox.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsOverwriteModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.IsOverwriteModeChanged += x, x => _data.IsOverwriteModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MaskedTextBox.MaskChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaskChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MaskChanged += x, x => _data.MaskChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MaskedTextBox.MaskInputRejected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MaskInputRejectedEventArgs> MaskInputRejected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MaskInputRejectedEventHandler, global::System.Windows.Forms.MaskInputRejectedEventArgs>(x => _data.MaskInputRejected += x, x => _data.MaskInputRejected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MaskedTextBox.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MaskedTextBox.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MaskedTextBox.TypeValidationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TypeValidationEventArgs> TypeValidationCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TypeValidationEventHandler, global::System.Windows.Forms.TypeValidationEventArgs>(x => _data.TypeValidationCompleted += x, x => _data.TypeValidationCompleted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MenuItem"/> class as observables.
    /// </summary>
    public class MenuItemEvents
    {
        private readonly global::System.Windows.Forms.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MenuItemEvents(global::System.Windows.Forms.MenuItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MenuItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MenuItem.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(x => _data.DrawItem += x, x => _data.DrawItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MenuItem.MeasureItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MeasureItemEventArgs> MeasureItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MeasureItemEventHandler, global::System.Windows.Forms.MeasureItemEventArgs>(x => _data.MeasureItem += x, x => _data.MeasureItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MenuItem.Popup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Popup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Popup += x, x => _data.Popup -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MenuItem.Select"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Select => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Select += x, x => _data.Select -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MenuStrip"/> class as observables.
    /// </summary>
    public class MenuStripEvents
    {
        private readonly global::System.Windows.Forms.MenuStrip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MenuStrip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MenuStripEvents(global::System.Windows.Forms.MenuStrip data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MenuStrip.MenuActivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuActivate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MenuActivate += x, x => _data.MenuActivate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MenuStrip.MenuDeactivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MenuDeactivate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MenuDeactivate += x, x => _data.MenuDeactivate -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.MonthCalendar"/> class as observables.
    /// </summary>
    public class MonthCalendarEvents
    {
        private readonly global::System.Windows.Forms.MonthCalendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.MonthCalendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MonthCalendarEvents(global::System.Windows.Forms.MonthCalendar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.DateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DateRangeEventArgs> DateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DateRangeEventHandler, global::System.Windows.Forms.DateRangeEventArgs>(x => _data.DateChanged += x, x => _data.DateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.DateSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DateRangeEventArgs> DateSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DateRangeEventHandler, global::System.Windows.Forms.DateRangeEventArgs>(x => _data.DateSelected += x, x => _data.DateSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.MonthCalendar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.NotifyIcon"/> class as observables.
    /// </summary>
    public class NotifyIconEvents
    {
        private readonly global::System.Windows.Forms.NotifyIcon _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.NotifyIcon"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NotifyIconEvents(global::System.Windows.Forms.NotifyIcon data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.BalloonTipClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BalloonTipClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BalloonTipClicked += x, x => _data.BalloonTipClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.BalloonTipClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BalloonTipClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BalloonTipClosed += x, x => _data.BalloonTipClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.BalloonTipShown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BalloonTipShown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BalloonTipShown += x, x => _data.BalloonTipShown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NotifyIcon.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.NumericUpDown"/> class as observables.
    /// </summary>
    public class NumericUpDownEvents
    {
        private readonly global::System.Windows.Forms.NumericUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.NumericUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NumericUpDownEvents(global::System.Windows.Forms.NumericUpDown data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NumericUpDown.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NumericUpDown.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.NumericUpDown.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Panel"/> class as observables.
    /// </summary>
    public class PanelEvents
    {
        private readonly global::System.Windows.Forms.Panel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Panel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PanelEvents(global::System.Windows.Forms.Panel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Panel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Panel.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Panel.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Panel.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Panel.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PictureBox"/> class as observables.
    /// </summary>
    public class PictureBoxEvents
    {
        private readonly global::System.Windows.Forms.PictureBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PictureBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PictureBoxEvents(global::System.Windows.Forms.PictureBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Enter += x, x => _data.Enter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Leave += x, x => _data.Leave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.LoadProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.ProgressChangedEventArgs> LoadProgressChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.ProgressChangedEventHandler, global::System.ComponentModel.ProgressChangedEventArgs>(x => _data.LoadProgressChanged += x, x => _data.LoadProgressChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.SizeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SizeModeChanged += x, x => _data.SizeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PictureBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewControl"/> class as observables.
    /// </summary>
    public class PrintPreviewControlEvents
    {
        private readonly global::System.Windows.Forms.PrintPreviewControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PrintPreviewControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PrintPreviewControlEvents(global::System.Windows.Forms.PrintPreviewControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewControl.StartPageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StartPageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StartPageChanged += x, x => _data.StartPageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PrintPreviewDialog"/> class as observables.
    /// </summary>
    public class PrintPreviewDialogEvents
    {
        private readonly global::System.Windows.Forms.PrintPreviewDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PrintPreviewDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PrintPreviewDialogEvents(global::System.Windows.Forms.PrintPreviewDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CursorChanged += x, x => _data.CursorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DockChanged += x, x => _data.DockChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MarginChanged += x, x => _data.MarginChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.MaximumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaximumSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MaximumSizeChanged += x, x => _data.MaximumSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.MinimumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MinimumSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MinimumSizeChanged += x, x => _data.MinimumSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SizeChanged += x, x => _data.SizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PrintPreviewDialog.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ProgressBar"/> class as observables.
    /// </summary>
    public class ProgressBarEvents
    {
        private readonly global::System.Windows.Forms.ProgressBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ProgressBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ProgressBarEvents(global::System.Windows.Forms.ProgressBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Enter += x, x => _data.Enter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Leave += x, x => _data.Leave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ProgressBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.PropertyGrid"/> class as observables.
    /// </summary>
    public class PropertyGridEvents
    {
        private readonly global::System.Windows.Forms.PropertyGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.PropertyGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PropertyGridEvents(global::System.Windows.Forms.PropertyGrid data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.PropertySortChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PropertySortChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PropertySortChanged += x, x => _data.PropertySortChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.PropertyTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PropertyTabChangedEventArgs> PropertyTabChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PropertyTabChangedEventHandler, global::System.Windows.Forms.PropertyTabChangedEventArgs>(x => _data.PropertyTabChanged += x, x => _data.PropertyTabChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.PropertyValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PropertyValueChangedEventArgs> PropertyValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PropertyValueChangedEventHandler, global::System.Windows.Forms.PropertyValueChangedEventArgs>(x => _data.PropertyValueChanged += x, x => _data.PropertyValueChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.SelectedGridItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SelectedGridItemChangedEventArgs> SelectedGridItemChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.SelectedGridItemChangedEventHandler, global::System.Windows.Forms.SelectedGridItemChangedEventArgs>(x => _data.SelectedGridItemChanged += x, x => _data.SelectedGridItemChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.SelectedObjectsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedObjectsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedObjectsChanged += x, x => _data.SelectedObjectsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.PropertyGrid.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.RadioButton"/> class as observables.
    /// </summary>
    public class RadioButtonEvents
    {
        private readonly global::System.Windows.Forms.RadioButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.RadioButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RadioButtonEvents(global::System.Windows.Forms.RadioButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RadioButton.AppearanceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AppearanceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AppearanceChanged += x, x => _data.AppearanceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RadioButton.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RadioButton.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RadioButton.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.RichTextBox"/> class as observables.
    /// </summary>
    public class RichTextBoxEvents
    {
        private readonly global::System.Windows.Forms.RichTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.RichTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RichTextBoxEvents(global::System.Windows.Forms.RichTextBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.ContentsResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ContentsResizedEventArgs> ContentsResized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ContentsResizedEventHandler, global::System.Windows.Forms.ContentsResizedEventArgs>(x => _data.ContentsResized += x, x => _data.ContentsResized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragDrop += x, x => _data.DragDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.HScroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HScroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HScroll += x, x => _data.HScroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.ImeChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeChange += x, x => _data.ImeChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.LinkClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LinkClickedEventArgs> LinkClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.LinkClickedEventHandler, global::System.Windows.Forms.LinkClickedEventArgs>(x => _data.LinkClicked += x, x => _data.LinkClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.Protected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Protected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Protected += x, x => _data.Protected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.RichTextBox.VScroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VScroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.VScroll += x, x => _data.VScroll -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ScrollableControl"/> class as observables.
    /// </summary>
    public class ScrollableControlEvents
    {
        private readonly global::System.Windows.Forms.ScrollableControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ScrollableControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollableControlEvents(global::System.Windows.Forms.ScrollableControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollableControl.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ScrollBar"/> class as observables.
    /// </summary>
    public class ScrollBarEvents
    {
        private readonly global::System.Windows.Forms.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollBarEvents(global::System.Windows.Forms.ScrollBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ScrollBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.SplitContainer"/> class as observables.
    /// </summary>
    public class SplitContainerEvents
    {
        private readonly global::System.Windows.Forms.SplitContainer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.SplitContainer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SplitContainerEvents(global::System.Windows.Forms.SplitContainer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(x => _data.ControlAdded += x, x => _data.ControlAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.SplitterMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterEventArgs> SplitterMoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.SplitterEventHandler, global::System.Windows.Forms.SplitterEventArgs>(x => _data.SplitterMoved += x, x => _data.SplitterMoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.SplitterMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterCancelEventArgs> SplitterMoving => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.SplitterCancelEventHandler, global::System.Windows.Forms.SplitterCancelEventArgs>(x => _data.SplitterMoving += x, x => _data.SplitterMoving -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitContainer.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Splitter"/> class as observables.
    /// </summary>
    public class SplitterEvents
    {
        private readonly global::System.Windows.Forms.Splitter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Splitter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SplitterEvents(global::System.Windows.Forms.Splitter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Enter += x, x => _data.Enter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Leave += x, x => _data.Leave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.SplitterMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterEventArgs> SplitterMoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.SplitterEventHandler, global::System.Windows.Forms.SplitterEventArgs>(x => _data.SplitterMoved += x, x => _data.SplitterMoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.SplitterMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.SplitterEventArgs> SplitterMoving => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.SplitterEventHandler, global::System.Windows.Forms.SplitterEventArgs>(x => _data.SplitterMoving += x, x => _data.SplitterMoving -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Splitter.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.SplitterPanel"/> class as observables.
    /// </summary>
    public class SplitterPanelEvents
    {
        private readonly global::System.Windows.Forms.SplitterPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.SplitterPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SplitterPanelEvents(global::System.Windows.Forms.SplitterPanel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitterPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitterPanel.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DockChanged += x, x => _data.DockChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitterPanel.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitterPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitterPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.SplitterPanel.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.StatusBar"/> class as observables.
    /// </summary>
    public class StatusBarEvents
    {
        private readonly global::System.Windows.Forms.StatusBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.StatusBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StatusBarEvents(global::System.Windows.Forms.StatusBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.StatusBarDrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.StatusBarDrawItemEventHandler, global::System.Windows.Forms.StatusBarDrawItemEventArgs>(x => _data.DrawItem += x, x => _data.DrawItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusBar.PanelClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.StatusBarPanelClickEventArgs> PanelClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.StatusBarPanelClickEventHandler, global::System.Windows.Forms.StatusBarPanelClickEventArgs>(x => _data.PanelClick += x, x => _data.PanelClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.StatusStrip"/> class as observables.
    /// </summary>
    public class StatusStripEvents
    {
        private readonly global::System.Windows.Forms.StatusStrip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.StatusStrip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StatusStripEvents(global::System.Windows.Forms.StatusStrip data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.StatusStrip.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TabControl"/> class as observables.
    /// </summary>
    public class TabControlEvents
    {
        private readonly global::System.Windows.Forms.TabControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TabControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TabControlEvents(global::System.Windows.Forms.TabControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.Deselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlEventArgs> Deselected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TabControlEventHandler, global::System.Windows.Forms.TabControlEventArgs>(x => _data.Deselected += x, x => _data.Deselected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.Deselecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlCancelEventArgs> Deselecting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TabControlCancelEventHandler, global::System.Windows.Forms.TabControlCancelEventArgs>(x => _data.Deselecting += x, x => _data.Deselecting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.DrawItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawItemEventArgs> DrawItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawItemEventHandler, global::System.Windows.Forms.DrawItemEventArgs>(x => _data.DrawItem += x, x => _data.DrawItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TabControlEventHandler, global::System.Windows.Forms.TabControlEventArgs>(x => _data.Selected += x, x => _data.Selected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.Selecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TabControlCancelEventArgs> Selecting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TabControlCancelEventHandler, global::System.Windows.Forms.TabControlCancelEventArgs>(x => _data.Selecting += x, x => _data.Selecting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TableLayoutPanel"/> class as observables.
    /// </summary>
    public class TableLayoutPanelEvents
    {
        private readonly global::System.Windows.Forms.TableLayoutPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TableLayoutPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TableLayoutPanelEvents(global::System.Windows.Forms.TableLayoutPanel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TableLayoutPanel.CellPaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TableLayoutCellPaintEventArgs> CellPaint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TableLayoutCellPaintEventHandler, global::System.Windows.Forms.TableLayoutCellPaintEventArgs>(x => _data.CellPaint += x, x => _data.CellPaint -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TabPage"/> class as observables.
    /// </summary>
    public class TabPageEvents
    {
        private readonly global::System.Windows.Forms.TabPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TabPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TabPageEvents(global::System.Windows.Forms.TabPage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DockChanged += x, x => _data.DockChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TabPage.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TextBox"/> class as observables.
    /// </summary>
    public class TextBoxEvents
    {
        private readonly global::System.Windows.Forms.TextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextBoxEvents(global::System.Windows.Forms.TextBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBox.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TextBoxBase"/> class as observables.
    /// </summary>
    public class TextBoxBaseEvents
    {
        private readonly global::System.Windows.Forms.TextBoxBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TextBoxBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextBoxBaseEvents(global::System.Windows.Forms.TextBoxBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.BorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BorderStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BorderStyleChanged += x, x => _data.BorderStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.HideSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HideSelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HideSelectionChanged += x, x => _data.HideSelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.ModifiedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModifiedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ModifiedChanged += x, x => _data.ModifiedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TextBoxBase.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ThreadExceptionDialog"/> class as observables.
    /// </summary>
    public class ThreadExceptionDialogEvents
    {
        private readonly global::System.Windows.Forms.ThreadExceptionDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ThreadExceptionDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ThreadExceptionDialogEvents(global::System.Windows.Forms.ThreadExceptionDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ThreadExceptionDialog.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.Timer"/> class as observables.
    /// </summary>
    public class TimerEvents
    {
        private readonly global::System.Windows.Forms.Timer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.Timer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TimerEvents(global::System.Windows.Forms.Timer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Timer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Tick += x, x => _data.Tick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolBar"/> class as observables.
    /// </summary>
    public class ToolBarEvents
    {
        private readonly global::System.Windows.Forms.ToolBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolBarEvents(global::System.Windows.Forms.ToolBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.ButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolBarButtonClickEventArgs> ButtonClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolBarButtonClickEventHandler, global::System.Windows.Forms.ToolBarButtonClickEventArgs>(x => _data.ButtonClick += x, x => _data.ButtonClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.ButtonDropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolBarButtonClickEventArgs> ButtonDropDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolBarButtonClickEventHandler, global::System.Windows.Forms.ToolBarButtonClickEventArgs>(x => _data.ButtonDropDown += x, x => _data.ButtonDropDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStrip"/> class as observables.
    /// </summary>
    public class ToolStripEvents
    {
        private readonly global::System.Windows.Forms.ToolStrip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStrip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripEvents(global::System.Windows.Forms.ToolStrip data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.BeginDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginDrag += x, x => _data.BeginDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(x => _data.ControlAdded += x, x => _data.ControlAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ControlEventHandler, global::System.Windows.Forms.ControlEventArgs>(x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CursorChanged += x, x => _data.CursorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.EndDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndDrag += x, x => _data.EndDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.ItemAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemEventArgs> ItemAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemEventHandler, global::System.Windows.Forms.ToolStripItemEventArgs>(x => _data.ItemAdded += x, x => _data.ItemAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.ItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemClickedEventArgs> ItemClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemClickedEventHandler, global::System.Windows.Forms.ToolStripItemClickedEventArgs>(x => _data.ItemClicked += x, x => _data.ItemClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.ItemRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemEventArgs> ItemRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemEventHandler, global::System.Windows.Forms.ToolStripItemEventArgs>(x => _data.ItemRemoved += x, x => _data.ItemRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.LayoutCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LayoutCompleted += x, x => _data.LayoutCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.LayoutStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LayoutStyleChanged += x, x => _data.LayoutStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.PaintGrip"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> PaintGrip => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.PaintGrip += x, x => _data.PaintGrip -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStrip.RendererChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RendererChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RendererChanged += x, x => _data.RendererChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripButton"/> class as observables.
    /// </summary>
    public class ToolStripButtonEvents
    {
        private readonly global::System.Windows.Forms.ToolStripButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripButtonEvents(global::System.Windows.Forms.ToolStripButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripButton.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripButton.CheckStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CheckStateChanged += x, x => _data.CheckStateChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripComboBox"/> class as observables.
    /// </summary>
    public class ToolStripComboBoxEvents
    {
        private readonly global::System.Windows.Forms.ToolStripComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripComboBoxEvents(global::System.Windows.Forms.ToolStripComboBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripComboBox.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripComboBox.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDown += x, x => _data.DropDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripComboBox.DropDownStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownStyleChanged += x, x => _data.DropDownStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripComboBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripComboBox.TextUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextUpdate += x, x => _data.TextUpdate -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContainer"/> class as observables.
    /// </summary>
    public class ToolStripContainerEvents
    {
        private readonly global::System.Windows.Forms.ToolStripContainer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripContainer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripContainerEvents(global::System.Windows.Forms.ToolStripContainer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContainer.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContainer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContainer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContainer.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContainer.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContainer.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CursorChanged += x, x => _data.CursorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContainer.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripContentPanel"/> class as observables.
    /// </summary>
    public class ToolStripContentPanelEvents
    {
        private readonly global::System.Windows.Forms.ToolStripContentPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripContentPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripContentPanelEvents(global::System.Windows.Forms.ToolStripContentPanel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DockChanged += x, x => _data.DockChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Load += x, x => _data.Load -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.RendererChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RendererChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RendererChanged += x, x => _data.RendererChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripContentPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripControlHost"/> class as observables.
    /// </summary>
    public class ToolStripControlHostEvents
    {
        private readonly global::System.Windows.Forms.ToolStripControlHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripControlHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripControlHostEvents(global::System.Windows.Forms.ToolStripControlHost data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.DisplayStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DisplayStyleChanged += x, x => _data.DisplayStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Enter += x, x => _data.Enter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.GotFocus += x, x => _data.GotFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Leave += x, x => _data.Leave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LostFocus += x, x => _data.LostFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Validated += x, x => _data.Validated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripControlHost.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.Validating += x, x => _data.Validating -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDown"/> class as observables.
    /// </summary>
    public class ToolStripDropDownEvents
    {
        private readonly global::System.Windows.Forms.ToolStripDropDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripDropDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripDropDownEvents(global::System.Windows.Forms.ToolStripDropDown data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripDropDownClosedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripDropDownClosedEventHandler, global::System.Windows.Forms.ToolStripDropDownClosedEventArgs>(x => _data.Closed += x, x => _data.Closed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripDropDownClosingEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripDropDownClosingEventHandler, global::System.Windows.Forms.ToolStripDropDownClosingEventArgs>(x => _data.Closing += x, x => _data.Closing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DockChanged += x, x => _data.DockChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Enter += x, x => _data.Enter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(x => _data.HelpRequested += x, x => _data.HelpRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Leave += x, x => _data.Leave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Opened += x, x => _data.Opened -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Opening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Opening => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.Opening += x, x => _data.Opening -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RegionChanged += x, x => _data.RegionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ScrollEventHandler, global::System.Windows.Forms.ScrollEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StyleChanged += x, x => _data.StyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Validated += x, x => _data.Validated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDown.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.Validating += x, x => _data.Validating -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem"/> class as observables.
    /// </summary>
    public class ToolStripDropDownItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripDropDownItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripDropDownItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripDropDownItemEvents(global::System.Windows.Forms.ToolStripDropDownItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDownItem.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDownItem.DropDownItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemClickedEventArgs> DropDownItemClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemClickedEventHandler, global::System.Windows.Forms.ToolStripItemClickedEventArgs>(x => _data.DropDownItemClicked += x, x => _data.DropDownItemClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDownItem.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripDropDownItem.DropDownOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpening => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownOpening += x, x => _data.DropDownOpening -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripItem"/> class as observables.
    /// </summary>
    public class ToolStripItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripItemEvents(global::System.Windows.Forms.ToolStripItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.AvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AvailableChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AvailableChanged += x, x => _data.AvailableChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.DisplayStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DisplayStyleChanged += x, x => _data.DisplayStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragDrop += x, x => _data.DragDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseHover += x, x => _data.MouseHover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.OwnerChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OwnerChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OwnerChanged += x, x => _data.OwnerChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripItem.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripMenuItem"/> class as observables.
    /// </summary>
    public class ToolStripMenuItemEvents
    {
        private readonly global::System.Windows.Forms.ToolStripMenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripMenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripMenuItemEvents(global::System.Windows.Forms.ToolStripMenuItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripMenuItem.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripMenuItem.CheckStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CheckStateChanged += x, x => _data.CheckStateChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripPanel"/> class as observables.
    /// </summary>
    public class ToolStripPanelEvents
    {
        private readonly global::System.Windows.Forms.ToolStripPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripPanelEvents(global::System.Windows.Forms.ToolStripPanel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripPanel.RendererChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RendererChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RendererChanged += x, x => _data.RendererChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripPanel.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripProgressBar"/> class as observables.
    /// </summary>
    public class ToolStripProgressBarEvents
    {
        private readonly global::System.Windows.Forms.ToolStripProgressBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripProgressBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripProgressBarEvents(global::System.Windows.Forms.ToolStripProgressBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.OwnerChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OwnerChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OwnerChanged += x, x => _data.OwnerChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Validated += x, x => _data.Validated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripProgressBar.Validating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Validating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.Validating += x, x => _data.Validating -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripRenderer"/> class as observables.
    /// </summary>
    public class ToolStripRendererEvents
    {
        private readonly global::System.Windows.Forms.ToolStripRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripRendererEvents(global::System.Windows.Forms.ToolStripRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderArrow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripArrowRenderEventArgs> RenderArrow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripArrowRenderEventHandler, global::System.Windows.Forms.ToolStripArrowRenderEventArgs>(x => _data.RenderArrow += x, x => _data.RenderArrow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderButtonBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderButtonBackground += x, x => _data.RenderButtonBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderDropDownButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderDropDownButtonBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderDropDownButtonBackground += x, x => _data.RenderDropDownButtonBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderGrip"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripGripRenderEventArgs> RenderGrip => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripGripRenderEventHandler, global::System.Windows.Forms.ToolStripGripRenderEventArgs>(x => _data.RenderGrip += x, x => _data.RenderGrip -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderImageMargin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderImageMargin => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(x => _data.RenderImageMargin += x, x => _data.RenderImageMargin -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderItemBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderItemBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderItemBackground += x, x => _data.RenderItemBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemImageRenderEventArgs> RenderItemCheck => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemImageRenderEventHandler, global::System.Windows.Forms.ToolStripItemImageRenderEventArgs>(x => _data.RenderItemCheck += x, x => _data.RenderItemCheck -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderItemImage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemImageRenderEventArgs> RenderItemImage => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemImageRenderEventHandler, global::System.Windows.Forms.ToolStripItemImageRenderEventArgs>(x => _data.RenderItemImage += x, x => _data.RenderItemImage -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderItemText"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemTextRenderEventArgs> RenderItemText => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemTextRenderEventHandler, global::System.Windows.Forms.ToolStripItemTextRenderEventArgs>(x => _data.RenderItemText += x, x => _data.RenderItemText -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderLabelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderLabelBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderLabelBackground += x, x => _data.RenderLabelBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderMenuItemBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderMenuItemBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderMenuItemBackground += x, x => _data.RenderMenuItemBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderOverflowButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderOverflowButtonBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderOverflowButtonBackground += x, x => _data.RenderOverflowButtonBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderSeparator"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripSeparatorRenderEventArgs> RenderSeparator => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripSeparatorRenderEventHandler, global::System.Windows.Forms.ToolStripSeparatorRenderEventArgs>(x => _data.RenderSeparator += x, x => _data.RenderSeparator -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderSplitButtonBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderSplitButtonBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderSplitButtonBackground += x, x => _data.RenderSplitButtonBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderStatusStripSizingGrip"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderStatusStripSizingGrip => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(x => _data.RenderStatusStripSizingGrip += x, x => _data.RenderStatusStripSizingGrip -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderToolStripBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderToolStripBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(x => _data.RenderToolStripBackground += x, x => _data.RenderToolStripBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderToolStripBorder"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripRenderEventArgs> RenderToolStripBorder => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripRenderEventHandler, global::System.Windows.Forms.ToolStripRenderEventArgs>(x => _data.RenderToolStripBorder += x, x => _data.RenderToolStripBorder -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderToolStripContentPanelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripContentPanelRenderEventArgs> RenderToolStripContentPanelBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripContentPanelRenderEventHandler, global::System.Windows.Forms.ToolStripContentPanelRenderEventArgs>(x => _data.RenderToolStripContentPanelBackground += x, x => _data.RenderToolStripContentPanelBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderToolStripPanelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripPanelRenderEventArgs> RenderToolStripPanelBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripPanelRenderEventHandler, global::System.Windows.Forms.ToolStripPanelRenderEventArgs>(x => _data.RenderToolStripPanelBackground += x, x => _data.RenderToolStripPanelBackground -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripRenderer.RenderToolStripStatusLabelBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ToolStripItemRenderEventArgs> RenderToolStripStatusLabelBackground => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ToolStripItemRenderEventHandler, global::System.Windows.Forms.ToolStripItemRenderEventArgs>(x => _data.RenderToolStripStatusLabelBackground += x, x => _data.RenderToolStripStatusLabelBackground -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSeparator"/> class as observables.
    /// </summary>
    public class ToolStripSeparatorEvents
    {
        private readonly global::System.Windows.Forms.ToolStripSeparator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripSeparator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripSeparatorEvents(global::System.Windows.Forms.ToolStripSeparator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripSeparator.DisplayStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DisplayStyleChanged += x, x => _data.DisplayStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripSeparator.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripSeparator.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripSplitButton"/> class as observables.
    /// </summary>
    public class ToolStripSplitButtonEvents
    {
        private readonly global::System.Windows.Forms.ToolStripSplitButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripSplitButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripSplitButtonEvents(global::System.Windows.Forms.ToolStripSplitButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripSplitButton.ButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ButtonClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ButtonClick += x, x => _data.ButtonClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripSplitButton.ButtonDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ButtonDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ButtonDoubleClick += x, x => _data.ButtonDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripSplitButton.DefaultItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DefaultItemChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DefaultItemChanged += x, x => _data.DefaultItemChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolStripTextBox"/> class as observables.
    /// </summary>
    public class ToolStripTextBoxEvents
    {
        private readonly global::System.Windows.Forms.ToolStripTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolStripTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolStripTextBoxEvents(global::System.Windows.Forms.ToolStripTextBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripTextBox.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripTextBox.BorderStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BorderStyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BorderStyleChanged += x, x => _data.BorderStyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripTextBox.HideSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HideSelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.HideSelectionChanged += x, x => _data.HideSelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripTextBox.ModifiedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModifiedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ModifiedChanged += x, x => _data.ModifiedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripTextBox.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripTextBox.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripTextBox.TextBoxTextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextBoxTextAlignChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextBoxTextAlignChanged += x, x => _data.TextBoxTextAlignChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.ToolTip"/> class as observables.
    /// </summary>
    public class ToolTipEvents
    {
        private readonly global::System.Windows.Forms.ToolTip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.ToolTip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolTipEvents(global::System.Windows.Forms.ToolTip data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolTip.Draw"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawToolTipEventArgs> Draw => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawToolTipEventHandler, global::System.Windows.Forms.DrawToolTipEventArgs>(x => _data.Draw += x, x => _data.Draw -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolTip.Popup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PopupEventArgs> Popup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PopupEventHandler, global::System.Windows.Forms.PopupEventArgs>(x => _data.Popup += x, x => _data.Popup -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TrackBar"/> class as observables.
    /// </summary>
    public class TrackBarEvents
    {
        private readonly global::System.Windows.Forms.TrackBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TrackBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TrackBarEvents(global::System.Windows.Forms.TrackBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TrackBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.TreeView"/> class as observables.
    /// </summary>
    public class TreeViewEvents
    {
        private readonly global::System.Windows.Forms.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TreeViewEvents(global::System.Windows.Forms.TreeView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.AfterCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterCheck => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(x => _data.AfterCheck += x, x => _data.AfterCheck -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.AfterCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterCollapse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(x => _data.AfterCollapse += x, x => _data.AfterCollapse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.AfterExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterExpand => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(x => _data.AfterExpand += x, x => _data.AfterExpand -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.AfterLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.NodeLabelEditEventArgs> AfterLabelEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.NodeLabelEditEventHandler, global::System.Windows.Forms.NodeLabelEditEventArgs>(x => _data.AfterLabelEdit += x, x => _data.AfterLabelEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.AfterSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewEventArgs> AfterSelect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewEventHandler, global::System.Windows.Forms.TreeViewEventArgs>(x => _data.AfterSelect += x, x => _data.AfterSelect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.BeforeCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeCheck => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(x => _data.BeforeCheck += x, x => _data.BeforeCheck -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.BeforeCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeCollapse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(x => _data.BeforeCollapse += x, x => _data.BeforeCollapse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.BeforeExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeExpand => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(x => _data.BeforeExpand += x, x => _data.BeforeExpand -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.BeforeLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.NodeLabelEditEventArgs> BeforeLabelEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.NodeLabelEditEventHandler, global::System.Windows.Forms.NodeLabelEditEventArgs>(x => _data.BeforeLabelEdit += x, x => _data.BeforeLabelEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.BeforeSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeViewCancelEventArgs> BeforeSelect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeViewCancelEventHandler, global::System.Windows.Forms.TreeViewCancelEventArgs>(x => _data.BeforeSelect += x, x => _data.BeforeSelect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.DrawNode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DrawTreeNodeEventArgs> DrawNode => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DrawTreeNodeEventHandler, global::System.Windows.Forms.DrawTreeNodeEventArgs>(x => _data.DrawNode += x, x => _data.DrawNode -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.ItemDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.ItemDragEventArgs> ItemDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.ItemDragEventHandler, global::System.Windows.Forms.ItemDragEventArgs>(x => _data.ItemDrag += x, x => _data.ItemDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.NodeMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeNodeMouseClickEventArgs> NodeMouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeNodeMouseClickEventHandler, global::System.Windows.Forms.TreeNodeMouseClickEventArgs>(x => _data.NodeMouseClick += x, x => _data.NodeMouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.NodeMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeNodeMouseClickEventArgs> NodeMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeNodeMouseClickEventHandler, global::System.Windows.Forms.TreeNodeMouseClickEventArgs>(x => _data.NodeMouseDoubleClick += x, x => _data.NodeMouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.NodeMouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.TreeNodeMouseHoverEventArgs> NodeMouseHover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.TreeNodeMouseHoverEventHandler, global::System.Windows.Forms.TreeNodeMouseHoverEventArgs>(x => _data.NodeMouseHover += x, x => _data.NodeMouseHover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.TreeView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.UpDownBase"/> class as observables.
    /// </summary>
    public class UpDownBaseEvents
    {
        private readonly global::System.Windows.Forms.UpDownBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.UpDownBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UpDownBaseEvents(global::System.Windows.Forms.UpDownBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UpDownBase.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UpDownBase.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UpDownBase.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UpDownBase.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UpDownBase.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseHover += x, x => _data.MouseHover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UpDownBase.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UpDownBase.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.UserControl"/> class as observables.
    /// </summary>
    public class UserControlEvents
    {
        private readonly global::System.Windows.Forms.UserControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.UserControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UserControlEvents(global::System.Windows.Forms.UserControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UserControl.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UserControl.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UserControl.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Load += x, x => _data.Load -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.UserControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.VScrollBar"/> class as observables.
    /// </summary>
    public class VScrollBarEvents
    {
        private readonly global::System.Windows.Forms.VScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.VScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VScrollBarEvents(global::System.Windows.Forms.VScrollBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.VScrollBar.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.WebBrowser"/> class as observables.
    /// </summary>
    public class WebBrowserEvents
    {
        private readonly global::System.Windows.Forms.WebBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.WebBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebBrowserEvents(global::System.Windows.Forms.WebBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.CanGoBackChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanGoBackChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CanGoBackChanged += x, x => _data.CanGoBackChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.CanGoForwardChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanGoForwardChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CanGoForwardChanged += x, x => _data.CanGoForwardChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.DocumentCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserDocumentCompletedEventArgs> DocumentCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.WebBrowserDocumentCompletedEventHandler, global::System.Windows.Forms.WebBrowserDocumentCompletedEventArgs>(x => _data.DocumentCompleted += x, x => _data.DocumentCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.DocumentTitleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DocumentTitleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DocumentTitleChanged += x, x => _data.DocumentTitleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.EncryptionLevelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EncryptionLevelChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EncryptionLevelChanged += x, x => _data.EncryptionLevelChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.FileDownload"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FileDownload => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FileDownload += x, x => _data.FileDownload -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserNavigatedEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.WebBrowserNavigatedEventHandler, global::System.Windows.Forms.WebBrowserNavigatedEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserNavigatingEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.WebBrowserNavigatingEventHandler, global::System.Windows.Forms.WebBrowserNavigatingEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.NewWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> NewWindow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.NewWindow += x, x => _data.NewWindow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.ProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.WebBrowserProgressChangedEventArgs> ProgressChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.WebBrowserProgressChangedEventHandler, global::System.Windows.Forms.WebBrowserProgressChangedEventArgs>(x => _data.ProgressChanged += x, x => _data.ProgressChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowser.StatusTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StatusTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StatusTextChanged += x, x => _data.StatusTextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.WebBrowserBase"/> class as observables.
    /// </summary>
    public class WebBrowserBaseEvents
    {
        private readonly global::System.Windows.Forms.WebBrowserBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.WebBrowserBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebBrowserBaseEvents(global::System.Windows.Forms.WebBrowserBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.ChangeUICues"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.UICuesEventArgs> ChangeUICues => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.UICuesEventHandler, global::System.Windows.Forms.UICuesEventArgs>(x => _data.ChangeUICues += x, x => _data.ChangeUICues -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CursorChanged += x, x => _data.CursorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragDrop += x, x => _data.DragDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.DragEventHandler, global::System.Windows.Forms.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Enter += x, x => _data.Enter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FontChanged += x, x => _data.FontChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.GiveFeedbackEventHandler, global::System.Windows.Forms.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.HelpEventHandler, global::System.Windows.Forms.HelpEventArgs>(x => _data.HelpRequested += x, x => _data.HelpRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyPressEventHandler, global::System.Windows.Forms.KeyPressEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.KeyEventHandler, global::System.Windows.Forms.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.Layout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.LayoutEventArgs> Layout => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.LayoutEventHandler, global::System.Windows.Forms.LayoutEventArgs>(x => _data.Layout += x, x => _data.Layout -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Leave += x, x => _data.Leave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseCaptureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseCaptureChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseCaptureChanged += x, x => _data.MouseCaptureChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseClick += x, x => _data.MouseClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseHover += x, x => _data.MouseHover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.MouseEventHandler, global::System.Windows.Forms.MouseEventArgs>(x => _data.MouseWheel += x, x => _data.MouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.PaintEventHandler, global::System.Windows.Forms.PaintEventArgs>(x => _data.Paint += x, x => _data.Paint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.QueryAccessibilityHelp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryAccessibilityHelpEventArgs> QueryAccessibilityHelp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryAccessibilityHelpEventHandler, global::System.Windows.Forms.QueryAccessibilityHelpEventArgs>(x => _data.QueryAccessibilityHelp += x, x => _data.QueryAccessibilityHelp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Forms.QueryContinueDragEventHandler, global::System.Windows.Forms.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StyleChanged += x, x => _data.StyleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.WebBrowserBase.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Forms.DataVisualization.Charting
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Forms.DataVisualization.Charting"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Forms.DataVisualization.Charting.Chart"/> class.
        /// </summary>
        public static ChartEvents Events(this global::System.Windows.Forms.DataVisualization.Charting.Chart item) => new ChartEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Forms.DataVisualization.Charting.Chart"/> class as observables.
    /// </summary>
    public class ChartEvents
    {
        private readonly global::System.Windows.Forms.DataVisualization.Charting.Chart _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Forms.DataVisualization.Charting.Chart"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ChartEvents(global::System.Windows.Forms.DataVisualization.Charting.Chart data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationPlaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnnotationPlaced => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnnotationPlaced += x, x => _data.AnnotationPlaced -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationPositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnnotationPositionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnnotationPositionChanged += x, x => _data.AnnotationPositionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationPositionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs> AnnotationPositionChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs>(x => _data.AnnotationPositionChanging += x, x => _data.AnnotationPositionChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnnotationSelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnnotationSelectionChanged += x, x => _data.AnnotationSelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnnotationTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnnotationTextChanged += x, x => _data.AnnotationTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AxisScrollBarClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs> AxisScrollBarClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs>(x => _data.AxisScrollBarClicked += x, x => _data.AxisScrollBarClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AxisViewChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.ViewEventArgs> AxisViewChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.ViewEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.ViewEventArgs>(x => _data.AxisViewChanged += x, x => _data.AxisViewChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.AxisViewChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.ViewEventArgs> AxisViewChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.ViewEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.ViewEventArgs>(x => _data.AxisViewChanging += x, x => _data.AxisViewChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs> CursorPositionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>(x => _data.CursorPositionChanged += x, x => _data.CursorPositionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs> CursorPositionChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>(x => _data.CursorPositionChanging += x, x => _data.CursorPositionChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.Customize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Customize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Customize += x, x => _data.Customize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.CustomizeLegend"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs> CustomizeLegend => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs>(x => _data.CustomizeLegend += x, x => _data.CustomizeLegend -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.FormatNumber"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs> FormatNumber => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs>(x => _data.FormatNumber += x, x => _data.FormatNumber -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs> GetToolTipText => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs>(x => _data.GetToolTipText += x, x => _data.GetToolTipText -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.PostPaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs> PostPaint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs>(x => _data.PostPaint += x, x => _data.PostPaint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.PrePaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs> PrePaint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs>(x => _data.PrePaint += x, x => _data.PrePaint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.SelectionRangeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs> SelectionRangeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>(x => _data.SelectionRangeChanged += x, x => _data.SelectionRangeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.DataVisualization.Charting.Chart.SelectionRangeChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs> SelectionRangeChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>, global::System.Windows.Forms.DataVisualization.Charting.CursorEventArgs>(x => _data.SelectionRangeChanging += x, x => _data.SelectionRangeChanging -= x).Select(x => x.EventArgs);
    }
}

namespace Microsoft.Win32
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Microsoft.Win32"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.DisplaySettingsChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> SystemEventsDisplaySettingsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::Microsoft.Win32.SystemEvents.DisplaySettingsChanged += x, x => global::Microsoft.Win32.SystemEvents.DisplaySettingsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.DisplaySettingsChanging"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> SystemEventsDisplaySettingsChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::Microsoft.Win32.SystemEvents.DisplaySettingsChanging += x, x => global::Microsoft.Win32.SystemEvents.DisplaySettingsChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.EventsThreadShutdown"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> SystemEventsEventsThreadShutdown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::Microsoft.Win32.SystemEvents.EventsThreadShutdown += x, x => global::Microsoft.Win32.SystemEvents.EventsThreadShutdown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.InstalledFontsChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> SystemEventsInstalledFontsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::Microsoft.Win32.SystemEvents.InstalledFontsChanged += x, x => global::Microsoft.Win32.SystemEvents.InstalledFontsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.LowMemory"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("This event has been deprecated. http://go.microsoft.com/fwlink/?linkid=14202", false)]
        public static global::System.IObservable<global::System.EventArgs> SystemEventsLowMemory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::Microsoft.Win32.SystemEvents.LowMemory += x, x => global::Microsoft.Win32.SystemEvents.LowMemory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.PaletteChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> SystemEventsPaletteChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::Microsoft.Win32.SystemEvents.PaletteChanged += x, x => global::Microsoft.Win32.SystemEvents.PaletteChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.PowerModeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Microsoft.Win32.PowerModeChangedEventArgs> SystemEventsPowerModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::Microsoft.Win32.PowerModeChangedEventHandler, global::Microsoft.Win32.PowerModeChangedEventArgs>(x => global::Microsoft.Win32.SystemEvents.PowerModeChanged += x, x => global::Microsoft.Win32.SystemEvents.PowerModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.SessionEnded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Microsoft.Win32.SessionEndedEventArgs> SystemEventsSessionEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::Microsoft.Win32.SessionEndedEventHandler, global::Microsoft.Win32.SessionEndedEventArgs>(x => global::Microsoft.Win32.SystemEvents.SessionEnded += x, x => global::Microsoft.Win32.SystemEvents.SessionEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.SessionEnding"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Microsoft.Win32.SessionEndingEventArgs> SystemEventsSessionEnding => global::System.Reactive.Linq.Observable.FromEventPattern<global::Microsoft.Win32.SessionEndingEventHandler, global::Microsoft.Win32.SessionEndingEventArgs>(x => global::Microsoft.Win32.SystemEvents.SessionEnding += x, x => global::Microsoft.Win32.SystemEvents.SessionEnding -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.SessionSwitch"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Microsoft.Win32.SessionSwitchEventArgs> SystemEventsSessionSwitch => global::System.Reactive.Linq.Observable.FromEventPattern<global::Microsoft.Win32.SessionSwitchEventHandler, global::Microsoft.Win32.SessionSwitchEventArgs>(x => global::Microsoft.Win32.SystemEvents.SessionSwitch += x, x => global::Microsoft.Win32.SystemEvents.SessionSwitch -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.TimeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> SystemEventsTimeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::Microsoft.Win32.SystemEvents.TimeChanged += x, x => global::Microsoft.Win32.SystemEvents.TimeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.TimerElapsed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Microsoft.Win32.TimerElapsedEventArgs> SystemEventsTimerElapsed => global::System.Reactive.Linq.Observable.FromEventPattern<global::Microsoft.Win32.TimerElapsedEventHandler, global::Microsoft.Win32.TimerElapsedEventArgs>(x => global::Microsoft.Win32.SystemEvents.TimerElapsed += x, x => global::Microsoft.Win32.SystemEvents.TimerElapsed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.UserPreferenceChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Microsoft.Win32.UserPreferenceChangedEventArgs> SystemEventsUserPreferenceChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::Microsoft.Win32.UserPreferenceChangedEventHandler, global::Microsoft.Win32.UserPreferenceChangedEventArgs>(x => global::Microsoft.Win32.SystemEvents.UserPreferenceChanged += x, x => global::Microsoft.Win32.SystemEvents.UserPreferenceChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.SystemEvents.UserPreferenceChanging"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Microsoft.Win32.UserPreferenceChangingEventArgs> SystemEventsUserPreferenceChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::Microsoft.Win32.UserPreferenceChangingEventHandler, global::Microsoft.Win32.UserPreferenceChangingEventArgs>(x => global::Microsoft.Win32.SystemEvents.UserPreferenceChanging += x, x => global::Microsoft.Win32.SystemEvents.UserPreferenceChanging -= x).Select(x => x.EventArgs);
    }
}

namespace System.ComponentModel
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.ComponentModel"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.TypeDescriptor.Refreshed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.ComponentModel.RefreshEventArgs> TypeDescriptorRefreshed => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.RefreshEventHandler, global::System.ComponentModel.RefreshEventArgs>(eventHandler =>
        {
            void Handler(global::System.ComponentModel.RefreshEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::System.ComponentModel.TypeDescriptor.Refreshed += x, x => global::System.ComponentModel.TypeDescriptor.Refreshed -= x);
    }
}

namespace System.Windows.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Forms"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Application.ApplicationExit"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationApplicationExit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Forms.Application.ApplicationExit += x, x => global::System.Windows.Forms.Application.ApplicationExit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Application.EnterThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationEnterThreadModal => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Forms.Application.EnterThreadModal += x, x => global::System.Windows.Forms.Application.EnterThreadModal -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Application.Idle"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationIdle => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Forms.Application.Idle += x, x => global::System.Windows.Forms.Application.Idle -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Application.LeaveThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationLeaveThreadModal => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Forms.Application.LeaveThreadModal += x, x => global::System.Windows.Forms.Application.LeaveThreadModal -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Application.ThreadException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Threading.ThreadExceptionEventArgs> ApplicationThreadException => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Threading.ThreadExceptionEventHandler, global::System.Threading.ThreadExceptionEventArgs>(x => global::System.Windows.Forms.Application.ThreadException += x, x => global::System.Windows.Forms.Application.ThreadException -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.Application.ThreadExit"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationThreadExit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Forms.Application.ThreadExit += x, x => global::System.Windows.Forms.Application.ThreadExit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Forms.ToolStripManager.RendererChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ToolStripManagerRendererChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Forms.ToolStripManager.RendererChanged += x, x => global::System.Windows.Forms.ToolStripManager.RendererChanged -= x).Select(x => x.EventArgs);
    }
}