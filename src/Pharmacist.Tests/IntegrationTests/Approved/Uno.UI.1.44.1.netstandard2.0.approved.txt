
using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Uno.UI.Common
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Uno.UI.Common"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Uno.UI.Common.DelegateCommand"/> class.
        /// </summary>
        public static RxDelegateCommandEvents Events(this global::Uno.UI.Common.DelegateCommand item) => new RxDelegateCommandEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Uno.UI.Common.DelegateCommand"/> class as observables.
    /// </summary>
    public class RxDelegateCommandEvents
    {
        private readonly global::Uno.UI.Common.DelegateCommand _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Uno.UI.Common.DelegateCommand"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDelegateCommandEvents(global::Uno.UI.Common.DelegateCommand data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Uno.UI.Common.DelegateCommand.CanExecuteChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanExecuteChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CanExecuteChanged += x, x => _data.CanExecuteChanged -= x);
    }
}

namespace Uno.Xaml
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Uno.Xaml"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Uno.Xaml.IXamlNameResolver"/> class.
        /// </summary>
        public static RxIXamlNameResolverEvents Events(this global::Uno.Xaml.IXamlNameResolver item) => new RxIXamlNameResolverEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Uno.Xaml.IXamlNameResolver"/> class as observables.
    /// </summary>
    public class RxIXamlNameResolverEvents
    {
        private readonly global::Uno.Xaml.IXamlNameResolver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Uno.Xaml.IXamlNameResolver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIXamlNameResolverEvents(global::Uno.Xaml.IXamlNameResolver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Uno.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnNameScopeInitializationComplete => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OnNameScopeInitializationComplete += x, x => _data.OnNameScopeInitializationComplete -= x);
    }
}

namespace Windows.ApplicationModel
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.PackageCatalog"/> class.
        /// </summary>
        public static RxPackageCatalogEvents Events(this global::Windows.ApplicationModel.PackageCatalog item) => new RxPackageCatalogEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.PackageCatalog"/> class as observables.
    /// </summary>
    public class RxPackageCatalogEvents
    {
        private readonly global::Windows.ApplicationModel.PackageCatalog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.PackageCatalog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPackageCatalogEvents(global::Windows.ApplicationModel.PackageCatalog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.PackageCatalog.PackageContentGroupStaging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageContentGroupStagingEventArgs args)> PackageContentGroupStaging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.PackageCatalog, global::Windows.ApplicationModel.PackageContentGroupStagingEventArgs>, (global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageContentGroupStagingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageContentGroupStagingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageContentGroupStaging += x, x => _data.PackageContentGroupStaging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.PackageCatalog.PackageInstalling"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageInstallingEventArgs args)> PackageInstalling => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.PackageCatalog, global::Windows.ApplicationModel.PackageInstallingEventArgs>, (global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageInstallingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageInstallingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageInstalling += x, x => _data.PackageInstalling -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.PackageCatalog.PackageStaging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageStagingEventArgs args)> PackageStaging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.PackageCatalog, global::Windows.ApplicationModel.PackageStagingEventArgs>, (global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageStagingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageStagingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageStaging += x, x => _data.PackageStaging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.PackageCatalog.PackageStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageStatusChangedEventArgs args)> PackageStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.PackageCatalog, global::Windows.ApplicationModel.PackageStatusChangedEventArgs>, (global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageStatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageStatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageStatusChanged += x, x => _data.PackageStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.PackageCatalog.PackageUninstalling"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageUninstallingEventArgs args)> PackageUninstalling => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.PackageCatalog, global::Windows.ApplicationModel.PackageUninstallingEventArgs>, (global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageUninstallingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageUninstallingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageUninstalling += x, x => _data.PackageUninstalling -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.PackageCatalog.PackageUpdating"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageUpdatingEventArgs args)> PackageUpdating => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.PackageCatalog, global::Windows.ApplicationModel.PackageUpdatingEventArgs>, (global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageUpdatingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.PackageCatalog sender, global::Windows.ApplicationModel.PackageUpdatingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageUpdating += x, x => _data.PackageUpdating -= x);
    }
}

namespace Windows.ApplicationModel.Activation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Activation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Activation.SplashScreen"/> class.
        /// </summary>
        public static RxSplashScreenEvents Events(this global::Windows.ApplicationModel.Activation.SplashScreen item) => new RxSplashScreenEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Activation.SplashScreen"/> class as observables.
    /// </summary>
    public class RxSplashScreenEvents
    {
        private readonly global::Windows.ApplicationModel.Activation.SplashScreen _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Activation.SplashScreen"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplashScreenEvents(global::Windows.ApplicationModel.Activation.SplashScreen data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Activation.SplashScreen.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Activation.SplashScreen sender, object args)> Dismissed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Activation.SplashScreen, object>, (global::Windows.ApplicationModel.Activation.SplashScreen sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Activation.SplashScreen sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Dismissed += x, x => _data.Dismissed -= x);
    }
}

namespace Windows.ApplicationModel.AppExtensions
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.AppExtensions"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog"/> class.
        /// </summary>
        public static RxAppExtensionCatalogEvents Events(this global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog item) => new RxAppExtensionCatalogEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog"/> class as observables.
    /// </summary>
    public class RxAppExtensionCatalogEvents
    {
        private readonly global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppExtensionCatalogEvents(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog.PackageInstalled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs args)> PackageInstalled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs>, (global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageInstalled += x, x => _data.PackageInstalled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog.PackageStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs args)> PackageStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs>, (global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageStatusChanged += x, x => _data.PackageStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog.PackageUninstalling"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs args)> PackageUninstalling => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs>, (global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageUninstalling += x, x => _data.PackageUninstalling -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog.PackageUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs args)> PackageUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs>, (global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageUpdated += x, x => _data.PackageUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog.PackageUpdating"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs args)> PackageUpdating => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs>, (global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.AppExtensions.AppExtensionCatalog sender, global::Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PackageUpdating += x, x => _data.PackageUpdating -= x);
    }
}

namespace Windows.ApplicationModel.Appointments
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Appointments"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager"/> class.
        /// </summary>
        public static RxAppointmentCalendarSyncManagerEvents Events(this global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager item) => new RxAppointmentCalendarSyncManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentStore"/> class.
        /// </summary>
        public static RxAppointmentStoreEvents Events(this global::Windows.ApplicationModel.Appointments.AppointmentStore item) => new RxAppointmentStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager"/> class as observables.
    /// </summary>
    public class RxAppointmentCalendarSyncManagerEvents
    {
        private readonly global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppointmentCalendarSyncManagerEvents(global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager.SyncStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager sender, object args)> SyncStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager, object>, (global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SyncStatusChanged += x, x => _data.SyncStatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentStore"/> class as observables.
    /// </summary>
    public class RxAppointmentStoreEvents
    {
        private readonly global::Windows.ApplicationModel.Appointments.AppointmentStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppointmentStoreEvents(global::Windows.ApplicationModel.Appointments.AppointmentStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.AppointmentStore.StoreChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.AppointmentStore sender, global::Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs args)> StoreChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.AppointmentStore, global::Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs>, (global::Windows.ApplicationModel.Appointments.AppointmentStore sender, global::Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.AppointmentStore sender, global::Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StoreChanged += x, x => _data.StoreChanged -= x);
    }
}

namespace Windows.ApplicationModel.Appointments.DataProvider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Appointments.DataProvider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection"/> class.
        /// </summary>
        public static RxAppointmentDataProviderConnectionEvents Events(this global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection item) => new RxAppointmentDataProviderConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection"/> class as observables.
    /// </summary>
    public class RxAppointmentDataProviderConnectionEvents
    {
        private readonly global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppointmentDataProviderConnectionEvents(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection.CancelMeetingRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequestEventArgs args)> CancelMeetingRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequestEventArgs>, (global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CancelMeetingRequested += x, x => _data.CancelMeetingRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection.CreateOrUpdateAppointmentRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs args)> CreateOrUpdateAppointmentRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs>, (global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CreateOrUpdateAppointmentRequested += x, x => _data.CreateOrUpdateAppointmentRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection.ForwardMeetingRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequestEventArgs args)> ForwardMeetingRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequestEventArgs>, (global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ForwardMeetingRequested += x, x => _data.ForwardMeetingRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection.ProposeNewTimeForMeetingRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs args)> ProposeNewTimeForMeetingRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs>, (global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ProposeNewTimeForMeetingRequested += x, x => _data.ProposeNewTimeForMeetingRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection.SyncRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequestEventArgs args)> SyncRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequestEventArgs>, (global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SyncRequested += x, x => _data.SyncRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection.UpdateMeetingResponseRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequestEventArgs args)> UpdateMeetingResponseRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequestEventArgs>, (global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection sender, global::Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UpdateMeetingResponseRequested += x, x => _data.UpdateMeetingResponseRequested -= x);
    }
}

namespace Windows.ApplicationModel.AppService
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.AppService"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.AppService.AppServiceConnection"/> class.
        /// </summary>
        public static RxAppServiceConnectionEvents Events(this global::Windows.ApplicationModel.AppService.AppServiceConnection item) => new RxAppServiceConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.AppService.AppServiceConnection"/> class as observables.
    /// </summary>
    public class RxAppServiceConnectionEvents
    {
        private readonly global::Windows.ApplicationModel.AppService.AppServiceConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.AppService.AppServiceConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppServiceConnectionEvents(global::Windows.ApplicationModel.AppService.AppServiceConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.AppService.AppServiceConnection.RequestReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.AppService.AppServiceConnection sender, global::Windows.ApplicationModel.AppService.AppServiceRequestReceivedEventArgs args)> RequestReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.AppService.AppServiceConnection, global::Windows.ApplicationModel.AppService.AppServiceRequestReceivedEventArgs>, (global::Windows.ApplicationModel.AppService.AppServiceConnection sender, global::Windows.ApplicationModel.AppService.AppServiceRequestReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.AppService.AppServiceConnection sender, global::Windows.ApplicationModel.AppService.AppServiceRequestReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RequestReceived += x, x => _data.RequestReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.AppService.AppServiceConnection.ServiceClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.AppService.AppServiceConnection sender, global::Windows.ApplicationModel.AppService.AppServiceClosedEventArgs args)> ServiceClosed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.AppService.AppServiceConnection, global::Windows.ApplicationModel.AppService.AppServiceClosedEventArgs>, (global::Windows.ApplicationModel.AppService.AppServiceConnection sender, global::Windows.ApplicationModel.AppService.AppServiceClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.AppService.AppServiceConnection sender, global::Windows.ApplicationModel.AppService.AppServiceClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ServiceClosed += x, x => _data.ServiceClosed -= x);
    }
}

namespace Windows.ApplicationModel.Background
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Background"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistration"/> class.
        /// </summary>
        public static RxBackgroundTaskRegistrationEvents Events(this global::Windows.ApplicationModel.Background.BackgroundTaskRegistration item) => new RxBackgroundTaskRegistrationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup"/> class.
        /// </summary>
        public static RxBackgroundTaskRegistrationGroupEvents Events(this global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup item) => new RxBackgroundTaskRegistrationGroupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskInstance"/> class.
        /// </summary>
        public static RxIBackgroundTaskInstanceEvents Events(this global::Windows.ApplicationModel.Background.IBackgroundTaskInstance item) => new RxIBackgroundTaskInstanceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration"/> class.
        /// </summary>
        public static RxIBackgroundTaskRegistrationEvents Events(this global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration item) => new RxIBackgroundTaskRegistrationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistration"/> class as observables.
    /// </summary>
    public class RxBackgroundTaskRegistrationEvents
    {
        private readonly global::Windows.ApplicationModel.Background.BackgroundTaskRegistration _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistration"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBackgroundTaskRegistrationEvents(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistration.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs args)> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventHandler, (global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistration.Progress"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs args)> Progress => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventHandler, (global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Progress += x, x => _data.Progress -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup"/> class as observables.
    /// </summary>
    public class RxBackgroundTaskRegistrationGroupEvents
    {
        private readonly global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBackgroundTaskRegistrationGroupEvents(global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup.BackgroundActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup sender, global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs args)> BackgroundActivated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup, global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs>, (global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup sender, global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup sender, global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BackgroundActivated += x, x => _data.BackgroundActivated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskInstance"/> class as observables.
    /// </summary>
    public class RxIBackgroundTaskInstanceEvents
    {
        private readonly global::Windows.ApplicationModel.Background.IBackgroundTaskInstance _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskInstance"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIBackgroundTaskInstanceEvents(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskInstance.Canceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance sender, global::Windows.ApplicationModel.Background.BackgroundTaskCancellationReason reason)> Canceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler, (global::Windows.ApplicationModel.Background.IBackgroundTaskInstance sender, global::Windows.ApplicationModel.Background.BackgroundTaskCancellationReason reason)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance sender, global::Windows.ApplicationModel.Background.BackgroundTaskCancellationReason reason) => eventHandler((sender, reason));
            return Handler;
        }

        , x => _data.Canceled += x, x => _data.Canceled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration"/> class as observables.
    /// </summary>
    public class RxIBackgroundTaskRegistrationEvents
    {
        private readonly global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIBackgroundTaskRegistrationEvents(global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs args)> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventHandler, (global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Background.IBackgroundTaskRegistration.Progress"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs args)> Progress => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventHandler, (global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Background.BackgroundTaskRegistration sender, global::Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Progress += x, x => _data.Progress -= x);
    }
}

namespace Windows.ApplicationModel.Chat
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Chat"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.ChatConversation"/> class.
        /// </summary>
        public static RxChatConversationEvents Events(this global::Windows.ApplicationModel.Chat.ChatConversation item) => new RxChatConversationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.ChatMessageStore"/> class.
        /// </summary>
        public static RxChatMessageStoreEvents Events(this global::Windows.ApplicationModel.Chat.ChatMessageStore item) => new RxChatMessageStoreEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager"/> class.
        /// </summary>
        public static RxRcsEndUserMessageManagerEvents Events(this global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager item) => new RxRcsEndUserMessageManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.RcsTransport"/> class.
        /// </summary>
        public static RxRcsTransportEvents Events(this global::Windows.ApplicationModel.Chat.RcsTransport item) => new RxRcsTransportEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.ChatConversation"/> class as observables.
    /// </summary>
    public class RxChatConversationEvents
    {
        private readonly global::Windows.ApplicationModel.Chat.ChatConversation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Chat.ChatConversation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxChatConversationEvents(global::Windows.ApplicationModel.Chat.ChatConversation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Chat.ChatConversation.RemoteParticipantComposingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Chat.ChatConversation sender, global::Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs args)> RemoteParticipantComposingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Chat.ChatConversation, global::Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs>, (global::Windows.ApplicationModel.Chat.ChatConversation sender, global::Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Chat.ChatConversation sender, global::Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RemoteParticipantComposingChanged += x, x => _data.RemoteParticipantComposingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.ChatMessageStore"/> class as observables.
    /// </summary>
    public class RxChatMessageStoreEvents
    {
        private readonly global::Windows.ApplicationModel.Chat.ChatMessageStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Chat.ChatMessageStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxChatMessageStoreEvents(global::Windows.ApplicationModel.Chat.ChatMessageStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Chat.ChatMessageStore.MessageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Chat.ChatMessageStore sender, global::Windows.ApplicationModel.Chat.ChatMessageChangedEventArgs args)> MessageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Chat.ChatMessageStore, global::Windows.ApplicationModel.Chat.ChatMessageChangedEventArgs>, (global::Windows.ApplicationModel.Chat.ChatMessageStore sender, global::Windows.ApplicationModel.Chat.ChatMessageChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Chat.ChatMessageStore sender, global::Windows.ApplicationModel.Chat.ChatMessageChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MessageChanged += x, x => _data.MessageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Chat.ChatMessageStore.StoreChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Chat.ChatMessageStore sender, global::Windows.ApplicationModel.Chat.ChatMessageStoreChangedEventArgs args)> StoreChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Chat.ChatMessageStore, global::Windows.ApplicationModel.Chat.ChatMessageStoreChangedEventArgs>, (global::Windows.ApplicationModel.Chat.ChatMessageStore sender, global::Windows.ApplicationModel.Chat.ChatMessageStoreChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Chat.ChatMessageStore sender, global::Windows.ApplicationModel.Chat.ChatMessageStoreChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StoreChanged += x, x => _data.StoreChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager"/> class as observables.
    /// </summary>
    public class RxRcsEndUserMessageManagerEvents
    {
        private readonly global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRcsEndUserMessageManagerEvents(global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager.MessageAvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager sender, global::Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableEventArgs args)> MessageAvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager, global::Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableEventArgs>, (global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager sender, global::Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Chat.RcsEndUserMessageManager sender, global::Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MessageAvailableChanged += x, x => _data.MessageAvailableChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Chat.RcsTransport"/> class as observables.
    /// </summary>
    public class RxRcsTransportEvents
    {
        private readonly global::Windows.ApplicationModel.Chat.RcsTransport _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Chat.RcsTransport"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRcsTransportEvents(global::Windows.ApplicationModel.Chat.RcsTransport data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Chat.RcsTransport.ServiceKindSupportedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Chat.RcsTransport sender, global::Windows.ApplicationModel.Chat.RcsServiceKindSupportedChangedEventArgs args)> ServiceKindSupportedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Chat.RcsTransport, global::Windows.ApplicationModel.Chat.RcsServiceKindSupportedChangedEventArgs>, (global::Windows.ApplicationModel.Chat.RcsTransport sender, global::Windows.ApplicationModel.Chat.RcsServiceKindSupportedChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Chat.RcsTransport sender, global::Windows.ApplicationModel.Chat.RcsServiceKindSupportedChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ServiceKindSupportedChanged += x, x => _data.ServiceKindSupportedChanged -= x);
    }
}

namespace Windows.ApplicationModel.Contacts
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Contacts"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactList"/> class.
        /// </summary>
        public static RxContactListEvents Events(this global::Windows.ApplicationModel.Contacts.ContactList item) => new RxContactListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactListSyncManager"/> class.
        /// </summary>
        public static RxContactListSyncManagerEvents Events(this global::Windows.ApplicationModel.Contacts.ContactListSyncManager item) => new RxContactListSyncManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactPanel"/> class.
        /// </summary>
        public static RxContactPanelEvents Events(this global::Windows.ApplicationModel.Contacts.ContactPanel item) => new RxContactPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactStore"/> class.
        /// </summary>
        public static RxContactStoreEvents Events(this global::Windows.ApplicationModel.Contacts.ContactStore item) => new RxContactStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactList"/> class as observables.
    /// </summary>
    public class RxContactListEvents
    {
        private readonly global::Windows.ApplicationModel.Contacts.ContactList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Contacts.ContactList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContactListEvents(global::Windows.ApplicationModel.Contacts.ContactList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.ContactList.ContactChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.ContactList sender, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs args)> ContactChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.ContactList, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs>, (global::Windows.ApplicationModel.Contacts.ContactList sender, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.ContactList sender, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContactChanged += x, x => _data.ContactChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactListSyncManager"/> class as observables.
    /// </summary>
    public class RxContactListSyncManagerEvents
    {
        private readonly global::Windows.ApplicationModel.Contacts.ContactListSyncManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Contacts.ContactListSyncManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContactListSyncManagerEvents(global::Windows.ApplicationModel.Contacts.ContactListSyncManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.ContactListSyncManager.SyncStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.ContactListSyncManager sender, object args)> SyncStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.ContactListSyncManager, object>, (global::Windows.ApplicationModel.Contacts.ContactListSyncManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.ContactListSyncManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SyncStatusChanged += x, x => _data.SyncStatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactPanel"/> class as observables.
    /// </summary>
    public class RxContactPanelEvents
    {
        private readonly global::Windows.ApplicationModel.Contacts.ContactPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Contacts.ContactPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContactPanelEvents(global::Windows.ApplicationModel.Contacts.ContactPanel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.ContactPanel.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.ContactPanel sender, global::Windows.ApplicationModel.Contacts.ContactPanelClosingEventArgs args)> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.ContactPanel, global::Windows.ApplicationModel.Contacts.ContactPanelClosingEventArgs>, (global::Windows.ApplicationModel.Contacts.ContactPanel sender, global::Windows.ApplicationModel.Contacts.ContactPanelClosingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.ContactPanel sender, global::Windows.ApplicationModel.Contacts.ContactPanelClosingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.ContactPanel.LaunchFullAppRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.ContactPanel sender, global::Windows.ApplicationModel.Contacts.ContactPanelLaunchFullAppRequestedEventArgs args)> LaunchFullAppRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.ContactPanel, global::Windows.ApplicationModel.Contacts.ContactPanelLaunchFullAppRequestedEventArgs>, (global::Windows.ApplicationModel.Contacts.ContactPanel sender, global::Windows.ApplicationModel.Contacts.ContactPanelLaunchFullAppRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.ContactPanel sender, global::Windows.ApplicationModel.Contacts.ContactPanelLaunchFullAppRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LaunchFullAppRequested += x, x => _data.LaunchFullAppRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.ContactStore"/> class as observables.
    /// </summary>
    public class RxContactStoreEvents
    {
        private readonly global::Windows.ApplicationModel.Contacts.ContactStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Contacts.ContactStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContactStoreEvents(global::Windows.ApplicationModel.Contacts.ContactStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.ContactStore.ContactChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.ContactStore sender, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs args)> ContactChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.ContactStore, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs>, (global::Windows.ApplicationModel.Contacts.ContactStore sender, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.ContactStore sender, global::Windows.ApplicationModel.Contacts.ContactChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContactChanged += x, x => _data.ContactChanged -= x);
    }
}

namespace Windows.ApplicationModel.Contacts.DataProvider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Contacts.DataProvider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection"/> class.
        /// </summary>
        public static RxContactDataProviderConnectionEvents Events(this global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection item) => new RxContactDataProviderConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection"/> class as observables.
    /// </summary>
    public class RxContactDataProviderConnectionEvents
    {
        private readonly global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContactDataProviderConnectionEvents(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection.CreateOrUpdateContactRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListCreateOrUpdateContactRequestEventArgs args)> CreateOrUpdateContactRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListCreateOrUpdateContactRequestEventArgs>, (global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListCreateOrUpdateContactRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListCreateOrUpdateContactRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CreateOrUpdateContactRequested += x, x => _data.CreateOrUpdateContactRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection.DeleteContactRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListDeleteContactRequestEventArgs args)> DeleteContactRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListDeleteContactRequestEventArgs>, (global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListDeleteContactRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListDeleteContactRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DeleteContactRequested += x, x => _data.DeleteContactRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection.ServerSearchReadBatchRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListServerSearchReadBatchRequestEventArgs args)> ServerSearchReadBatchRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListServerSearchReadBatchRequestEventArgs>, (global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListServerSearchReadBatchRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListServerSearchReadBatchRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ServerSearchReadBatchRequested += x, x => _data.ServerSearchReadBatchRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection.SyncRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListSyncManagerSyncRequestEventArgs args)> SyncRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListSyncManagerSyncRequestEventArgs>, (global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListSyncManagerSyncRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection sender, global::Windows.ApplicationModel.Contacts.DataProvider.ContactListSyncManagerSyncRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SyncRequested += x, x => _data.SyncRequested -= x);
    }
}

namespace Windows.ApplicationModel.Contacts.Provider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Contacts.Provider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI"/> class.
        /// </summary>
        public static RxContactPickerUIEvents Events(this global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI item) => new RxContactPickerUIEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI"/> class as observables.
    /// </summary>
    public class RxContactPickerUIEvents
    {
        private readonly global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContactPickerUIEvents(global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI.ContactRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI sender, global::Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs args)> ContactRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI, global::Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs>, (global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI sender, global::Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Contacts.Provider.ContactPickerUI sender, global::Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContactRemoved += x, x => _data.ContactRemoved -= x);
    }
}

namespace Windows.ApplicationModel.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationView"/> class.
        /// </summary>
        public static RxCoreApplicationViewEvents Events(this global::Windows.ApplicationModel.Core.CoreApplicationView item) => new RxCoreApplicationViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar"/> class.
        /// </summary>
        public static RxCoreApplicationViewTitleBarEvents Events(this global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar item) => new RxCoreApplicationViewTitleBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Core.ICoreApplicationUnhandledError"/> class.
        /// </summary>
        public static RxICoreApplicationUnhandledErrorEvents Events(this global::Windows.ApplicationModel.Core.ICoreApplicationUnhandledError item) => new RxICoreApplicationUnhandledErrorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationView"/> class as observables.
    /// </summary>
    public class RxCoreApplicationViewEvents
    {
        private readonly global::Windows.ApplicationModel.Core.CoreApplicationView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreApplicationViewEvents(global::Windows.ApplicationModel.Core.CoreApplicationView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationView.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Core.CoreApplicationView sender, global::Windows.ApplicationModel.Activation.IActivatedEventArgs args)> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Core.CoreApplicationView, global::Windows.ApplicationModel.Activation.IActivatedEventArgs>, (global::Windows.ApplicationModel.Core.CoreApplicationView sender, global::Windows.ApplicationModel.Activation.IActivatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Core.CoreApplicationView sender, global::Windows.ApplicationModel.Activation.IActivatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationView.HostedViewClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Core.CoreApplicationView sender, global::Windows.ApplicationModel.Core.HostedViewClosingEventArgs args)> HostedViewClosing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Core.CoreApplicationView, global::Windows.ApplicationModel.Core.HostedViewClosingEventArgs>, (global::Windows.ApplicationModel.Core.CoreApplicationView sender, global::Windows.ApplicationModel.Core.HostedViewClosingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Core.CoreApplicationView sender, global::Windows.ApplicationModel.Core.HostedViewClosingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HostedViewClosing += x, x => _data.HostedViewClosing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar"/> class as observables.
    /// </summary>
    public class RxCoreApplicationViewTitleBarEvents
    {
        private readonly global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreApplicationViewTitleBarEvents(global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar.IsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar sender, object args)> IsVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar, object>, (global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsVisibleChanged += x, x => _data.IsVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar.LayoutMetricsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar sender, object args)> LayoutMetricsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar, object>, (global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LayoutMetricsChanged += x, x => _data.LayoutMetricsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Core.ICoreApplicationUnhandledError"/> class as observables.
    /// </summary>
    public class RxICoreApplicationUnhandledErrorEvents
    {
        private readonly global::Windows.ApplicationModel.Core.ICoreApplicationUnhandledError _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Core.ICoreApplicationUnhandledError"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICoreApplicationUnhandledErrorEvents(global::Windows.ApplicationModel.Core.ICoreApplicationUnhandledError data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.ICoreApplicationUnhandledError.UnhandledErrorDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs> UnhandledErrorDetected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs>, global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.UnhandledErrorDetected += x, x => _data.UnhandledErrorDetected -= x);
    }
}

namespace Windows.ApplicationModel.DataTransfer
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.DataTransfer"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataPackage"/> class.
        /// </summary>
        public static RxDataPackageEvents Events(this global::Windows.ApplicationModel.DataTransfer.DataPackage item) => new RxDataPackageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataTransferManager"/> class.
        /// </summary>
        public static RxDataTransferManagerEvents Events(this global::Windows.ApplicationModel.DataTransfer.DataTransferManager item) => new RxDataTransferManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataPackage"/> class as observables.
    /// </summary>
    public class RxDataPackageEvents
    {
        private readonly global::Windows.ApplicationModel.DataTransfer.DataPackage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataPackage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataPackageEvents(global::Windows.ApplicationModel.DataTransfer.DataPackage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataPackage.Destroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.DataTransfer.DataPackage sender, object args)> Destroyed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.DataTransfer.DataPackage, object>, (global::Windows.ApplicationModel.DataTransfer.DataPackage sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.DataTransfer.DataPackage sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Destroyed += x, x => _data.Destroyed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataPackage.OperationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.DataTransfer.DataPackage sender, global::Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs args)> OperationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.DataTransfer.DataPackage, global::Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs>, (global::Windows.ApplicationModel.DataTransfer.DataPackage sender, global::Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.DataTransfer.DataPackage sender, global::Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OperationCompleted += x, x => _data.OperationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataPackage.ShareCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.DataTransfer.DataPackage sender, global::Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs args)> ShareCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.DataTransfer.DataPackage, global::Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs>, (global::Windows.ApplicationModel.DataTransfer.DataPackage sender, global::Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.DataTransfer.DataPackage sender, global::Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ShareCompleted += x, x => _data.ShareCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataTransferManager"/> class as observables.
    /// </summary>
    public class RxDataTransferManagerEvents
    {
        private readonly global::Windows.ApplicationModel.DataTransfer.DataTransferManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataTransferManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataTransferManagerEvents(global::Windows.ApplicationModel.DataTransfer.DataTransferManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataTransferManager.DataRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs args)> DataRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.DataTransfer.DataTransferManager, global::Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs>, (global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataRequested += x, x => _data.DataRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataTransferManager.ShareProvidersRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs args)> ShareProvidersRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.DataTransfer.DataTransferManager, global::Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs>, (global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ShareProvidersRequested += x, x => _data.ShareProvidersRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.DataTransferManager.TargetApplicationChosen"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs args)> TargetApplicationChosen => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.DataTransfer.DataTransferManager, global::Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs>, (global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.DataTransfer.DataTransferManager sender, global::Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TargetApplicationChosen += x, x => _data.TargetApplicationChosen -= x);
    }
}

namespace Windows.ApplicationModel.DataTransfer.DragDrop.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.DataTransfer.DragDrop.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager"/> class.
        /// </summary>
        public static RxCoreDragDropManagerEvents Events(this global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager item) => new RxCoreDragDropManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager"/> class as observables.
    /// </summary>
    public class RxCoreDragDropManagerEvents
    {
        private readonly global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreDragDropManagerEvents(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.TargetRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager sender, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDropOperationTargetRequestedEventArgs args)> TargetRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDropOperationTargetRequestedEventArgs>, (global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager sender, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDropOperationTargetRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager sender, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDropOperationTargetRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TargetRequested += x, x => _data.TargetRequested -= x);
    }
}

namespace Windows.ApplicationModel.Email
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Email"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Email.EmailMailbox"/> class.
        /// </summary>
        public static RxEmailMailboxEvents Events(this global::Windows.ApplicationModel.Email.EmailMailbox item) => new RxEmailMailboxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Email.EmailMailboxSyncManager"/> class.
        /// </summary>
        public static RxEmailMailboxSyncManagerEvents Events(this global::Windows.ApplicationModel.Email.EmailMailboxSyncManager item) => new RxEmailMailboxSyncManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Email.EmailMailbox"/> class as observables.
    /// </summary>
    public class RxEmailMailboxEvents
    {
        private readonly global::Windows.ApplicationModel.Email.EmailMailbox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Email.EmailMailbox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEmailMailboxEvents(global::Windows.ApplicationModel.Email.EmailMailbox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.EmailMailbox.MailboxChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.EmailMailbox sender, global::Windows.ApplicationModel.Email.EmailMailboxChangedEventArgs args)> MailboxChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.EmailMailbox, global::Windows.ApplicationModel.Email.EmailMailboxChangedEventArgs>, (global::Windows.ApplicationModel.Email.EmailMailbox sender, global::Windows.ApplicationModel.Email.EmailMailboxChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.EmailMailbox sender, global::Windows.ApplicationModel.Email.EmailMailboxChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MailboxChanged += x, x => _data.MailboxChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Email.EmailMailboxSyncManager"/> class as observables.
    /// </summary>
    public class RxEmailMailboxSyncManagerEvents
    {
        private readonly global::Windows.ApplicationModel.Email.EmailMailboxSyncManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Email.EmailMailboxSyncManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEmailMailboxSyncManagerEvents(global::Windows.ApplicationModel.Email.EmailMailboxSyncManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.EmailMailboxSyncManager.SyncStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.EmailMailboxSyncManager sender, object args)> SyncStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.EmailMailboxSyncManager, object>, (global::Windows.ApplicationModel.Email.EmailMailboxSyncManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.EmailMailboxSyncManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SyncStatusChanged += x, x => _data.SyncStatusChanged -= x);
    }
}

namespace Windows.ApplicationModel.Email.DataProvider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Email.DataProvider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection"/> class.
        /// </summary>
        public static RxEmailDataProviderConnectionEvents Events(this global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection item) => new RxEmailDataProviderConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection"/> class as observables.
    /// </summary>
    public class RxEmailDataProviderConnectionEvents
    {
        private readonly global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEmailDataProviderConnectionEvents(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.CreateFolderRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxCreateFolderRequestEventArgs args)> CreateFolderRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxCreateFolderRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxCreateFolderRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxCreateFolderRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CreateFolderRequested += x, x => _data.CreateFolderRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.DeleteFolderRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDeleteFolderRequestEventArgs args)> DeleteFolderRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDeleteFolderRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDeleteFolderRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDeleteFolderRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DeleteFolderRequested += x, x => _data.DeleteFolderRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.DownloadAttachmentRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadAttachmentRequestEventArgs args)> DownloadAttachmentRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadAttachmentRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadAttachmentRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadAttachmentRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DownloadAttachmentRequested += x, x => _data.DownloadAttachmentRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.DownloadMessageRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadMessageRequestEventArgs args)> DownloadMessageRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadMessageRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadMessageRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadMessageRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DownloadMessageRequested += x, x => _data.DownloadMessageRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.EmptyFolderRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxEmptyFolderRequestEventArgs args)> EmptyFolderRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxEmptyFolderRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxEmptyFolderRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxEmptyFolderRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EmptyFolderRequested += x, x => _data.EmptyFolderRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.ForwardMeetingRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxForwardMeetingRequestEventArgs args)> ForwardMeetingRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxForwardMeetingRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxForwardMeetingRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxForwardMeetingRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ForwardMeetingRequested += x, x => _data.ForwardMeetingRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.GetAutoReplySettingsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxGetAutoReplySettingsRequestEventArgs args)> GetAutoReplySettingsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxGetAutoReplySettingsRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxGetAutoReplySettingsRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxGetAutoReplySettingsRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GetAutoReplySettingsRequested += x, x => _data.GetAutoReplySettingsRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.MailboxSyncRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSyncManagerSyncRequestEventArgs args)> MailboxSyncRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSyncManagerSyncRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSyncManagerSyncRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSyncManagerSyncRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MailboxSyncRequested += x, x => _data.MailboxSyncRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.MoveFolderRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxMoveFolderRequestEventArgs args)> MoveFolderRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxMoveFolderRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxMoveFolderRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxMoveFolderRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MoveFolderRequested += x, x => _data.MoveFolderRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.ProposeNewTimeForMeetingRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxProposeNewTimeForMeetingRequestEventArgs args)> ProposeNewTimeForMeetingRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxProposeNewTimeForMeetingRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxProposeNewTimeForMeetingRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxProposeNewTimeForMeetingRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ProposeNewTimeForMeetingRequested += x, x => _data.ProposeNewTimeForMeetingRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.ResolveRecipientsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxResolveRecipientsRequestEventArgs args)> ResolveRecipientsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxResolveRecipientsRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxResolveRecipientsRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxResolveRecipientsRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ResolveRecipientsRequested += x, x => _data.ResolveRecipientsRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.ServerSearchReadBatchRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxServerSearchReadBatchRequestEventArgs args)> ServerSearchReadBatchRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxServerSearchReadBatchRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxServerSearchReadBatchRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxServerSearchReadBatchRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ServerSearchReadBatchRequested += x, x => _data.ServerSearchReadBatchRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.SetAutoReplySettingsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSetAutoReplySettingsRequestEventArgs args)> SetAutoReplySettingsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSetAutoReplySettingsRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSetAutoReplySettingsRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxSetAutoReplySettingsRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SetAutoReplySettingsRequested += x, x => _data.SetAutoReplySettingsRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.UpdateMeetingResponseRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxUpdateMeetingResponseRequestEventArgs args)> UpdateMeetingResponseRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxUpdateMeetingResponseRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxUpdateMeetingResponseRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxUpdateMeetingResponseRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UpdateMeetingResponseRequested += x, x => _data.UpdateMeetingResponseRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection.ValidateCertificatesRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxValidateCertificatesRequestEventArgs args)> ValidateCertificatesRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxValidateCertificatesRequestEventArgs>, (global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxValidateCertificatesRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection sender, global::Windows.ApplicationModel.Email.DataProvider.EmailMailboxValidateCertificatesRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ValidateCertificatesRequested += x, x => _data.ValidateCertificatesRequested -= x);
    }
}

namespace Windows.ApplicationModel.ExtendedExecution
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.ExtendedExecution"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession"/> class.
        /// </summary>
        public static RxExtendedExecutionSessionEvents Events(this global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession item) => new RxExtendedExecutionSessionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession"/> class as observables.
    /// </summary>
    public class RxExtendedExecutionSessionEvents
    {
        private readonly global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxExtendedExecutionSessionEvents(global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession.Revoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionRevokedEventArgs> Revoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionRevokedEventArgs>, global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionRevokedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionRevokedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.Revoked += x, x => _data.Revoked -= x);
    }
}

namespace Windows.ApplicationModel.ExtendedExecution.Foreground
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.ExtendedExecution.Foreground"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundSession"/> class.
        /// </summary>
        public static RxExtendedExecutionForegroundSessionEvents Events(this global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundSession item) => new RxExtendedExecutionForegroundSessionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundSession"/> class as observables.
    /// </summary>
    public class RxExtendedExecutionForegroundSessionEvents
    {
        private readonly global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxExtendedExecutionForegroundSessionEvents(global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundSession.Revoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundRevokedEventArgs> Revoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundRevokedEventArgs>, global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundRevokedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.ExtendedExecution.Foreground.ExtendedExecutionForegroundRevokedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.Revoked += x, x => _data.Revoked -= x);
    }
}

namespace Windows.ApplicationModel.LockScreen
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.LockScreen"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.LockScreen.LockApplicationHost"/> class.
        /// </summary>
        public static RxLockApplicationHostEvents Events(this global::Windows.ApplicationModel.LockScreen.LockApplicationHost item) => new RxLockApplicationHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.LockScreen.LockScreenInfo"/> class.
        /// </summary>
        public static RxLockScreenInfoEvents Events(this global::Windows.ApplicationModel.LockScreen.LockScreenInfo item) => new RxLockScreenInfoEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.LockScreen.LockApplicationHost"/> class as observables.
    /// </summary>
    public class RxLockApplicationHostEvents
    {
        private readonly global::Windows.ApplicationModel.LockScreen.LockApplicationHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.LockScreen.LockApplicationHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLockApplicationHostEvents(global::Windows.ApplicationModel.LockScreen.LockApplicationHost data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.LockScreen.LockApplicationHost.Unlocking"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.LockScreen.LockApplicationHost sender, global::Windows.ApplicationModel.LockScreen.LockScreenUnlockingEventArgs args)> Unlocking => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockApplicationHost, global::Windows.ApplicationModel.LockScreen.LockScreenUnlockingEventArgs>, (global::Windows.ApplicationModel.LockScreen.LockApplicationHost sender, global::Windows.ApplicationModel.LockScreen.LockScreenUnlockingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.LockScreen.LockApplicationHost sender, global::Windows.ApplicationModel.LockScreen.LockScreenUnlockingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Unlocking += x, x => _data.Unlocking -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.LockScreen.LockScreenInfo"/> class as observables.
    /// </summary>
    public class RxLockScreenInfoEvents
    {
        private readonly global::Windows.ApplicationModel.LockScreen.LockScreenInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.LockScreen.LockScreenInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLockScreenInfoEvents(global::Windows.ApplicationModel.LockScreen.LockScreenInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.LockScreen.LockScreenInfo.AlarmIconChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)> AlarmIconChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object>, (global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AlarmIconChanged += x, x => _data.AlarmIconChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.LockScreen.LockScreenInfo.BadgesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)> BadgesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object>, (global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BadgesChanged += x, x => _data.BadgesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.LockScreen.LockScreenInfo.DetailTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)> DetailTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object>, (global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DetailTextChanged += x, x => _data.DetailTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.LockScreen.LockScreenInfo.LockScreenImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)> LockScreenImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object>, (global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.LockScreen.LockScreenInfo sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LockScreenImageChanged += x, x => _data.LockScreenImageChanged -= x);
    }
}

namespace Windows.ApplicationModel.Resources.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Resources.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap"/> class.
        /// </summary>
        public static RxResourceQualifierObservableMapEvents Events(this global::Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap item) => new RxResourceQualifierObservableMapEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap"/> class as observables.
    /// </summary>
    public class RxResourceQualifierObservableMapEvents
    {
        private readonly global::Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxResourceQualifierObservableMapEvents(global::Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap.MapChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableMap<string, string> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)> MapChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.MapChangedEventHandler<string, string>, (global::Windows.Foundation.Collections.IObservableMap<string, string> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableMap<string, string> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.MapChanged += x, x => _data.MapChanged -= x);
    }
}

namespace Windows.ApplicationModel.Store
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Store"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Store.LicenseInformation"/> class.
        /// </summary>
        public static RxLicenseInformationEvents Events(this global::Windows.ApplicationModel.Store.LicenseInformation item) => new RxLicenseInformationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Store.LicenseInformation"/> class as observables.
    /// </summary>
    public class RxLicenseInformationEvents
    {
        private readonly global::Windows.ApplicationModel.Store.LicenseInformation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Store.LicenseInformation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLicenseInformationEvents(global::Windows.ApplicationModel.Store.LicenseInformation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Store.LicenseInformation.LicenseChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> LicenseChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.ApplicationModel.Store.LicenseChangedEventHandler, global::System.Reactive.Unit>(eventHandler =>
        {
            void Handler() => eventHandler(global::System.Reactive.Unit.Default);
            return Handler;
        }

        , x => _data.LicenseChanged += x, x => _data.LicenseChanged -= x);
    }
}

namespace Windows.ApplicationModel.Store.Preview.InstallControl
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Store.Preview.InstallControl"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem"/> class.
        /// </summary>
        public static RxAppInstallItemEvents Events(this global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem item) => new RxAppInstallItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager"/> class.
        /// </summary>
        public static RxAppInstallManagerEvents Events(this global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager item) => new RxAppInstallManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem"/> class as observables.
    /// </summary>
    public class RxAppInstallItemEvents
    {
        private readonly global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppInstallItemEvents(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem sender, object args)> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem, object>, (global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem sender, object args)> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem, object>, (global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager"/> class as observables.
    /// </summary>
    public class RxAppInstallManagerEvents
    {
        private readonly global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppInstallManagerEvents(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager.ItemCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager sender, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs args)> ItemCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs>, (global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager sender, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager sender, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemCompleted += x, x => _data.ItemCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager.ItemStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager sender, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs args)> ItemStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs>, (global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager sender, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager sender, global::Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemStatusChanged += x, x => _data.ItemStatusChanged -= x);
    }
}

namespace Windows.ApplicationModel.UserActivities
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.UserActivities"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager"/> class.
        /// </summary>
        public static RxUserActivityRequestManagerEvents Events(this global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager item) => new RxUserActivityRequestManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager"/> class as observables.
    /// </summary>
    public class RxUserActivityRequestManagerEvents
    {
        private readonly global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserActivityRequestManagerEvents(global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager.UserActivityRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager sender, global::Windows.ApplicationModel.UserActivities.UserActivityRequestedEventArgs args)> UserActivityRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager, global::Windows.ApplicationModel.UserActivities.UserActivityRequestedEventArgs>, (global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager sender, global::Windows.ApplicationModel.UserActivities.UserActivityRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserActivities.UserActivityRequestManager sender, global::Windows.ApplicationModel.UserActivities.UserActivityRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserActivityRequested += x, x => _data.UserActivityRequested -= x);
    }
}

namespace Windows.ApplicationModel.UserDataAccounts
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.UserDataAccounts"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore"/> class.
        /// </summary>
        public static RxUserDataAccountStoreEvents Events(this global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore item) => new RxUserDataAccountStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore"/> class as observables.
    /// </summary>
    public class RxUserDataAccountStoreEvents
    {
        private readonly global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserDataAccountStoreEvents(global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore.StoreChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore sender, global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStoreChangedEventArgs args)> StoreChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore, global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStoreChangedEventArgs>, (global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore sender, global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStoreChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore sender, global::Windows.ApplicationModel.UserDataAccounts.UserDataAccountStoreChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StoreChanged += x, x => _data.StoreChanged -= x);
    }
}

namespace Windows.ApplicationModel.UserDataTasks
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.UserDataTasks"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager"/> class.
        /// </summary>
        public static RxUserDataTaskListSyncManagerEvents Events(this global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager item) => new RxUserDataTaskListSyncManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager"/> class as observables.
    /// </summary>
    public class RxUserDataTaskListSyncManagerEvents
    {
        private readonly global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserDataTaskListSyncManagerEvents(global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager.SyncStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager sender, object args)> SyncStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager, object>, (global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SyncStatusChanged += x, x => _data.SyncStatusChanged -= x);
    }
}

namespace Windows.ApplicationModel.UserDataTasks.DataProvider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.UserDataTasks.DataProvider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection"/> class.
        /// </summary>
        public static RxUserDataTaskDataProviderConnectionEvents Events(this global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection item) => new RxUserDataTaskDataProviderConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection"/> class as observables.
    /// </summary>
    public class RxUserDataTaskDataProviderConnectionEvents
    {
        private readonly global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserDataTaskDataProviderConnectionEvents(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection.CompleteTaskRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCompleteTaskRequestEventArgs args)> CompleteTaskRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCompleteTaskRequestEventArgs>, (global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCompleteTaskRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCompleteTaskRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CompleteTaskRequested += x, x => _data.CompleteTaskRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection.CreateOrUpdateTaskRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCreateOrUpdateTaskRequestEventArgs args)> CreateOrUpdateTaskRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCreateOrUpdateTaskRequestEventArgs>, (global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCreateOrUpdateTaskRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCreateOrUpdateTaskRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CreateOrUpdateTaskRequested += x, x => _data.CreateOrUpdateTaskRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection.DeleteTaskRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListDeleteTaskRequestEventArgs args)> DeleteTaskRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListDeleteTaskRequestEventArgs>, (global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListDeleteTaskRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListDeleteTaskRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DeleteTaskRequested += x, x => _data.DeleteTaskRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection.SkipOccurrenceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSkipOccurrenceRequestEventArgs args)> SkipOccurrenceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSkipOccurrenceRequestEventArgs>, (global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSkipOccurrenceRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSkipOccurrenceRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SkipOccurrenceRequested += x, x => _data.SkipOccurrenceRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection.SyncRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSyncManagerSyncRequestEventArgs args)> SyncRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSyncManagerSyncRequestEventArgs>, (global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSyncManagerSyncRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection sender, global::Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSyncManagerSyncRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SyncRequested += x, x => _data.SyncRequested -= x);
    }
}

namespace Windows.ApplicationModel.VoiceCommands
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.VoiceCommands"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection"/> class.
        /// </summary>
        public static RxVoiceCommandServiceConnectionEvents Events(this global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection item) => new RxVoiceCommandServiceConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection"/> class as observables.
    /// </summary>
    public class RxVoiceCommandServiceConnectionEvents
    {
        private readonly global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVoiceCommandServiceConnectionEvents(global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection.VoiceCommandCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection sender, global::Windows.ApplicationModel.VoiceCommands.VoiceCommandCompletedEventArgs args)> VoiceCommandCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection, global::Windows.ApplicationModel.VoiceCommands.VoiceCommandCompletedEventArgs>, (global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection sender, global::Windows.ApplicationModel.VoiceCommands.VoiceCommandCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection sender, global::Windows.ApplicationModel.VoiceCommands.VoiceCommandCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VoiceCommandCompleted += x, x => _data.VoiceCommandCompleted -= x);
    }
}

namespace Windows.ApplicationModel.Wallet.System
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.ApplicationModel.Wallet.System"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore"/> class.
        /// </summary>
        public static RxWalletItemSystemStoreEvents Events(this global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore item) => new RxWalletItemSystemStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore"/> class as observables.
    /// </summary>
    public class RxWalletItemSystemStoreEvents
    {
        private readonly global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWalletItemSystemStoreEvents(global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore.ItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore sender, object args)> ItemsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore, object>, (global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Wallet.System.WalletItemSystemStore sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemsChanged += x, x => _data.ItemsChanged -= x);
    }
}

namespace Windows.Devices.AllJoyn
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.AllJoyn"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment"/> class.
        /// </summary>
        public static RxAllJoynBusAttachmentEvents Events(this global::Windows.Devices.AllJoyn.AllJoynBusAttachment item) => new RxAllJoynBusAttachmentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusObject"/> class.
        /// </summary>
        public static RxAllJoynBusObjectEvents Events(this global::Windows.Devices.AllJoyn.AllJoynBusObject item) => new RxAllJoynBusObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.AllJoyn.AllJoynSession"/> class.
        /// </summary>
        public static RxAllJoynSessionEvents Events(this global::Windows.Devices.AllJoyn.AllJoynSession item) => new RxAllJoynSessionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment"/> class as observables.
    /// </summary>
    public class RxAllJoynBusAttachmentEvents
    {
        private readonly global::Windows.Devices.AllJoyn.AllJoynBusAttachment _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAllJoynBusAttachmentEvents(global::Windows.Devices.AllJoyn.AllJoynBusAttachment data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment.AcceptSessionJoinerRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynAcceptSessionJoinerEventArgs args)> AcceptSessionJoinerRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynBusAttachment, global::Windows.Devices.AllJoyn.AllJoynAcceptSessionJoinerEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynAcceptSessionJoinerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynAcceptSessionJoinerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AcceptSessionJoinerRequested += x, x => _data.AcceptSessionJoinerRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment.AuthenticationComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynAuthenticationCompleteEventArgs args)> AuthenticationComplete => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynBusAttachment, global::Windows.Devices.AllJoyn.AllJoynAuthenticationCompleteEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynAuthenticationCompleteEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynAuthenticationCompleteEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AuthenticationComplete += x, x => _data.AuthenticationComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment.CredentialsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynCredentialsRequestedEventArgs args)> CredentialsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynBusAttachment, global::Windows.Devices.AllJoyn.AllJoynCredentialsRequestedEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynCredentialsRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynCredentialsRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CredentialsRequested += x, x => _data.CredentialsRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment.CredentialsVerificationRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynCredentialsVerificationRequestedEventArgs args)> CredentialsVerificationRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynBusAttachment, global::Windows.Devices.AllJoyn.AllJoynCredentialsVerificationRequestedEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynCredentialsVerificationRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynCredentialsVerificationRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CredentialsVerificationRequested += x, x => _data.CredentialsVerificationRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment.SessionJoined"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynSessionJoinedEventArgs args)> SessionJoined => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynBusAttachment, global::Windows.Devices.AllJoyn.AllJoynSessionJoinedEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynSessionJoinedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynSessionJoinedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SessionJoined += x, x => _data.SessionJoined -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusAttachment.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynBusAttachmentStateChangedEventArgs args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynBusAttachment, global::Windows.Devices.AllJoyn.AllJoynBusAttachmentStateChangedEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynBusAttachmentStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynBusAttachment sender, global::Windows.Devices.AllJoyn.AllJoynBusAttachmentStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusObject"/> class as observables.
    /// </summary>
    public class RxAllJoynBusObjectEvents
    {
        private readonly global::Windows.Devices.AllJoyn.AllJoynBusObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAllJoynBusObjectEvents(global::Windows.Devices.AllJoyn.AllJoynBusObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynBusObject.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynBusObject sender, global::Windows.Devices.AllJoyn.AllJoynBusObjectStoppedEventArgs args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynBusObject, global::Windows.Devices.AllJoyn.AllJoynBusObjectStoppedEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynBusObject sender, global::Windows.Devices.AllJoyn.AllJoynBusObjectStoppedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynBusObject sender, global::Windows.Devices.AllJoyn.AllJoynBusObjectStoppedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.AllJoyn.AllJoynSession"/> class as observables.
    /// </summary>
    public class RxAllJoynSessionEvents
    {
        private readonly global::Windows.Devices.AllJoyn.AllJoynSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.AllJoyn.AllJoynSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAllJoynSessionEvents(global::Windows.Devices.AllJoyn.AllJoynSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynSession.Lost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionLostEventArgs args)> Lost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynSession, global::Windows.Devices.AllJoyn.AllJoynSessionLostEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionLostEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionLostEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Lost += x, x => _data.Lost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynSession.MemberAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionMemberAddedEventArgs args)> MemberAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynSession, global::Windows.Devices.AllJoyn.AllJoynSessionMemberAddedEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionMemberAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionMemberAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MemberAdded += x, x => _data.MemberAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.AllJoyn.AllJoynSession.MemberRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionMemberRemovedEventArgs args)> MemberRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.AllJoyn.AllJoynSession, global::Windows.Devices.AllJoyn.AllJoynSessionMemberRemovedEventArgs>, (global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionMemberRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.AllJoyn.AllJoynSession sender, global::Windows.Devices.AllJoyn.AllJoynSessionMemberRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MemberRemoved += x, x => _data.MemberRemoved -= x);
    }
}

namespace Windows.Devices.Bluetooth
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Bluetooth"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.BluetoothDevice"/> class.
        /// </summary>
        public static RxBluetoothDeviceEvents Events(this global::Windows.Devices.Bluetooth.BluetoothDevice item) => new RxBluetoothDeviceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.BluetoothLEDevice"/> class.
        /// </summary>
        public static RxBluetoothLEDeviceEvents Events(this global::Windows.Devices.Bluetooth.BluetoothLEDevice item) => new RxBluetoothLEDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.BluetoothDevice"/> class as observables.
    /// </summary>
    public class RxBluetoothDeviceEvents
    {
        private readonly global::Windows.Devices.Bluetooth.BluetoothDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.BluetoothDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBluetoothDeviceEvents(global::Windows.Devices.Bluetooth.BluetoothDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.BluetoothDevice.ConnectionStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args)> ConnectionStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.BluetoothDevice, object>, (global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ConnectionStatusChanged += x, x => _data.ConnectionStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.BluetoothDevice.NameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args)> NameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.BluetoothDevice, object>, (global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NameChanged += x, x => _data.NameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.BluetoothDevice.SdpRecordsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args)> SdpRecordsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.BluetoothDevice, object>, (global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.BluetoothDevice sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SdpRecordsChanged += x, x => _data.SdpRecordsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.BluetoothLEDevice"/> class as observables.
    /// </summary>
    public class RxBluetoothLEDeviceEvents
    {
        private readonly global::Windows.Devices.Bluetooth.BluetoothLEDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.BluetoothLEDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBluetoothLEDeviceEvents(global::Windows.Devices.Bluetooth.BluetoothLEDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.BluetoothLEDevice.ConnectionStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args)> ConnectionStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.BluetoothLEDevice, object>, (global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ConnectionStatusChanged += x, x => _data.ConnectionStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.BluetoothLEDevice.GattServicesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args)> GattServicesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.BluetoothLEDevice, object>, (global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GattServicesChanged += x, x => _data.GattServicesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.BluetoothLEDevice.NameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args)> NameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.BluetoothLEDevice, object>, (global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.BluetoothLEDevice sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NameChanged += x, x => _data.NameChanged -= x);
    }
}

namespace Windows.Devices.Bluetooth.Advertisement
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Bluetooth.Advertisement"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher"/> class.
        /// </summary>
        public static RxBluetoothLEAdvertisementPublisherEvents Events(this global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher item) => new RxBluetoothLEAdvertisementPublisherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher"/> class.
        /// </summary>
        public static RxBluetoothLEAdvertisementWatcherEvents Events(this global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher item) => new RxBluetoothLEAdvertisementWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher"/> class as observables.
    /// </summary>
    public class RxBluetoothLEAdvertisementPublisherEvents
    {
        private readonly global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBluetoothLEAdvertisementPublisherEvents(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatusChangedEventArgs args)> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatusChangedEventArgs>, (global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher"/> class as observables.
    /// </summary>
    public class RxBluetoothLEAdvertisementWatcherEvents
    {
        private readonly global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBluetoothLEAdvertisementWatcherEvents(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher.Received"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementReceivedEventArgs args)> Received => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementReceivedEventArgs>, (global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Received += x, x => _data.Received -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcherStoppedEventArgs args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcherStoppedEventArgs>, (global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcherStoppedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher sender, global::Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcherStoppedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }
}

namespace Windows.Devices.Bluetooth.GenericAttributeProfile
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Bluetooth.GenericAttributeProfile"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic"/> class.
        /// </summary>
        public static RxGattCharacteristicEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic item) => new RxGattCharacteristicEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic"/> class.
        /// </summary>
        public static RxGattLocalCharacteristicEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic item) => new RxGattLocalCharacteristicEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor"/> class.
        /// </summary>
        public static RxGattLocalDescriptorEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor item) => new RxGattLocalDescriptorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest"/> class.
        /// </summary>
        public static RxGattReadRequestEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest item) => new RxGattReadRequestEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider"/> class.
        /// </summary>
        public static RxGattServiceProviderEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider item) => new RxGattServiceProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession"/> class.
        /// </summary>
        public static RxGattSessionEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession item) => new RxGattSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient"/> class.
        /// </summary>
        public static RxGattSubscribedClientEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient item) => new RxGattSubscribedClientEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest"/> class.
        /// </summary>
        public static RxGattWriteRequestEvents Events(this global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest item) => new RxGattWriteRequestEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic"/> class as observables.
    /// </summary>
    public class RxGattCharacteristicEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattCharacteristicEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattValueChangedEventArgs args)> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattValueChangedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattValueChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattValueChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic"/> class as observables.
    /// </summary>
    public class RxGattLocalCharacteristicEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattLocalCharacteristicEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic.ReadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs args)> ReadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadRequested += x, x => _data.ReadRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic.SubscribedClientsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, object args)> SubscribedClientsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic, object>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SubscribedClientsChanged += x, x => _data.SubscribedClientsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic.WriteRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs args)> WriteRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WriteRequested += x, x => _data.WriteRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor"/> class as observables.
    /// </summary>
    public class RxGattLocalDescriptorEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattLocalDescriptorEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor.ReadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs args)> ReadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadRequested += x, x => _data.ReadRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor.WriteRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs args)> WriteRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WriteRequested += x, x => _data.WriteRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest"/> class as observables.
    /// </summary>
    public class RxGattReadRequestEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattReadRequestEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider"/> class as observables.
    /// </summary>
    public class RxGattServiceProviderEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattServiceProviderEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider.AdvertisementStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatusChangedEventArgs args)> AdvertisementStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatusChangedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AdvertisementStatusChanged += x, x => _data.AdvertisementStatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession"/> class as observables.
    /// </summary>
    public class RxGattSessionEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattSessionEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession.MaxPduSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession sender, object args)> MaxPduSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession, object>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MaxPduSizeChanged += x, x => _data.MaxPduSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession.SessionStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatusChangedEventArgs args)> SessionStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatusChangedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SessionStatusChanged += x, x => _data.SessionStatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient"/> class as observables.
    /// </summary>
    public class RxGattSubscribedClientEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattSubscribedClientEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient.MaxNotificationSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient sender, object args)> MaxNotificationSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient, object>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MaxNotificationSizeChanged += x, x => _data.MaxNotificationSizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest"/> class as observables.
    /// </summary>
    public class RxGattWriteRequestEvents
    {
        private readonly global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGattWriteRequestEvents(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs>, (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest sender, global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Windows.Devices.Display.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Display.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Display.Core.DisplayManager"/> class.
        /// </summary>
        public static RxDisplayManagerEvents Events(this global::Windows.Devices.Display.Core.DisplayManager item) => new RxDisplayManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Display.Core.DisplayManager"/> class as observables.
    /// </summary>
    public class RxDisplayManagerEvents
    {
        private readonly global::Windows.Devices.Display.Core.DisplayManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Display.Core.DisplayManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDisplayManagerEvents(global::Windows.Devices.Display.Core.DisplayManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Display.Core.DisplayManager.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerChangedEventArgs args)> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Display.Core.DisplayManager, global::Windows.Devices.Display.Core.DisplayManagerChangedEventArgs>, (global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Display.Core.DisplayManager.Disabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs args)> Disabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Display.Core.DisplayManager, global::Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs>, (global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Disabled += x, x => _data.Disabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Display.Core.DisplayManager.Enabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs args)> Enabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Display.Core.DisplayManager, global::Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs>, (global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Enabled += x, x => _data.Enabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Display.Core.DisplayManager.PathsFailedOrInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs args)> PathsFailedOrInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Display.Core.DisplayManager, global::Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs>, (global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Display.Core.DisplayManager sender, global::Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PathsFailedOrInvalidated += x, x => _data.PathsFailedOrInvalidated -= x);
    }
}

namespace Windows.Devices.Enumeration
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Enumeration"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Enumeration.DeviceAccessInformation"/> class.
        /// </summary>
        public static RxDeviceAccessInformationEvents Events(this global::Windows.Devices.Enumeration.DeviceAccessInformation item) => new RxDeviceAccessInformationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Enumeration.DeviceInformationCustomPairing"/> class.
        /// </summary>
        public static RxDeviceInformationCustomPairingEvents Events(this global::Windows.Devices.Enumeration.DeviceInformationCustomPairing item) => new RxDeviceInformationCustomPairingEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Enumeration.DevicePicker"/> class.
        /// </summary>
        public static RxDevicePickerEvents Events(this global::Windows.Devices.Enumeration.DevicePicker item) => new RxDevicePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher"/> class.
        /// </summary>
        public static RxDeviceWatcherEvents Events(this global::Windows.Devices.Enumeration.DeviceWatcher item) => new RxDeviceWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Enumeration.DeviceAccessInformation"/> class as observables.
    /// </summary>
    public class RxDeviceAccessInformationEvents
    {
        private readonly global::Windows.Devices.Enumeration.DeviceAccessInformation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Enumeration.DeviceAccessInformation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDeviceAccessInformationEvents(global::Windows.Devices.Enumeration.DeviceAccessInformation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DeviceAccessInformation.AccessChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DeviceAccessInformation sender, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs args)> AccessChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceAccessInformation, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>, (global::Windows.Devices.Enumeration.DeviceAccessInformation sender, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DeviceAccessInformation sender, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccessChanged += x, x => _data.AccessChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Enumeration.DeviceInformationCustomPairing"/> class as observables.
    /// </summary>
    public class RxDeviceInformationCustomPairingEvents
    {
        private readonly global::Windows.Devices.Enumeration.DeviceInformationCustomPairing _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Enumeration.DeviceInformationCustomPairing"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDeviceInformationCustomPairingEvents(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DeviceInformationCustomPairing.PairingRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing sender, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs args)> PairingRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>, (global::Windows.Devices.Enumeration.DeviceInformationCustomPairing sender, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing sender, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PairingRequested += x, x => _data.PairingRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Enumeration.DevicePicker"/> class as observables.
    /// </summary>
    public class RxDevicePickerEvents
    {
        private readonly global::Windows.Devices.Enumeration.DevicePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Enumeration.DevicePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDevicePickerEvents(global::Windows.Devices.Enumeration.DevicePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DevicePicker.DevicePickerDismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DevicePicker sender, object args)> DevicePickerDismissed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, object>, (global::Windows.Devices.Enumeration.DevicePicker sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DevicePicker sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DevicePickerDismissed += x, x => _data.DevicePickerDismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DevicePicker.DeviceSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DevicePicker sender, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs args)> DeviceSelected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>, (global::Windows.Devices.Enumeration.DevicePicker sender, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DevicePicker sender, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DeviceSelected += x, x => _data.DeviceSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DevicePicker.DisconnectButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DevicePicker sender, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs args)> DisconnectButtonClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>, (global::Windows.Devices.Enumeration.DevicePicker sender, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DevicePicker sender, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DisconnectButtonClicked += x, x => _data.DisconnectButtonClicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher"/> class as observables.
    /// </summary>
    public class RxDeviceWatcherEvents
    {
        private readonly global::Windows.Devices.Enumeration.DeviceWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDeviceWatcherEvents(global::Windows.Devices.Enumeration.DeviceWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformation args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformation>, (global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformation args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformation args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DeviceWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>, (global::Windows.Devices.Enumeration.DeviceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DeviceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformationUpdate args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>, (global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformationUpdate args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformationUpdate args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DeviceWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>, (global::Windows.Devices.Enumeration.DeviceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DeviceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.DeviceWatcher.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformationUpdate args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>, (global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformationUpdate args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.DeviceWatcher sender, global::Windows.Devices.Enumeration.DeviceInformationUpdate args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }
}

namespace Windows.Devices.Enumeration.Pnp
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Enumeration.Pnp"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher"/> class.
        /// </summary>
        public static RxPnpObjectWatcherEvents Events(this global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher item) => new RxPnpObjectWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher"/> class as observables.
    /// </summary>
    public class RxPnpObjectWatcherEvents
    {
        private readonly global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPnpObjectWatcherEvents(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObject args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObject>, (global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObject args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObject args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>, (global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>, (global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>, (global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>, (global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher sender, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }
}

namespace Windows.Devices.Geolocation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Geolocation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Geolocation.Geolocator"/> class.
        /// </summary>
        public static RxGeolocatorEvents Events(this global::Windows.Devices.Geolocation.Geolocator item) => new RxGeolocatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Geolocation.GeovisitMonitor"/> class.
        /// </summary>
        public static RxGeovisitMonitorEvents Events(this global::Windows.Devices.Geolocation.GeovisitMonitor item) => new RxGeovisitMonitorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Geolocation.Geolocator"/> class as observables.
    /// </summary>
    public class RxGeolocatorEvents
    {
        private readonly global::Windows.Devices.Geolocation.Geolocator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Geolocation.Geolocator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGeolocatorEvents(global::Windows.Devices.Geolocation.Geolocator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Geolocation.Geolocator.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Geolocation.Geolocator sender, global::Windows.Devices.Geolocation.PositionChangedEventArgs args)> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Geolocation.Geolocator, global::Windows.Devices.Geolocation.PositionChangedEventArgs>, (global::Windows.Devices.Geolocation.Geolocator sender, global::Windows.Devices.Geolocation.PositionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Geolocation.Geolocator sender, global::Windows.Devices.Geolocation.PositionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Geolocation.Geolocator.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Geolocation.Geolocator sender, global::Windows.Devices.Geolocation.StatusChangedEventArgs args)> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Geolocation.Geolocator, global::Windows.Devices.Geolocation.StatusChangedEventArgs>, (global::Windows.Devices.Geolocation.Geolocator sender, global::Windows.Devices.Geolocation.StatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Geolocation.Geolocator sender, global::Windows.Devices.Geolocation.StatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Geolocation.GeovisitMonitor"/> class as observables.
    /// </summary>
    public class RxGeovisitMonitorEvents
    {
        private readonly global::Windows.Devices.Geolocation.GeovisitMonitor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Geolocation.GeovisitMonitor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGeovisitMonitorEvents(global::Windows.Devices.Geolocation.GeovisitMonitor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Geolocation.GeovisitMonitor.VisitStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Geolocation.GeovisitMonitor sender, global::Windows.Devices.Geolocation.GeovisitStateChangedEventArgs args)> VisitStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Geolocation.GeovisitMonitor, global::Windows.Devices.Geolocation.GeovisitStateChangedEventArgs>, (global::Windows.Devices.Geolocation.GeovisitMonitor sender, global::Windows.Devices.Geolocation.GeovisitStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Geolocation.GeovisitMonitor sender, global::Windows.Devices.Geolocation.GeovisitStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VisitStateChanged += x, x => _data.VisitStateChanged -= x);
    }
}

namespace Windows.Devices.Geolocation.Geofencing
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Geolocation.Geofencing"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor"/> class.
        /// </summary>
        public static RxGeofenceMonitorEvents Events(this global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor item) => new RxGeofenceMonitorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor"/> class as observables.
    /// </summary>
    public class RxGeofenceMonitorEvents
    {
        private readonly global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGeofenceMonitorEvents(global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor.GeofenceStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor sender, object args)> GeofenceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor, object>, (global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GeofenceStateChanged += x, x => _data.GeofenceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor sender, object args)> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor, object>, (global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Geolocation.Geofencing.GeofenceMonitor sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }
}

namespace Windows.Devices.HumanInterfaceDevice
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.HumanInterfaceDevice"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.HumanInterfaceDevice.HidDevice"/> class.
        /// </summary>
        public static RxHidDeviceEvents Events(this global::Windows.Devices.HumanInterfaceDevice.HidDevice item) => new RxHidDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.HumanInterfaceDevice.HidDevice"/> class as observables.
    /// </summary>
    public class RxHidDeviceEvents
    {
        private readonly global::Windows.Devices.HumanInterfaceDevice.HidDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.HumanInterfaceDevice.HidDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHidDeviceEvents(global::Windows.Devices.HumanInterfaceDevice.HidDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.HumanInterfaceDevice.HidDevice.InputReportReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.HumanInterfaceDevice.HidDevice sender, global::Windows.Devices.HumanInterfaceDevice.HidInputReportReceivedEventArgs args)> InputReportReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.HumanInterfaceDevice.HidDevice, global::Windows.Devices.HumanInterfaceDevice.HidInputReportReceivedEventArgs>, (global::Windows.Devices.HumanInterfaceDevice.HidDevice sender, global::Windows.Devices.HumanInterfaceDevice.HidInputReportReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.HumanInterfaceDevice.HidDevice sender, global::Windows.Devices.HumanInterfaceDevice.HidInputReportReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InputReportReceived += x, x => _data.InputReportReceived -= x);
    }
}

namespace Windows.Devices.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Input.MouseDevice"/> class.
        /// </summary>
        public static RxMouseDeviceEvents Events(this global::Windows.Devices.Input.MouseDevice item) => new RxMouseDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Input.MouseDevice"/> class as observables.
    /// </summary>
    public class RxMouseDeviceEvents
    {
        private readonly global::Windows.Devices.Input.MouseDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Input.MouseDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMouseDeviceEvents(global::Windows.Devices.Input.MouseDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.MouseDevice.MouseMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.MouseDevice sender, global::Windows.Devices.Input.MouseEventArgs args)> MouseMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.MouseDevice, global::Windows.Devices.Input.MouseEventArgs>, (global::Windows.Devices.Input.MouseDevice sender, global::Windows.Devices.Input.MouseEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.MouseDevice sender, global::Windows.Devices.Input.MouseEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MouseMoved += x, x => _data.MouseMoved -= x);
    }
}

namespace Windows.Devices.Input.Preview
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Input.Preview"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview"/> class.
        /// </summary>
        public static RxGazeDeviceWatcherPreviewEvents Events(this global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview item) => new RxGazeDeviceWatcherPreviewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Input.Preview.GazeInputSourcePreview"/> class.
        /// </summary>
        public static RxGazeInputSourcePreviewEvents Events(this global::Windows.Devices.Input.Preview.GazeInputSourcePreview item) => new RxGazeInputSourcePreviewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview"/> class as observables.
    /// </summary>
    public class RxGazeDeviceWatcherPreviewEvents
    {
        private readonly global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGazeDeviceWatcherPreviewEvents(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherAddedPreviewEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview, global::Windows.Devices.Input.Preview.GazeDeviceWatcherAddedPreviewEventArgs>, (global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherAddedPreviewEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherAddedPreviewEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview, object>, (global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherRemovedPreviewEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview, global::Windows.Devices.Input.Preview.GazeDeviceWatcherRemovedPreviewEventArgs>, (global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherRemovedPreviewEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherRemovedPreviewEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherUpdatedPreviewEventArgs args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview, global::Windows.Devices.Input.Preview.GazeDeviceWatcherUpdatedPreviewEventArgs>, (global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherUpdatedPreviewEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.Preview.GazeDeviceWatcherPreview sender, global::Windows.Devices.Input.Preview.GazeDeviceWatcherUpdatedPreviewEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Input.Preview.GazeInputSourcePreview"/> class as observables.
    /// </summary>
    public class RxGazeInputSourcePreviewEvents
    {
        private readonly global::Windows.Devices.Input.Preview.GazeInputSourcePreview _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Input.Preview.GazeInputSourcePreview"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGazeInputSourcePreviewEvents(global::Windows.Devices.Input.Preview.GazeInputSourcePreview data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.Preview.GazeInputSourcePreview.GazeEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeEnteredPreviewEventArgs args)> GazeEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.Preview.GazeInputSourcePreview, global::Windows.Devices.Input.Preview.GazeEnteredPreviewEventArgs>, (global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeEnteredPreviewEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeEnteredPreviewEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GazeEntered += x, x => _data.GazeEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.Preview.GazeInputSourcePreview.GazeExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeExitedPreviewEventArgs args)> GazeExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.Preview.GazeInputSourcePreview, global::Windows.Devices.Input.Preview.GazeExitedPreviewEventArgs>, (global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeExitedPreviewEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeExitedPreviewEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GazeExited += x, x => _data.GazeExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Input.Preview.GazeInputSourcePreview.GazeMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs args)> GazeMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.Preview.GazeInputSourcePreview, global::Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs>, (global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Input.Preview.GazeInputSourcePreview sender, global::Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GazeMoved += x, x => _data.GazeMoved -= x);
    }
}

namespace Windows.Devices.Lights
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Lights"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Lights.Lamp"/> class.
        /// </summary>
        public static RxLampEvents Events(this global::Windows.Devices.Lights.Lamp item) => new RxLampEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Lights.Lamp"/> class as observables.
    /// </summary>
    public class RxLampEvents
    {
        private readonly global::Windows.Devices.Lights.Lamp _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Lights.Lamp"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLampEvents(global::Windows.Devices.Lights.Lamp data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Lights.Lamp.AvailabilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Lights.Lamp sender, global::Windows.Devices.Lights.LampAvailabilityChangedEventArgs args)> AvailabilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Lights.Lamp, global::Windows.Devices.Lights.LampAvailabilityChangedEventArgs>, (global::Windows.Devices.Lights.Lamp sender, global::Windows.Devices.Lights.LampAvailabilityChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Lights.Lamp sender, global::Windows.Devices.Lights.LampAvailabilityChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AvailabilityChanged += x, x => _data.AvailabilityChanged -= x);
    }
}

namespace Windows.Devices.Lights.Effects
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Lights.Effects"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect"/> class.
        /// </summary>
        public static RxLampArrayBitmapEffectEvents Events(this global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect item) => new RxLampArrayBitmapEffectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayCustomEffect"/> class.
        /// </summary>
        public static RxLampArrayCustomEffectEvents Events(this global::Windows.Devices.Lights.Effects.LampArrayCustomEffect item) => new RxLampArrayCustomEffectEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect"/> class as observables.
    /// </summary>
    public class RxLampArrayBitmapEffectEvents
    {
        private readonly global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLampArrayBitmapEffectEvents(global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect.BitmapRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect sender, global::Windows.Devices.Lights.Effects.LampArrayBitmapRequestedEventArgs args)> BitmapRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect, global::Windows.Devices.Lights.Effects.LampArrayBitmapRequestedEventArgs>, (global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect sender, global::Windows.Devices.Lights.Effects.LampArrayBitmapRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Lights.Effects.LampArrayBitmapEffect sender, global::Windows.Devices.Lights.Effects.LampArrayBitmapRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BitmapRequested += x, x => _data.BitmapRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayCustomEffect"/> class as observables.
    /// </summary>
    public class RxLampArrayCustomEffectEvents
    {
        private readonly global::Windows.Devices.Lights.Effects.LampArrayCustomEffect _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayCustomEffect"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLampArrayCustomEffectEvents(global::Windows.Devices.Lights.Effects.LampArrayCustomEffect data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Lights.Effects.LampArrayCustomEffect.UpdateRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Lights.Effects.LampArrayCustomEffect sender, global::Windows.Devices.Lights.Effects.LampArrayUpdateRequestedEventArgs args)> UpdateRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Lights.Effects.LampArrayCustomEffect, global::Windows.Devices.Lights.Effects.LampArrayUpdateRequestedEventArgs>, (global::Windows.Devices.Lights.Effects.LampArrayCustomEffect sender, global::Windows.Devices.Lights.Effects.LampArrayUpdateRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Lights.Effects.LampArrayCustomEffect sender, global::Windows.Devices.Lights.Effects.LampArrayUpdateRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UpdateRequested += x, x => _data.UpdateRequested -= x);
    }
}

namespace Windows.Devices.Midi
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Midi"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Midi.MidiInPort"/> class.
        /// </summary>
        public static RxMidiInPortEvents Events(this global::Windows.Devices.Midi.MidiInPort item) => new RxMidiInPortEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Midi.MidiInPort"/> class as observables.
    /// </summary>
    public class RxMidiInPortEvents
    {
        private readonly global::Windows.Devices.Midi.MidiInPort _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Midi.MidiInPort"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMidiInPortEvents(global::Windows.Devices.Midi.MidiInPort data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Midi.MidiInPort.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Midi.MidiInPort sender, global::Windows.Devices.Midi.MidiMessageReceivedEventArgs args)> MessageReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Midi.MidiInPort, global::Windows.Devices.Midi.MidiMessageReceivedEventArgs>, (global::Windows.Devices.Midi.MidiInPort sender, global::Windows.Devices.Midi.MidiMessageReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Midi.MidiInPort sender, global::Windows.Devices.Midi.MidiMessageReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MessageReceived += x, x => _data.MessageReceived -= x);
    }
}

namespace Windows.Devices.Perception
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Perception"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameReader"/> class.
        /// </summary>
        public static RxPerceptionColorFrameReaderEvents Events(this global::Windows.Devices.Perception.PerceptionColorFrameReader item) => new RxPerceptionColorFrameReaderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource"/> class.
        /// </summary>
        public static RxPerceptionColorFrameSourceEvents Events(this global::Windows.Devices.Perception.PerceptionColorFrameSource item) => new RxPerceptionColorFrameSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher"/> class.
        /// </summary>
        public static RxPerceptionColorFrameSourceWatcherEvents Events(this global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher item) => new RxPerceptionColorFrameSourceWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionControlSession"/> class.
        /// </summary>
        public static RxPerceptionControlSessionEvents Events(this global::Windows.Devices.Perception.PerceptionControlSession item) => new RxPerceptionControlSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameReader"/> class.
        /// </summary>
        public static RxPerceptionDepthFrameReaderEvents Events(this global::Windows.Devices.Perception.PerceptionDepthFrameReader item) => new RxPerceptionDepthFrameReaderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource"/> class.
        /// </summary>
        public static RxPerceptionDepthFrameSourceEvents Events(this global::Windows.Devices.Perception.PerceptionDepthFrameSource item) => new RxPerceptionDepthFrameSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher"/> class.
        /// </summary>
        public static RxPerceptionDepthFrameSourceWatcherEvents Events(this global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher item) => new RxPerceptionDepthFrameSourceWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameReader"/> class.
        /// </summary>
        public static RxPerceptionInfraredFrameReaderEvents Events(this global::Windows.Devices.Perception.PerceptionInfraredFrameReader item) => new RxPerceptionInfraredFrameReaderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource"/> class.
        /// </summary>
        public static RxPerceptionInfraredFrameSourceEvents Events(this global::Windows.Devices.Perception.PerceptionInfraredFrameSource item) => new RxPerceptionInfraredFrameSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher"/> class.
        /// </summary>
        public static RxPerceptionInfraredFrameSourceWatcherEvents Events(this global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher item) => new RxPerceptionInfraredFrameSourceWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameReader"/> class as observables.
    /// </summary>
    public class RxPerceptionColorFrameReaderEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionColorFrameReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionColorFrameReaderEvents(global::Windows.Devices.Perception.PerceptionColorFrameReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameReader.FrameArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameReader sender, global::Windows.Devices.Perception.PerceptionColorFrameArrivedEventArgs args)> FrameArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameReader, global::Windows.Devices.Perception.PerceptionColorFrameArrivedEventArgs>, (global::Windows.Devices.Perception.PerceptionColorFrameReader sender, global::Windows.Devices.Perception.PerceptionColorFrameArrivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameReader sender, global::Windows.Devices.Perception.PerceptionColorFrameArrivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameArrived += x, x => _data.FrameArrived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource"/> class as observables.
    /// </summary>
    public class RxPerceptionColorFrameSourceEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionColorFrameSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionColorFrameSourceEvents(global::Windows.Devices.Perception.PerceptionColorFrameSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource.ActiveChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)> ActiveChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSource, object>, (global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActiveChanged += x, x => _data.ActiveChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource.AvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)> AvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSource, object>, (global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AvailableChanged += x, x => _data.AvailableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource.CameraIntrinsicsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)> CameraIntrinsicsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSource, object>, (global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CameraIntrinsicsChanged += x, x => _data.CameraIntrinsicsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource.PropertiesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args)> PropertiesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSource, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs>, (global::Windows.Devices.Perception.PerceptionColorFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PropertiesChanged += x, x => _data.PropertiesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSource.VideoProfileChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)> VideoProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSource, object>, (global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VideoProfileChanged += x, x => _data.VideoProfileChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher"/> class as observables.
    /// </summary>
    public class RxPerceptionColorFrameSourceWatcherEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionColorFrameSourceWatcherEvents(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher, object>, (global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher.SourceAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionColorFrameSourceAddedEventArgs args)> SourceAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher, global::Windows.Devices.Perception.PerceptionColorFrameSourceAddedEventArgs>, (global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionColorFrameSourceAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionColorFrameSourceAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceAdded += x, x => _data.SourceAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher.SourceRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionColorFrameSourceRemovedEventArgs args)> SourceRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher, global::Windows.Devices.Perception.PerceptionColorFrameSourceRemovedEventArgs>, (global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionColorFrameSourceRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionColorFrameSourceRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceRemoved += x, x => _data.SourceRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher, object>, (global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionColorFrameSourceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionControlSession"/> class as observables.
    /// </summary>
    public class RxPerceptionControlSessionEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionControlSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionControlSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionControlSessionEvents(global::Windows.Devices.Perception.PerceptionControlSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionControlSession.ControlLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionControlSession sender, object args)> ControlLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionControlSession, object>, (global::Windows.Devices.Perception.PerceptionControlSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionControlSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ControlLost += x, x => _data.ControlLost -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameReader"/> class as observables.
    /// </summary>
    public class RxPerceptionDepthFrameReaderEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionDepthFrameReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionDepthFrameReaderEvents(global::Windows.Devices.Perception.PerceptionDepthFrameReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameReader.FrameArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameReader sender, global::Windows.Devices.Perception.PerceptionDepthFrameArrivedEventArgs args)> FrameArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameReader, global::Windows.Devices.Perception.PerceptionDepthFrameArrivedEventArgs>, (global::Windows.Devices.Perception.PerceptionDepthFrameReader sender, global::Windows.Devices.Perception.PerceptionDepthFrameArrivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameReader sender, global::Windows.Devices.Perception.PerceptionDepthFrameArrivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameArrived += x, x => _data.FrameArrived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource"/> class as observables.
    /// </summary>
    public class RxPerceptionDepthFrameSourceEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionDepthFrameSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionDepthFrameSourceEvents(global::Windows.Devices.Perception.PerceptionDepthFrameSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource.ActiveChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)> ActiveChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSource, object>, (global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActiveChanged += x, x => _data.ActiveChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource.AvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)> AvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSource, object>, (global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AvailableChanged += x, x => _data.AvailableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource.CameraIntrinsicsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)> CameraIntrinsicsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSource, object>, (global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CameraIntrinsicsChanged += x, x => _data.CameraIntrinsicsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource.PropertiesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args)> PropertiesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSource, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs>, (global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PropertiesChanged += x, x => _data.PropertiesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSource.VideoProfileChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)> VideoProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSource, object>, (global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VideoProfileChanged += x, x => _data.VideoProfileChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher"/> class as observables.
    /// </summary>
    public class RxPerceptionDepthFrameSourceWatcherEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionDepthFrameSourceWatcherEvents(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher, object>, (global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher.SourceAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionDepthFrameSourceAddedEventArgs args)> SourceAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher, global::Windows.Devices.Perception.PerceptionDepthFrameSourceAddedEventArgs>, (global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionDepthFrameSourceAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionDepthFrameSourceAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceAdded += x, x => _data.SourceAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher.SourceRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionDepthFrameSourceRemovedEventArgs args)> SourceRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher, global::Windows.Devices.Perception.PerceptionDepthFrameSourceRemovedEventArgs>, (global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionDepthFrameSourceRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionDepthFrameSourceRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceRemoved += x, x => _data.SourceRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher, object>, (global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameReader"/> class as observables.
    /// </summary>
    public class RxPerceptionInfraredFrameReaderEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionInfraredFrameReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionInfraredFrameReaderEvents(global::Windows.Devices.Perception.PerceptionInfraredFrameReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameReader.FrameArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameReader sender, global::Windows.Devices.Perception.PerceptionInfraredFrameArrivedEventArgs args)> FrameArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameReader, global::Windows.Devices.Perception.PerceptionInfraredFrameArrivedEventArgs>, (global::Windows.Devices.Perception.PerceptionInfraredFrameReader sender, global::Windows.Devices.Perception.PerceptionInfraredFrameArrivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameReader sender, global::Windows.Devices.Perception.PerceptionInfraredFrameArrivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameArrived += x, x => _data.FrameArrived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource"/> class as observables.
    /// </summary>
    public class RxPerceptionInfraredFrameSourceEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionInfraredFrameSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionInfraredFrameSourceEvents(global::Windows.Devices.Perception.PerceptionInfraredFrameSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource.ActiveChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)> ActiveChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSource, object>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActiveChanged += x, x => _data.ActiveChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource.AvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)> AvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSource, object>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AvailableChanged += x, x => _data.AvailableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource.CameraIntrinsicsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)> CameraIntrinsicsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSource, object>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CameraIntrinsicsChanged += x, x => _data.CameraIntrinsicsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource.PropertiesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args)> PropertiesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSource, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, global::Windows.Devices.Perception.PerceptionFrameSourcePropertiesChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PropertiesChanged += x, x => _data.PropertiesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSource.VideoProfileChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)> VideoProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSource, object>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VideoProfileChanged += x, x => _data.VideoProfileChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher"/> class as observables.
    /// </summary>
    public class RxPerceptionInfraredFrameSourceWatcherEvents
    {
        private readonly global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPerceptionInfraredFrameSourceWatcherEvents(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher, object>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher.SourceAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceAddedEventArgs args)> SourceAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceAddedEventArgs>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceAdded += x, x => _data.SourceAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher.SourceRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceRemovedEventArgs args)> SourceRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceRemovedEventArgs>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, global::Windows.Devices.Perception.PerceptionInfraredFrameSourceRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceRemoved += x, x => _data.SourceRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher, object>, (global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }
}

namespace Windows.Devices.PointOfService
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.PointOfService"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.BarcodeScanner"/> class.
        /// </summary>
        public static RxBarcodeScannerEvents Events(this global::Windows.Devices.PointOfService.BarcodeScanner item) => new RxBarcodeScannerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.CashDrawer"/> class.
        /// </summary>
        public static RxCashDrawerEvents Events(this global::Windows.Devices.PointOfService.CashDrawer item) => new RxCashDrawerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.CashDrawerCloseAlarm"/> class.
        /// </summary>
        public static RxCashDrawerCloseAlarmEvents Events(this global::Windows.Devices.PointOfService.CashDrawerCloseAlarm item) => new RxCashDrawerCloseAlarmEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.CashDrawerEventSource"/> class.
        /// </summary>
        public static RxCashDrawerEventSourceEvents Events(this global::Windows.Devices.PointOfService.CashDrawerEventSource item) => new RxCashDrawerEventSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner"/> class.
        /// </summary>
        public static RxClaimedBarcodeScannerEvents Events(this global::Windows.Devices.PointOfService.ClaimedBarcodeScanner item) => new RxClaimedBarcodeScannerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedCashDrawer"/> class.
        /// </summary>
        public static RxClaimedCashDrawerEvents Events(this global::Windows.Devices.PointOfService.ClaimedCashDrawer item) => new RxClaimedCashDrawerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedLineDisplay"/> class.
        /// </summary>
        public static RxClaimedLineDisplayEvents Events(this global::Windows.Devices.PointOfService.ClaimedLineDisplay item) => new RxClaimedLineDisplayEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader"/> class.
        /// </summary>
        public static RxClaimedMagneticStripeReaderEvents Events(this global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader item) => new RxClaimedMagneticStripeReaderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedPosPrinter"/> class.
        /// </summary>
        public static RxClaimedPosPrinterEvents Events(this global::Windows.Devices.PointOfService.ClaimedPosPrinter item) => new RxClaimedPosPrinterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.MagneticStripeReader"/> class.
        /// </summary>
        public static RxMagneticStripeReaderEvents Events(this global::Windows.Devices.PointOfService.MagneticStripeReader item) => new RxMagneticStripeReaderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.PosPrinter"/> class.
        /// </summary>
        public static RxPosPrinterEvents Events(this global::Windows.Devices.PointOfService.PosPrinter item) => new RxPosPrinterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.BarcodeScanner"/> class as observables.
    /// </summary>
    public class RxBarcodeScannerEvents
    {
        private readonly global::Windows.Devices.PointOfService.BarcodeScanner _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.BarcodeScanner"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBarcodeScannerEvents(global::Windows.Devices.PointOfService.BarcodeScanner data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.BarcodeScanner.StatusUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.BarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs args)> StatusUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.BarcodeScanner, global::Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs>, (global::Windows.Devices.PointOfService.BarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.BarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusUpdated += x, x => _data.StatusUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.CashDrawer"/> class as observables.
    /// </summary>
    public class RxCashDrawerEvents
    {
        private readonly global::Windows.Devices.PointOfService.CashDrawer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.CashDrawer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCashDrawerEvents(global::Windows.Devices.PointOfService.CashDrawer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.CashDrawer.StatusUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.CashDrawer sender, global::Windows.Devices.PointOfService.CashDrawerStatusUpdatedEventArgs args)> StatusUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.CashDrawer, global::Windows.Devices.PointOfService.CashDrawerStatusUpdatedEventArgs>, (global::Windows.Devices.PointOfService.CashDrawer sender, global::Windows.Devices.PointOfService.CashDrawerStatusUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.CashDrawer sender, global::Windows.Devices.PointOfService.CashDrawerStatusUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusUpdated += x, x => _data.StatusUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.CashDrawerCloseAlarm"/> class as observables.
    /// </summary>
    public class RxCashDrawerCloseAlarmEvents
    {
        private readonly global::Windows.Devices.PointOfService.CashDrawerCloseAlarm _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.CashDrawerCloseAlarm"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCashDrawerCloseAlarmEvents(global::Windows.Devices.PointOfService.CashDrawerCloseAlarm data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.CashDrawerCloseAlarm.AlarmTimeoutExpired"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.CashDrawerCloseAlarm sender, object args)> AlarmTimeoutExpired => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.CashDrawerCloseAlarm, object>, (global::Windows.Devices.PointOfService.CashDrawerCloseAlarm sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.CashDrawerCloseAlarm sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AlarmTimeoutExpired += x, x => _data.AlarmTimeoutExpired -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.CashDrawerEventSource"/> class as observables.
    /// </summary>
    public class RxCashDrawerEventSourceEvents
    {
        private readonly global::Windows.Devices.PointOfService.CashDrawerEventSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.CashDrawerEventSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCashDrawerEventSourceEvents(global::Windows.Devices.PointOfService.CashDrawerEventSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.CashDrawerEventSource.DrawerClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.CashDrawerEventSource sender, global::Windows.Devices.PointOfService.CashDrawerClosedEventArgs args)> DrawerClosed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.CashDrawerEventSource, global::Windows.Devices.PointOfService.CashDrawerClosedEventArgs>, (global::Windows.Devices.PointOfService.CashDrawerEventSource sender, global::Windows.Devices.PointOfService.CashDrawerClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.CashDrawerEventSource sender, global::Windows.Devices.PointOfService.CashDrawerClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DrawerClosed += x, x => _data.DrawerClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.CashDrawerEventSource.DrawerOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.CashDrawerEventSource sender, global::Windows.Devices.PointOfService.CashDrawerOpenedEventArgs args)> DrawerOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.CashDrawerEventSource, global::Windows.Devices.PointOfService.CashDrawerOpenedEventArgs>, (global::Windows.Devices.PointOfService.CashDrawerEventSource sender, global::Windows.Devices.PointOfService.CashDrawerOpenedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.CashDrawerEventSource sender, global::Windows.Devices.PointOfService.CashDrawerOpenedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DrawerOpened += x, x => _data.DrawerOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner"/> class as observables.
    /// </summary>
    public class RxClaimedBarcodeScannerEvents
    {
        private readonly global::Windows.Devices.PointOfService.ClaimedBarcodeScanner _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClaimedBarcodeScannerEvents(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.ClaimedBarcodeScannerClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner, global::Windows.Devices.PointOfService.ClaimedBarcodeScannerClosedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.ClaimedBarcodeScannerClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.ClaimedBarcodeScannerClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner.DataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs args)> DataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner, global::Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataReceived += x, x => _data.DataReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs args)> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner, global::Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs>, (global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner.ImagePreviewReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs args)> ImagePreviewReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner, global::Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedBarcodeScanner sender, global::Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ImagePreviewReceived += x, x => _data.ImagePreviewReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner.ReleaseDeviceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner> ReleaseDeviceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner>, global::Windows.Devices.PointOfService.ClaimedBarcodeScanner>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Devices.PointOfService.ClaimedBarcodeScanner e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ReleaseDeviceRequested += x, x => _data.ReleaseDeviceRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner.TriggerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner> TriggerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner>, global::Windows.Devices.PointOfService.ClaimedBarcodeScanner>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Devices.PointOfService.ClaimedBarcodeScanner e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TriggerPressed += x, x => _data.TriggerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedBarcodeScanner.TriggerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner> TriggerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Devices.PointOfService.ClaimedBarcodeScanner>, global::Windows.Devices.PointOfService.ClaimedBarcodeScanner>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Devices.PointOfService.ClaimedBarcodeScanner e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TriggerReleased += x, x => _data.TriggerReleased -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedCashDrawer"/> class as observables.
    /// </summary>
    public class RxClaimedCashDrawerEvents
    {
        private readonly global::Windows.Devices.PointOfService.ClaimedCashDrawer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.ClaimedCashDrawer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClaimedCashDrawerEvents(global::Windows.Devices.PointOfService.ClaimedCashDrawer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedCashDrawer.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedCashDrawer sender, global::Windows.Devices.PointOfService.ClaimedCashDrawerClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedCashDrawer, global::Windows.Devices.PointOfService.ClaimedCashDrawerClosedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedCashDrawer sender, global::Windows.Devices.PointOfService.ClaimedCashDrawerClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedCashDrawer sender, global::Windows.Devices.PointOfService.ClaimedCashDrawerClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedCashDrawer.ReleaseDeviceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedCashDrawer sender, object args)> ReleaseDeviceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedCashDrawer, object>, (global::Windows.Devices.PointOfService.ClaimedCashDrawer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedCashDrawer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReleaseDeviceRequested += x, x => _data.ReleaseDeviceRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedLineDisplay"/> class as observables.
    /// </summary>
    public class RxClaimedLineDisplayEvents
    {
        private readonly global::Windows.Devices.PointOfService.ClaimedLineDisplay _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.ClaimedLineDisplay"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClaimedLineDisplayEvents(global::Windows.Devices.PointOfService.ClaimedLineDisplay data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedLineDisplay.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, global::Windows.Devices.PointOfService.ClaimedLineDisplayClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedLineDisplay, global::Windows.Devices.PointOfService.ClaimedLineDisplayClosedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, global::Windows.Devices.PointOfService.ClaimedLineDisplayClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, global::Windows.Devices.PointOfService.ClaimedLineDisplayClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedLineDisplay.ReleaseDeviceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, object args)> ReleaseDeviceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedLineDisplay, object>, (global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReleaseDeviceRequested += x, x => _data.ReleaseDeviceRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedLineDisplay.StatusUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, global::Windows.Devices.PointOfService.LineDisplayStatusUpdatedEventArgs args)> StatusUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedLineDisplay, global::Windows.Devices.PointOfService.LineDisplayStatusUpdatedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, global::Windows.Devices.PointOfService.LineDisplayStatusUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedLineDisplay sender, global::Windows.Devices.PointOfService.LineDisplayStatusUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusUpdated += x, x => _data.StatusUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader"/> class as observables.
    /// </summary>
    public class RxClaimedMagneticStripeReaderEvents
    {
        private readonly global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClaimedMagneticStripeReaderEvents(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader.AamvaCardDataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs args)> AamvaCardDataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader, global::Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AamvaCardDataReceived += x, x => _data.AamvaCardDataReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader.BankCardDataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs args)> BankCardDataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader, global::Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BankCardDataReceived += x, x => _data.BankCardDataReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.ClaimedMagneticStripeReaderClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader, global::Windows.Devices.PointOfService.ClaimedMagneticStripeReaderClosedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.ClaimedMagneticStripeReaderClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.ClaimedMagneticStripeReaderClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs args)> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader, global::Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs>, (global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader.ReleaseDeviceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader> ReleaseDeviceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader>, global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ReleaseDeviceRequested += x, x => _data.ReleaseDeviceRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader.VendorSpecificDataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs args)> VendorSpecificDataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader, global::Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedMagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VendorSpecificDataReceived += x, x => _data.VendorSpecificDataReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.ClaimedPosPrinter"/> class as observables.
    /// </summary>
    public class RxClaimedPosPrinterEvents
    {
        private readonly global::Windows.Devices.PointOfService.ClaimedPosPrinter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.ClaimedPosPrinter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClaimedPosPrinterEvents(global::Windows.Devices.PointOfService.ClaimedPosPrinter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedPosPrinter.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedPosPrinter sender, global::Windows.Devices.PointOfService.ClaimedPosPrinterClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedPosPrinter, global::Windows.Devices.PointOfService.ClaimedPosPrinterClosedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedPosPrinter sender, global::Windows.Devices.PointOfService.ClaimedPosPrinterClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedPosPrinter sender, global::Windows.Devices.PointOfService.ClaimedPosPrinterClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.ClaimedPosPrinter.ReleaseDeviceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.ClaimedPosPrinter sender, global::Windows.Devices.PointOfService.PosPrinterReleaseDeviceRequestedEventArgs args)> ReleaseDeviceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedPosPrinter, global::Windows.Devices.PointOfService.PosPrinterReleaseDeviceRequestedEventArgs>, (global::Windows.Devices.PointOfService.ClaimedPosPrinter sender, global::Windows.Devices.PointOfService.PosPrinterReleaseDeviceRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.ClaimedPosPrinter sender, global::Windows.Devices.PointOfService.PosPrinterReleaseDeviceRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReleaseDeviceRequested += x, x => _data.ReleaseDeviceRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.MagneticStripeReader"/> class as observables.
    /// </summary>
    public class RxMagneticStripeReaderEvents
    {
        private readonly global::Windows.Devices.PointOfService.MagneticStripeReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.MagneticStripeReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMagneticStripeReaderEvents(global::Windows.Devices.PointOfService.MagneticStripeReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.MagneticStripeReader.StatusUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.MagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs args)> StatusUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.MagneticStripeReader, global::Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs>, (global::Windows.Devices.PointOfService.MagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.MagneticStripeReader sender, global::Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusUpdated += x, x => _data.StatusUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.PosPrinter"/> class as observables.
    /// </summary>
    public class RxPosPrinterEvents
    {
        private readonly global::Windows.Devices.PointOfService.PosPrinter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.PosPrinter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPosPrinterEvents(global::Windows.Devices.PointOfService.PosPrinter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.PosPrinter.StatusUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.PosPrinter sender, global::Windows.Devices.PointOfService.PosPrinterStatusUpdatedEventArgs args)> StatusUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.PosPrinter, global::Windows.Devices.PointOfService.PosPrinterStatusUpdatedEventArgs>, (global::Windows.Devices.PointOfService.PosPrinter sender, global::Windows.Devices.PointOfService.PosPrinterStatusUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.PosPrinter sender, global::Windows.Devices.PointOfService.PosPrinterStatusUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusUpdated += x, x => _data.StatusUpdated -= x);
    }
}

namespace Windows.Devices.PointOfService.Provider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.PointOfService.Provider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader"/> class.
        /// </summary>
        public static RxBarcodeScannerFrameReaderEvents Events(this global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader item) => new RxBarcodeScannerFrameReaderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection"/> class.
        /// </summary>
        public static RxBarcodeScannerProviderConnectionEvents Events(this global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection item) => new RxBarcodeScannerProviderConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader"/> class as observables.
    /// </summary>
    public class RxBarcodeScannerFrameReaderEvents
    {
        private readonly global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBarcodeScannerFrameReaderEvents(global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader.FrameArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReaderFrameArrivedEventArgs args)> FrameArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader, global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReaderFrameArrivedEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReaderFrameArrivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReaderFrameArrivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameArrived += x, x => _data.FrameArrived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection"/> class as observables.
    /// </summary>
    public class RxBarcodeScannerProviderConnectionEvents
    {
        private readonly global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBarcodeScannerProviderConnectionEvents(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.DisableScannerRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerDisableScannerRequestEventArgs args)> DisableScannerRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerDisableScannerRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerDisableScannerRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerDisableScannerRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DisableScannerRequested += x, x => _data.DisableScannerRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.EnableScannerRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerEnableScannerRequestEventArgs args)> EnableScannerRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerEnableScannerRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerEnableScannerRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerEnableScannerRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnableScannerRequested += x, x => _data.EnableScannerRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.GetBarcodeSymbologyAttributesRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerGetSymbologyAttributesRequestEventArgs args)> GetBarcodeSymbologyAttributesRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerGetSymbologyAttributesRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerGetSymbologyAttributesRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerGetSymbologyAttributesRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GetBarcodeSymbologyAttributesRequested += x, x => _data.GetBarcodeSymbologyAttributesRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.HideVideoPreviewRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerHideVideoPreviewRequestEventArgs args)> HideVideoPreviewRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerHideVideoPreviewRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerHideVideoPreviewRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerHideVideoPreviewRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HideVideoPreviewRequested += x, x => _data.HideVideoPreviewRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.SetActiveSymbologiesRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetActiveSymbologiesRequestEventArgs args)> SetActiveSymbologiesRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetActiveSymbologiesRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetActiveSymbologiesRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetActiveSymbologiesRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SetActiveSymbologiesRequested += x, x => _data.SetActiveSymbologiesRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.SetBarcodeSymbologyAttributesRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetSymbologyAttributesRequestEventArgs args)> SetBarcodeSymbologyAttributesRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetSymbologyAttributesRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetSymbologyAttributesRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerSetSymbologyAttributesRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SetBarcodeSymbologyAttributesRequested += x, x => _data.SetBarcodeSymbologyAttributesRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.StartSoftwareTriggerRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStartSoftwareTriggerRequestEventArgs args)> StartSoftwareTriggerRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStartSoftwareTriggerRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStartSoftwareTriggerRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStartSoftwareTriggerRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StartSoftwareTriggerRequested += x, x => _data.StartSoftwareTriggerRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection.StopSoftwareTriggerRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStopSoftwareTriggerRequestEventArgs args)> StopSoftwareTriggerRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStopSoftwareTriggerRequestEventArgs>, (global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStopSoftwareTriggerRequestEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection sender, global::Windows.Devices.PointOfService.Provider.BarcodeScannerStopSoftwareTriggerRequestEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StopSoftwareTriggerRequested += x, x => _data.StopSoftwareTriggerRequested -= x);
    }
}

namespace Windows.Devices.Power
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Power"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Power.Battery"/> class.
        /// </summary>
        public static RxBatteryEvents Events(this global::Windows.Devices.Power.Battery item) => new RxBatteryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Power.Battery"/> class as observables.
    /// </summary>
    public class RxBatteryEvents
    {
        private readonly global::Windows.Devices.Power.Battery _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Power.Battery"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBatteryEvents(global::Windows.Devices.Power.Battery data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Power.Battery.ReportUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Power.Battery sender, object args)> ReportUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Power.Battery, object>, (global::Windows.Devices.Power.Battery sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Power.Battery sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReportUpdated += x, x => _data.ReportUpdated -= x);
    }
}

namespace Windows.Devices.Printers.Extensions
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Printers.Extensions"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Printers.Extensions.Print3DWorkflow"/> class.
        /// </summary>
        public static RxPrint3DWorkflowEvents Events(this global::Windows.Devices.Printers.Extensions.Print3DWorkflow item) => new RxPrint3DWorkflowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Printers.Extensions.Print3DWorkflow"/> class as observables.
    /// </summary>
    public class RxPrint3DWorkflowEvents
    {
        private readonly global::Windows.Devices.Printers.Extensions.Print3DWorkflow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Printers.Extensions.Print3DWorkflow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrint3DWorkflowEvents(global::Windows.Devices.Printers.Extensions.Print3DWorkflow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Printers.Extensions.Print3DWorkflow.PrinterChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Printers.Extensions.Print3DWorkflow sender, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrinterChangedEventArgs args)> PrinterChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Printers.Extensions.Print3DWorkflow, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrinterChangedEventArgs>, (global::Windows.Devices.Printers.Extensions.Print3DWorkflow sender, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrinterChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Printers.Extensions.Print3DWorkflow sender, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrinterChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PrinterChanged += x, x => _data.PrinterChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Printers.Extensions.Print3DWorkflow.PrintRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Printers.Extensions.Print3DWorkflow sender, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrintRequestedEventArgs args)> PrintRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Printers.Extensions.Print3DWorkflow, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrintRequestedEventArgs>, (global::Windows.Devices.Printers.Extensions.Print3DWorkflow sender, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrintRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Printers.Extensions.Print3DWorkflow sender, global::Windows.Devices.Printers.Extensions.Print3DWorkflowPrintRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PrintRequested += x, x => _data.PrintRequested -= x);
    }
}

namespace Windows.Devices.Radios
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Radios"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Radios.Radio"/> class.
        /// </summary>
        public static RxRadioEvents Events(this global::Windows.Devices.Radios.Radio item) => new RxRadioEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Radios.Radio"/> class as observables.
    /// </summary>
    public class RxRadioEvents
    {
        private readonly global::Windows.Devices.Radios.Radio _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Radios.Radio"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRadioEvents(global::Windows.Devices.Radios.Radio data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Radios.Radio.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Radios.Radio sender, object args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Radios.Radio, object>, (global::Windows.Devices.Radios.Radio sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Radios.Radio sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Windows.Devices.Sensors
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Sensors"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Accelerometer"/> class.
        /// </summary>
        public static RxAccelerometerEvents Events(this global::Windows.Devices.Sensors.Accelerometer item) => new RxAccelerometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.ActivitySensor"/> class.
        /// </summary>
        public static RxActivitySensorEvents Events(this global::Windows.Devices.Sensors.ActivitySensor item) => new RxActivitySensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Altimeter"/> class.
        /// </summary>
        public static RxAltimeterEvents Events(this global::Windows.Devices.Sensors.Altimeter item) => new RxAltimeterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Barometer"/> class.
        /// </summary>
        public static RxBarometerEvents Events(this global::Windows.Devices.Sensors.Barometer item) => new RxBarometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Compass"/> class.
        /// </summary>
        public static RxCompassEvents Events(this global::Windows.Devices.Sensors.Compass item) => new RxCompassEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Gyrometer"/> class.
        /// </summary>
        public static RxGyrometerEvents Events(this global::Windows.Devices.Sensors.Gyrometer item) => new RxGyrometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.HingeAngleSensor"/> class.
        /// </summary>
        public static RxHingeAngleSensorEvents Events(this global::Windows.Devices.Sensors.HingeAngleSensor item) => new RxHingeAngleSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Inclinometer"/> class.
        /// </summary>
        public static RxInclinometerEvents Events(this global::Windows.Devices.Sensors.Inclinometer item) => new RxInclinometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.LightSensor"/> class.
        /// </summary>
        public static RxLightSensorEvents Events(this global::Windows.Devices.Sensors.LightSensor item) => new RxLightSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Magnetometer"/> class.
        /// </summary>
        public static RxMagnetometerEvents Events(this global::Windows.Devices.Sensors.Magnetometer item) => new RxMagnetometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.OrientationSensor"/> class.
        /// </summary>
        public static RxOrientationSensorEvents Events(this global::Windows.Devices.Sensors.OrientationSensor item) => new RxOrientationSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Pedometer"/> class.
        /// </summary>
        public static RxPedometerEvents Events(this global::Windows.Devices.Sensors.Pedometer item) => new RxPedometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.ProximitySensor"/> class.
        /// </summary>
        public static RxProximitySensorEvents Events(this global::Windows.Devices.Sensors.ProximitySensor item) => new RxProximitySensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.SimpleOrientationSensor"/> class.
        /// </summary>
        public static RxSimpleOrientationSensorEvents Events(this global::Windows.Devices.Sensors.SimpleOrientationSensor item) => new RxSimpleOrientationSensorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Accelerometer"/> class as observables.
    /// </summary>
    public class RxAccelerometerEvents
    {
        private readonly global::Windows.Devices.Sensors.Accelerometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Accelerometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAccelerometerEvents(global::Windows.Devices.Sensors.Accelerometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Accelerometer.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Accelerometer sender, global::Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Accelerometer, global::Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Accelerometer sender, global::Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Accelerometer sender, global::Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Accelerometer.Shaken"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Accelerometer sender, global::Windows.Devices.Sensors.AccelerometerShakenEventArgs args)> Shaken => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Accelerometer, global::Windows.Devices.Sensors.AccelerometerShakenEventArgs>, (global::Windows.Devices.Sensors.Accelerometer sender, global::Windows.Devices.Sensors.AccelerometerShakenEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Accelerometer sender, global::Windows.Devices.Sensors.AccelerometerShakenEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Shaken += x, x => _data.Shaken -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.ActivitySensor"/> class as observables.
    /// </summary>
    public class RxActivitySensorEvents
    {
        private readonly global::Windows.Devices.Sensors.ActivitySensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.ActivitySensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxActivitySensorEvents(global::Windows.Devices.Sensors.ActivitySensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.ActivitySensor.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.ActivitySensor sender, global::Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.ActivitySensor, global::Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs>, (global::Windows.Devices.Sensors.ActivitySensor sender, global::Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.ActivitySensor sender, global::Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Altimeter"/> class as observables.
    /// </summary>
    public class RxAltimeterEvents
    {
        private readonly global::Windows.Devices.Sensors.Altimeter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Altimeter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAltimeterEvents(global::Windows.Devices.Sensors.Altimeter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Altimeter.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Altimeter sender, global::Windows.Devices.Sensors.AltimeterReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Altimeter, global::Windows.Devices.Sensors.AltimeterReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Altimeter sender, global::Windows.Devices.Sensors.AltimeterReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Altimeter sender, global::Windows.Devices.Sensors.AltimeterReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Barometer"/> class as observables.
    /// </summary>
    public class RxBarometerEvents
    {
        private readonly global::Windows.Devices.Sensors.Barometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Barometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBarometerEvents(global::Windows.Devices.Sensors.Barometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Barometer.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Barometer sender, global::Windows.Devices.Sensors.BarometerReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Barometer, global::Windows.Devices.Sensors.BarometerReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Barometer sender, global::Windows.Devices.Sensors.BarometerReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Barometer sender, global::Windows.Devices.Sensors.BarometerReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Compass"/> class as observables.
    /// </summary>
    public class RxCompassEvents
    {
        private readonly global::Windows.Devices.Sensors.Compass _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Compass"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCompassEvents(global::Windows.Devices.Sensors.Compass data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Compass.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Compass sender, global::Windows.Devices.Sensors.CompassReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Compass, global::Windows.Devices.Sensors.CompassReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Compass sender, global::Windows.Devices.Sensors.CompassReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Compass sender, global::Windows.Devices.Sensors.CompassReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Gyrometer"/> class as observables.
    /// </summary>
    public class RxGyrometerEvents
    {
        private readonly global::Windows.Devices.Sensors.Gyrometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Gyrometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGyrometerEvents(global::Windows.Devices.Sensors.Gyrometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Gyrometer.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Gyrometer sender, global::Windows.Devices.Sensors.GyrometerReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Gyrometer, global::Windows.Devices.Sensors.GyrometerReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Gyrometer sender, global::Windows.Devices.Sensors.GyrometerReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Gyrometer sender, global::Windows.Devices.Sensors.GyrometerReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.HingeAngleSensor"/> class as observables.
    /// </summary>
    public class RxHingeAngleSensorEvents
    {
        private readonly global::Windows.Devices.Sensors.HingeAngleSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.HingeAngleSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHingeAngleSensorEvents(global::Windows.Devices.Sensors.HingeAngleSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.HingeAngleSensor.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.HingeAngleSensor sender, global::Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.HingeAngleSensor, global::Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs>, (global::Windows.Devices.Sensors.HingeAngleSensor sender, global::Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.HingeAngleSensor sender, global::Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Inclinometer"/> class as observables.
    /// </summary>
    public class RxInclinometerEvents
    {
        private readonly global::Windows.Devices.Sensors.Inclinometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Inclinometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInclinometerEvents(global::Windows.Devices.Sensors.Inclinometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Inclinometer.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Inclinometer sender, global::Windows.Devices.Sensors.InclinometerReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Inclinometer, global::Windows.Devices.Sensors.InclinometerReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Inclinometer sender, global::Windows.Devices.Sensors.InclinometerReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Inclinometer sender, global::Windows.Devices.Sensors.InclinometerReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.LightSensor"/> class as observables.
    /// </summary>
    public class RxLightSensorEvents
    {
        private readonly global::Windows.Devices.Sensors.LightSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.LightSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLightSensorEvents(global::Windows.Devices.Sensors.LightSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.LightSensor.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.LightSensor sender, global::Windows.Devices.Sensors.LightSensorReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.LightSensor, global::Windows.Devices.Sensors.LightSensorReadingChangedEventArgs>, (global::Windows.Devices.Sensors.LightSensor sender, global::Windows.Devices.Sensors.LightSensorReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.LightSensor sender, global::Windows.Devices.Sensors.LightSensorReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Magnetometer"/> class as observables.
    /// </summary>
    public class RxMagnetometerEvents
    {
        private readonly global::Windows.Devices.Sensors.Magnetometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Magnetometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMagnetometerEvents(global::Windows.Devices.Sensors.Magnetometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Magnetometer.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Magnetometer sender, global::Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Magnetometer, global::Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Magnetometer sender, global::Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Magnetometer sender, global::Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.OrientationSensor"/> class as observables.
    /// </summary>
    public class RxOrientationSensorEvents
    {
        private readonly global::Windows.Devices.Sensors.OrientationSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.OrientationSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxOrientationSensorEvents(global::Windows.Devices.Sensors.OrientationSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.OrientationSensor.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.OrientationSensor sender, global::Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.OrientationSensor, global::Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs>, (global::Windows.Devices.Sensors.OrientationSensor sender, global::Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.OrientationSensor sender, global::Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Pedometer"/> class as observables.
    /// </summary>
    public class RxPedometerEvents
    {
        private readonly global::Windows.Devices.Sensors.Pedometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Pedometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPedometerEvents(global::Windows.Devices.Sensors.Pedometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Pedometer.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Pedometer sender, global::Windows.Devices.Sensors.PedometerReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Pedometer, global::Windows.Devices.Sensors.PedometerReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Pedometer sender, global::Windows.Devices.Sensors.PedometerReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Pedometer sender, global::Windows.Devices.Sensors.PedometerReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.ProximitySensor"/> class as observables.
    /// </summary>
    public class RxProximitySensorEvents
    {
        private readonly global::Windows.Devices.Sensors.ProximitySensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.ProximitySensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxProximitySensorEvents(global::Windows.Devices.Sensors.ProximitySensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.ProximitySensor.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.ProximitySensor sender, global::Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.ProximitySensor, global::Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs>, (global::Windows.Devices.Sensors.ProximitySensor sender, global::Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.ProximitySensor sender, global::Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.SimpleOrientationSensor"/> class as observables.
    /// </summary>
    public class RxSimpleOrientationSensorEvents
    {
        private readonly global::Windows.Devices.Sensors.SimpleOrientationSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.SimpleOrientationSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSimpleOrientationSensorEvents(global::Windows.Devices.Sensors.SimpleOrientationSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.SimpleOrientationSensor.OrientationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.SimpleOrientationSensor sender, global::Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs args)> OrientationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.SimpleOrientationSensor, global::Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs>, (global::Windows.Devices.Sensors.SimpleOrientationSensor sender, global::Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.SimpleOrientationSensor sender, global::Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OrientationChanged += x, x => _data.OrientationChanged -= x);
    }
}

namespace Windows.Devices.Sensors.Custom
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Sensors.Custom"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sensors.Custom.CustomSensor"/> class.
        /// </summary>
        public static RxCustomSensorEvents Events(this global::Windows.Devices.Sensors.Custom.CustomSensor item) => new RxCustomSensorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sensors.Custom.CustomSensor"/> class as observables.
    /// </summary>
    public class RxCustomSensorEvents
    {
        private readonly global::Windows.Devices.Sensors.Custom.CustomSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sensors.Custom.CustomSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCustomSensorEvents(global::Windows.Devices.Sensors.Custom.CustomSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sensors.Custom.CustomSensor.ReadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sensors.Custom.CustomSensor sender, global::Windows.Devices.Sensors.Custom.CustomSensorReadingChangedEventArgs args)> ReadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sensors.Custom.CustomSensor, global::Windows.Devices.Sensors.Custom.CustomSensorReadingChangedEventArgs>, (global::Windows.Devices.Sensors.Custom.CustomSensor sender, global::Windows.Devices.Sensors.Custom.CustomSensorReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sensors.Custom.CustomSensor sender, global::Windows.Devices.Sensors.Custom.CustomSensorReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReadingChanged += x, x => _data.ReadingChanged -= x);
    }
}

namespace Windows.Devices.SerialCommunication
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.SerialCommunication"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.SerialCommunication.SerialDevice"/> class.
        /// </summary>
        public static RxSerialDeviceEvents Events(this global::Windows.Devices.SerialCommunication.SerialDevice item) => new RxSerialDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.SerialCommunication.SerialDevice"/> class as observables.
    /// </summary>
    public class RxSerialDeviceEvents
    {
        private readonly global::Windows.Devices.SerialCommunication.SerialDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.SerialCommunication.SerialDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSerialDeviceEvents(global::Windows.Devices.SerialCommunication.SerialDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.SerialCommunication.SerialDevice.ErrorReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.SerialCommunication.SerialDevice sender, global::Windows.Devices.SerialCommunication.ErrorReceivedEventArgs args)> ErrorReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.SerialCommunication.SerialDevice, global::Windows.Devices.SerialCommunication.ErrorReceivedEventArgs>, (global::Windows.Devices.SerialCommunication.SerialDevice sender, global::Windows.Devices.SerialCommunication.ErrorReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.SerialCommunication.SerialDevice sender, global::Windows.Devices.SerialCommunication.ErrorReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ErrorReceived += x, x => _data.ErrorReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.SerialCommunication.SerialDevice.PinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.SerialCommunication.SerialDevice sender, global::Windows.Devices.SerialCommunication.PinChangedEventArgs args)> PinChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.SerialCommunication.SerialDevice, global::Windows.Devices.SerialCommunication.PinChangedEventArgs>, (global::Windows.Devices.SerialCommunication.SerialDevice sender, global::Windows.Devices.SerialCommunication.PinChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.SerialCommunication.SerialDevice sender, global::Windows.Devices.SerialCommunication.PinChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PinChanged += x, x => _data.PinChanged -= x);
    }
}

namespace Windows.Devices.SmartCards
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.SmartCards"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.SmartCards.SmartCardReader"/> class.
        /// </summary>
        public static RxSmartCardReaderEvents Events(this global::Windows.Devices.SmartCards.SmartCardReader item) => new RxSmartCardReaderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.SmartCards.SmartCardReader"/> class as observables.
    /// </summary>
    public class RxSmartCardReaderEvents
    {
        private readonly global::Windows.Devices.SmartCards.SmartCardReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.SmartCards.SmartCardReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSmartCardReaderEvents(global::Windows.Devices.SmartCards.SmartCardReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.SmartCards.SmartCardReader.CardAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.SmartCards.SmartCardReader sender, global::Windows.Devices.SmartCards.CardAddedEventArgs args)> CardAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.SmartCards.SmartCardReader, global::Windows.Devices.SmartCards.CardAddedEventArgs>, (global::Windows.Devices.SmartCards.SmartCardReader sender, global::Windows.Devices.SmartCards.CardAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.SmartCards.SmartCardReader sender, global::Windows.Devices.SmartCards.CardAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CardAdded += x, x => _data.CardAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.SmartCards.SmartCardReader.CardRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.SmartCards.SmartCardReader sender, global::Windows.Devices.SmartCards.CardRemovedEventArgs args)> CardRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.SmartCards.SmartCardReader, global::Windows.Devices.SmartCards.CardRemovedEventArgs>, (global::Windows.Devices.SmartCards.SmartCardReader sender, global::Windows.Devices.SmartCards.CardRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.SmartCards.SmartCardReader sender, global::Windows.Devices.SmartCards.CardRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CardRemoved += x, x => _data.CardRemoved -= x);
    }
}

namespace Windows.Devices.Sms
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Sms"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sms.SmsDevice2"/> class.
        /// </summary>
        public static RxSmsDevice2Events Events(this global::Windows.Devices.Sms.SmsDevice2 item) => new RxSmsDevice2Events(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Sms.SmsMessageRegistration"/> class.
        /// </summary>
        public static RxSmsMessageRegistrationEvents Events(this global::Windows.Devices.Sms.SmsMessageRegistration item) => new RxSmsMessageRegistrationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sms.SmsDevice2"/> class as observables.
    /// </summary>
    public class RxSmsDevice2Events
    {
        private readonly global::Windows.Devices.Sms.SmsDevice2 _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sms.SmsDevice2"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSmsDevice2Events(global::Windows.Devices.Sms.SmsDevice2 data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sms.SmsDevice2.DeviceStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sms.SmsDevice2 sender, object args)> DeviceStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sms.SmsDevice2, object>, (global::Windows.Devices.Sms.SmsDevice2 sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sms.SmsDevice2 sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DeviceStatusChanged += x, x => _data.DeviceStatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Sms.SmsMessageRegistration"/> class as observables.
    /// </summary>
    public class RxSmsMessageRegistrationEvents
    {
        private readonly global::Windows.Devices.Sms.SmsMessageRegistration _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Sms.SmsMessageRegistration"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSmsMessageRegistrationEvents(global::Windows.Devices.Sms.SmsMessageRegistration data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Sms.SmsMessageRegistration.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Sms.SmsMessageRegistration sender, global::Windows.Devices.Sms.SmsMessageReceivedTriggerDetails args)> MessageReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Sms.SmsMessageRegistration, global::Windows.Devices.Sms.SmsMessageReceivedTriggerDetails>, (global::Windows.Devices.Sms.SmsMessageRegistration sender, global::Windows.Devices.Sms.SmsMessageReceivedTriggerDetails args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Sms.SmsMessageRegistration sender, global::Windows.Devices.Sms.SmsMessageReceivedTriggerDetails args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MessageReceived += x, x => _data.MessageReceived -= x);
    }
}

namespace Windows.Devices.Usb
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.Usb"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.Usb.UsbInterruptInPipe"/> class.
        /// </summary>
        public static RxUsbInterruptInPipeEvents Events(this global::Windows.Devices.Usb.UsbInterruptInPipe item) => new RxUsbInterruptInPipeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.Usb.UsbInterruptInPipe"/> class as observables.
    /// </summary>
    public class RxUsbInterruptInPipeEvents
    {
        private readonly global::Windows.Devices.Usb.UsbInterruptInPipe _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.Usb.UsbInterruptInPipe"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUsbInterruptInPipeEvents(global::Windows.Devices.Usb.UsbInterruptInPipe data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.Usb.UsbInterruptInPipe.DataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.Usb.UsbInterruptInPipe sender, global::Windows.Devices.Usb.UsbInterruptInEventArgs args)> DataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Usb.UsbInterruptInPipe, global::Windows.Devices.Usb.UsbInterruptInEventArgs>, (global::Windows.Devices.Usb.UsbInterruptInPipe sender, global::Windows.Devices.Usb.UsbInterruptInEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.Usb.UsbInterruptInPipe sender, global::Windows.Devices.Usb.UsbInterruptInEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataReceived += x, x => _data.DataReceived -= x);
    }
}

namespace Windows.Devices.WiFi
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.WiFi"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.WiFi.WiFiAdapter"/> class.
        /// </summary>
        public static RxWiFiAdapterEvents Events(this global::Windows.Devices.WiFi.WiFiAdapter item) => new RxWiFiAdapterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.WiFi.WiFiAdapter"/> class as observables.
    /// </summary>
    public class RxWiFiAdapterEvents
    {
        private readonly global::Windows.Devices.WiFi.WiFiAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.WiFi.WiFiAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWiFiAdapterEvents(global::Windows.Devices.WiFi.WiFiAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFi.WiFiAdapter.AvailableNetworksChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFi.WiFiAdapter sender, object args)> AvailableNetworksChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFi.WiFiAdapter, object>, (global::Windows.Devices.WiFi.WiFiAdapter sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFi.WiFiAdapter sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AvailableNetworksChanged += x, x => _data.AvailableNetworksChanged -= x);
    }
}

namespace Windows.Devices.WiFiDirect
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.WiFiDirect"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher"/> class.
        /// </summary>
        public static RxWiFiDirectAdvertisementPublisherEvents Events(this global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher item) => new RxWiFiDirectAdvertisementPublisherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener"/> class.
        /// </summary>
        public static RxWiFiDirectConnectionListenerEvents Events(this global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener item) => new RxWiFiDirectConnectionListenerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectDevice"/> class.
        /// </summary>
        public static RxWiFiDirectDeviceEvents Events(this global::Windows.Devices.WiFiDirect.WiFiDirectDevice item) => new RxWiFiDirectDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher"/> class as observables.
    /// </summary>
    public class RxWiFiDirectAdvertisementPublisherEvents
    {
        private readonly global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWiFiDirectAdvertisementPublisherEvents(global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher sender, global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatusChangedEventArgs args)> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher, global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatusChangedEventArgs>, (global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher sender, global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher sender, global::Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener"/> class as observables.
    /// </summary>
    public class RxWiFiDirectConnectionListenerEvents
    {
        private readonly global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWiFiDirectConnectionListenerEvents(global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener.ConnectionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener sender, global::Windows.Devices.WiFiDirect.WiFiDirectConnectionRequestedEventArgs args)> ConnectionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener, global::Windows.Devices.WiFiDirect.WiFiDirectConnectionRequestedEventArgs>, (global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener sender, global::Windows.Devices.WiFiDirect.WiFiDirectConnectionRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.WiFiDirectConnectionListener sender, global::Windows.Devices.WiFiDirect.WiFiDirectConnectionRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ConnectionRequested += x, x => _data.ConnectionRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectDevice"/> class as observables.
    /// </summary>
    public class RxWiFiDirectDeviceEvents
    {
        private readonly global::Windows.Devices.WiFiDirect.WiFiDirectDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWiFiDirectDeviceEvents(global::Windows.Devices.WiFiDirect.WiFiDirectDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.WiFiDirectDevice.ConnectionStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.WiFiDirectDevice sender, object args)> ConnectionStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.WiFiDirectDevice, object>, (global::Windows.Devices.WiFiDirect.WiFiDirectDevice sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.WiFiDirectDevice sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ConnectionStatusChanged += x, x => _data.ConnectionStatusChanged -= x);
    }
}

namespace Windows.Devices.WiFiDirect.Services
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Devices.WiFiDirect.Services"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectService"/> class.
        /// </summary>
        public static RxWiFiDirectServiceEvents Events(this global::Windows.Devices.WiFiDirect.Services.WiFiDirectService item) => new RxWiFiDirectServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser"/> class.
        /// </summary>
        public static RxWiFiDirectServiceAdvertiserEvents Events(this global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser item) => new RxWiFiDirectServiceAdvertiserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession"/> class.
        /// </summary>
        public static RxWiFiDirectServiceSessionEvents Events(this global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession item) => new RxWiFiDirectServiceSessionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectService"/> class as observables.
    /// </summary>
    public class RxWiFiDirectServiceEvents
    {
        private readonly global::Windows.Devices.WiFiDirect.Services.WiFiDirectService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWiFiDirectServiceEvents(global::Windows.Devices.WiFiDirect.Services.WiFiDirectService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectService.SessionDeferred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.Services.WiFiDirectService sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionDeferredEventArgs args)> SessionDeferred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.Services.WiFiDirectService, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionDeferredEventArgs>, (global::Windows.Devices.WiFiDirect.Services.WiFiDirectService sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionDeferredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.Services.WiFiDirectService sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionDeferredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SessionDeferred += x, x => _data.SessionDeferred -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser"/> class as observables.
    /// </summary>
    public class RxWiFiDirectServiceAdvertiserEvents
    {
        private readonly global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWiFiDirectServiceAdvertiserEvents(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser.AdvertisementStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, object args)> AdvertisementStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser, object>, (global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AdvertisementStatusChanged += x, x => _data.AdvertisementStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser.AutoAcceptSessionConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAutoAcceptSessionConnectedEventArgs args)> AutoAcceptSessionConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAutoAcceptSessionConnectedEventArgs>, (global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAutoAcceptSessionConnectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAutoAcceptSessionConnectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AutoAcceptSessionConnected += x, x => _data.AutoAcceptSessionConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser.SessionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionRequestedEventArgs args)> SessionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionRequestedEventArgs>, (global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SessionRequested += x, x => _data.SessionRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession"/> class as observables.
    /// </summary>
    public class RxWiFiDirectServiceSessionEvents
    {
        private readonly global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWiFiDirectServiceSessionEvents(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession.RemotePortAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceRemotePortAddedEventArgs args)> RemotePortAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceRemotePortAddedEventArgs>, (global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceRemotePortAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession sender, global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceRemotePortAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RemotePortAdded += x, x => _data.RemotePortAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession.SessionStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession sender, object args)> SessionStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession, object>, (global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SessionStatusChanged += x, x => _data.SessionStatusChanged -= x);
    }
}

namespace Windows.Foundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Foundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.IMemoryBufferReference"/> class.
        /// </summary>
        public static RxIMemoryBufferReferenceEvents Events(this global::Windows.Foundation.IMemoryBufferReference item) => new RxIMemoryBufferReferenceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.IMemoryBufferReference"/> class as observables.
    /// </summary>
    public class RxIMemoryBufferReferenceEvents
    {
        private readonly global::Windows.Foundation.IMemoryBufferReference _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.IMemoryBufferReference"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIMemoryBufferReferenceEvents(global::Windows.Foundation.IMemoryBufferReference data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.IMemoryBufferReference.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.IMemoryBufferReference sender, object args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Foundation.IMemoryBufferReference, object>, (global::Windows.Foundation.IMemoryBufferReference sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.IMemoryBufferReference sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
    }
}

namespace Windows.Foundation.Collections
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Foundation.Collections"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.Collections.PropertySet"/> class.
        /// </summary>
        public static RxPropertySetEvents Events(this global::Windows.Foundation.Collections.PropertySet item) => new RxPropertySetEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.Collections.StringMap"/> class.
        /// </summary>
        public static RxStringMapEvents Events(this global::Windows.Foundation.Collections.StringMap item) => new RxStringMapEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.Collections.ValueSet"/> class.
        /// </summary>
        public static RxValueSetEvents Events(this global::Windows.Foundation.Collections.ValueSet item) => new RxValueSetEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.Collections.PropertySet"/> class as observables.
    /// </summary>
    public class RxPropertySetEvents
    {
        private readonly global::Windows.Foundation.Collections.PropertySet _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.Collections.PropertySet"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPropertySetEvents(global::Windows.Foundation.Collections.PropertySet data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Collections.PropertySet.MapChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)> MapChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.MapChangedEventHandler<string, object>, (global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.MapChanged += x, x => _data.MapChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.Collections.StringMap"/> class as observables.
    /// </summary>
    public class RxStringMapEvents
    {
        private readonly global::Windows.Foundation.Collections.StringMap _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.Collections.StringMap"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStringMapEvents(global::Windows.Foundation.Collections.StringMap data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Collections.StringMap.MapChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableMap<string, string> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)> MapChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.MapChangedEventHandler<string, string>, (global::Windows.Foundation.Collections.IObservableMap<string, string> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableMap<string, string> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.MapChanged += x, x => _data.MapChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.Collections.ValueSet"/> class as observables.
    /// </summary>
    public class RxValueSetEvents
    {
        private readonly global::Windows.Foundation.Collections.ValueSet _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.Collections.ValueSet"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxValueSetEvents(global::Windows.Foundation.Collections.ValueSet data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Collections.ValueSet.MapChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)> MapChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.MapChangedEventHandler<string, object>, (global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.MapChanged += x, x => _data.MapChanged -= x);
    }
}

namespace Windows.Foundation.Diagnostics
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Foundation.Diagnostics"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.FileLoggingSession"/> class.
        /// </summary>
        public static RxFileLoggingSessionEvents Events(this global::Windows.Foundation.Diagnostics.FileLoggingSession item) => new RxFileLoggingSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.IFileLoggingSession"/> class.
        /// </summary>
        public static RxIFileLoggingSessionEvents Events(this global::Windows.Foundation.Diagnostics.IFileLoggingSession item) => new RxIFileLoggingSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.ILoggingChannel"/> class.
        /// </summary>
        public static RxILoggingChannelEvents Events(this global::Windows.Foundation.Diagnostics.ILoggingChannel item) => new RxILoggingChannelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.LoggingChannel"/> class.
        /// </summary>
        public static RxLoggingChannelEvents Events(this global::Windows.Foundation.Diagnostics.LoggingChannel item) => new RxLoggingChannelEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.FileLoggingSession"/> class as observables.
    /// </summary>
    public class RxFileLoggingSessionEvents
    {
        private readonly global::Windows.Foundation.Diagnostics.FileLoggingSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.Diagnostics.FileLoggingSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileLoggingSessionEvents(global::Windows.Foundation.Diagnostics.FileLoggingSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Diagnostics.FileLoggingSession.LogFileGenerated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Diagnostics.IFileLoggingSession sender, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs args)> LogFileGenerated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Foundation.Diagnostics.IFileLoggingSession, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs>, (global::Windows.Foundation.Diagnostics.IFileLoggingSession sender, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Diagnostics.IFileLoggingSession sender, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LogFileGenerated += x, x => _data.LogFileGenerated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.IFileLoggingSession"/> class as observables.
    /// </summary>
    public class RxIFileLoggingSessionEvents
    {
        private readonly global::Windows.Foundation.Diagnostics.IFileLoggingSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.Diagnostics.IFileLoggingSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIFileLoggingSessionEvents(global::Windows.Foundation.Diagnostics.IFileLoggingSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Diagnostics.IFileLoggingSession.LogFileGenerated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Diagnostics.IFileLoggingSession sender, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs args)> LogFileGenerated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Foundation.Diagnostics.IFileLoggingSession, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs>, (global::Windows.Foundation.Diagnostics.IFileLoggingSession sender, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Diagnostics.IFileLoggingSession sender, global::Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LogFileGenerated += x, x => _data.LogFileGenerated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.ILoggingChannel"/> class as observables.
    /// </summary>
    public class RxILoggingChannelEvents
    {
        private readonly global::Windows.Foundation.Diagnostics.ILoggingChannel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.Diagnostics.ILoggingChannel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxILoggingChannelEvents(global::Windows.Foundation.Diagnostics.ILoggingChannel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Diagnostics.ILoggingChannel.LoggingEnabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Diagnostics.ILoggingChannel sender, object args)> LoggingEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Foundation.Diagnostics.ILoggingChannel, object>, (global::Windows.Foundation.Diagnostics.ILoggingChannel sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Diagnostics.ILoggingChannel sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LoggingEnabled += x, x => _data.LoggingEnabled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Foundation.Diagnostics.LoggingChannel"/> class as observables.
    /// </summary>
    public class RxLoggingChannelEvents
    {
        private readonly global::Windows.Foundation.Diagnostics.LoggingChannel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Foundation.Diagnostics.LoggingChannel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLoggingChannelEvents(global::Windows.Foundation.Diagnostics.LoggingChannel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Diagnostics.LoggingChannel.LoggingEnabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Diagnostics.ILoggingChannel sender, object args)> LoggingEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Foundation.Diagnostics.ILoggingChannel, object>, (global::Windows.Foundation.Diagnostics.ILoggingChannel sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Diagnostics.ILoggingChannel sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LoggingEnabled += x, x => _data.LoggingEnabled -= x);
    }
}

namespace Windows.Gaming.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Gaming.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Gaming.Input.ArcadeStick"/> class.
        /// </summary>
        public static RxArcadeStickEvents Events(this global::Windows.Gaming.Input.ArcadeStick item) => new RxArcadeStickEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Gaming.Input.FlightStick"/> class.
        /// </summary>
        public static RxFlightStickEvents Events(this global::Windows.Gaming.Input.FlightStick item) => new RxFlightStickEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Gaming.Input.Gamepad"/> class.
        /// </summary>
        public static RxGamepadEvents Events(this global::Windows.Gaming.Input.Gamepad item) => new RxGamepadEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Gaming.Input.IGameController"/> class.
        /// </summary>
        public static RxIGameControllerEvents Events(this global::Windows.Gaming.Input.IGameController item) => new RxIGameControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Gaming.Input.RacingWheel"/> class.
        /// </summary>
        public static RxRacingWheelEvents Events(this global::Windows.Gaming.Input.RacingWheel item) => new RxRacingWheelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Gaming.Input.RawGameController"/> class.
        /// </summary>
        public static RxRawGameControllerEvents Events(this global::Windows.Gaming.Input.RawGameController item) => new RxRawGameControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Gaming.Input.UINavigationController"/> class.
        /// </summary>
        public static RxUINavigationControllerEvents Events(this global::Windows.Gaming.Input.UINavigationController item) => new RxUINavigationControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Gaming.Input.ArcadeStick"/> class as observables.
    /// </summary>
    public class RxArcadeStickEvents
    {
        private readonly global::Windows.Gaming.Input.ArcadeStick _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Gaming.Input.ArcadeStick"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxArcadeStickEvents(global::Windows.Gaming.Input.ArcadeStick data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.ArcadeStick.HeadsetConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetConnected += x, x => _data.HeadsetConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.ArcadeStick.HeadsetDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetDisconnected += x, x => _data.HeadsetDisconnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.ArcadeStick.UserChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)> UserChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.System.UserChangedEventArgs>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserChanged += x, x => _data.UserChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Gaming.Input.FlightStick"/> class as observables.
    /// </summary>
    public class RxFlightStickEvents
    {
        private readonly global::Windows.Gaming.Input.FlightStick _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Gaming.Input.FlightStick"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFlightStickEvents(global::Windows.Gaming.Input.FlightStick data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.FlightStick.HeadsetConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetConnected += x, x => _data.HeadsetConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.FlightStick.HeadsetDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetDisconnected += x, x => _data.HeadsetDisconnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.FlightStick.UserChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)> UserChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.System.UserChangedEventArgs>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserChanged += x, x => _data.UserChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Gaming.Input.Gamepad"/> class as observables.
    /// </summary>
    public class RxGamepadEvents
    {
        private readonly global::Windows.Gaming.Input.Gamepad _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Gaming.Input.Gamepad"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGamepadEvents(global::Windows.Gaming.Input.Gamepad data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.Gamepad.HeadsetConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetConnected += x, x => _data.HeadsetConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.Gamepad.HeadsetDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetDisconnected += x, x => _data.HeadsetDisconnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.Gamepad.UserChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)> UserChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.System.UserChangedEventArgs>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserChanged += x, x => _data.UserChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Gaming.Input.IGameController"/> class as observables.
    /// </summary>
    public class RxIGameControllerEvents
    {
        private readonly global::Windows.Gaming.Input.IGameController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Gaming.Input.IGameController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIGameControllerEvents(global::Windows.Gaming.Input.IGameController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.IGameController.HeadsetConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetConnected += x, x => _data.HeadsetConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.IGameController.HeadsetDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetDisconnected += x, x => _data.HeadsetDisconnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.IGameController.UserChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)> UserChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.System.UserChangedEventArgs>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserChanged += x, x => _data.UserChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Gaming.Input.RacingWheel"/> class as observables.
    /// </summary>
    public class RxRacingWheelEvents
    {
        private readonly global::Windows.Gaming.Input.RacingWheel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Gaming.Input.RacingWheel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRacingWheelEvents(global::Windows.Gaming.Input.RacingWheel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RacingWheel.HeadsetConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetConnected += x, x => _data.HeadsetConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RacingWheel.HeadsetDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetDisconnected += x, x => _data.HeadsetDisconnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RacingWheel.UserChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)> UserChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.System.UserChangedEventArgs>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserChanged += x, x => _data.UserChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Gaming.Input.RawGameController"/> class as observables.
    /// </summary>
    public class RxRawGameControllerEvents
    {
        private readonly global::Windows.Gaming.Input.RawGameController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Gaming.Input.RawGameController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRawGameControllerEvents(global::Windows.Gaming.Input.RawGameController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RawGameController.HeadsetConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetConnected += x, x => _data.HeadsetConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RawGameController.HeadsetDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetDisconnected += x, x => _data.HeadsetDisconnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RawGameController.UserChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)> UserChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.System.UserChangedEventArgs>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserChanged += x, x => _data.UserChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Gaming.Input.UINavigationController"/> class as observables.
    /// </summary>
    public class RxUINavigationControllerEvents
    {
        private readonly global::Windows.Gaming.Input.UINavigationController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Gaming.Input.UINavigationController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUINavigationControllerEvents(global::Windows.Gaming.Input.UINavigationController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.UINavigationController.HeadsetConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetConnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetConnected += x, x => _data.HeadsetConnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.UINavigationController.HeadsetDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)> HeadsetDisconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.Gaming.Input.Headset>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.Gaming.Input.Headset args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadsetDisconnected += x, x => _data.HeadsetDisconnected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.UINavigationController.UserChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)> UserChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Gaming.Input.IGameController, global::Windows.System.UserChangedEventArgs>, (global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Gaming.Input.IGameController sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserChanged += x, x => _data.UserChanged -= x);
    }
}

namespace Windows.Graphics.Capture
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Graphics.Capture"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Capture.Direct3D11CaptureFramePool"/> class.
        /// </summary>
        public static RxDirect3D11CaptureFramePoolEvents Events(this global::Windows.Graphics.Capture.Direct3D11CaptureFramePool item) => new RxDirect3D11CaptureFramePoolEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Capture.GraphicsCaptureItem"/> class.
        /// </summary>
        public static RxGraphicsCaptureItemEvents Events(this global::Windows.Graphics.Capture.GraphicsCaptureItem item) => new RxGraphicsCaptureItemEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Capture.Direct3D11CaptureFramePool"/> class as observables.
    /// </summary>
    public class RxDirect3D11CaptureFramePoolEvents
    {
        private readonly global::Windows.Graphics.Capture.Direct3D11CaptureFramePool _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Capture.Direct3D11CaptureFramePool"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDirect3D11CaptureFramePoolEvents(global::Windows.Graphics.Capture.Direct3D11CaptureFramePool data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Capture.Direct3D11CaptureFramePool.FrameArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Capture.Direct3D11CaptureFramePool sender, object args)> FrameArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Capture.Direct3D11CaptureFramePool, object>, (global::Windows.Graphics.Capture.Direct3D11CaptureFramePool sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Capture.Direct3D11CaptureFramePool sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameArrived += x, x => _data.FrameArrived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Capture.GraphicsCaptureItem"/> class as observables.
    /// </summary>
    public class RxGraphicsCaptureItemEvents
    {
        private readonly global::Windows.Graphics.Capture.GraphicsCaptureItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Capture.GraphicsCaptureItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGraphicsCaptureItemEvents(global::Windows.Graphics.Capture.GraphicsCaptureItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Capture.GraphicsCaptureItem.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Capture.GraphicsCaptureItem sender, object args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Capture.GraphicsCaptureItem, object>, (global::Windows.Graphics.Capture.GraphicsCaptureItem sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Capture.GraphicsCaptureItem sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
    }
}

namespace Windows.Graphics.Display
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Graphics.Display"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Display.BrightnessOverride"/> class.
        /// </summary>
        public static RxBrightnessOverrideEvents Events(this global::Windows.Graphics.Display.BrightnessOverride item) => new RxBrightnessOverrideEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Display.DisplayEnhancementOverride"/> class.
        /// </summary>
        public static RxDisplayEnhancementOverrideEvents Events(this global::Windows.Graphics.Display.DisplayEnhancementOverride item) => new RxDisplayEnhancementOverrideEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Display.DisplayInformation"/> class.
        /// </summary>
        public static RxDisplayInformationEvents Events(this global::Windows.Graphics.Display.DisplayInformation item) => new RxDisplayInformationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Display.BrightnessOverride"/> class as observables.
    /// </summary>
    public class RxBrightnessOverrideEvents
    {
        private readonly global::Windows.Graphics.Display.BrightnessOverride _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Display.BrightnessOverride"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBrightnessOverrideEvents(global::Windows.Graphics.Display.BrightnessOverride data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.BrightnessOverride.BrightnessLevelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.BrightnessOverride sender, object args)> BrightnessLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.BrightnessOverride, object>, (global::Windows.Graphics.Display.BrightnessOverride sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.BrightnessOverride sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BrightnessLevelChanged += x, x => _data.BrightnessLevelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.BrightnessOverride.IsOverrideActiveChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.BrightnessOverride sender, object args)> IsOverrideActiveChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.BrightnessOverride, object>, (global::Windows.Graphics.Display.BrightnessOverride sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.BrightnessOverride sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsOverrideActiveChanged += x, x => _data.IsOverrideActiveChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.BrightnessOverride.IsSupportedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.BrightnessOverride sender, object args)> IsSupportedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.BrightnessOverride, object>, (global::Windows.Graphics.Display.BrightnessOverride sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.BrightnessOverride sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsSupportedChanged += x, x => _data.IsSupportedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Display.DisplayEnhancementOverride"/> class as observables.
    /// </summary>
    public class RxDisplayEnhancementOverrideEvents
    {
        private readonly global::Windows.Graphics.Display.DisplayEnhancementOverride _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Display.DisplayEnhancementOverride"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDisplayEnhancementOverrideEvents(global::Windows.Graphics.Display.DisplayEnhancementOverride data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayEnhancementOverride.CanOverrideChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayEnhancementOverride sender, object args)> CanOverrideChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayEnhancementOverride, object>, (global::Windows.Graphics.Display.DisplayEnhancementOverride sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayEnhancementOverride sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CanOverrideChanged += x, x => _data.CanOverrideChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayEnhancementOverride.DisplayEnhancementOverrideCapabilitiesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayEnhancementOverride sender, global::Windows.Graphics.Display.DisplayEnhancementOverrideCapabilitiesChangedEventArgs args)> DisplayEnhancementOverrideCapabilitiesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayEnhancementOverride, global::Windows.Graphics.Display.DisplayEnhancementOverrideCapabilitiesChangedEventArgs>, (global::Windows.Graphics.Display.DisplayEnhancementOverride sender, global::Windows.Graphics.Display.DisplayEnhancementOverrideCapabilitiesChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayEnhancementOverride sender, global::Windows.Graphics.Display.DisplayEnhancementOverrideCapabilitiesChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DisplayEnhancementOverrideCapabilitiesChanged += x, x => _data.DisplayEnhancementOverrideCapabilitiesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayEnhancementOverride.IsOverrideActiveChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayEnhancementOverride sender, object args)> IsOverrideActiveChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayEnhancementOverride, object>, (global::Windows.Graphics.Display.DisplayEnhancementOverride sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayEnhancementOverride sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsOverrideActiveChanged += x, x => _data.IsOverrideActiveChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Display.DisplayInformation"/> class as observables.
    /// </summary>
    public class RxDisplayInformationEvents
    {
        private readonly global::Windows.Graphics.Display.DisplayInformation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Display.DisplayInformation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDisplayInformationEvents(global::Windows.Graphics.Display.DisplayInformation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayInformation.AdvancedColorInfoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayInformation sender, object args)> AdvancedColorInfoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayInformation, object>, (global::Windows.Graphics.Display.DisplayInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AdvancedColorInfoChanged += x, x => _data.AdvancedColorInfoChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayInformation.ColorProfileChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayInformation sender, object args)> ColorProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayInformation, object>, (global::Windows.Graphics.Display.DisplayInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ColorProfileChanged += x, x => _data.ColorProfileChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayInformation.DpiChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayInformation sender, object args)> DpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayInformation, object>, (global::Windows.Graphics.Display.DisplayInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DpiChanged += x, x => _data.DpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayInformation.OrientationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayInformation sender, object args)> OrientationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayInformation, object>, (global::Windows.Graphics.Display.DisplayInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OrientationChanged += x, x => _data.OrientationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayInformation.StereoEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.DisplayInformation sender, object args)> StereoEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayInformation, object>, (global::Windows.Graphics.Display.DisplayInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StereoEnabledChanged += x, x => _data.StereoEnabledChanged -= x);
    }
}

namespace Windows.Graphics.Display.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Graphics.Display.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Display.Core.HdmiDisplayInformation"/> class.
        /// </summary>
        public static RxHdmiDisplayInformationEvents Events(this global::Windows.Graphics.Display.Core.HdmiDisplayInformation item) => new RxHdmiDisplayInformationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Display.Core.HdmiDisplayInformation"/> class as observables.
    /// </summary>
    public class RxHdmiDisplayInformationEvents
    {
        private readonly global::Windows.Graphics.Display.Core.HdmiDisplayInformation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Display.Core.HdmiDisplayInformation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHdmiDisplayInformationEvents(global::Windows.Graphics.Display.Core.HdmiDisplayInformation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.Core.HdmiDisplayInformation.DisplayModesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Display.Core.HdmiDisplayInformation sender, object args)> DisplayModesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.Core.HdmiDisplayInformation, object>, (global::Windows.Graphics.Display.Core.HdmiDisplayInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.Core.HdmiDisplayInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DisplayModesChanged += x, x => _data.DisplayModesChanged -= x);
    }
}

namespace Windows.Graphics.Holographic
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Graphics.Holographic"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Holographic.HolographicSpace"/> class.
        /// </summary>
        public static RxHolographicSpaceEvents Events(this global::Windows.Graphics.Holographic.HolographicSpace item) => new RxHolographicSpaceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Holographic.HolographicSpace"/> class as observables.
    /// </summary>
    public class RxHolographicSpaceEvents
    {
        private readonly global::Windows.Graphics.Holographic.HolographicSpace _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Holographic.HolographicSpace"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHolographicSpaceEvents(global::Windows.Graphics.Holographic.HolographicSpace data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Holographic.HolographicSpace.CameraAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Holographic.HolographicSpace sender, global::Windows.Graphics.Holographic.HolographicSpaceCameraAddedEventArgs args)> CameraAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Holographic.HolographicSpace, global::Windows.Graphics.Holographic.HolographicSpaceCameraAddedEventArgs>, (global::Windows.Graphics.Holographic.HolographicSpace sender, global::Windows.Graphics.Holographic.HolographicSpaceCameraAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Holographic.HolographicSpace sender, global::Windows.Graphics.Holographic.HolographicSpaceCameraAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CameraAdded += x, x => _data.CameraAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Holographic.HolographicSpace.CameraRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Holographic.HolographicSpace sender, global::Windows.Graphics.Holographic.HolographicSpaceCameraRemovedEventArgs args)> CameraRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Holographic.HolographicSpace, global::Windows.Graphics.Holographic.HolographicSpaceCameraRemovedEventArgs>, (global::Windows.Graphics.Holographic.HolographicSpace sender, global::Windows.Graphics.Holographic.HolographicSpaceCameraRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Holographic.HolographicSpace sender, global::Windows.Graphics.Holographic.HolographicSpaceCameraRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CameraRemoved += x, x => _data.CameraRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Holographic.HolographicSpace.UserPresenceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Holographic.HolographicSpace sender, object args)> UserPresenceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Holographic.HolographicSpace, object>, (global::Windows.Graphics.Holographic.HolographicSpace sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Holographic.HolographicSpace sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UserPresenceChanged += x, x => _data.UserPresenceChanged -= x);
    }
}

namespace Windows.Graphics.Printing
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Graphics.Printing"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Printing.PrintManager"/> class.
        /// </summary>
        public static RxPrintManagerEvents Events(this global::Windows.Graphics.Printing.PrintManager item) => new RxPrintManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Printing.PrintTask"/> class.
        /// </summary>
        public static RxPrintTaskEvents Events(this global::Windows.Graphics.Printing.PrintTask item) => new RxPrintTaskEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Printing.PrintManager"/> class as observables.
    /// </summary>
    public class RxPrintManagerEvents
    {
        private readonly global::Windows.Graphics.Printing.PrintManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Printing.PrintManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintManagerEvents(global::Windows.Graphics.Printing.PrintManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.PrintManager.PrintTaskRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.PrintManager sender, global::Windows.Graphics.Printing.PrintTaskRequestedEventArgs args)> PrintTaskRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.PrintManager, global::Windows.Graphics.Printing.PrintTaskRequestedEventArgs>, (global::Windows.Graphics.Printing.PrintManager sender, global::Windows.Graphics.Printing.PrintTaskRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.PrintManager sender, global::Windows.Graphics.Printing.PrintTaskRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PrintTaskRequested += x, x => _data.PrintTaskRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Printing.PrintTask"/> class as observables.
    /// </summary>
    public class RxPrintTaskEvents
    {
        private readonly global::Windows.Graphics.Printing.PrintTask _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Printing.PrintTask"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintTaskEvents(global::Windows.Graphics.Printing.PrintTask data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.PrintTask.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.PrintTask sender, global::Windows.Graphics.Printing.PrintTaskCompletedEventArgs args)> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.PrintTask, global::Windows.Graphics.Printing.PrintTaskCompletedEventArgs>, (global::Windows.Graphics.Printing.PrintTask sender, global::Windows.Graphics.Printing.PrintTaskCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.PrintTask sender, global::Windows.Graphics.Printing.PrintTaskCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.PrintTask.Previewing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.PrintTask sender, object args)> Previewing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.PrintTask, object>, (global::Windows.Graphics.Printing.PrintTask sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.PrintTask sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Previewing += x, x => _data.Previewing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.PrintTask.Progressing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.PrintTask sender, global::Windows.Graphics.Printing.PrintTaskProgressingEventArgs args)> Progressing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.PrintTask, global::Windows.Graphics.Printing.PrintTaskProgressingEventArgs>, (global::Windows.Graphics.Printing.PrintTask sender, global::Windows.Graphics.Printing.PrintTaskProgressingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.PrintTask sender, global::Windows.Graphics.Printing.PrintTaskProgressingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Progressing += x, x => _data.Progressing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.PrintTask.Submitting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.PrintTask sender, object args)> Submitting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.PrintTask, object>, (global::Windows.Graphics.Printing.PrintTask sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.PrintTask sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Submitting += x, x => _data.Submitting -= x);
    }
}

namespace Windows.Graphics.Printing.OptionDetails
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Graphics.Printing.OptionDetails"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails"/> class.
        /// </summary>
        public static RxPrintTaskOptionDetailsEvents Events(this global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails item) => new RxPrintTaskOptionDetailsEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails"/> class as observables.
    /// </summary>
    public class RxPrintTaskOptionDetailsEvents
    {
        private readonly global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintTaskOptionDetailsEvents(global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails.BeginValidation"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails sender, object args)> BeginValidation => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails, object>, (global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BeginValidation += x, x => _data.BeginValidation -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails.OptionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails sender, global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionChangedEventArgs args)> OptionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails, global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionChangedEventArgs>, (global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails sender, global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails sender, global::Windows.Graphics.Printing.OptionDetails.PrintTaskOptionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OptionChanged += x, x => _data.OptionChanged -= x);
    }
}

namespace Windows.Graphics.Printing.Workflow
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Graphics.Printing.Workflow"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession"/> class.
        /// </summary>
        public static RxPrintWorkflowBackgroundSessionEvents Events(this global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession item) => new RxPrintWorkflowBackgroundSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession"/> class.
        /// </summary>
        public static RxPrintWorkflowForegroundSessionEvents Events(this global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession item) => new RxPrintWorkflowForegroundSessionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession"/> class as observables.
    /// </summary>
    public class RxPrintWorkflowBackgroundSessionEvents
    {
        private readonly global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintWorkflowBackgroundSessionEvents(global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession.SetupRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSetupRequestedEventArgs args)> SetupRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession, global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSetupRequestedEventArgs>, (global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSetupRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSetupRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SetupRequested += x, x => _data.SetupRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession.Submitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedEventArgs args)> Submitted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession, global::Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedEventArgs>, (global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Submitted += x, x => _data.Submitted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession"/> class as observables.
    /// </summary>
    public class RxPrintWorkflowForegroundSessionEvents
    {
        private readonly global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintWorkflowForegroundSessionEvents(global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession.SetupRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSetupRequestedEventArgs args)> SetupRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession, global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSetupRequestedEventArgs>, (global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSetupRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSetupRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SetupRequested += x, x => _data.SetupRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession.XpsDataAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowXpsDataAvailableEventArgs args)> XpsDataAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession, global::Windows.Graphics.Printing.Workflow.PrintWorkflowXpsDataAvailableEventArgs>, (global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowXpsDataAvailableEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession sender, global::Windows.Graphics.Printing.Workflow.PrintWorkflowXpsDataAvailableEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.XpsDataAvailable += x, x => _data.XpsDataAvailable -= x);
    }
}

namespace Windows.Management.Policies
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Management.Policies"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Management.Policies.NamedPolicyData"/> class.
        /// </summary>
        public static RxNamedPolicyDataEvents Events(this global::Windows.Management.Policies.NamedPolicyData item) => new RxNamedPolicyDataEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Management.Policies.NamedPolicyData"/> class as observables.
    /// </summary>
    public class RxNamedPolicyDataEvents
    {
        private readonly global::Windows.Management.Policies.NamedPolicyData _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Management.Policies.NamedPolicyData"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNamedPolicyDataEvents(global::Windows.Management.Policies.NamedPolicyData data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Management.Policies.NamedPolicyData.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Management.Policies.NamedPolicyData sender, object args)> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Management.Policies.NamedPolicyData, object>, (global::Windows.Management.Policies.NamedPolicyData sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Management.Policies.NamedPolicyData sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
    }
}

namespace Windows.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.MediaTimelineController"/> class.
        /// </summary>
        public static RxMediaTimelineControllerEvents Events(this global::Windows.Media.MediaTimelineController item) => new RxMediaTimelineControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.SystemMediaTransportControls"/> class.
        /// </summary>
        public static RxSystemMediaTransportControlsEvents Events(this global::Windows.Media.SystemMediaTransportControls item) => new RxSystemMediaTransportControlsEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.MediaTimelineController"/> class as observables.
    /// </summary>
    public class RxMediaTimelineControllerEvents
    {
        private readonly global::Windows.Media.MediaTimelineController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.MediaTimelineController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaTimelineControllerEvents(global::Windows.Media.MediaTimelineController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.MediaTimelineController.Ended"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.MediaTimelineController sender, object args)> Ended => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.MediaTimelineController, object>, (global::Windows.Media.MediaTimelineController sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.MediaTimelineController sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Ended += x, x => _data.Ended -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.MediaTimelineController.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.MediaTimelineController sender, global::Windows.Media.MediaTimelineControllerFailedEventArgs args)> Failed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.MediaTimelineController, global::Windows.Media.MediaTimelineControllerFailedEventArgs>, (global::Windows.Media.MediaTimelineController sender, global::Windows.Media.MediaTimelineControllerFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.MediaTimelineController sender, global::Windows.Media.MediaTimelineControllerFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Failed += x, x => _data.Failed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.MediaTimelineController.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.MediaTimelineController sender, object args)> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.MediaTimelineController, object>, (global::Windows.Media.MediaTimelineController sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.MediaTimelineController sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.MediaTimelineController.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.MediaTimelineController sender, object args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.MediaTimelineController, object>, (global::Windows.Media.MediaTimelineController sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.MediaTimelineController sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.SystemMediaTransportControls"/> class as observables.
    /// </summary>
    public class RxSystemMediaTransportControlsEvents
    {
        private readonly global::Windows.Media.SystemMediaTransportControls _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.SystemMediaTransportControls"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSystemMediaTransportControlsEvents(global::Windows.Media.SystemMediaTransportControls data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SystemMediaTransportControls.AutoRepeatModeChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.AutoRepeatModeChangeRequestedEventArgs args)> AutoRepeatModeChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SystemMediaTransportControls, global::Windows.Media.AutoRepeatModeChangeRequestedEventArgs>, (global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.AutoRepeatModeChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.AutoRepeatModeChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AutoRepeatModeChangeRequested += x, x => _data.AutoRepeatModeChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SystemMediaTransportControls.ButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs args)> ButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SystemMediaTransportControls, global::Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs>, (global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ButtonPressed += x, x => _data.ButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SystemMediaTransportControls.PlaybackPositionChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.PlaybackPositionChangeRequestedEventArgs args)> PlaybackPositionChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SystemMediaTransportControls, global::Windows.Media.PlaybackPositionChangeRequestedEventArgs>, (global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.PlaybackPositionChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.PlaybackPositionChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackPositionChangeRequested += x, x => _data.PlaybackPositionChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SystemMediaTransportControls.PlaybackRateChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.PlaybackRateChangeRequestedEventArgs args)> PlaybackRateChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SystemMediaTransportControls, global::Windows.Media.PlaybackRateChangeRequestedEventArgs>, (global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.PlaybackRateChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.PlaybackRateChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackRateChangeRequested += x, x => _data.PlaybackRateChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SystemMediaTransportControls.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs args)> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SystemMediaTransportControls, global::Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs>, (global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SystemMediaTransportControls.ShuffleEnabledChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.ShuffleEnabledChangeRequestedEventArgs args)> ShuffleEnabledChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SystemMediaTransportControls, global::Windows.Media.ShuffleEnabledChangeRequestedEventArgs>, (global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.ShuffleEnabledChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SystemMediaTransportControls sender, global::Windows.Media.ShuffleEnabledChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ShuffleEnabledChangeRequested += x, x => _data.ShuffleEnabledChangeRequested -= x);
    }
}

namespace Windows.Media.Audio
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Audio"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Audio.AudioFileInputNode"/> class.
        /// </summary>
        public static RxAudioFileInputNodeEvents Events(this global::Windows.Media.Audio.AudioFileInputNode item) => new RxAudioFileInputNodeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Audio.AudioFrameInputNode"/> class.
        /// </summary>
        public static RxAudioFrameInputNodeEvents Events(this global::Windows.Media.Audio.AudioFrameInputNode item) => new RxAudioFrameInputNodeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Audio.AudioGraph"/> class.
        /// </summary>
        public static RxAudioGraphEvents Events(this global::Windows.Media.Audio.AudioGraph item) => new RxAudioGraphEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Audio.AudioStateMonitor"/> class.
        /// </summary>
        public static RxAudioStateMonitorEvents Events(this global::Windows.Media.Audio.AudioStateMonitor item) => new RxAudioStateMonitorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Audio.MediaSourceAudioInputNode"/> class.
        /// </summary>
        public static RxMediaSourceAudioInputNodeEvents Events(this global::Windows.Media.Audio.MediaSourceAudioInputNode item) => new RxMediaSourceAudioInputNodeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Audio.SpatialAudioDeviceConfiguration"/> class.
        /// </summary>
        public static RxSpatialAudioDeviceConfigurationEvents Events(this global::Windows.Media.Audio.SpatialAudioDeviceConfiguration item) => new RxSpatialAudioDeviceConfigurationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Audio.AudioFileInputNode"/> class as observables.
    /// </summary>
    public class RxAudioFileInputNodeEvents
    {
        private readonly global::Windows.Media.Audio.AudioFileInputNode _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Audio.AudioFileInputNode"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioFileInputNodeEvents(global::Windows.Media.Audio.AudioFileInputNode data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.AudioFileInputNode.FileCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.AudioFileInputNode sender, object args)> FileCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.AudioFileInputNode, object>, (global::Windows.Media.Audio.AudioFileInputNode sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.AudioFileInputNode sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FileCompleted += x, x => _data.FileCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Audio.AudioFrameInputNode"/> class as observables.
    /// </summary>
    public class RxAudioFrameInputNodeEvents
    {
        private readonly global::Windows.Media.Audio.AudioFrameInputNode _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Audio.AudioFrameInputNode"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioFrameInputNodeEvents(global::Windows.Media.Audio.AudioFrameInputNode data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.AudioFrameInputNode.AudioFrameCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.AudioFrameInputNode sender, global::Windows.Media.Audio.AudioFrameCompletedEventArgs args)> AudioFrameCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.AudioFrameInputNode, global::Windows.Media.Audio.AudioFrameCompletedEventArgs>, (global::Windows.Media.Audio.AudioFrameInputNode sender, global::Windows.Media.Audio.AudioFrameCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.AudioFrameInputNode sender, global::Windows.Media.Audio.AudioFrameCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AudioFrameCompleted += x, x => _data.AudioFrameCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.AudioFrameInputNode.QuantumStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.AudioFrameInputNode sender, global::Windows.Media.Audio.FrameInputNodeQuantumStartedEventArgs args)> QuantumStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.AudioFrameInputNode, global::Windows.Media.Audio.FrameInputNodeQuantumStartedEventArgs>, (global::Windows.Media.Audio.AudioFrameInputNode sender, global::Windows.Media.Audio.FrameInputNodeQuantumStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.AudioFrameInputNode sender, global::Windows.Media.Audio.FrameInputNodeQuantumStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.QuantumStarted += x, x => _data.QuantumStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Audio.AudioGraph"/> class as observables.
    /// </summary>
    public class RxAudioGraphEvents
    {
        private readonly global::Windows.Media.Audio.AudioGraph _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Audio.AudioGraph"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioGraphEvents(global::Windows.Media.Audio.AudioGraph data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.AudioGraph.QuantumProcessed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.AudioGraph sender, object args)> QuantumProcessed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.AudioGraph, object>, (global::Windows.Media.Audio.AudioGraph sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.AudioGraph sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.QuantumProcessed += x, x => _data.QuantumProcessed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.AudioGraph.QuantumStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.AudioGraph sender, object args)> QuantumStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.AudioGraph, object>, (global::Windows.Media.Audio.AudioGraph sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.AudioGraph sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.QuantumStarted += x, x => _data.QuantumStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.AudioGraph.UnrecoverableErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.AudioGraph sender, global::Windows.Media.Audio.AudioGraphUnrecoverableErrorOccurredEventArgs args)> UnrecoverableErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.AudioGraph, global::Windows.Media.Audio.AudioGraphUnrecoverableErrorOccurredEventArgs>, (global::Windows.Media.Audio.AudioGraph sender, global::Windows.Media.Audio.AudioGraphUnrecoverableErrorOccurredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.AudioGraph sender, global::Windows.Media.Audio.AudioGraphUnrecoverableErrorOccurredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnrecoverableErrorOccurred += x, x => _data.UnrecoverableErrorOccurred -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Audio.AudioStateMonitor"/> class as observables.
    /// </summary>
    public class RxAudioStateMonitorEvents
    {
        private readonly global::Windows.Media.Audio.AudioStateMonitor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Audio.AudioStateMonitor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioStateMonitorEvents(global::Windows.Media.Audio.AudioStateMonitor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.AudioStateMonitor.SoundLevelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.AudioStateMonitor sender, object args)> SoundLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.AudioStateMonitor, object>, (global::Windows.Media.Audio.AudioStateMonitor sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.AudioStateMonitor sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SoundLevelChanged += x, x => _data.SoundLevelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Audio.MediaSourceAudioInputNode"/> class as observables.
    /// </summary>
    public class RxMediaSourceAudioInputNodeEvents
    {
        private readonly global::Windows.Media.Audio.MediaSourceAudioInputNode _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Audio.MediaSourceAudioInputNode"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaSourceAudioInputNodeEvents(global::Windows.Media.Audio.MediaSourceAudioInputNode data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.MediaSourceAudioInputNode.MediaSourceCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.MediaSourceAudioInputNode sender, object args)> MediaSourceCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.MediaSourceAudioInputNode, object>, (global::Windows.Media.Audio.MediaSourceAudioInputNode sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.MediaSourceAudioInputNode sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MediaSourceCompleted += x, x => _data.MediaSourceCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Audio.SpatialAudioDeviceConfiguration"/> class as observables.
    /// </summary>
    public class RxSpatialAudioDeviceConfigurationEvents
    {
        private readonly global::Windows.Media.Audio.SpatialAudioDeviceConfiguration _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Audio.SpatialAudioDeviceConfiguration"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpatialAudioDeviceConfigurationEvents(global::Windows.Media.Audio.SpatialAudioDeviceConfiguration data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Audio.SpatialAudioDeviceConfiguration.ConfigurationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Audio.SpatialAudioDeviceConfiguration sender, object args)> ConfigurationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Audio.SpatialAudioDeviceConfiguration, object>, (global::Windows.Media.Audio.SpatialAudioDeviceConfiguration sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Audio.SpatialAudioDeviceConfiguration sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ConfigurationChanged += x, x => _data.ConfigurationChanged -= x);
    }
}

namespace Windows.Media.Capture
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Capture"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.AdvancedPhotoCapture"/> class.
        /// </summary>
        public static RxAdvancedPhotoCaptureEvents Events(this global::Windows.Media.Capture.AdvancedPhotoCapture item) => new RxAdvancedPhotoCaptureEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.AppCapture"/> class.
        /// </summary>
        public static RxAppCaptureEvents Events(this global::Windows.Media.Capture.AppCapture item) => new RxAppCaptureEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.LowLagPhotoSequenceCapture"/> class.
        /// </summary>
        public static RxLowLagPhotoSequenceCaptureEvents Events(this global::Windows.Media.Capture.LowLagPhotoSequenceCapture item) => new RxLowLagPhotoSequenceCaptureEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.MediaCapture"/> class.
        /// </summary>
        public static RxMediaCaptureEvents Events(this global::Windows.Media.Capture.MediaCapture item) => new RxMediaCaptureEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.ScreenCapture"/> class.
        /// </summary>
        public static RxScreenCaptureEvents Events(this global::Windows.Media.Capture.ScreenCapture item) => new RxScreenCaptureEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.AdvancedPhotoCapture"/> class as observables.
    /// </summary>
    public class RxAdvancedPhotoCaptureEvents
    {
        private readonly global::Windows.Media.Capture.AdvancedPhotoCapture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.AdvancedPhotoCapture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAdvancedPhotoCaptureEvents(global::Windows.Media.Capture.AdvancedPhotoCapture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.AdvancedPhotoCapture.AllPhotosCaptured"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.AdvancedPhotoCapture sender, object args)> AllPhotosCaptured => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.AdvancedPhotoCapture, object>, (global::Windows.Media.Capture.AdvancedPhotoCapture sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.AdvancedPhotoCapture sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AllPhotosCaptured += x, x => _data.AllPhotosCaptured -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.AdvancedPhotoCapture.OptionalReferencePhotoCaptured"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.AdvancedPhotoCapture sender, global::Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs args)> OptionalReferencePhotoCaptured => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.AdvancedPhotoCapture, global::Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs>, (global::Windows.Media.Capture.AdvancedPhotoCapture sender, global::Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.AdvancedPhotoCapture sender, global::Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OptionalReferencePhotoCaptured += x, x => _data.OptionalReferencePhotoCaptured -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.AppCapture"/> class as observables.
    /// </summary>
    public class RxAppCaptureEvents
    {
        private readonly global::Windows.Media.Capture.AppCapture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.AppCapture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppCaptureEvents(global::Windows.Media.Capture.AppCapture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.AppCapture.CapturingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.AppCapture sender, object args)> CapturingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.AppCapture, object>, (global::Windows.Media.Capture.AppCapture sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.AppCapture sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CapturingChanged += x, x => _data.CapturingChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.LowLagPhotoSequenceCapture"/> class as observables.
    /// </summary>
    public class RxLowLagPhotoSequenceCaptureEvents
    {
        private readonly global::Windows.Media.Capture.LowLagPhotoSequenceCapture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.LowLagPhotoSequenceCapture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLowLagPhotoSequenceCaptureEvents(global::Windows.Media.Capture.LowLagPhotoSequenceCapture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.LowLagPhotoSequenceCapture.PhotoCaptured"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.LowLagPhotoSequenceCapture sender, global::Windows.Media.Capture.PhotoCapturedEventArgs args)> PhotoCaptured => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.LowLagPhotoSequenceCapture, global::Windows.Media.Capture.PhotoCapturedEventArgs>, (global::Windows.Media.Capture.LowLagPhotoSequenceCapture sender, global::Windows.Media.Capture.PhotoCapturedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.LowLagPhotoSequenceCapture sender, global::Windows.Media.Capture.PhotoCapturedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PhotoCaptured += x, x => _data.PhotoCaptured -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.MediaCapture"/> class as observables.
    /// </summary>
    public class RxMediaCaptureEvents
    {
        private readonly global::Windows.Media.Capture.MediaCapture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.MediaCapture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaCaptureEvents(global::Windows.Media.Capture.MediaCapture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.MediaCapture.CameraStreamStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.MediaCapture sender, object args)> CameraStreamStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.MediaCapture, object>, (global::Windows.Media.Capture.MediaCapture sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.MediaCapture sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CameraStreamStateChanged += x, x => _data.CameraStreamStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.MediaCapture.CaptureDeviceExclusiveControlStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatusChangedEventArgs args)> CaptureDeviceExclusiveControlStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.MediaCapture, global::Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatusChangedEventArgs>, (global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CaptureDeviceExclusiveControlStatusChanged += x, x => _data.CaptureDeviceExclusiveControlStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.MediaCapture.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureFailedEventArgs errorEventArgs)> Failed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Media.Capture.MediaCaptureFailedEventHandler, (global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureFailedEventArgs errorEventArgs)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureFailedEventArgs errorEventArgs) => eventHandler((sender, errorEventArgs));
            return Handler;
        }

        , x => _data.Failed += x, x => _data.Failed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.MediaCapture.FocusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureFocusChangedEventArgs args)> FocusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.MediaCapture, global::Windows.Media.Capture.MediaCaptureFocusChangedEventArgs>, (global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureFocusChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.MediaCaptureFocusChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FocusChanged += x, x => _data.FocusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.MediaCapture.PhotoConfirmationCaptured"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.PhotoConfirmationCapturedEventArgs args)> PhotoConfirmationCaptured => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.MediaCapture, global::Windows.Media.Capture.PhotoConfirmationCapturedEventArgs>, (global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.PhotoConfirmationCapturedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.MediaCapture sender, global::Windows.Media.Capture.PhotoConfirmationCapturedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PhotoConfirmationCaptured += x, x => _data.PhotoConfirmationCaptured -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.MediaCapture.RecordLimitationExceeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Media.Capture.MediaCapture> RecordLimitationExceeded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Media.Capture.RecordLimitationExceededEventHandler, global::Windows.Media.Capture.MediaCapture>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.MediaCapture sender) => eventHandler(sender);
            return Handler;
        }

        , x => _data.RecordLimitationExceeded += x, x => _data.RecordLimitationExceeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.MediaCapture.ThermalStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.MediaCapture sender, object args)> ThermalStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.MediaCapture, object>, (global::Windows.Media.Capture.MediaCapture sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.MediaCapture sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ThermalStatusChanged += x, x => _data.ThermalStatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.ScreenCapture"/> class as observables.
    /// </summary>
    public class RxScreenCaptureEvents
    {
        private readonly global::Windows.Media.Capture.ScreenCapture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.ScreenCapture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScreenCaptureEvents(global::Windows.Media.Capture.ScreenCapture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.ScreenCapture.SourceSuspensionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.ScreenCapture sender, global::Windows.Media.Capture.SourceSuspensionChangedEventArgs args)> SourceSuspensionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.ScreenCapture, global::Windows.Media.Capture.SourceSuspensionChangedEventArgs>, (global::Windows.Media.Capture.ScreenCapture sender, global::Windows.Media.Capture.SourceSuspensionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.ScreenCapture sender, global::Windows.Media.Capture.SourceSuspensionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceSuspensionChanged += x, x => _data.SourceSuspensionChanged -= x);
    }
}

namespace Windows.Media.Capture.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Capture.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture"/> class.
        /// </summary>
        public static RxVariablePhotoSequenceCaptureEvents Events(this global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture item) => new RxVariablePhotoSequenceCaptureEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture"/> class as observables.
    /// </summary>
    public class RxVariablePhotoSequenceCaptureEvents
    {
        private readonly global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVariablePhotoSequenceCaptureEvents(global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture.PhotoCaptured"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture sender, global::Windows.Media.Capture.Core.VariablePhotoCapturedEventArgs args)> PhotoCaptured => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture, global::Windows.Media.Capture.Core.VariablePhotoCapturedEventArgs>, (global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture sender, global::Windows.Media.Capture.Core.VariablePhotoCapturedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture sender, global::Windows.Media.Capture.Core.VariablePhotoCapturedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PhotoCaptured += x, x => _data.PhotoCaptured -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture, object>, (global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.Core.VariablePhotoSequenceCapture sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }
}

namespace Windows.Media.Capture.Frames
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Capture.Frames"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameReader"/> class.
        /// </summary>
        public static RxMediaFrameReaderEvents Events(this global::Windows.Media.Capture.Frames.MediaFrameReader item) => new RxMediaFrameReaderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameSource"/> class.
        /// </summary>
        public static RxMediaFrameSourceEvents Events(this global::Windows.Media.Capture.Frames.MediaFrameSource item) => new RxMediaFrameSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader"/> class.
        /// </summary>
        public static RxMultiSourceMediaFrameReaderEvents Events(this global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader item) => new RxMultiSourceMediaFrameReaderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameReader"/> class as observables.
    /// </summary>
    public class RxMediaFrameReaderEvents
    {
        private readonly global::Windows.Media.Capture.Frames.MediaFrameReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaFrameReaderEvents(global::Windows.Media.Capture.Frames.MediaFrameReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameReader.FrameArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.Frames.MediaFrameReader sender, global::Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs args)> FrameArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.Frames.MediaFrameReader, global::Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs>, (global::Windows.Media.Capture.Frames.MediaFrameReader sender, global::Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.Frames.MediaFrameReader sender, global::Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameArrived += x, x => _data.FrameArrived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameSource"/> class as observables.
    /// </summary>
    public class RxMediaFrameSourceEvents
    {
        private readonly global::Windows.Media.Capture.Frames.MediaFrameSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaFrameSourceEvents(global::Windows.Media.Capture.Frames.MediaFrameSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.Frames.MediaFrameSource.FormatChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.Frames.MediaFrameSource sender, object args)> FormatChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.Frames.MediaFrameSource, object>, (global::Windows.Media.Capture.Frames.MediaFrameSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.Frames.MediaFrameSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FormatChanged += x, x => _data.FormatChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader"/> class as observables.
    /// </summary>
    public class RxMultiSourceMediaFrameReaderEvents
    {
        private readonly global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMultiSourceMediaFrameReaderEvents(global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader.FrameArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader sender, global::Windows.Media.Capture.Frames.MultiSourceMediaFrameArrivedEventArgs args)> FrameArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader, global::Windows.Media.Capture.Frames.MultiSourceMediaFrameArrivedEventArgs>, (global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader sender, global::Windows.Media.Capture.Frames.MultiSourceMediaFrameArrivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Capture.Frames.MultiSourceMediaFrameReader sender, global::Windows.Media.Capture.Frames.MultiSourceMediaFrameArrivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameArrived += x, x => _data.FrameArrived -= x);
    }
}

namespace Windows.Media.Casting
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Casting"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Casting.CastingConnection"/> class.
        /// </summary>
        public static RxCastingConnectionEvents Events(this global::Windows.Media.Casting.CastingConnection item) => new RxCastingConnectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Casting.CastingDevicePicker"/> class.
        /// </summary>
        public static RxCastingDevicePickerEvents Events(this global::Windows.Media.Casting.CastingDevicePicker item) => new RxCastingDevicePickerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Casting.CastingConnection"/> class as observables.
    /// </summary>
    public class RxCastingConnectionEvents
    {
        private readonly global::Windows.Media.Casting.CastingConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Casting.CastingConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCastingConnectionEvents(global::Windows.Media.Casting.CastingConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Casting.CastingConnection.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Casting.CastingConnection sender, global::Windows.Media.Casting.CastingConnectionErrorOccurredEventArgs args)> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Casting.CastingConnection, global::Windows.Media.Casting.CastingConnectionErrorOccurredEventArgs>, (global::Windows.Media.Casting.CastingConnection sender, global::Windows.Media.Casting.CastingConnectionErrorOccurredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Casting.CastingConnection sender, global::Windows.Media.Casting.CastingConnectionErrorOccurredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Casting.CastingConnection.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Casting.CastingConnection sender, object args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Casting.CastingConnection, object>, (global::Windows.Media.Casting.CastingConnection sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Casting.CastingConnection sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Casting.CastingDevicePicker"/> class as observables.
    /// </summary>
    public class RxCastingDevicePickerEvents
    {
        private readonly global::Windows.Media.Casting.CastingDevicePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Casting.CastingDevicePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCastingDevicePickerEvents(global::Windows.Media.Casting.CastingDevicePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Casting.CastingDevicePicker.CastingDevicePickerDismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Casting.CastingDevicePicker sender, object args)> CastingDevicePickerDismissed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Casting.CastingDevicePicker, object>, (global::Windows.Media.Casting.CastingDevicePicker sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Casting.CastingDevicePicker sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CastingDevicePickerDismissed += x, x => _data.CastingDevicePickerDismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Casting.CastingDevicePicker.CastingDeviceSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Casting.CastingDevicePicker sender, global::Windows.Media.Casting.CastingDeviceSelectedEventArgs args)> CastingDeviceSelected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Casting.CastingDevicePicker, global::Windows.Media.Casting.CastingDeviceSelectedEventArgs>, (global::Windows.Media.Casting.CastingDevicePicker sender, global::Windows.Media.Casting.CastingDeviceSelectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Casting.CastingDevicePicker sender, global::Windows.Media.Casting.CastingDeviceSelectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CastingDeviceSelected += x, x => _data.CastingDeviceSelected -= x);
    }
}

namespace Windows.Media.ContentRestrictions
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.ContentRestrictions"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.ContentRestrictions.RatedContentRestrictions"/> class.
        /// </summary>
        public static RxRatedContentRestrictionsEvents Events(this global::Windows.Media.ContentRestrictions.RatedContentRestrictions item) => new RxRatedContentRestrictionsEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.ContentRestrictions.RatedContentRestrictions"/> class as observables.
    /// </summary>
    public class RxRatedContentRestrictionsEvents
    {
        private readonly global::Windows.Media.ContentRestrictions.RatedContentRestrictions _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.ContentRestrictions.RatedContentRestrictions"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRatedContentRestrictionsEvents(global::Windows.Media.ContentRestrictions.RatedContentRestrictions data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.ContentRestrictions.RatedContentRestrictions.RestrictionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> RestrictionsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RestrictionsChanged += x, x => _data.RestrictionsChanged -= x);
    }
}

namespace Windows.Media.Control
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Control"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession"/> class.
        /// </summary>
        public static RxGlobalSystemMediaTransportControlsSessionEvents Events(this global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession item) => new RxGlobalSystemMediaTransportControlsSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager"/> class.
        /// </summary>
        public static RxGlobalSystemMediaTransportControlsSessionManagerEvents Events(this global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager item) => new RxGlobalSystemMediaTransportControlsSessionManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession"/> class as observables.
    /// </summary>
    public class RxGlobalSystemMediaTransportControlsSessionEvents
    {
        private readonly global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGlobalSystemMediaTransportControlsSessionEvents(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession.MediaPropertiesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.MediaPropertiesChangedEventArgs args)> MediaPropertiesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession, global::Windows.Media.Control.MediaPropertiesChangedEventArgs>, (global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.MediaPropertiesChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.MediaPropertiesChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MediaPropertiesChanged += x, x => _data.MediaPropertiesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession.PlaybackInfoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.PlaybackInfoChangedEventArgs args)> PlaybackInfoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession, global::Windows.Media.Control.PlaybackInfoChangedEventArgs>, (global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.PlaybackInfoChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.PlaybackInfoChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackInfoChanged += x, x => _data.PlaybackInfoChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession.TimelinePropertiesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.TimelinePropertiesChangedEventArgs args)> TimelinePropertiesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession, global::Windows.Media.Control.TimelinePropertiesChangedEventArgs>, (global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.TimelinePropertiesChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSession sender, global::Windows.Media.Control.TimelinePropertiesChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TimelinePropertiesChanged += x, x => _data.TimelinePropertiesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager"/> class as observables.
    /// </summary>
    public class RxGlobalSystemMediaTransportControlsSessionManagerEvents
    {
        private readonly global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGlobalSystemMediaTransportControlsSessionManagerEvents(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager.CurrentSessionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager sender, global::Windows.Media.Control.CurrentSessionChangedEventArgs args)> CurrentSessionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager, global::Windows.Media.Control.CurrentSessionChangedEventArgs>, (global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager sender, global::Windows.Media.Control.CurrentSessionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager sender, global::Windows.Media.Control.CurrentSessionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CurrentSessionChanged += x, x => _data.CurrentSessionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager.SessionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager sender, global::Windows.Media.Control.SessionsChangedEventArgs args)> SessionsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager, global::Windows.Media.Control.SessionsChangedEventArgs>, (global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager sender, global::Windows.Media.Control.SessionsChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager sender, global::Windows.Media.Control.SessionsChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SessionsChanged += x, x => _data.SessionsChanged -= x);
    }
}

namespace Windows.Media.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.AudioTrack"/> class.
        /// </summary>
        public static RxAudioTrackEvents Events(this global::Windows.Media.Core.AudioTrack item) => new RxAudioTrackEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.FaceDetectionEffect"/> class.
        /// </summary>
        public static RxFaceDetectionEffectEvents Events(this global::Windows.Media.Core.FaceDetectionEffect item) => new RxFaceDetectionEffectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.ISingleSelectMediaTrackList"/> class.
        /// </summary>
        public static RxISingleSelectMediaTrackListEvents Events(this global::Windows.Media.Core.ISingleSelectMediaTrackList item) => new RxISingleSelectMediaTrackListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MediaBinder"/> class.
        /// </summary>
        public static RxMediaBinderEvents Events(this global::Windows.Media.Core.MediaBinder item) => new RxMediaBinderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MediaBindingEventArgs"/> class.
        /// </summary>
        public static RxMediaBindingEventArgsEvents Events(this global::Windows.Media.Core.MediaBindingEventArgs item) => new RxMediaBindingEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MediaSource"/> class.
        /// </summary>
        public static RxMediaSourceEvents Events(this global::Windows.Media.Core.MediaSource item) => new RxMediaSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MediaSourceAppServiceConnection"/> class.
        /// </summary>
        public static RxMediaSourceAppServiceConnectionEvents Events(this global::Windows.Media.Core.MediaSourceAppServiceConnection item) => new RxMediaSourceAppServiceConnectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MediaStreamSample"/> class.
        /// </summary>
        public static RxMediaStreamSampleEvents Events(this global::Windows.Media.Core.MediaStreamSample item) => new RxMediaStreamSampleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MediaStreamSource"/> class.
        /// </summary>
        public static RxMediaStreamSourceEvents Events(this global::Windows.Media.Core.MediaStreamSource item) => new RxMediaStreamSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MseSourceBuffer"/> class.
        /// </summary>
        public static RxMseSourceBufferEvents Events(this global::Windows.Media.Core.MseSourceBuffer item) => new RxMseSourceBufferEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MseSourceBufferList"/> class.
        /// </summary>
        public static RxMseSourceBufferListEvents Events(this global::Windows.Media.Core.MseSourceBufferList item) => new RxMseSourceBufferListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.MseStreamSource"/> class.
        /// </summary>
        public static RxMseStreamSourceEvents Events(this global::Windows.Media.Core.MseStreamSource item) => new RxMseStreamSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.SceneAnalysisEffect"/> class.
        /// </summary>
        public static RxSceneAnalysisEffectEvents Events(this global::Windows.Media.Core.SceneAnalysisEffect item) => new RxSceneAnalysisEffectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.TimedMetadataTrack"/> class.
        /// </summary>
        public static RxTimedMetadataTrackEvents Events(this global::Windows.Media.Core.TimedMetadataTrack item) => new RxTimedMetadataTrackEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.TimedTextSource"/> class.
        /// </summary>
        public static RxTimedTextSourceEvents Events(this global::Windows.Media.Core.TimedTextSource item) => new RxTimedTextSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.VideoStabilizationEffect"/> class.
        /// </summary>
        public static RxVideoStabilizationEffectEvents Events(this global::Windows.Media.Core.VideoStabilizationEffect item) => new RxVideoStabilizationEffectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Core.VideoTrack"/> class.
        /// </summary>
        public static RxVideoTrackEvents Events(this global::Windows.Media.Core.VideoTrack item) => new RxVideoTrackEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.AudioTrack"/> class as observables.
    /// </summary>
    public class RxAudioTrackEvents
    {
        private readonly global::Windows.Media.Core.AudioTrack _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.AudioTrack"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioTrackEvents(global::Windows.Media.Core.AudioTrack data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.AudioTrack.OpenFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.AudioTrack sender, global::Windows.Media.Core.AudioTrackOpenFailedEventArgs args)> OpenFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.AudioTrack, global::Windows.Media.Core.AudioTrackOpenFailedEventArgs>, (global::Windows.Media.Core.AudioTrack sender, global::Windows.Media.Core.AudioTrackOpenFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.AudioTrack sender, global::Windows.Media.Core.AudioTrackOpenFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OpenFailed += x, x => _data.OpenFailed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.FaceDetectionEffect"/> class as observables.
    /// </summary>
    public class RxFaceDetectionEffectEvents
    {
        private readonly global::Windows.Media.Core.FaceDetectionEffect _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.FaceDetectionEffect"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFaceDetectionEffectEvents(global::Windows.Media.Core.FaceDetectionEffect data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.FaceDetectionEffect.FaceDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.FaceDetectionEffect sender, global::Windows.Media.Core.FaceDetectedEventArgs args)> FaceDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.FaceDetectionEffect, global::Windows.Media.Core.FaceDetectedEventArgs>, (global::Windows.Media.Core.FaceDetectionEffect sender, global::Windows.Media.Core.FaceDetectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.FaceDetectionEffect sender, global::Windows.Media.Core.FaceDetectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FaceDetected += x, x => _data.FaceDetected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.ISingleSelectMediaTrackList"/> class as observables.
    /// </summary>
    public class RxISingleSelectMediaTrackListEvents
    {
        private readonly global::Windows.Media.Core.ISingleSelectMediaTrackList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.ISingleSelectMediaTrackList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxISingleSelectMediaTrackListEvents(global::Windows.Media.Core.ISingleSelectMediaTrackList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.ISingleSelectMediaTrackList.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args)> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.ISingleSelectMediaTrackList, object>, (global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MediaBinder"/> class as observables.
    /// </summary>
    public class RxMediaBinderEvents
    {
        private readonly global::Windows.Media.Core.MediaBinder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MediaBinder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaBinderEvents(global::Windows.Media.Core.MediaBinder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaBinder.Binding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaBinder sender, global::Windows.Media.Core.MediaBindingEventArgs args)> Binding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaBinder, global::Windows.Media.Core.MediaBindingEventArgs>, (global::Windows.Media.Core.MediaBinder sender, global::Windows.Media.Core.MediaBindingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaBinder sender, global::Windows.Media.Core.MediaBindingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Binding += x, x => _data.Binding -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MediaBindingEventArgs"/> class as observables.
    /// </summary>
    public class RxMediaBindingEventArgsEvents
    {
        private readonly global::Windows.Media.Core.MediaBindingEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MediaBindingEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaBindingEventArgsEvents(global::Windows.Media.Core.MediaBindingEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaBindingEventArgs.Canceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaBindingEventArgs sender, object args)> Canceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaBindingEventArgs, object>, (global::Windows.Media.Core.MediaBindingEventArgs sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaBindingEventArgs sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Canceled += x, x => _data.Canceled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MediaSource"/> class as observables.
    /// </summary>
    public class RxMediaSourceEvents
    {
        private readonly global::Windows.Media.Core.MediaSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MediaSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaSourceEvents(global::Windows.Media.Core.MediaSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaSource.OpenOperationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaSource sender, global::Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs args)> OpenOperationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaSource, global::Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs>, (global::Windows.Media.Core.MediaSource sender, global::Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaSource sender, global::Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OpenOperationCompleted += x, x => _data.OpenOperationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaSource.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaSource sender, global::Windows.Media.Core.MediaSourceStateChangedEventArgs args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaSource, global::Windows.Media.Core.MediaSourceStateChangedEventArgs>, (global::Windows.Media.Core.MediaSource sender, global::Windows.Media.Core.MediaSourceStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaSource sender, global::Windows.Media.Core.MediaSourceStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MediaSourceAppServiceConnection"/> class as observables.
    /// </summary>
    public class RxMediaSourceAppServiceConnectionEvents
    {
        private readonly global::Windows.Media.Core.MediaSourceAppServiceConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MediaSourceAppServiceConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaSourceAppServiceConnectionEvents(global::Windows.Media.Core.MediaSourceAppServiceConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaSourceAppServiceConnection.InitializeMediaStreamSourceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaSourceAppServiceConnection sender, global::Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs args)> InitializeMediaStreamSourceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaSourceAppServiceConnection, global::Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs>, (global::Windows.Media.Core.MediaSourceAppServiceConnection sender, global::Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaSourceAppServiceConnection sender, global::Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InitializeMediaStreamSourceRequested += x, x => _data.InitializeMediaStreamSourceRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MediaStreamSample"/> class as observables.
    /// </summary>
    public class RxMediaStreamSampleEvents
    {
        private readonly global::Windows.Media.Core.MediaStreamSample _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MediaStreamSample"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaStreamSampleEvents(global::Windows.Media.Core.MediaStreamSample data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaStreamSample.Processed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaStreamSample sender, object args)> Processed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaStreamSample, object>, (global::Windows.Media.Core.MediaStreamSample sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaStreamSample sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Processed += x, x => _data.Processed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MediaStreamSource"/> class as observables.
    /// </summary>
    public class RxMediaStreamSourceEvents
    {
        private readonly global::Windows.Media.Core.MediaStreamSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MediaStreamSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaStreamSourceEvents(global::Windows.Media.Core.MediaStreamSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaStreamSource.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaStreamSource, global::Windows.Media.Core.MediaStreamSourceClosedEventArgs>, (global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaStreamSource.Paused"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaStreamSource sender, object args)> Paused => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaStreamSource, object>, (global::Windows.Media.Core.MediaStreamSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaStreamSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Paused += x, x => _data.Paused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaStreamSource.SampleRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs args)> SampleRendered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaStreamSource, global::Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs>, (global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SampleRendered += x, x => _data.SampleRendered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaStreamSource.SampleRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs args)> SampleRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaStreamSource, global::Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs>, (global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SampleRequested += x, x => _data.SampleRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaStreamSource.Starting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceStartingEventArgs args)> Starting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaStreamSource, global::Windows.Media.Core.MediaStreamSourceStartingEventArgs>, (global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Starting += x, x => _data.Starting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MediaStreamSource.SwitchStreamsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs args)> SwitchStreamsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MediaStreamSource, global::Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs>, (global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MediaStreamSource sender, global::Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SwitchStreamsRequested += x, x => _data.SwitchStreamsRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MseSourceBuffer"/> class as observables.
    /// </summary>
    public class RxMseSourceBufferEvents
    {
        private readonly global::Windows.Media.Core.MseSourceBuffer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MseSourceBuffer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMseSourceBufferEvents(global::Windows.Media.Core.MseSourceBuffer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseSourceBuffer.Aborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseSourceBuffer sender, object args)> Aborted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseSourceBuffer, object>, (global::Windows.Media.Core.MseSourceBuffer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseSourceBuffer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Aborted += x, x => _data.Aborted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseSourceBuffer.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseSourceBuffer sender, object args)> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseSourceBuffer, object>, (global::Windows.Media.Core.MseSourceBuffer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseSourceBuffer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseSourceBuffer.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseSourceBuffer sender, object args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseSourceBuffer, object>, (global::Windows.Media.Core.MseSourceBuffer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseSourceBuffer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseSourceBuffer.UpdateEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseSourceBuffer sender, object args)> UpdateEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseSourceBuffer, object>, (global::Windows.Media.Core.MseSourceBuffer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseSourceBuffer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UpdateEnded += x, x => _data.UpdateEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseSourceBuffer.UpdateStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseSourceBuffer sender, object args)> UpdateStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseSourceBuffer, object>, (global::Windows.Media.Core.MseSourceBuffer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseSourceBuffer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UpdateStarting += x, x => _data.UpdateStarting -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MseSourceBufferList"/> class as observables.
    /// </summary>
    public class RxMseSourceBufferListEvents
    {
        private readonly global::Windows.Media.Core.MseSourceBufferList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MseSourceBufferList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMseSourceBufferListEvents(global::Windows.Media.Core.MseSourceBufferList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseSourceBufferList.SourceBufferAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseSourceBufferList sender, object args)> SourceBufferAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseSourceBufferList, object>, (global::Windows.Media.Core.MseSourceBufferList sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseSourceBufferList sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceBufferAdded += x, x => _data.SourceBufferAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseSourceBufferList.SourceBufferRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseSourceBufferList sender, object args)> SourceBufferRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseSourceBufferList, object>, (global::Windows.Media.Core.MseSourceBufferList sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseSourceBufferList sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceBufferRemoved += x, x => _data.SourceBufferRemoved -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.MseStreamSource"/> class as observables.
    /// </summary>
    public class RxMseStreamSourceEvents
    {
        private readonly global::Windows.Media.Core.MseStreamSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.MseStreamSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMseStreamSourceEvents(global::Windows.Media.Core.MseStreamSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseStreamSource.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseStreamSource sender, object args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseStreamSource, object>, (global::Windows.Media.Core.MseStreamSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseStreamSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseStreamSource.Ended"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseStreamSource sender, object args)> Ended => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseStreamSource, object>, (global::Windows.Media.Core.MseStreamSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseStreamSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Ended += x, x => _data.Ended -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.MseStreamSource.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.MseStreamSource sender, object args)> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.MseStreamSource, object>, (global::Windows.Media.Core.MseStreamSource sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.MseStreamSource sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.SceneAnalysisEffect"/> class as observables.
    /// </summary>
    public class RxSceneAnalysisEffectEvents
    {
        private readonly global::Windows.Media.Core.SceneAnalysisEffect _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.SceneAnalysisEffect"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSceneAnalysisEffectEvents(global::Windows.Media.Core.SceneAnalysisEffect data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.SceneAnalysisEffect.SceneAnalyzed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.SceneAnalysisEffect sender, global::Windows.Media.Core.SceneAnalyzedEventArgs args)> SceneAnalyzed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.SceneAnalysisEffect, global::Windows.Media.Core.SceneAnalyzedEventArgs>, (global::Windows.Media.Core.SceneAnalysisEffect sender, global::Windows.Media.Core.SceneAnalyzedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.SceneAnalysisEffect sender, global::Windows.Media.Core.SceneAnalyzedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SceneAnalyzed += x, x => _data.SceneAnalyzed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.TimedMetadataTrack"/> class as observables.
    /// </summary>
    public class RxTimedMetadataTrackEvents
    {
        private readonly global::Windows.Media.Core.TimedMetadataTrack _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.TimedMetadataTrack"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimedMetadataTrackEvents(global::Windows.Media.Core.TimedMetadataTrack data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.TimedMetadataTrack.CueEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.MediaCueEventArgs args)> CueEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.TimedMetadataTrack, global::Windows.Media.Core.MediaCueEventArgs>, (global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.MediaCueEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.MediaCueEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CueEntered += x, x => _data.CueEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.TimedMetadataTrack.CueExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.MediaCueEventArgs args)> CueExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.TimedMetadataTrack, global::Windows.Media.Core.MediaCueEventArgs>, (global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.MediaCueEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.MediaCueEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CueExited += x, x => _data.CueExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.TimedMetadataTrack.TrackFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.TimedMetadataTrackFailedEventArgs args)> TrackFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.TimedMetadataTrack, global::Windows.Media.Core.TimedMetadataTrackFailedEventArgs>, (global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.TimedMetadataTrackFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.TimedMetadataTrack sender, global::Windows.Media.Core.TimedMetadataTrackFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TrackFailed += x, x => _data.TrackFailed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.TimedTextSource"/> class as observables.
    /// </summary>
    public class RxTimedTextSourceEvents
    {
        private readonly global::Windows.Media.Core.TimedTextSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.TimedTextSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimedTextSourceEvents(global::Windows.Media.Core.TimedTextSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.TimedTextSource.Resolved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.TimedTextSource sender, global::Windows.Media.Core.TimedTextSourceResolveResultEventArgs args)> Resolved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.TimedTextSource, global::Windows.Media.Core.TimedTextSourceResolveResultEventArgs>, (global::Windows.Media.Core.TimedTextSource sender, global::Windows.Media.Core.TimedTextSourceResolveResultEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.TimedTextSource sender, global::Windows.Media.Core.TimedTextSourceResolveResultEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Resolved += x, x => _data.Resolved -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.VideoStabilizationEffect"/> class as observables.
    /// </summary>
    public class RxVideoStabilizationEffectEvents
    {
        private readonly global::Windows.Media.Core.VideoStabilizationEffect _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.VideoStabilizationEffect"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVideoStabilizationEffectEvents(global::Windows.Media.Core.VideoStabilizationEffect data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.VideoStabilizationEffect.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.VideoStabilizationEffect sender, global::Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs args)> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.VideoStabilizationEffect, global::Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs>, (global::Windows.Media.Core.VideoStabilizationEffect sender, global::Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.VideoStabilizationEffect sender, global::Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Core.VideoTrack"/> class as observables.
    /// </summary>
    public class RxVideoTrackEvents
    {
        private readonly global::Windows.Media.Core.VideoTrack _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Core.VideoTrack"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVideoTrackEvents(global::Windows.Media.Core.VideoTrack data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.VideoTrack.OpenFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.VideoTrack sender, global::Windows.Media.Core.VideoTrackOpenFailedEventArgs args)> OpenFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.VideoTrack, global::Windows.Media.Core.VideoTrackOpenFailedEventArgs>, (global::Windows.Media.Core.VideoTrack sender, global::Windows.Media.Core.VideoTrackOpenFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.VideoTrack sender, global::Windows.Media.Core.VideoTrackOpenFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OpenFailed += x, x => _data.OpenFailed -= x);
    }
}

namespace Windows.Media.Devices
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Devices"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Devices.AudioDeviceModulesManager"/> class.
        /// </summary>
        public static RxAudioDeviceModulesManagerEvents Events(this global::Windows.Media.Devices.AudioDeviceModulesManager item) => new RxAudioDeviceModulesManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Devices.AudioDeviceModulesManager"/> class as observables.
    /// </summary>
    public class RxAudioDeviceModulesManagerEvents
    {
        private readonly global::Windows.Media.Devices.AudioDeviceModulesManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Devices.AudioDeviceModulesManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioDeviceModulesManagerEvents(global::Windows.Media.Devices.AudioDeviceModulesManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Devices.AudioDeviceModulesManager.ModuleNotificationReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Devices.AudioDeviceModulesManager sender, global::Windows.Media.Devices.AudioDeviceModuleNotificationEventArgs args)> ModuleNotificationReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Devices.AudioDeviceModulesManager, global::Windows.Media.Devices.AudioDeviceModuleNotificationEventArgs>, (global::Windows.Media.Devices.AudioDeviceModulesManager sender, global::Windows.Media.Devices.AudioDeviceModuleNotificationEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Devices.AudioDeviceModulesManager sender, global::Windows.Media.Devices.AudioDeviceModuleNotificationEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ModuleNotificationReceived += x, x => _data.ModuleNotificationReceived -= x);
    }
}

namespace Windows.Media.DialProtocol
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.DialProtocol"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.DialProtocol.DialDevicePicker"/> class.
        /// </summary>
        public static RxDialDevicePickerEvents Events(this global::Windows.Media.DialProtocol.DialDevicePicker item) => new RxDialDevicePickerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.DialProtocol.DialDevicePicker"/> class as observables.
    /// </summary>
    public class RxDialDevicePickerEvents
    {
        private readonly global::Windows.Media.DialProtocol.DialDevicePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.DialProtocol.DialDevicePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDialDevicePickerEvents(global::Windows.Media.DialProtocol.DialDevicePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.DialProtocol.DialDevicePicker.DialDevicePickerDismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.DialProtocol.DialDevicePicker sender, object args)> DialDevicePickerDismissed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.DialProtocol.DialDevicePicker, object>, (global::Windows.Media.DialProtocol.DialDevicePicker sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.DialProtocol.DialDevicePicker sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DialDevicePickerDismissed += x, x => _data.DialDevicePickerDismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.DialProtocol.DialDevicePicker.DialDeviceSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.DialProtocol.DialDevicePicker sender, global::Windows.Media.DialProtocol.DialDeviceSelectedEventArgs args)> DialDeviceSelected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.DialProtocol.DialDevicePicker, global::Windows.Media.DialProtocol.DialDeviceSelectedEventArgs>, (global::Windows.Media.DialProtocol.DialDevicePicker sender, global::Windows.Media.DialProtocol.DialDeviceSelectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.DialProtocol.DialDevicePicker sender, global::Windows.Media.DialProtocol.DialDeviceSelectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DialDeviceSelected += x, x => _data.DialDeviceSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.DialProtocol.DialDevicePicker.DisconnectButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.DialProtocol.DialDevicePicker sender, global::Windows.Media.DialProtocol.DialDisconnectButtonClickedEventArgs args)> DisconnectButtonClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.DialProtocol.DialDevicePicker, global::Windows.Media.DialProtocol.DialDisconnectButtonClickedEventArgs>, (global::Windows.Media.DialProtocol.DialDevicePicker sender, global::Windows.Media.DialProtocol.DialDisconnectButtonClickedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.DialProtocol.DialDevicePicker sender, global::Windows.Media.DialProtocol.DialDisconnectButtonClickedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DisconnectButtonClicked += x, x => _data.DisconnectButtonClicked -= x);
    }
}

namespace Windows.Media.Effects
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Effects"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Effects.AudioCaptureEffectsManager"/> class.
        /// </summary>
        public static RxAudioCaptureEffectsManagerEvents Events(this global::Windows.Media.Effects.AudioCaptureEffectsManager item) => new RxAudioCaptureEffectsManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Effects.AudioRenderEffectsManager"/> class.
        /// </summary>
        public static RxAudioRenderEffectsManagerEvents Events(this global::Windows.Media.Effects.AudioRenderEffectsManager item) => new RxAudioRenderEffectsManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Effects.AudioCaptureEffectsManager"/> class as observables.
    /// </summary>
    public class RxAudioCaptureEffectsManagerEvents
    {
        private readonly global::Windows.Media.Effects.AudioCaptureEffectsManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Effects.AudioCaptureEffectsManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioCaptureEffectsManagerEvents(global::Windows.Media.Effects.AudioCaptureEffectsManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Effects.AudioCaptureEffectsManager.AudioCaptureEffectsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Effects.AudioCaptureEffectsManager sender, object args)> AudioCaptureEffectsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Effects.AudioCaptureEffectsManager, object>, (global::Windows.Media.Effects.AudioCaptureEffectsManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Effects.AudioCaptureEffectsManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AudioCaptureEffectsChanged += x, x => _data.AudioCaptureEffectsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Effects.AudioRenderEffectsManager"/> class as observables.
    /// </summary>
    public class RxAudioRenderEffectsManagerEvents
    {
        private readonly global::Windows.Media.Effects.AudioRenderEffectsManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Effects.AudioRenderEffectsManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioRenderEffectsManagerEvents(global::Windows.Media.Effects.AudioRenderEffectsManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Effects.AudioRenderEffectsManager.AudioRenderEffectsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Effects.AudioRenderEffectsManager sender, object args)> AudioRenderEffectsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Effects.AudioRenderEffectsManager, object>, (global::Windows.Media.Effects.AudioRenderEffectsManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Effects.AudioRenderEffectsManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AudioRenderEffectsChanged += x, x => _data.AudioRenderEffectsChanged -= x);
    }
}

namespace Windows.Media.Import
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Import"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Import.PhotoImportFindItemsResult"/> class.
        /// </summary>
        public static RxPhotoImportFindItemsResultEvents Events(this global::Windows.Media.Import.PhotoImportFindItemsResult item) => new RxPhotoImportFindItemsResultEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Import.PhotoImportFindItemsResult"/> class as observables.
    /// </summary>
    public class RxPhotoImportFindItemsResultEvents
    {
        private readonly global::Windows.Media.Import.PhotoImportFindItemsResult _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Import.PhotoImportFindItemsResult"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPhotoImportFindItemsResultEvents(global::Windows.Media.Import.PhotoImportFindItemsResult data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Import.PhotoImportFindItemsResult.ItemImported"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Import.PhotoImportFindItemsResult sender, global::Windows.Media.Import.PhotoImportItemImportedEventArgs args)> ItemImported => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Import.PhotoImportFindItemsResult, global::Windows.Media.Import.PhotoImportItemImportedEventArgs>, (global::Windows.Media.Import.PhotoImportFindItemsResult sender, global::Windows.Media.Import.PhotoImportItemImportedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Import.PhotoImportFindItemsResult sender, global::Windows.Media.Import.PhotoImportItemImportedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemImported += x, x => _data.ItemImported -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Import.PhotoImportFindItemsResult.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Import.PhotoImportFindItemsResult sender, global::Windows.Media.Import.PhotoImportSelectionChangedEventArgs args)> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Import.PhotoImportFindItemsResult, global::Windows.Media.Import.PhotoImportSelectionChangedEventArgs>, (global::Windows.Media.Import.PhotoImportFindItemsResult sender, global::Windows.Media.Import.PhotoImportSelectionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Import.PhotoImportFindItemsResult sender, global::Windows.Media.Import.PhotoImportSelectionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }
}

namespace Windows.Media.Playback
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Playback"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaBreakManager"/> class.
        /// </summary>
        public static RxMediaBreakManagerEvents Events(this global::Windows.Media.Playback.MediaBreakManager item) => new RxMediaBreakManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaBreakSchedule"/> class.
        /// </summary>
        public static RxMediaBreakScheduleEvents Events(this global::Windows.Media.Playback.MediaBreakSchedule item) => new RxMediaBreakScheduleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackAudioTrackList"/> class.
        /// </summary>
        public static RxMediaPlaybackAudioTrackListEvents Events(this global::Windows.Media.Playback.MediaPlaybackAudioTrackList item) => new RxMediaPlaybackAudioTrackListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager"/> class.
        /// </summary>
        public static RxMediaPlaybackCommandManagerEvents Events(this global::Windows.Media.Playback.MediaPlaybackCommandManager item) => new RxMediaPlaybackCommandManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior"/> class.
        /// </summary>
        public static RxMediaPlaybackCommandManagerCommandBehaviorEvents Events(this global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior item) => new RxMediaPlaybackCommandManagerCommandBehaviorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackItem"/> class.
        /// </summary>
        public static RxMediaPlaybackItemEvents Events(this global::Windows.Media.Playback.MediaPlaybackItem item) => new RxMediaPlaybackItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackList"/> class.
        /// </summary>
        public static RxMediaPlaybackListEvents Events(this global::Windows.Media.Playback.MediaPlaybackList item) => new RxMediaPlaybackListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession"/> class.
        /// </summary>
        public static RxMediaPlaybackSessionEvents Events(this global::Windows.Media.Playback.MediaPlaybackSession item) => new RxMediaPlaybackSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList"/> class.
        /// </summary>
        public static RxMediaPlaybackTimedMetadataTrackListEvents Events(this global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList item) => new RxMediaPlaybackTimedMetadataTrackListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackVideoTrackList"/> class.
        /// </summary>
        public static RxMediaPlaybackVideoTrackListEvents Events(this global::Windows.Media.Playback.MediaPlaybackVideoTrackList item) => new RxMediaPlaybackVideoTrackListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlayer"/> class.
        /// </summary>
        public static RxMediaPlayerEvents Events(this global::Windows.Media.Playback.MediaPlayer item) => new RxMediaPlayerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaBreakManager"/> class as observables.
    /// </summary>
    public class RxMediaBreakManagerEvents
    {
        private readonly global::Windows.Media.Playback.MediaBreakManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaBreakManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaBreakManagerEvents(global::Windows.Media.Playback.MediaBreakManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaBreakManager.BreakEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakEndedEventArgs args)> BreakEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaBreakManager, global::Windows.Media.Playback.MediaBreakEndedEventArgs>, (global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakEndedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakEndedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BreakEnded += x, x => _data.BreakEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaBreakManager.BreakSkipped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakSkippedEventArgs args)> BreakSkipped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaBreakManager, global::Windows.Media.Playback.MediaBreakSkippedEventArgs>, (global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakSkippedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakSkippedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BreakSkipped += x, x => _data.BreakSkipped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaBreakManager.BreaksSeekedOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakSeekedOverEventArgs args)> BreaksSeekedOver => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaBreakManager, global::Windows.Media.Playback.MediaBreakSeekedOverEventArgs>, (global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakSeekedOverEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakSeekedOverEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BreaksSeekedOver += x, x => _data.BreaksSeekedOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaBreakManager.BreakStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakStartedEventArgs args)> BreakStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaBreakManager, global::Windows.Media.Playback.MediaBreakStartedEventArgs>, (global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaBreakManager sender, global::Windows.Media.Playback.MediaBreakStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BreakStarted += x, x => _data.BreakStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaBreakSchedule"/> class as observables.
    /// </summary>
    public class RxMediaBreakScheduleEvents
    {
        private readonly global::Windows.Media.Playback.MediaBreakSchedule _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaBreakSchedule"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaBreakScheduleEvents(global::Windows.Media.Playback.MediaBreakSchedule data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaBreakSchedule.ScheduleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaBreakSchedule sender, object args)> ScheduleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaBreakSchedule, object>, (global::Windows.Media.Playback.MediaBreakSchedule sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaBreakSchedule sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScheduleChanged += x, x => _data.ScheduleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackAudioTrackList"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackAudioTrackListEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackAudioTrackList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackAudioTrackList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackAudioTrackListEvents(global::Windows.Media.Playback.MediaPlaybackAudioTrackList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackAudioTrackList.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args)> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.ISingleSelectMediaTrackList, object>, (global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackCommandManagerEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackCommandManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackCommandManagerEvents(global::Windows.Media.Playback.MediaPlaybackCommandManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.AutoRepeatModeReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs args)> AutoRepeatModeReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AutoRepeatModeReceived += x, x => _data.AutoRepeatModeReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.FastForwardReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerFastForwardReceivedEventArgs args)> FastForwardReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerFastForwardReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerFastForwardReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerFastForwardReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FastForwardReceived += x, x => _data.FastForwardReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.NextReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerNextReceivedEventArgs args)> NextReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerNextReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerNextReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerNextReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NextReceived += x, x => _data.NextReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.PauseReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPauseReceivedEventArgs args)> PauseReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerPauseReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPauseReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPauseReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PauseReceived += x, x => _data.PauseReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.PlayReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPlayReceivedEventArgs args)> PlayReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerPlayReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPlayReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPlayReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlayReceived += x, x => _data.PlayReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.PositionReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPositionReceivedEventArgs args)> PositionReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerPositionReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPositionReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPositionReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PositionReceived += x, x => _data.PositionReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.PreviousReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPreviousReceivedEventArgs args)> PreviousReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerPreviousReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPreviousReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerPreviousReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PreviousReceived += x, x => _data.PreviousReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.RateReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerRateReceivedEventArgs args)> RateReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerRateReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerRateReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerRateReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RateReceived += x, x => _data.RateReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.RewindReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerRewindReceivedEventArgs args)> RewindReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerRewindReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerRewindReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerRewindReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RewindReceived += x, x => _data.RewindReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManager.ShuffleReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerShuffleReceivedEventArgs args)> ShuffleReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManager, global::Windows.Media.Playback.MediaPlaybackCommandManagerShuffleReceivedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerShuffleReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManager sender, global::Windows.Media.Playback.MediaPlaybackCommandManagerShuffleReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ShuffleReceived += x, x => _data.ShuffleReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackCommandManagerCommandBehaviorEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackCommandManagerCommandBehaviorEvents(global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior sender, object args)> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior, object>, (global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackItem"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackItemEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackItemEvents(global::Windows.Media.Playback.MediaPlaybackItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackItem.AudioTracksChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args)> AudioTracksChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackItem, global::Windows.Foundation.Collections.IVectorChangedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AudioTracksChanged += x, x => _data.AudioTracksChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackItem.TimedMetadataTracksChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args)> TimedMetadataTracksChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackItem, global::Windows.Foundation.Collections.IVectorChangedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TimedMetadataTracksChanged += x, x => _data.TimedMetadataTracksChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackItem.VideoTracksChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args)> VideoTracksChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackItem, global::Windows.Foundation.Collections.IVectorChangedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackItem sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VideoTracksChanged += x, x => _data.VideoTracksChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackList"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackListEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackListEvents(global::Windows.Media.Playback.MediaPlaybackList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackList.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.CurrentMediaPlaybackItemChangedEventArgs args)> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackList, global::Windows.Media.Playback.CurrentMediaPlaybackItemChangedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.CurrentMediaPlaybackItemChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.CurrentMediaPlaybackItemChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackList.ItemFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.MediaPlaybackItemFailedEventArgs args)> ItemFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackList, global::Windows.Media.Playback.MediaPlaybackItemFailedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.MediaPlaybackItemFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.MediaPlaybackItemFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemFailed += x, x => _data.ItemFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackList.ItemOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.MediaPlaybackItemOpenedEventArgs args)> ItemOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackList, global::Windows.Media.Playback.MediaPlaybackItemOpenedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.MediaPlaybackItemOpenedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackList sender, global::Windows.Media.Playback.MediaPlaybackItemOpenedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemOpened += x, x => _data.ItemOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackSessionEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackSessionEvents(global::Windows.Media.Playback.MediaPlaybackSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.BufferedRangesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> BufferedRangesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BufferedRangesChanged += x, x => _data.BufferedRangesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> BufferingEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.BufferingProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> BufferingProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BufferingProgressChanged += x, x => _data.BufferingProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> BufferingStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.DownloadProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> DownloadProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DownloadProgressChanged += x, x => _data.DownloadProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.NaturalDurationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> NaturalDurationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NaturalDurationChanged += x, x => _data.NaturalDurationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.NaturalVideoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> NaturalVideoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NaturalVideoSizeChanged += x, x => _data.NaturalVideoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.PlaybackRateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> PlaybackRateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackRateChanged += x, x => _data.PlaybackRateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.PlaybackStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> PlaybackStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackStateChanged += x, x => _data.PlaybackStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.PlayedRangesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> PlayedRangesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlayedRangesChanged += x, x => _data.PlayedRangesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.SeekableRangesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> SeekableRangesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SeekableRangesChanged += x, x => _data.SeekableRangesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.SeekCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> SeekCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SeekCompleted += x, x => _data.SeekCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackSession.SupportedPlaybackRatesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackSession sender, object args)> SupportedPlaybackRatesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackSession, object>, (global::Windows.Media.Playback.MediaPlaybackSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SupportedPlaybackRatesChanged += x, x => _data.SupportedPlaybackRatesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackTimedMetadataTrackListEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackTimedMetadataTrackListEvents(global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList.PresentationModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList sender, global::Windows.Media.Playback.TimedMetadataPresentationModeChangedEventArgs args)> PresentationModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList, global::Windows.Media.Playback.TimedMetadataPresentationModeChangedEventArgs>, (global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList sender, global::Windows.Media.Playback.TimedMetadataPresentationModeChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList sender, global::Windows.Media.Playback.TimedMetadataPresentationModeChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PresentationModeChanged += x, x => _data.PresentationModeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlaybackVideoTrackList"/> class as observables.
    /// </summary>
    public class RxMediaPlaybackVideoTrackListEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlaybackVideoTrackList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlaybackVideoTrackList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlaybackVideoTrackListEvents(global::Windows.Media.Playback.MediaPlaybackVideoTrackList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlaybackVideoTrackList.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args)> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.ISingleSelectMediaTrackList, object>, (global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Core.ISingleSelectMediaTrackList sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Playback.MediaPlayer"/> class as observables.
    /// </summary>
    public class RxMediaPlayerEvents
    {
        private readonly global::Windows.Media.Playback.MediaPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Playback.MediaPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaPlayerEvents(global::Windows.Media.Playback.MediaPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> BufferingEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> BufferingStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.CurrentStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> CurrentStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CurrentStateChanged += x, x => _data.CurrentStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.IsMutedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> IsMutedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsMutedChanged += x, x => _data.IsMutedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> MediaEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MediaEnded += x, x => _data.MediaEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.MediaPlayerFailedEventArgs args)> MediaFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, global::Windows.Media.Playback.MediaPlayerFailedEventArgs>, (global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.MediaPlayerFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.MediaPlayerFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MediaFailed += x, x => _data.MediaFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> MediaOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MediaOpened += x, x => _data.MediaOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.MediaPlayerRateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.MediaPlayerRateChangedEventArgs args)> MediaPlayerRateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, global::Windows.Media.Playback.MediaPlayerRateChangedEventArgs>, (global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.MediaPlayerRateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.MediaPlayerRateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MediaPlayerRateChanged += x, x => _data.MediaPlayerRateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.PlaybackMediaMarkerReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.PlaybackMediaMarkerReachedEventArgs args)> PlaybackMediaMarkerReached => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, global::Windows.Media.Playback.PlaybackMediaMarkerReachedEventArgs>, (global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.PlaybackMediaMarkerReachedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, global::Windows.Media.Playback.PlaybackMediaMarkerReachedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackMediaMarkerReached += x, x => _data.PlaybackMediaMarkerReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.SeekCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> SeekCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SeekCompleted += x, x => _data.SeekCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.SourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> SourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceChanged += x, x => _data.SourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.SubtitleFrameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> SubtitleFrameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SubtitleFrameChanged += x, x => _data.SubtitleFrameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.VideoFrameAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> VideoFrameAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VideoFrameAvailable += x, x => _data.VideoFrameAvailable -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.MediaPlayer.VolumeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Playback.MediaPlayer sender, object args)> VolumeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Playback.MediaPlayer, object>, (global::Windows.Media.Playback.MediaPlayer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Playback.MediaPlayer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VolumeChanged += x, x => _data.VolumeChanged -= x);
    }
}

namespace Windows.Media.PlayTo
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.PlayTo"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.PlayTo.PlayToConnection"/> class.
        /// </summary>
        public static RxPlayToConnectionEvents Events(this global::Windows.Media.PlayTo.PlayToConnection item) => new RxPlayToConnectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.PlayTo.PlayToManager"/> class.
        /// </summary>
        public static RxPlayToManagerEvents Events(this global::Windows.Media.PlayTo.PlayToManager item) => new RxPlayToManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver"/> class.
        /// </summary>
        public static RxPlayToReceiverEvents Events(this global::Windows.Media.PlayTo.PlayToReceiver item) => new RxPlayToReceiverEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.PlayTo.PlayToConnection"/> class as observables.
    /// </summary>
    public class RxPlayToConnectionEvents
    {
        private readonly global::Windows.Media.PlayTo.PlayToConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.PlayTo.PlayToConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPlayToConnectionEvents(global::Windows.Media.PlayTo.PlayToConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToConnection.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionErrorEventArgs args)> Error => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToConnection, global::Windows.Media.PlayTo.PlayToConnectionErrorEventArgs>, (global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionErrorEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionErrorEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Error += x, x => _data.Error -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToConnection.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToConnection, global::Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs>, (global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToConnection.Transferred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs args)> Transferred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToConnection, global::Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs>, (global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToConnection sender, global::Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Transferred += x, x => _data.Transferred -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.PlayTo.PlayToManager"/> class as observables.
    /// </summary>
    public class RxPlayToManagerEvents
    {
        private readonly global::Windows.Media.PlayTo.PlayToManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.PlayTo.PlayToManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPlayToManagerEvents(global::Windows.Media.PlayTo.PlayToManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToManager.SourceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToManager sender, global::Windows.Media.PlayTo.PlayToSourceRequestedEventArgs args)> SourceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToManager, global::Windows.Media.PlayTo.PlayToSourceRequestedEventArgs>, (global::Windows.Media.PlayTo.PlayToManager sender, global::Windows.Media.PlayTo.PlayToSourceRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToManager sender, global::Windows.Media.PlayTo.PlayToSourceRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceRequested += x, x => _data.SourceRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToManager.SourceSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToManager sender, global::Windows.Media.PlayTo.PlayToSourceSelectedEventArgs args)> SourceSelected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToManager, global::Windows.Media.PlayTo.PlayToSourceSelectedEventArgs>, (global::Windows.Media.PlayTo.PlayToManager sender, global::Windows.Media.PlayTo.PlayToSourceSelectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToManager sender, global::Windows.Media.PlayTo.PlayToSourceSelectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceSelected += x, x => _data.SourceSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver"/> class as observables.
    /// </summary>
    public class RxPlayToReceiverEvents
    {
        private readonly global::Windows.Media.PlayTo.PlayToReceiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPlayToReceiverEvents(global::Windows.Media.PlayTo.PlayToReceiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.CurrentTimeChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs args)> CurrentTimeChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, global::Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs>, (global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CurrentTimeChangeRequested += x, x => _data.CurrentTimeChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.MuteChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.MuteChangeRequestedEventArgs args)> MuteChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, global::Windows.Media.PlayTo.MuteChangeRequestedEventArgs>, (global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.MuteChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.MuteChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MuteChangeRequested += x, x => _data.MuteChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.PauseRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, object args)> PauseRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, object>, (global::Windows.Media.PlayTo.PlayToReceiver sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PauseRequested += x, x => _data.PauseRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.PlaybackRateChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs args)> PlaybackRateChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, global::Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs>, (global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackRateChangeRequested += x, x => _data.PlaybackRateChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.PlayRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, object args)> PlayRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, object>, (global::Windows.Media.PlayTo.PlayToReceiver sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlayRequested += x, x => _data.PlayRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.SourceChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.SourceChangeRequestedEventArgs args)> SourceChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, global::Windows.Media.PlayTo.SourceChangeRequestedEventArgs>, (global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.SourceChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.SourceChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceChangeRequested += x, x => _data.SourceChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.StopRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, object args)> StopRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, object>, (global::Windows.Media.PlayTo.PlayToReceiver sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StopRequested += x, x => _data.StopRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.TimeUpdateRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, object args)> TimeUpdateRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, object>, (global::Windows.Media.PlayTo.PlayToReceiver sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TimeUpdateRequested += x, x => _data.TimeUpdateRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.PlayTo.PlayToReceiver.VolumeChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.VolumeChangeRequestedEventArgs args)> VolumeChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.PlayTo.PlayToReceiver, global::Windows.Media.PlayTo.VolumeChangeRequestedEventArgs>, (global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.VolumeChangeRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.PlayTo.PlayToReceiver sender, global::Windows.Media.PlayTo.VolumeChangeRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VolumeChangeRequested += x, x => _data.VolumeChangeRequested -= x);
    }
}

namespace Windows.Media.Protection
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Protection"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Protection.HdcpSession"/> class.
        /// </summary>
        public static RxHdcpSessionEvents Events(this global::Windows.Media.Protection.HdcpSession item) => new RxHdcpSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Protection.MediaProtectionManager"/> class.
        /// </summary>
        public static RxMediaProtectionManagerEvents Events(this global::Windows.Media.Protection.MediaProtectionManager item) => new RxMediaProtectionManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Protection.HdcpSession"/> class as observables.
    /// </summary>
    public class RxHdcpSessionEvents
    {
        private readonly global::Windows.Media.Protection.HdcpSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Protection.HdcpSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHdcpSessionEvents(global::Windows.Media.Protection.HdcpSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.HdcpSession.ProtectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.HdcpSession sender, object args)> ProtectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Protection.HdcpSession, object>, (global::Windows.Media.Protection.HdcpSession sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.HdcpSession sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ProtectionChanged += x, x => _data.ProtectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Protection.MediaProtectionManager"/> class as observables.
    /// </summary>
    public class RxMediaProtectionManagerEvents
    {
        private readonly global::Windows.Media.Protection.MediaProtectionManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Protection.MediaProtectionManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaProtectionManagerEvents(global::Windows.Media.Protection.MediaProtectionManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.MediaProtectionManager.ComponentLoadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.MediaProtectionManager sender, global::Windows.Media.Protection.ComponentLoadFailedEventArgs e)> ComponentLoadFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Media.Protection.ComponentLoadFailedEventHandler, (global::Windows.Media.Protection.MediaProtectionManager sender, global::Windows.Media.Protection.ComponentLoadFailedEventArgs e)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.MediaProtectionManager sender, global::Windows.Media.Protection.ComponentLoadFailedEventArgs e) => eventHandler((sender, e));
            return Handler;
        }

        , x => _data.ComponentLoadFailed += x, x => _data.ComponentLoadFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.MediaProtectionManager.RebootNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Media.Protection.MediaProtectionManager> RebootNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Media.Protection.RebootNeededEventHandler, global::Windows.Media.Protection.MediaProtectionManager>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.MediaProtectionManager sender) => eventHandler(sender);
            return Handler;
        }

        , x => _data.RebootNeeded += x, x => _data.RebootNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.MediaProtectionManager.ServiceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.MediaProtectionManager sender, global::Windows.Media.Protection.ServiceRequestedEventArgs e)> ServiceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Media.Protection.ServiceRequestedEventHandler, (global::Windows.Media.Protection.MediaProtectionManager sender, global::Windows.Media.Protection.ServiceRequestedEventArgs e)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.MediaProtectionManager sender, global::Windows.Media.Protection.ServiceRequestedEventArgs e) => eventHandler((sender, e));
            return Handler;
        }

        , x => _data.ServiceRequested += x, x => _data.ServiceRequested -= x);
    }
}

namespace Windows.Media.Protection.PlayReady
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Protection.PlayReady"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient"/> class.
        /// </summary>
        public static RxNDClientEvents Events(this global::Windows.Media.Protection.PlayReady.NDClient item) => new RxNDClientEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient"/> class as observables.
    /// </summary>
    public class RxNDClientEvents
    {
        private readonly global::Windows.Media.Protection.PlayReady.NDClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNDClientEvents(global::Windows.Media.Protection.PlayReady.NDClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient.ClosedCaptionDataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs args)> ClosedCaptionDataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Protection.PlayReady.NDClient, global::Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs>, (global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ClosedCaptionDataReceived += x, x => _data.ClosedCaptionDataReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient.LicenseFetchCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDLicenseFetchCompletedEventArgs args)> LicenseFetchCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Protection.PlayReady.NDClient, global::Windows.Media.Protection.PlayReady.INDLicenseFetchCompletedEventArgs>, (global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDLicenseFetchCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDLicenseFetchCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LicenseFetchCompleted += x, x => _data.LicenseFetchCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient.ProximityDetectionCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDProximityDetectionCompletedEventArgs args)> ProximityDetectionCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Protection.PlayReady.NDClient, global::Windows.Media.Protection.PlayReady.INDProximityDetectionCompletedEventArgs>, (global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDProximityDetectionCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDProximityDetectionCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ProximityDetectionCompleted += x, x => _data.ProximityDetectionCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient.RegistrationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs args)> RegistrationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Protection.PlayReady.NDClient, global::Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs>, (global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.PlayReady.NDClient sender, global::Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RegistrationCompleted += x, x => _data.RegistrationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Protection.PlayReady.NDClient.ReRegistrationNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Protection.PlayReady.NDClient sender, object args)> ReRegistrationNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Protection.PlayReady.NDClient, object>, (global::Windows.Media.Protection.PlayReady.NDClient sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Protection.PlayReady.NDClient sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ReRegistrationNeeded += x, x => _data.ReRegistrationNeeded -= x);
    }
}

namespace Windows.Media.SpeechRecognition
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.SpeechRecognition"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession"/> class.
        /// </summary>
        public static RxSpeechContinuousRecognitionSessionEvents Events(this global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession item) => new RxSpeechContinuousRecognitionSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.SpeechRecognition.SpeechRecognizer"/> class.
        /// </summary>
        public static RxSpeechRecognizerEvents Events(this global::Windows.Media.SpeechRecognition.SpeechRecognizer item) => new RxSpeechRecognizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession"/> class as observables.
    /// </summary>
    public class RxSpeechContinuousRecognitionSessionEvents
    {
        private readonly global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpeechContinuousRecognitionSessionEvents(global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession sender, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionCompletedEventArgs args)> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionCompletedEventArgs>, (global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession sender, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession sender, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession.ResultGenerated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession sender, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionResultGeneratedEventArgs args)> ResultGenerated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionResultGeneratedEventArgs>, (global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession sender, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionResultGeneratedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession sender, global::Windows.Media.SpeechRecognition.SpeechContinuousRecognitionResultGeneratedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ResultGenerated += x, x => _data.ResultGenerated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.SpeechRecognition.SpeechRecognizer"/> class as observables.
    /// </summary>
    public class RxSpeechRecognizerEvents
    {
        private readonly global::Windows.Media.SpeechRecognition.SpeechRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.SpeechRecognition.SpeechRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpeechRecognizerEvents(global::Windows.Media.SpeechRecognition.SpeechRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SpeechRecognition.SpeechRecognizer.HypothesisGenerated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognitionHypothesisGeneratedEventArgs args)> HypothesisGenerated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SpeechRecognition.SpeechRecognizer, global::Windows.Media.SpeechRecognition.SpeechRecognitionHypothesisGeneratedEventArgs>, (global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognitionHypothesisGeneratedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognitionHypothesisGeneratedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HypothesisGenerated += x, x => _data.HypothesisGenerated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SpeechRecognition.SpeechRecognizer.RecognitionQualityDegrading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognitionQualityDegradingEventArgs args)> RecognitionQualityDegrading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SpeechRecognition.SpeechRecognizer, global::Windows.Media.SpeechRecognition.SpeechRecognitionQualityDegradingEventArgs>, (global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognitionQualityDegradingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognitionQualityDegradingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RecognitionQualityDegrading += x, x => _data.RecognitionQualityDegrading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.SpeechRecognition.SpeechRecognizer.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognizerStateChangedEventArgs args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.SpeechRecognition.SpeechRecognizer, global::Windows.Media.SpeechRecognition.SpeechRecognizerStateChangedEventArgs>, (global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognizerStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.SpeechRecognition.SpeechRecognizer sender, global::Windows.Media.SpeechRecognition.SpeechRecognizerStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Windows.Media.Streaming.Adaptive
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Media.Streaming.Adaptive"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource"/> class.
        /// </summary>
        public static RxAdaptiveMediaSourceEvents Events(this global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource item) => new RxAdaptiveMediaSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics"/> class.
        /// </summary>
        public static RxAdaptiveMediaSourceDiagnosticsEvents Events(this global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics item) => new RxAdaptiveMediaSourceDiagnosticsEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource"/> class as observables.
    /// </summary>
    public class RxAdaptiveMediaSourceEvents
    {
        private readonly global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAdaptiveMediaSourceEvents(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource.DownloadBitrateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs args)> DownloadBitrateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs>, (global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DownloadBitrateChanged += x, x => _data.DownloadBitrateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource.DownloadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs args)> DownloadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs>, (global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DownloadCompleted += x, x => _data.DownloadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource.DownloadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs args)> DownloadFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs>, (global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DownloadFailed += x, x => _data.DownloadFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource.DownloadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs args)> DownloadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs>, (global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DownloadRequested += x, x => _data.DownloadRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource.PlaybackBitrateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs args)> PlaybackBitrateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs>, (global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSource sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PlaybackBitrateChanged += x, x => _data.PlaybackBitrateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics"/> class as observables.
    /// </summary>
    public class RxAdaptiveMediaSourceDiagnosticsEvents
    {
        private readonly global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAdaptiveMediaSourceDiagnosticsEvents(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics.DiagnosticAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs args)> DiagnosticAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs>, (global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics sender, global::Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DiagnosticAvailable += x, x => _data.DiagnosticAvailable -= x);
    }
}

namespace Windows.Networking.BackgroundTransfer
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Networking.BackgroundTransfer"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.BackgroundTransfer.DownloadOperation"/> class.
        /// </summary>
        public static RxDownloadOperationEvents Events(this global::Windows.Networking.BackgroundTransfer.DownloadOperation item) => new RxDownloadOperationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.BackgroundTransfer.DownloadOperation"/> class as observables.
    /// </summary>
    public class RxDownloadOperationEvents
    {
        private readonly global::Windows.Networking.BackgroundTransfer.DownloadOperation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.BackgroundTransfer.DownloadOperation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDownloadOperationEvents(global::Windows.Networking.BackgroundTransfer.DownloadOperation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.BackgroundTransfer.DownloadOperation.RangesDownloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.BackgroundTransfer.DownloadOperation sender, global::Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs args)> RangesDownloaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.BackgroundTransfer.DownloadOperation, global::Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs>, (global::Windows.Networking.BackgroundTransfer.DownloadOperation sender, global::Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.BackgroundTransfer.DownloadOperation sender, global::Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RangesDownloaded += x, x => _data.RangesDownloaded -= x);
    }
}

namespace Windows.Networking.NetworkOperators
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Networking.NetworkOperators"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.ESim"/> class.
        /// </summary>
        public static RxESimEvents Events(this global::Windows.Networking.NetworkOperators.ESim item) => new RxESimEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.ESimProfileMetadata"/> class.
        /// </summary>
        public static RxESimProfileMetadataEvents Events(this global::Windows.Networking.NetworkOperators.ESimProfileMetadata item) => new RxESimProfileMetadataEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher"/> class.
        /// </summary>
        public static RxESimWatcherEvents Events(this global::Windows.Networking.NetworkOperators.ESimWatcher item) => new RxESimWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher"/> class.
        /// </summary>
        public static RxMobileBroadbandAccountWatcherEvents Events(this global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher item) => new RxMobileBroadbandAccountWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession"/> class.
        /// </summary>
        public static RxMobileBroadbandDeviceServiceDataSessionEvents Events(this global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession item) => new RxMobileBroadbandDeviceServiceDataSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandModem"/> class.
        /// </summary>
        public static RxMobileBroadbandModemEvents Events(this global::Windows.Networking.NetworkOperators.MobileBroadbandModem item) => new RxMobileBroadbandModemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager"/> class.
        /// </summary>
        public static RxMobileBroadbandSarManagerEvents Events(this global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager item) => new RxMobileBroadbandSarManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.ESim"/> class as observables.
    /// </summary>
    public class RxESimEvents
    {
        private readonly global::Windows.Networking.NetworkOperators.ESim _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.NetworkOperators.ESim"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxESimEvents(global::Windows.Networking.NetworkOperators.ESim data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESim.ProfileChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.ESim sender, object args)> ProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.ESim, object>, (global::Windows.Networking.NetworkOperators.ESim sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.ESim sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ProfileChanged += x, x => _data.ProfileChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.ESimProfileMetadata"/> class as observables.
    /// </summary>
    public class RxESimProfileMetadataEvents
    {
        private readonly global::Windows.Networking.NetworkOperators.ESimProfileMetadata _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.NetworkOperators.ESimProfileMetadata"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxESimProfileMetadataEvents(global::Windows.Networking.NetworkOperators.ESimProfileMetadata data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESimProfileMetadata.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.ESimProfileMetadata sender, object args)> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.ESimProfileMetadata, object>, (global::Windows.Networking.NetworkOperators.ESimProfileMetadata sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.ESimProfileMetadata sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher"/> class as observables.
    /// </summary>
    public class RxESimWatcherEvents
    {
        private readonly global::Windows.Networking.NetworkOperators.ESimWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxESimWatcherEvents(global::Windows.Networking.NetworkOperators.ESimWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimAddedEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.ESimWatcher, global::Windows.Networking.NetworkOperators.ESimAddedEventArgs>, (global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.ESimWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.ESimWatcher, object>, (global::Windows.Networking.NetworkOperators.ESimWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.ESimWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimRemovedEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.ESimWatcher, global::Windows.Networking.NetworkOperators.ESimRemovedEventArgs>, (global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.ESimWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.ESimWatcher, object>, (global::Windows.Networking.NetworkOperators.ESimWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.ESimWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESimWatcher.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimUpdatedEventArgs args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.ESimWatcher, global::Windows.Networking.NetworkOperators.ESimUpdatedEventArgs>, (global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.ESimWatcher sender, global::Windows.Networking.NetworkOperators.ESimUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher"/> class as observables.
    /// </summary>
    public class RxMobileBroadbandAccountWatcherEvents
    {
        private readonly global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMobileBroadbandAccountWatcherEvents(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher.AccountAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs args)> AccountAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>, (global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccountAdded += x, x => _data.AccountAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher.AccountRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs args)> AccountRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>, (global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccountRemoved += x, x => _data.AccountRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher.AccountUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs args)> AccountUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs>, (global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, global::Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccountUpdated += x, x => _data.AccountUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher, object>, (global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher, object>, (global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession"/> class as observables.
    /// </summary>
    public class RxMobileBroadbandDeviceServiceDataSessionEvents
    {
        private readonly global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMobileBroadbandDeviceServiceDataSessionEvents(global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession.DataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession sender, global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs args)> DataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession, global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs>, (global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession sender, global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession sender, global::Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataReceived += x, x => _data.DataReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandModem"/> class as observables.
    /// </summary>
    public class RxMobileBroadbandModemEvents
    {
        private readonly global::Windows.Networking.NetworkOperators.MobileBroadbandModem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandModem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMobileBroadbandModemEvents(global::Windows.Networking.NetworkOperators.MobileBroadbandModem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandModem.IsInEmergencyCallModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandModem sender, object args)> IsInEmergencyCallModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandModem, object>, (global::Windows.Networking.NetworkOperators.MobileBroadbandModem sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandModem sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsInEmergencyCallModeChanged += x, x => _data.IsInEmergencyCallModeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager"/> class as observables.
    /// </summary>
    public class RxMobileBroadbandSarManagerEvents
    {
        private readonly global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMobileBroadbandSarManagerEvents(global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager.TransmissionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager sender, global::Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs args)> TransmissionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager, global::Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs>, (global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager sender, global::Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.NetworkOperators.MobileBroadbandSarManager sender, global::Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TransmissionStateChanged += x, x => _data.TransmissionStateChanged -= x);
    }
}

namespace Windows.Networking.Proximity
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Networking.Proximity"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Proximity.PeerWatcher"/> class.
        /// </summary>
        public static RxPeerWatcherEvents Events(this global::Windows.Networking.Proximity.PeerWatcher item) => new RxPeerWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Proximity.ProximityDevice"/> class.
        /// </summary>
        public static RxProximityDeviceEvents Events(this global::Windows.Networking.Proximity.ProximityDevice item) => new RxProximityDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Proximity.PeerWatcher"/> class as observables.
    /// </summary>
    public class RxPeerWatcherEvents
    {
        private readonly global::Windows.Networking.Proximity.PeerWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Proximity.PeerWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPeerWatcherEvents(global::Windows.Networking.Proximity.PeerWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.PeerWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Proximity.PeerWatcher, global::Windows.Networking.Proximity.PeerInformation>, (global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.PeerWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Proximity.PeerWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Proximity.PeerWatcher, object>, (global::Windows.Networking.Proximity.PeerWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Proximity.PeerWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.PeerWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Proximity.PeerWatcher, global::Windows.Networking.Proximity.PeerInformation>, (global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.PeerWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Proximity.PeerWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Proximity.PeerWatcher, object>, (global::Windows.Networking.Proximity.PeerWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Proximity.PeerWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.PeerWatcher.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Proximity.PeerWatcher, global::Windows.Networking.Proximity.PeerInformation>, (global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Proximity.PeerWatcher sender, global::Windows.Networking.Proximity.PeerInformation args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Proximity.ProximityDevice"/> class as observables.
    /// </summary>
    public class RxProximityDeviceEvents
    {
        private readonly global::Windows.Networking.Proximity.ProximityDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Proximity.ProximityDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxProximityDeviceEvents(global::Windows.Networking.Proximity.ProximityDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.ProximityDevice.DeviceArrived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Networking.Proximity.ProximityDevice> DeviceArrived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Networking.Proximity.DeviceArrivedEventHandler, global::Windows.Networking.Proximity.ProximityDevice>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Proximity.ProximityDevice sender) => eventHandler(sender);
            return Handler;
        }

        , x => _data.DeviceArrived += x, x => _data.DeviceArrived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.ProximityDevice.DeviceDeparted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.Networking.Proximity.ProximityDevice> DeviceDeparted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Networking.Proximity.DeviceDepartedEventHandler, global::Windows.Networking.Proximity.ProximityDevice>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Proximity.ProximityDevice sender) => eventHandler(sender);
            return Handler;
        }

        , x => _data.DeviceDeparted += x, x => _data.DeviceDeparted -= x);
    }
}

namespace Windows.Networking.PushNotifications
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Networking.PushNotifications"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.PushNotifications.PushNotificationChannel"/> class.
        /// </summary>
        public static RxPushNotificationChannelEvents Events(this global::Windows.Networking.PushNotifications.PushNotificationChannel item) => new RxPushNotificationChannelEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.PushNotifications.PushNotificationChannel"/> class as observables.
    /// </summary>
    public class RxPushNotificationChannelEvents
    {
        private readonly global::Windows.Networking.PushNotifications.PushNotificationChannel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.PushNotifications.PushNotificationChannel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPushNotificationChannelEvents(global::Windows.Networking.PushNotifications.PushNotificationChannel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.PushNotifications.PushNotificationChannel.PushNotificationReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.PushNotifications.PushNotificationChannel sender, global::Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs args)> PushNotificationReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.PushNotifications.PushNotificationChannel, global::Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs>, (global::Windows.Networking.PushNotifications.PushNotificationChannel sender, global::Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.PushNotifications.PushNotificationChannel sender, global::Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PushNotificationReceived += x, x => _data.PushNotificationReceived -= x);
    }
}

namespace Windows.Networking.ServiceDiscovery.Dnssd
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Networking.ServiceDiscovery.Dnssd"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher"/> class.
        /// </summary>
        public static RxDnssdServiceWatcherEvents Events(this global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher item) => new RxDnssdServiceWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher"/> class as observables.
    /// </summary>
    public class RxDnssdServiceWatcherEvents
    {
        private readonly global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDnssdServiceWatcherEvents(global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher, global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>, (global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher, object>, (global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher, object>, (global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }
}

namespace Windows.Networking.Sockets
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Networking.Sockets"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Sockets.DatagramSocket"/> class.
        /// </summary>
        public static RxDatagramSocketEvents Events(this global::Windows.Networking.Sockets.DatagramSocket item) => new RxDatagramSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Sockets.IWebSocket"/> class.
        /// </summary>
        public static RxIWebSocketEvents Events(this global::Windows.Networking.Sockets.IWebSocket item) => new RxIWebSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Sockets.MessageWebSocket"/> class.
        /// </summary>
        public static RxMessageWebSocketEvents Events(this global::Windows.Networking.Sockets.MessageWebSocket item) => new RxMessageWebSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Sockets.ServerMessageWebSocket"/> class.
        /// </summary>
        public static RxServerMessageWebSocketEvents Events(this global::Windows.Networking.Sockets.ServerMessageWebSocket item) => new RxServerMessageWebSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Sockets.ServerStreamWebSocket"/> class.
        /// </summary>
        public static RxServerStreamWebSocketEvents Events(this global::Windows.Networking.Sockets.ServerStreamWebSocket item) => new RxServerStreamWebSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Sockets.StreamSocketListener"/> class.
        /// </summary>
        public static RxStreamSocketListenerEvents Events(this global::Windows.Networking.Sockets.StreamSocketListener item) => new RxStreamSocketListenerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Sockets.StreamWebSocket"/> class.
        /// </summary>
        public static RxStreamWebSocketEvents Events(this global::Windows.Networking.Sockets.StreamWebSocket item) => new RxStreamWebSocketEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Sockets.DatagramSocket"/> class as observables.
    /// </summary>
    public class RxDatagramSocketEvents
    {
        private readonly global::Windows.Networking.Sockets.DatagramSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Sockets.DatagramSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatagramSocketEvents(global::Windows.Networking.Sockets.DatagramSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.DatagramSocket.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.DatagramSocket sender, global::Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs args)> MessageReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.DatagramSocket, global::Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs>, (global::Windows.Networking.Sockets.DatagramSocket sender, global::Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.DatagramSocket sender, global::Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MessageReceived += x, x => _data.MessageReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Sockets.IWebSocket"/> class as observables.
    /// </summary>
    public class RxIWebSocketEvents
    {
        private readonly global::Windows.Networking.Sockets.IWebSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Sockets.IWebSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIWebSocketEvents(global::Windows.Networking.Sockets.IWebSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.IWebSocket.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.IWebSocket, global::Windows.Networking.Sockets.WebSocketClosedEventArgs>, (global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Sockets.MessageWebSocket"/> class as observables.
    /// </summary>
    public class RxMessageWebSocketEvents
    {
        private readonly global::Windows.Networking.Sockets.MessageWebSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Sockets.MessageWebSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMessageWebSocketEvents(global::Windows.Networking.Sockets.MessageWebSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.MessageWebSocket.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.IWebSocket, global::Windows.Networking.Sockets.WebSocketClosedEventArgs>, (global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.MessageWebSocket.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.MessageWebSocket sender, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs args)> MessageReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.MessageWebSocket, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>, (global::Windows.Networking.Sockets.MessageWebSocket sender, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.MessageWebSocket sender, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MessageReceived += x, x => _data.MessageReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.MessageWebSocket.ServerCustomValidationRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.MessageWebSocket sender, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs args)> ServerCustomValidationRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.MessageWebSocket, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>, (global::Windows.Networking.Sockets.MessageWebSocket sender, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.MessageWebSocket sender, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ServerCustomValidationRequested += x, x => _data.ServerCustomValidationRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Sockets.ServerMessageWebSocket"/> class as observables.
    /// </summary>
    public class RxServerMessageWebSocketEvents
    {
        private readonly global::Windows.Networking.Sockets.ServerMessageWebSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Sockets.ServerMessageWebSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxServerMessageWebSocketEvents(global::Windows.Networking.Sockets.ServerMessageWebSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.ServerMessageWebSocket.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.ServerMessageWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.ServerMessageWebSocket, global::Windows.Networking.Sockets.WebSocketClosedEventArgs>, (global::Windows.Networking.Sockets.ServerMessageWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.ServerMessageWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.ServerMessageWebSocket.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.ServerMessageWebSocket sender, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs args)> MessageReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.ServerMessageWebSocket, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>, (global::Windows.Networking.Sockets.ServerMessageWebSocket sender, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.ServerMessageWebSocket sender, global::Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MessageReceived += x, x => _data.MessageReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Sockets.ServerStreamWebSocket"/> class as observables.
    /// </summary>
    public class RxServerStreamWebSocketEvents
    {
        private readonly global::Windows.Networking.Sockets.ServerStreamWebSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Sockets.ServerStreamWebSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxServerStreamWebSocketEvents(global::Windows.Networking.Sockets.ServerStreamWebSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.ServerStreamWebSocket.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.ServerStreamWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.ServerStreamWebSocket, global::Windows.Networking.Sockets.WebSocketClosedEventArgs>, (global::Windows.Networking.Sockets.ServerStreamWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.ServerStreamWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Sockets.StreamSocketListener"/> class as observables.
    /// </summary>
    public class RxStreamSocketListenerEvents
    {
        private readonly global::Windows.Networking.Sockets.StreamSocketListener _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Sockets.StreamSocketListener"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStreamSocketListenerEvents(global::Windows.Networking.Sockets.StreamSocketListener data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.StreamSocketListener.ConnectionReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.StreamSocketListener sender, global::Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)> ConnectionReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.StreamSocketListener, global::Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs>, (global::Windows.Networking.Sockets.StreamSocketListener sender, global::Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.StreamSocketListener sender, global::Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ConnectionReceived += x, x => _data.ConnectionReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Sockets.StreamWebSocket"/> class as observables.
    /// </summary>
    public class RxStreamWebSocketEvents
    {
        private readonly global::Windows.Networking.Sockets.StreamWebSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Sockets.StreamWebSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStreamWebSocketEvents(global::Windows.Networking.Sockets.StreamWebSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.StreamWebSocket.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.IWebSocket, global::Windows.Networking.Sockets.WebSocketClosedEventArgs>, (global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.IWebSocket sender, global::Windows.Networking.Sockets.WebSocketClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Sockets.StreamWebSocket.ServerCustomValidationRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Sockets.StreamWebSocket sender, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs args)> ServerCustomValidationRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Sockets.StreamWebSocket, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>, (global::Windows.Networking.Sockets.StreamWebSocket sender, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Sockets.StreamWebSocket sender, global::Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ServerCustomValidationRequested += x, x => _data.ServerCustomValidationRequested -= x);
    }
}

namespace Windows.Networking.Vpn
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Networking.Vpn"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Networking.Vpn.VpnChannel"/> class.
        /// </summary>
        public static RxVpnChannelEvents Events(this global::Windows.Networking.Vpn.VpnChannel item) => new RxVpnChannelEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Networking.Vpn.VpnChannel"/> class as observables.
    /// </summary>
    public class RxVpnChannelEvents
    {
        private readonly global::Windows.Networking.Vpn.VpnChannel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Networking.Vpn.VpnChannel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVpnChannelEvents(global::Windows.Networking.Vpn.VpnChannel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Vpn.VpnChannel.ActivityChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Vpn.VpnChannel sender, global::Windows.Networking.Vpn.VpnChannelActivityEventArgs args)> ActivityChange => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Vpn.VpnChannel, global::Windows.Networking.Vpn.VpnChannelActivityEventArgs>, (global::Windows.Networking.Vpn.VpnChannel sender, global::Windows.Networking.Vpn.VpnChannelActivityEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Vpn.VpnChannel sender, global::Windows.Networking.Vpn.VpnChannelActivityEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActivityChange += x, x => _data.ActivityChange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Vpn.VpnChannel.ActivityStateChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Networking.Vpn.VpnChannel sender, global::Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs args)> ActivityStateChange => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Networking.Vpn.VpnChannel, global::Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs>, (global::Windows.Networking.Vpn.VpnChannel sender, global::Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Networking.Vpn.VpnChannel sender, global::Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActivityStateChange += x, x => _data.ActivityStateChange -= x);
    }
}

namespace Windows.Perception.Spatial
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Perception.Spatial"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Perception.Spatial.SpatialAnchor"/> class.
        /// </summary>
        public static RxSpatialAnchorEvents Events(this global::Windows.Perception.Spatial.SpatialAnchor item) => new RxSpatialAnchorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Perception.Spatial.SpatialEntityWatcher"/> class.
        /// </summary>
        public static RxSpatialEntityWatcherEvents Events(this global::Windows.Perception.Spatial.SpatialEntityWatcher item) => new RxSpatialEntityWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Perception.Spatial.SpatialLocator"/> class.
        /// </summary>
        public static RxSpatialLocatorEvents Events(this global::Windows.Perception.Spatial.SpatialLocator item) => new RxSpatialLocatorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Perception.Spatial.SpatialAnchor"/> class as observables.
    /// </summary>
    public class RxSpatialAnchorEvents
    {
        private readonly global::Windows.Perception.Spatial.SpatialAnchor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Perception.Spatial.SpatialAnchor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpatialAnchorEvents(global::Windows.Perception.Spatial.SpatialAnchor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialAnchor.RawCoordinateSystemAdjusted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.SpatialAnchor sender, global::Windows.Perception.Spatial.SpatialAnchorRawCoordinateSystemAdjustedEventArgs args)> RawCoordinateSystemAdjusted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.SpatialAnchor, global::Windows.Perception.Spatial.SpatialAnchorRawCoordinateSystemAdjustedEventArgs>, (global::Windows.Perception.Spatial.SpatialAnchor sender, global::Windows.Perception.Spatial.SpatialAnchorRawCoordinateSystemAdjustedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.SpatialAnchor sender, global::Windows.Perception.Spatial.SpatialAnchorRawCoordinateSystemAdjustedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RawCoordinateSystemAdjusted += x, x => _data.RawCoordinateSystemAdjusted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Perception.Spatial.SpatialEntityWatcher"/> class as observables.
    /// </summary>
    public class RxSpatialEntityWatcherEvents
    {
        private readonly global::Windows.Perception.Spatial.SpatialEntityWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Perception.Spatial.SpatialEntityWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpatialEntityWatcherEvents(global::Windows.Perception.Spatial.SpatialEntityWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialEntityWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityAddedEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.SpatialEntityWatcher, global::Windows.Perception.Spatial.SpatialEntityAddedEventArgs>, (global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialEntityWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.SpatialEntityWatcher, object>, (global::Windows.Perception.Spatial.SpatialEntityWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialEntityWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityRemovedEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.SpatialEntityWatcher, global::Windows.Perception.Spatial.SpatialEntityRemovedEventArgs>, (global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialEntityWatcher.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityUpdatedEventArgs args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.SpatialEntityWatcher, global::Windows.Perception.Spatial.SpatialEntityUpdatedEventArgs>, (global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.SpatialEntityWatcher sender, global::Windows.Perception.Spatial.SpatialEntityUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Perception.Spatial.SpatialLocator"/> class as observables.
    /// </summary>
    public class RxSpatialLocatorEvents
    {
        private readonly global::Windows.Perception.Spatial.SpatialLocator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Perception.Spatial.SpatialLocator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpatialLocatorEvents(global::Windows.Perception.Spatial.SpatialLocator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialLocator.LocatabilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.SpatialLocator sender, object args)> LocatabilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.SpatialLocator, object>, (global::Windows.Perception.Spatial.SpatialLocator sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.SpatialLocator sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LocatabilityChanged += x, x => _data.LocatabilityChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialLocator.PositionalTrackingDeactivating"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.SpatialLocator sender, global::Windows.Perception.Spatial.SpatialLocatorPositionalTrackingDeactivatingEventArgs args)> PositionalTrackingDeactivating => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.SpatialLocator, global::Windows.Perception.Spatial.SpatialLocatorPositionalTrackingDeactivatingEventArgs>, (global::Windows.Perception.Spatial.SpatialLocator sender, global::Windows.Perception.Spatial.SpatialLocatorPositionalTrackingDeactivatingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.SpatialLocator sender, global::Windows.Perception.Spatial.SpatialLocatorPositionalTrackingDeactivatingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PositionalTrackingDeactivating += x, x => _data.PositionalTrackingDeactivating -= x);
    }
}

namespace Windows.Perception.Spatial.Surfaces
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Perception.Spatial.Surfaces"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver"/> class.
        /// </summary>
        public static RxSpatialSurfaceObserverEvents Events(this global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver item) => new RxSpatialSurfaceObserverEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver"/> class as observables.
    /// </summary>
    public class RxSpatialSurfaceObserverEvents
    {
        private readonly global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpatialSurfaceObserverEvents(global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver.ObservedSurfacesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver sender, object args)> ObservedSurfacesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver, object>, (global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ObservedSurfacesChanged += x, x => _data.ObservedSurfacesChanged -= x);
    }
}

namespace Windows.Phone.Devices.Power
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Phone.Devices.Power"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Phone.Devices.Power.Battery"/> class.
        /// </summary>
        public static RxBatteryEvents Events(this global::Windows.Phone.Devices.Power.Battery item) => new RxBatteryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Phone.Devices.Power.Battery"/> class as observables.
    /// </summary>
    public class RxBatteryEvents
    {
        private readonly global::Windows.Phone.Devices.Power.Battery _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Phone.Devices.Power.Battery"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBatteryEvents(global::Windows.Phone.Devices.Power.Battery data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Phone.Devices.Power.Battery.RemainingChargePercentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> RemainingChargePercentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemainingChargePercentChanged += x, x => _data.RemainingChargePercentChanged -= x);
    }
}

namespace Windows.Phone.Media.Devices
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Phone.Media.Devices"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Phone.Media.Devices.AudioRoutingManager"/> class.
        /// </summary>
        public static RxAudioRoutingManagerEvents Events(this global::Windows.Phone.Media.Devices.AudioRoutingManager item) => new RxAudioRoutingManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Phone.Media.Devices.AudioRoutingManager"/> class as observables.
    /// </summary>
    public class RxAudioRoutingManagerEvents
    {
        private readonly global::Windows.Phone.Media.Devices.AudioRoutingManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Phone.Media.Devices.AudioRoutingManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAudioRoutingManagerEvents(global::Windows.Phone.Media.Devices.AudioRoutingManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Phone.Media.Devices.AudioRoutingManager.AudioEndpointChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Phone.Media.Devices.AudioRoutingManager sender, object args)> AudioEndpointChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Phone.Media.Devices.AudioRoutingManager, object>, (global::Windows.Phone.Media.Devices.AudioRoutingManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Phone.Media.Devices.AudioRoutingManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AudioEndpointChanged += x, x => _data.AudioEndpointChanged -= x);
    }
}

namespace Windows.Security.Authentication.Web.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Security.Authentication.Web.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Security.Authentication.Web.Core.WebAccountMonitor"/> class.
        /// </summary>
        public static RxWebAccountMonitorEvents Events(this global::Windows.Security.Authentication.Web.Core.WebAccountMonitor item) => new RxWebAccountMonitorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Security.Authentication.Web.Core.WebAccountMonitor"/> class as observables.
    /// </summary>
    public class RxWebAccountMonitorEvents
    {
        private readonly global::Windows.Security.Authentication.Web.Core.WebAccountMonitor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Security.Authentication.Web.Core.WebAccountMonitor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebAccountMonitorEvents(global::Windows.Security.Authentication.Web.Core.WebAccountMonitor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Security.Authentication.Web.Core.WebAccountMonitor.DefaultSignInAccountChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, object args)> DefaultSignInAccountChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Security.Authentication.Web.Core.WebAccountMonitor, object>, (global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DefaultSignInAccountChanged += x, x => _data.DefaultSignInAccountChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Security.Authentication.Web.Core.WebAccountMonitor.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Security.Authentication.Web.Core.WebAccountMonitor, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs>, (global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Security.Authentication.Web.Core.WebAccountMonitor.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Security.Authentication.Web.Core.WebAccountMonitor, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs>, (global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Security.Authentication.Web.Core.WebAccountMonitor sender, global::Windows.Security.Authentication.Web.Core.WebAccountEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }
}

namespace Windows.Security.Credentials
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Security.Credentials"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Security.Credentials.PasswordCredentialPropertyStore"/> class.
        /// </summary>
        public static RxPasswordCredentialPropertyStoreEvents Events(this global::Windows.Security.Credentials.PasswordCredentialPropertyStore item) => new RxPasswordCredentialPropertyStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Security.Credentials.PasswordCredentialPropertyStore"/> class as observables.
    /// </summary>
    public class RxPasswordCredentialPropertyStoreEvents
    {
        private readonly global::Windows.Security.Credentials.PasswordCredentialPropertyStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Security.Credentials.PasswordCredentialPropertyStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPasswordCredentialPropertyStoreEvents(global::Windows.Security.Credentials.PasswordCredentialPropertyStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Security.Credentials.PasswordCredentialPropertyStore.MapChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)> MapChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.MapChangedEventHandler<string, object>, (global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.MapChanged += x, x => _data.MapChanged -= x);
    }
}

namespace Windows.Services.Maps.OfflineMaps
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Services.Maps.OfflineMaps"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage"/> class.
        /// </summary>
        public static RxOfflineMapPackageEvents Events(this global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage item) => new RxOfflineMapPackageEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage"/> class as observables.
    /// </summary>
    public class RxOfflineMapPackageEvents
    {
        private readonly global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxOfflineMapPackageEvents(global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage sender, object args)> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage, object>, (global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Services.Maps.OfflineMaps.OfflineMapPackage sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }
}

namespace Windows.Storage
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Storage"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.ApplicationData"/> class.
        /// </summary>
        public static RxApplicationDataEvents Events(this global::Windows.Storage.ApplicationData item) => new RxApplicationDataEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.ApplicationDataCompositeValue"/> class.
        /// </summary>
        public static RxApplicationDataCompositeValueEvents Events(this global::Windows.Storage.ApplicationDataCompositeValue item) => new RxApplicationDataCompositeValueEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.ApplicationDataContainerSettings"/> class.
        /// </summary>
        public static RxApplicationDataContainerSettingsEvents Events(this global::Windows.Storage.ApplicationDataContainerSettings item) => new RxApplicationDataContainerSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.StorageLibrary"/> class.
        /// </summary>
        public static RxStorageLibraryEvents Events(this global::Windows.Storage.StorageLibrary item) => new RxStorageLibraryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.ApplicationData"/> class as observables.
    /// </summary>
    public class RxApplicationDataEvents
    {
        private readonly global::Windows.Storage.ApplicationData _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.ApplicationData"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationDataEvents(global::Windows.Storage.ApplicationData data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.ApplicationData.DataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.ApplicationData sender, object args)> DataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.ApplicationData, object>, (global::Windows.Storage.ApplicationData sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.ApplicationData sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataChanged += x, x => _data.DataChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.ApplicationDataCompositeValue"/> class as observables.
    /// </summary>
    public class RxApplicationDataCompositeValueEvents
    {
        private readonly global::Windows.Storage.ApplicationDataCompositeValue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.ApplicationDataCompositeValue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationDataCompositeValueEvents(global::Windows.Storage.ApplicationDataCompositeValue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.ApplicationDataCompositeValue.MapChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)> MapChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.MapChangedEventHandler<string, object>, (global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.MapChanged += x, x => _data.MapChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.ApplicationDataContainerSettings"/> class as observables.
    /// </summary>
    public class RxApplicationDataContainerSettingsEvents
    {
        private readonly global::Windows.Storage.ApplicationDataContainerSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.ApplicationDataContainerSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationDataContainerSettingsEvents(global::Windows.Storage.ApplicationDataContainerSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.ApplicationDataContainerSettings.MapChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)> MapChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.MapChangedEventHandler<string, object>, (global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableMap<string, object> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.MapChanged += x, x => _data.MapChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.StorageLibrary"/> class as observables.
    /// </summary>
    public class RxStorageLibraryEvents
    {
        private readonly global::Windows.Storage.StorageLibrary _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.StorageLibrary"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStorageLibraryEvents(global::Windows.Storage.StorageLibrary data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.StorageLibrary.DefinitionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.StorageLibrary sender, object args)> DefinitionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.StorageLibrary, object>, (global::Windows.Storage.StorageLibrary sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.StorageLibrary sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DefinitionChanged += x, x => _data.DefinitionChanged -= x);
    }
}

namespace Windows.Storage.AccessCache
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Storage.AccessCache"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList"/> class.
        /// </summary>
        public static RxStorageItemMostRecentlyUsedListEvents Events(this global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList item) => new RxStorageItemMostRecentlyUsedListEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList"/> class as observables.
    /// </summary>
    public class RxStorageItemMostRecentlyUsedListEvents
    {
        private readonly global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStorageItemMostRecentlyUsedListEvents(global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList.ItemRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList sender, global::Windows.Storage.AccessCache.ItemRemovedEventArgs args)> ItemRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList, global::Windows.Storage.AccessCache.ItemRemovedEventArgs>, (global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList sender, global::Windows.Storage.AccessCache.ItemRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList sender, global::Windows.Storage.AccessCache.ItemRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemRemoved += x, x => _data.ItemRemoved -= x);
    }
}

namespace Windows.Storage.BulkAccess
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Storage.BulkAccess"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.BulkAccess.FileInformation"/> class.
        /// </summary>
        public static RxFileInformationEvents Events(this global::Windows.Storage.BulkAccess.FileInformation item) => new RxFileInformationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.BulkAccess.FolderInformation"/> class.
        /// </summary>
        public static RxFolderInformationEvents Events(this global::Windows.Storage.BulkAccess.FolderInformation item) => new RxFolderInformationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.BulkAccess.IStorageItemInformation"/> class.
        /// </summary>
        public static RxIStorageItemInformationEvents Events(this global::Windows.Storage.BulkAccess.IStorageItemInformation item) => new RxIStorageItemInformationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.BulkAccess.FileInformation"/> class as observables.
    /// </summary>
    public class RxFileInformationEvents
    {
        private readonly global::Windows.Storage.BulkAccess.FileInformation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.BulkAccess.FileInformation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileInformationEvents(global::Windows.Storage.BulkAccess.FileInformation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.BulkAccess.FileInformation.PropertiesUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)> PropertiesUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.BulkAccess.IStorageItemInformation, object>, (global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PropertiesUpdated += x, x => _data.PropertiesUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.BulkAccess.FileInformation.ThumbnailUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)> ThumbnailUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.BulkAccess.IStorageItemInformation, object>, (global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ThumbnailUpdated += x, x => _data.ThumbnailUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.BulkAccess.FolderInformation"/> class as observables.
    /// </summary>
    public class RxFolderInformationEvents
    {
        private readonly global::Windows.Storage.BulkAccess.FolderInformation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.BulkAccess.FolderInformation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFolderInformationEvents(global::Windows.Storage.BulkAccess.FolderInformation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.BulkAccess.FolderInformation.PropertiesUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)> PropertiesUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.BulkAccess.IStorageItemInformation, object>, (global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PropertiesUpdated += x, x => _data.PropertiesUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.BulkAccess.FolderInformation.ThumbnailUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)> ThumbnailUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.BulkAccess.IStorageItemInformation, object>, (global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ThumbnailUpdated += x, x => _data.ThumbnailUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.BulkAccess.IStorageItemInformation"/> class as observables.
    /// </summary>
    public class RxIStorageItemInformationEvents
    {
        private readonly global::Windows.Storage.BulkAccess.IStorageItemInformation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.BulkAccess.IStorageItemInformation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIStorageItemInformationEvents(global::Windows.Storage.BulkAccess.IStorageItemInformation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.BulkAccess.IStorageItemInformation.PropertiesUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)> PropertiesUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.BulkAccess.IStorageItemInformation, object>, (global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PropertiesUpdated += x, x => _data.PropertiesUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.BulkAccess.IStorageItemInformation.ThumbnailUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)> ThumbnailUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.BulkAccess.IStorageItemInformation, object>, (global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.BulkAccess.IStorageItemInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ThumbnailUpdated += x, x => _data.ThumbnailUpdated -= x);
    }
}

namespace Windows.Storage.Pickers.Provider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Storage.Pickers.Provider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.Pickers.Provider.FileOpenPickerUI"/> class.
        /// </summary>
        public static RxFileOpenPickerUIEvents Events(this global::Windows.Storage.Pickers.Provider.FileOpenPickerUI item) => new RxFileOpenPickerUIEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.Pickers.Provider.FileSavePickerUI"/> class.
        /// </summary>
        public static RxFileSavePickerUIEvents Events(this global::Windows.Storage.Pickers.Provider.FileSavePickerUI item) => new RxFileSavePickerUIEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.Pickers.Provider.FileOpenPickerUI"/> class as observables.
    /// </summary>
    public class RxFileOpenPickerUIEvents
    {
        private readonly global::Windows.Storage.Pickers.Provider.FileOpenPickerUI _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.Pickers.Provider.FileOpenPickerUI"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileOpenPickerUIEvents(global::Windows.Storage.Pickers.Provider.FileOpenPickerUI data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Pickers.Provider.FileOpenPickerUI.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Pickers.Provider.FileOpenPickerUI sender, global::Windows.Storage.Pickers.Provider.PickerClosingEventArgs args)> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Pickers.Provider.FileOpenPickerUI, global::Windows.Storage.Pickers.Provider.PickerClosingEventArgs>, (global::Windows.Storage.Pickers.Provider.FileOpenPickerUI sender, global::Windows.Storage.Pickers.Provider.PickerClosingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Pickers.Provider.FileOpenPickerUI sender, global::Windows.Storage.Pickers.Provider.PickerClosingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Pickers.Provider.FileOpenPickerUI.FileRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Pickers.Provider.FileOpenPickerUI sender, global::Windows.Storage.Pickers.Provider.FileRemovedEventArgs args)> FileRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Pickers.Provider.FileOpenPickerUI, global::Windows.Storage.Pickers.Provider.FileRemovedEventArgs>, (global::Windows.Storage.Pickers.Provider.FileOpenPickerUI sender, global::Windows.Storage.Pickers.Provider.FileRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Pickers.Provider.FileOpenPickerUI sender, global::Windows.Storage.Pickers.Provider.FileRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FileRemoved += x, x => _data.FileRemoved -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.Pickers.Provider.FileSavePickerUI"/> class as observables.
    /// </summary>
    public class RxFileSavePickerUIEvents
    {
        private readonly global::Windows.Storage.Pickers.Provider.FileSavePickerUI _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.Pickers.Provider.FileSavePickerUI"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileSavePickerUIEvents(global::Windows.Storage.Pickers.Provider.FileSavePickerUI data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Pickers.Provider.FileSavePickerUI.FileNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Pickers.Provider.FileSavePickerUI sender, object args)> FileNameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Pickers.Provider.FileSavePickerUI, object>, (global::Windows.Storage.Pickers.Provider.FileSavePickerUI sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Pickers.Provider.FileSavePickerUI sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FileNameChanged += x, x => _data.FileNameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Pickers.Provider.FileSavePickerUI.TargetFileRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Pickers.Provider.FileSavePickerUI sender, global::Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs args)> TargetFileRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Pickers.Provider.FileSavePickerUI, global::Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs>, (global::Windows.Storage.Pickers.Provider.FileSavePickerUI sender, global::Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Pickers.Provider.FileSavePickerUI sender, global::Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TargetFileRequested += x, x => _data.TargetFileRequested -= x);
    }
}

namespace Windows.Storage.Provider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Storage.Provider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.Provider.CachedFileUpdaterUI"/> class.
        /// </summary>
        public static RxCachedFileUpdaterUIEvents Events(this global::Windows.Storage.Provider.CachedFileUpdaterUI item) => new RxCachedFileUpdaterUIEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.Provider.CachedFileUpdaterUI"/> class as observables.
    /// </summary>
    public class RxCachedFileUpdaterUIEvents
    {
        private readonly global::Windows.Storage.Provider.CachedFileUpdaterUI _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.Provider.CachedFileUpdaterUI"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCachedFileUpdaterUIEvents(global::Windows.Storage.Provider.CachedFileUpdaterUI data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Provider.CachedFileUpdaterUI.FileUpdateRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Provider.CachedFileUpdaterUI sender, global::Windows.Storage.Provider.FileUpdateRequestedEventArgs args)> FileUpdateRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Provider.CachedFileUpdaterUI, global::Windows.Storage.Provider.FileUpdateRequestedEventArgs>, (global::Windows.Storage.Provider.CachedFileUpdaterUI sender, global::Windows.Storage.Provider.FileUpdateRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Provider.CachedFileUpdaterUI sender, global::Windows.Storage.Provider.FileUpdateRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FileUpdateRequested += x, x => _data.FileUpdateRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Provider.CachedFileUpdaterUI.UIRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Provider.CachedFileUpdaterUI sender, object args)> UIRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Provider.CachedFileUpdaterUI, object>, (global::Windows.Storage.Provider.CachedFileUpdaterUI sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Provider.CachedFileUpdaterUI sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UIRequested += x, x => _data.UIRequested -= x);
    }
}

namespace Windows.Storage.Search
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Storage.Search"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.Search.IStorageQueryResultBase"/> class.
        /// </summary>
        public static RxIStorageQueryResultBaseEvents Events(this global::Windows.Storage.Search.IStorageQueryResultBase item) => new RxIStorageQueryResultBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.Search.StorageFileQueryResult"/> class.
        /// </summary>
        public static RxStorageFileQueryResultEvents Events(this global::Windows.Storage.Search.StorageFileQueryResult item) => new RxStorageFileQueryResultEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.Search.StorageFolderQueryResult"/> class.
        /// </summary>
        public static RxStorageFolderQueryResultEvents Events(this global::Windows.Storage.Search.StorageFolderQueryResult item) => new RxStorageFolderQueryResultEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Storage.Search.StorageItemQueryResult"/> class.
        /// </summary>
        public static RxStorageItemQueryResultEvents Events(this global::Windows.Storage.Search.StorageItemQueryResult item) => new RxStorageItemQueryResultEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.Search.IStorageQueryResultBase"/> class as observables.
    /// </summary>
    public class RxIStorageQueryResultBaseEvents
    {
        private readonly global::Windows.Storage.Search.IStorageQueryResultBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.Search.IStorageQueryResultBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIStorageQueryResultBaseEvents(global::Windows.Storage.Search.IStorageQueryResultBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.IStorageQueryResultBase.ContentsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> ContentsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentsChanged += x, x => _data.ContentsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.IStorageQueryResultBase.OptionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> OptionsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OptionsChanged += x, x => _data.OptionsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.Search.StorageFileQueryResult"/> class as observables.
    /// </summary>
    public class RxStorageFileQueryResultEvents
    {
        private readonly global::Windows.Storage.Search.StorageFileQueryResult _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.Search.StorageFileQueryResult"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStorageFileQueryResultEvents(global::Windows.Storage.Search.StorageFileQueryResult data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.StorageFileQueryResult.ContentsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> ContentsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentsChanged += x, x => _data.ContentsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.StorageFileQueryResult.OptionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> OptionsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OptionsChanged += x, x => _data.OptionsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.Search.StorageFolderQueryResult"/> class as observables.
    /// </summary>
    public class RxStorageFolderQueryResultEvents
    {
        private readonly global::Windows.Storage.Search.StorageFolderQueryResult _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.Search.StorageFolderQueryResult"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStorageFolderQueryResultEvents(global::Windows.Storage.Search.StorageFolderQueryResult data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.StorageFolderQueryResult.ContentsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> ContentsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentsChanged += x, x => _data.ContentsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.StorageFolderQueryResult.OptionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> OptionsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OptionsChanged += x, x => _data.OptionsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Storage.Search.StorageItemQueryResult"/> class as observables.
    /// </summary>
    public class RxStorageItemQueryResultEvents
    {
        private readonly global::Windows.Storage.Search.StorageItemQueryResult _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Storage.Search.StorageItemQueryResult"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStorageItemQueryResultEvents(global::Windows.Storage.Search.StorageItemQueryResult data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.StorageItemQueryResult.ContentsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> ContentsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentsChanged += x, x => _data.ContentsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Storage.Search.StorageItemQueryResult.OptionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)> OptionsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Search.IStorageQueryResultBase, object>, (global::Windows.Storage.Search.IStorageQueryResultBase sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Storage.Search.IStorageQueryResultBase sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OptionsChanged += x, x => _data.OptionsChanged -= x);
    }
}

namespace Windows.System
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.System"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.AppDiagnosticInfoWatcher"/> class.
        /// </summary>
        public static RxAppDiagnosticInfoWatcherEvents Events(this global::Windows.System.AppDiagnosticInfoWatcher item) => new RxAppDiagnosticInfoWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher"/> class.
        /// </summary>
        public static RxAppResourceGroupInfoWatcherEvents Events(this global::Windows.System.AppResourceGroupInfoWatcher item) => new RxAppResourceGroupInfoWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.DispatcherQueue"/> class.
        /// </summary>
        public static RxDispatcherQueueEvents Events(this global::Windows.System.DispatcherQueue item) => new RxDispatcherQueueEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.DispatcherQueueTimer"/> class.
        /// </summary>
        public static RxDispatcherQueueTimerEvents Events(this global::Windows.System.DispatcherQueueTimer item) => new RxDispatcherQueueTimerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.UserWatcher"/> class.
        /// </summary>
        public static RxUserWatcherEvents Events(this global::Windows.System.UserWatcher item) => new RxUserWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.AppDiagnosticInfoWatcher"/> class as observables.
    /// </summary>
    public class RxAppDiagnosticInfoWatcherEvents
    {
        private readonly global::Windows.System.AppDiagnosticInfoWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.AppDiagnosticInfoWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppDiagnosticInfoWatcherEvents(global::Windows.System.AppDiagnosticInfoWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppDiagnosticInfoWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppDiagnosticInfoWatcher sender, global::Windows.System.AppDiagnosticInfoWatcherEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppDiagnosticInfoWatcher, global::Windows.System.AppDiagnosticInfoWatcherEventArgs>, (global::Windows.System.AppDiagnosticInfoWatcher sender, global::Windows.System.AppDiagnosticInfoWatcherEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppDiagnosticInfoWatcher sender, global::Windows.System.AppDiagnosticInfoWatcherEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppDiagnosticInfoWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppDiagnosticInfoWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppDiagnosticInfoWatcher, object>, (global::Windows.System.AppDiagnosticInfoWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppDiagnosticInfoWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppDiagnosticInfoWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppDiagnosticInfoWatcher sender, global::Windows.System.AppDiagnosticInfoWatcherEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppDiagnosticInfoWatcher, global::Windows.System.AppDiagnosticInfoWatcherEventArgs>, (global::Windows.System.AppDiagnosticInfoWatcher sender, global::Windows.System.AppDiagnosticInfoWatcherEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppDiagnosticInfoWatcher sender, global::Windows.System.AppDiagnosticInfoWatcherEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppDiagnosticInfoWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppDiagnosticInfoWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppDiagnosticInfoWatcher, object>, (global::Windows.System.AppDiagnosticInfoWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppDiagnosticInfoWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher"/> class as observables.
    /// </summary>
    public class RxAppResourceGroupInfoWatcherEvents
    {
        private readonly global::Windows.System.AppResourceGroupInfoWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppResourceGroupInfoWatcherEvents(global::Windows.System.AppResourceGroupInfoWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppResourceGroupInfoWatcher, global::Windows.System.AppResourceGroupInfoWatcherEventArgs>, (global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppResourceGroupInfoWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppResourceGroupInfoWatcher, object>, (global::Windows.System.AppResourceGroupInfoWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppResourceGroupInfoWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher.ExecutionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherExecutionStateChangedEventArgs args)> ExecutionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppResourceGroupInfoWatcher, global::Windows.System.AppResourceGroupInfoWatcherExecutionStateChangedEventArgs>, (global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherExecutionStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherExecutionStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ExecutionStateChanged += x, x => _data.ExecutionStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppResourceGroupInfoWatcher, global::Windows.System.AppResourceGroupInfoWatcherEventArgs>, (global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppResourceGroupInfoWatcher sender, global::Windows.System.AppResourceGroupInfoWatcherEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.AppResourceGroupInfoWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.AppResourceGroupInfoWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.AppResourceGroupInfoWatcher, object>, (global::Windows.System.AppResourceGroupInfoWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.AppResourceGroupInfoWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.DispatcherQueue"/> class as observables.
    /// </summary>
    public class RxDispatcherQueueEvents
    {
        private readonly global::Windows.System.DispatcherQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.DispatcherQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherQueueEvents(global::Windows.System.DispatcherQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.DispatcherQueue.ShutdownCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.DispatcherQueue sender, object args)> ShutdownCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.DispatcherQueue, object>, (global::Windows.System.DispatcherQueue sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.DispatcherQueue sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ShutdownCompleted += x, x => _data.ShutdownCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.DispatcherQueue.ShutdownStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.DispatcherQueue sender, global::Windows.System.DispatcherQueueShutdownStartingEventArgs args)> ShutdownStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.DispatcherQueue, global::Windows.System.DispatcherQueueShutdownStartingEventArgs>, (global::Windows.System.DispatcherQueue sender, global::Windows.System.DispatcherQueueShutdownStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.DispatcherQueue sender, global::Windows.System.DispatcherQueueShutdownStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ShutdownStarting += x, x => _data.ShutdownStarting -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.DispatcherQueueTimer"/> class as observables.
    /// </summary>
    public class RxDispatcherQueueTimerEvents
    {
        private readonly global::Windows.System.DispatcherQueueTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.DispatcherQueueTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherQueueTimerEvents(global::Windows.System.DispatcherQueueTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.DispatcherQueueTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.DispatcherQueueTimer sender, object args)> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.DispatcherQueueTimer, object>, (global::Windows.System.DispatcherQueueTimer sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.DispatcherQueueTimer sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Tick += x, x => _data.Tick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.UserWatcher"/> class as observables.
    /// </summary>
    public class RxUserWatcherEvents
    {
        private readonly global::Windows.System.UserWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.UserWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserWatcherEvents(global::Windows.System.UserWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.UserWatcher, global::Windows.System.UserChangedEventArgs>, (global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserWatcher.AuthenticationStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)> AuthenticationStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.UserWatcher, global::Windows.System.UserChangedEventArgs>, (global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AuthenticationStatusChanged += x, x => _data.AuthenticationStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserWatcher.AuthenticationStatusChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.UserWatcher sender, global::Windows.System.UserAuthenticationStatusChangingEventArgs args)> AuthenticationStatusChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.UserWatcher, global::Windows.System.UserAuthenticationStatusChangingEventArgs>, (global::Windows.System.UserWatcher sender, global::Windows.System.UserAuthenticationStatusChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.UserWatcher sender, global::Windows.System.UserAuthenticationStatusChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AuthenticationStatusChanging += x, x => _data.AuthenticationStatusChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.UserWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.UserWatcher, object>, (global::Windows.System.UserWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.UserWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.UserWatcher, global::Windows.System.UserChangedEventArgs>, (global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserWatcher.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.UserWatcher sender, object args)> Stopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.UserWatcher, object>, (global::Windows.System.UserWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.UserWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Stopped += x, x => _data.Stopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserWatcher.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.UserWatcher, global::Windows.System.UserChangedEventArgs>, (global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.UserWatcher sender, global::Windows.System.UserChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }
}

namespace Windows.System.Diagnostics.DevicePortal
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.System.Diagnostics.DevicePortal"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection"/> class.
        /// </summary>
        public static RxDevicePortalConnectionEvents Events(this global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection item) => new RxDevicePortalConnectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection"/> class as observables.
    /// </summary>
    public class RxDevicePortalConnectionEvents
    {
        private readonly global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDevicePortalConnectionEvents(global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection sender, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionClosedEventArgs>, (global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection sender, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection sender, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection.RequestReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection sender, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionRequestReceivedEventArgs args)> RequestReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionRequestReceivedEventArgs>, (global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection sender, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionRequestReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnection sender, global::Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionRequestReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RequestReceived += x, x => _data.RequestReceived -= x);
    }
}

namespace Windows.System.Preview
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.System.Preview"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview"/> class.
        /// </summary>
        public static RxTwoPanelHingedDevicePosturePreviewEvents Events(this global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview item) => new RxTwoPanelHingedDevicePosturePreviewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview"/> class as observables.
    /// </summary>
    public class RxTwoPanelHingedDevicePosturePreviewEvents
    {
        private readonly global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTwoPanelHingedDevicePosturePreviewEvents(global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview.PostureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview sender, global::Windows.System.Preview.TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs args)> PostureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview, global::Windows.System.Preview.TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs>, (global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview sender, global::Windows.System.Preview.TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.Preview.TwoPanelHingedDevicePosturePreview sender, global::Windows.System.Preview.TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PostureChanged += x, x => _data.PostureChanged -= x);
    }
}

namespace Windows.System.RemoteSystems
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.System.RemoteSystems"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSession"/> class.
        /// </summary>
        public static RxRemoteSystemSessionEvents Events(this global::Windows.System.RemoteSystems.RemoteSystemSession item) => new RxRemoteSystemSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionController"/> class.
        /// </summary>
        public static RxRemoteSystemSessionControllerEvents Events(this global::Windows.System.RemoteSystems.RemoteSystemSessionController item) => new RxRemoteSystemSessionControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener"/> class.
        /// </summary>
        public static RxRemoteSystemSessionInvitationListenerEvents Events(this global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener item) => new RxRemoteSystemSessionInvitationListenerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel"/> class.
        /// </summary>
        public static RxRemoteSystemSessionMessageChannelEvents Events(this global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel item) => new RxRemoteSystemSessionMessageChannelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher"/> class.
        /// </summary>
        public static RxRemoteSystemSessionParticipantWatcherEvents Events(this global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher item) => new RxRemoteSystemSessionParticipantWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher"/> class.
        /// </summary>
        public static RxRemoteSystemSessionWatcherEvents Events(this global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher item) => new RxRemoteSystemSessionWatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher"/> class.
        /// </summary>
        public static RxRemoteSystemWatcherEvents Events(this global::Windows.System.RemoteSystems.RemoteSystemWatcher item) => new RxRemoteSystemWatcherEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSession"/> class as observables.
    /// </summary>
    public class RxRemoteSystemSessionEvents
    {
        private readonly global::Windows.System.RemoteSystems.RemoteSystemSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRemoteSystemSessionEvents(global::Windows.System.RemoteSystems.RemoteSystemSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSession.Disconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSession sender, global::Windows.System.RemoteSystems.RemoteSystemSessionDisconnectedEventArgs args)> Disconnected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSession, global::Windows.System.RemoteSystems.RemoteSystemSessionDisconnectedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSession sender, global::Windows.System.RemoteSystems.RemoteSystemSessionDisconnectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSession sender, global::Windows.System.RemoteSystems.RemoteSystemSessionDisconnectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Disconnected += x, x => _data.Disconnected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionController"/> class as observables.
    /// </summary>
    public class RxRemoteSystemSessionControllerEvents
    {
        private readonly global::Windows.System.RemoteSystems.RemoteSystemSessionController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRemoteSystemSessionControllerEvents(global::Windows.System.RemoteSystems.RemoteSystemSessionController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionController.JoinRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionController sender, global::Windows.System.RemoteSystems.RemoteSystemSessionJoinRequestedEventArgs args)> JoinRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionController, global::Windows.System.RemoteSystems.RemoteSystemSessionJoinRequestedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionController sender, global::Windows.System.RemoteSystems.RemoteSystemSessionJoinRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionController sender, global::Windows.System.RemoteSystems.RemoteSystemSessionJoinRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.JoinRequested += x, x => _data.JoinRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener"/> class as observables.
    /// </summary>
    public class RxRemoteSystemSessionInvitationListenerEvents
    {
        private readonly global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRemoteSystemSessionInvitationListenerEvents(global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener.InvitationReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener sender, global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationReceivedEventArgs args)> InvitationReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener, global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationReceivedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener sender, global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener sender, global::Windows.System.RemoteSystems.RemoteSystemSessionInvitationReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InvitationReceived += x, x => _data.InvitationReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel"/> class as observables.
    /// </summary>
    public class RxRemoteSystemSessionMessageChannelEvents
    {
        private readonly global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRemoteSystemSessionMessageChannelEvents(global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel.ValueSetReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel sender, global::Windows.System.RemoteSystems.RemoteSystemSessionValueSetReceivedEventArgs args)> ValueSetReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel, global::Windows.System.RemoteSystems.RemoteSystemSessionValueSetReceivedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel sender, global::Windows.System.RemoteSystems.RemoteSystemSessionValueSetReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel sender, global::Windows.System.RemoteSystems.RemoteSystemSessionValueSetReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ValueSetReceived += x, x => _data.ValueSetReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher"/> class as observables.
    /// </summary>
    public class RxRemoteSystemSessionParticipantWatcherEvents
    {
        private readonly global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRemoteSystemSessionParticipantWatcherEvents(global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantAddedEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantAddedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, object args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher, object>, (global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantRemovedEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantRemovedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionParticipantRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher"/> class as observables.
    /// </summary>
    public class RxRemoteSystemSessionWatcherEvents
    {
        private readonly global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRemoteSystemSessionWatcherEvents(global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher.Added"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionAddedEventArgs args)> Added => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher, global::Windows.System.RemoteSystems.RemoteSystemSessionAddedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Added += x, x => _data.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher.Removed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionRemovedEventArgs args)> Removed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher, global::Windows.System.RemoteSystems.RemoteSystemSessionRemovedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Removed += x, x => _data.Removed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionUpdatedEventArgs args)> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher, global::Windows.System.RemoteSystems.RemoteSystemSessionUpdatedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemSessionWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemSessionUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Updated += x, x => _data.Updated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher"/> class as observables.
    /// </summary>
    public class RxRemoteSystemWatcherEvents
    {
        private readonly global::Windows.System.RemoteSystems.RemoteSystemWatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRemoteSystemWatcherEvents(global::Windows.System.RemoteSystems.RemoteSystemWatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher.EnumerationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemEnumerationCompletedEventArgs args)> EnumerationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemWatcher, global::Windows.System.RemoteSystems.RemoteSystemEnumerationCompletedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemEnumerationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemEnumerationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EnumerationCompleted += x, x => _data.EnumerationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemWatcherErrorOccurredEventArgs args)> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemWatcher, global::Windows.System.RemoteSystems.RemoteSystemWatcherErrorOccurredEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemWatcherErrorOccurredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemWatcherErrorOccurredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher.RemoteSystemAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemAddedEventArgs args)> RemoteSystemAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemWatcher, global::Windows.System.RemoteSystems.RemoteSystemAddedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemAddedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemAddedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RemoteSystemAdded += x, x => _data.RemoteSystemAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher.RemoteSystemRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemRemovedEventArgs args)> RemoteSystemRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemWatcher, global::Windows.System.RemoteSystems.RemoteSystemRemovedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemRemovedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemRemovedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RemoteSystemRemoved += x, x => _data.RemoteSystemRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.RemoteSystems.RemoteSystemWatcher.RemoteSystemUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemUpdatedEventArgs args)> RemoteSystemUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.System.RemoteSystems.RemoteSystemWatcher, global::Windows.System.RemoteSystems.RemoteSystemUpdatedEventArgs>, (global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.System.RemoteSystems.RemoteSystemWatcher sender, global::Windows.System.RemoteSystems.RemoteSystemUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RemoteSystemUpdated += x, x => _data.RemoteSystemUpdated -= x);
    }
}

namespace Windows.UI.Accessibility
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Accessibility"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Accessibility.ScreenReaderService"/> class.
        /// </summary>
        public static RxScreenReaderServiceEvents Events(this global::Windows.UI.Accessibility.ScreenReaderService item) => new RxScreenReaderServiceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Accessibility.ScreenReaderService"/> class as observables.
    /// </summary>
    public class RxScreenReaderServiceEvents
    {
        private readonly global::Windows.UI.Accessibility.ScreenReaderService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Accessibility.ScreenReaderService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScreenReaderServiceEvents(global::Windows.UI.Accessibility.ScreenReaderService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Accessibility.ScreenReaderService.ScreenReaderPositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Accessibility.ScreenReaderService sender, global::Windows.UI.Accessibility.ScreenReaderPositionChangedEventArgs args)> ScreenReaderPositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Accessibility.ScreenReaderService, global::Windows.UI.Accessibility.ScreenReaderPositionChangedEventArgs>, (global::Windows.UI.Accessibility.ScreenReaderService sender, global::Windows.UI.Accessibility.ScreenReaderPositionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Accessibility.ScreenReaderService sender, global::Windows.UI.Accessibility.ScreenReaderPositionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScreenReaderPositionChanged += x, x => _data.ScreenReaderPositionChanged -= x);
    }
}

namespace Windows.UI.ApplicationSettings
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.ApplicationSettings"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.ApplicationSettings.AccountsSettingsPane"/> class.
        /// </summary>
        public static RxAccountsSettingsPaneEvents Events(this global::Windows.UI.ApplicationSettings.AccountsSettingsPane item) => new RxAccountsSettingsPaneEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.ApplicationSettings.AccountsSettingsPane"/> class as observables.
    /// </summary>
    public class RxAccountsSettingsPaneEvents
    {
        private readonly global::Windows.UI.ApplicationSettings.AccountsSettingsPane _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.ApplicationSettings.AccountsSettingsPane"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAccountsSettingsPaneEvents(global::Windows.UI.ApplicationSettings.AccountsSettingsPane data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ApplicationSettings.AccountsSettingsPane.AccountCommandsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ApplicationSettings.AccountsSettingsPane sender, global::Windows.UI.ApplicationSettings.AccountsSettingsPaneCommandsRequestedEventArgs args)> AccountCommandsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ApplicationSettings.AccountsSettingsPane, global::Windows.UI.ApplicationSettings.AccountsSettingsPaneCommandsRequestedEventArgs>, (global::Windows.UI.ApplicationSettings.AccountsSettingsPane sender, global::Windows.UI.ApplicationSettings.AccountsSettingsPaneCommandsRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ApplicationSettings.AccountsSettingsPane sender, global::Windows.UI.ApplicationSettings.AccountsSettingsPaneCommandsRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccountCommandsRequested += x, x => _data.AccountCommandsRequested -= x);
    }
}

namespace Windows.UI.Composition
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Composition"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Composition.CompositionCapabilities"/> class.
        /// </summary>
        public static RxCompositionCapabilitiesEvents Events(this global::Windows.UI.Composition.CompositionCapabilities item) => new RxCompositionCapabilitiesEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Composition.CompositionCommitBatch"/> class.
        /// </summary>
        public static RxCompositionCommitBatchEvents Events(this global::Windows.UI.Composition.CompositionCommitBatch item) => new RxCompositionCommitBatchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Composition.CompositionGraphicsDevice"/> class.
        /// </summary>
        public static RxCompositionGraphicsDeviceEvents Events(this global::Windows.UI.Composition.CompositionGraphicsDevice item) => new RxCompositionGraphicsDeviceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Composition.CompositionScopedBatch"/> class.
        /// </summary>
        public static RxCompositionScopedBatchEvents Events(this global::Windows.UI.Composition.CompositionScopedBatch item) => new RxCompositionScopedBatchEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Composition.CompositionCapabilities"/> class as observables.
    /// </summary>
    public class RxCompositionCapabilitiesEvents
    {
        private readonly global::Windows.UI.Composition.CompositionCapabilities _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Composition.CompositionCapabilities"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCompositionCapabilitiesEvents(global::Windows.UI.Composition.CompositionCapabilities data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Composition.CompositionCapabilities.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Composition.CompositionCapabilities sender, object args)> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Composition.CompositionCapabilities, object>, (global::Windows.UI.Composition.CompositionCapabilities sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Composition.CompositionCapabilities sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Composition.CompositionCommitBatch"/> class as observables.
    /// </summary>
    public class RxCompositionCommitBatchEvents
    {
        private readonly global::Windows.UI.Composition.CompositionCommitBatch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Composition.CompositionCommitBatch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCompositionCommitBatchEvents(global::Windows.UI.Composition.CompositionCommitBatch data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Composition.CompositionCommitBatch.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Composition.CompositionBatchCompletedEventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Composition.CompositionBatchCompletedEventArgs>, global::Windows.UI.Composition.CompositionBatchCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Composition.CompositionBatchCompletedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Composition.CompositionGraphicsDevice"/> class as observables.
    /// </summary>
    public class RxCompositionGraphicsDeviceEvents
    {
        private readonly global::Windows.UI.Composition.CompositionGraphicsDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Composition.CompositionGraphicsDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCompositionGraphicsDeviceEvents(global::Windows.UI.Composition.CompositionGraphicsDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Composition.CompositionGraphicsDevice.RenderingDeviceReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Composition.CompositionGraphicsDevice sender, global::Windows.UI.Composition.RenderingDeviceReplacedEventArgs args)> RenderingDeviceReplaced => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Composition.CompositionGraphicsDevice, global::Windows.UI.Composition.RenderingDeviceReplacedEventArgs>, (global::Windows.UI.Composition.CompositionGraphicsDevice sender, global::Windows.UI.Composition.RenderingDeviceReplacedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Composition.CompositionGraphicsDevice sender, global::Windows.UI.Composition.RenderingDeviceReplacedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RenderingDeviceReplaced += x, x => _data.RenderingDeviceReplaced -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Composition.CompositionScopedBatch"/> class as observables.
    /// </summary>
    public class RxCompositionScopedBatchEvents
    {
        private readonly global::Windows.UI.Composition.CompositionScopedBatch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Composition.CompositionScopedBatch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCompositionScopedBatchEvents(global::Windows.UI.Composition.CompositionScopedBatch data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Composition.CompositionScopedBatch.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Composition.CompositionBatchCompletedEventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Composition.CompositionBatchCompletedEventArgs>, global::Windows.UI.Composition.CompositionBatchCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Composition.CompositionBatchCompletedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
    }
}

namespace Windows.UI.Composition.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Composition.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Composition.Core.CompositorController"/> class.
        /// </summary>
        public static RxCompositorControllerEvents Events(this global::Windows.UI.Composition.Core.CompositorController item) => new RxCompositorControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Composition.Core.CompositorController"/> class as observables.
    /// </summary>
    public class RxCompositorControllerEvents
    {
        private readonly global::Windows.UI.Composition.Core.CompositorController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Composition.Core.CompositorController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCompositorControllerEvents(global::Windows.UI.Composition.Core.CompositorController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Composition.Core.CompositorController.CommitNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Composition.Core.CompositorController sender, object args)> CommitNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Composition.Core.CompositorController, object>, (global::Windows.UI.Composition.Core.CompositorController sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Composition.Core.CompositorController sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CommitNeeded += x, x => _data.CommitNeeded -= x);
    }
}

namespace Windows.UI.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.CoreAcceleratorKeys"/> class.
        /// </summary>
        public static RxCoreAcceleratorKeysEvents Events(this global::Windows.UI.Core.CoreAcceleratorKeys item) => new RxCoreAcceleratorKeysEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.CoreComponentInputSource"/> class.
        /// </summary>
        public static RxCoreComponentInputSourceEvents Events(this global::Windows.UI.Core.CoreComponentInputSource item) => new RxCoreComponentInputSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.CoreDispatcher"/> class.
        /// </summary>
        public static RxCoreDispatcherEvents Events(this global::Windows.UI.Core.CoreDispatcher item) => new RxCoreDispatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource"/> class.
        /// </summary>
        public static RxCoreIndependentInputSourceEvents Events(this global::Windows.UI.Core.CoreIndependentInputSource item) => new RxCoreIndependentInputSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.CoreWindow"/> class.
        /// </summary>
        public static RxCoreWindowEvents Events(this global::Windows.UI.Core.CoreWindow item) => new RxCoreWindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.ICoreAcceleratorKeys"/> class.
        /// </summary>
        public static RxICoreAcceleratorKeysEvents Events(this global::Windows.UI.Core.ICoreAcceleratorKeys item) => new RxICoreAcceleratorKeysEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.ICoreInputSourceBase"/> class.
        /// </summary>
        public static RxICoreInputSourceBaseEvents Events(this global::Windows.UI.Core.ICoreInputSourceBase item) => new RxICoreInputSourceBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.ICorePointerInputSource"/> class.
        /// </summary>
        public static RxICorePointerInputSourceEvents Events(this global::Windows.UI.Core.ICorePointerInputSource item) => new RxICorePointerInputSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.ICorePointerRedirector"/> class.
        /// </summary>
        public static RxICorePointerRedirectorEvents Events(this global::Windows.UI.Core.ICorePointerRedirector item) => new RxICorePointerRedirectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.ICoreWindow"/> class.
        /// </summary>
        public static RxICoreWindowEvents Events(this global::Windows.UI.Core.ICoreWindow item) => new RxICoreWindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.SystemNavigationManager"/> class.
        /// </summary>
        public static RxSystemNavigationManagerEvents Events(this global::Windows.UI.Core.SystemNavigationManager item) => new RxSystemNavigationManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.CoreAcceleratorKeys"/> class as observables.
    /// </summary>
    public class RxCoreAcceleratorKeysEvents
    {
        private readonly global::Windows.UI.Core.CoreAcceleratorKeys _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.CoreAcceleratorKeys"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreAcceleratorKeysEvents(global::Windows.UI.Core.CoreAcceleratorKeys data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreAcceleratorKeys.AcceleratorKeyActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args)> AcceleratorKeyActivated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreDispatcher, global::Windows.UI.Core.AcceleratorKeyEventArgs>, (global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AcceleratorKeyActivated += x, x => _data.AcceleratorKeyActivated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.CoreComponentInputSource"/> class as observables.
    /// </summary>
    public class RxCoreComponentInputSourceEvents
    {
        private readonly global::Windows.UI.Core.CoreComponentInputSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.CoreComponentInputSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreComponentInputSourceEvents(global::Windows.UI.Core.CoreComponentInputSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.CharacterReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.CharacterReceivedEventArgs> CharacterReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.CharacterReceivedEventArgs>, global::Windows.UI.Core.CharacterReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.CharacterReceivedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.CharacterReceived += x, x => _data.CharacterReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.ClosestInteractiveBoundsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreComponentInputSource sender, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs args)> ClosestInteractiveBoundsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreComponentInputSource, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs>, (global::Windows.UI.Core.CoreComponentInputSource sender, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreComponentInputSource sender, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ClosestInteractiveBoundsRequested += x, x => _data.ClosestInteractiveBoundsRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.CoreWindowEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.CoreWindowEventArgs>, global::Windows.UI.Core.CoreWindowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.CoreWindowEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.InputEnabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.InputEnabledEventArgs> InputEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.InputEnabledEventArgs>, global::Windows.UI.Core.InputEnabledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.InputEnabledEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.InputEnabled += x, x => _data.InputEnabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.KeyEventArgs>, global::Windows.UI.Core.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.KeyEventArgs>, global::Windows.UI.Core.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.CoreWindowEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.CoreWindowEventArgs>, global::Windows.UI.Core.CoreWindowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.CoreWindowEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.PointerCaptureLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerCaptureLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerCaptureLost += x, x => _data.PointerCaptureLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.PointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerEntered += x, x => _data.PointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.PointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerExited += x, x => _data.PointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreComponentInputSource.TouchHitTesting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.TouchHitTestingEventArgs> TouchHitTesting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.TouchHitTestingEventArgs>, global::Windows.UI.Core.TouchHitTestingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.TouchHitTestingEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.TouchHitTesting += x, x => _data.TouchHitTesting -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.CoreDispatcher"/> class as observables.
    /// </summary>
    public class RxCoreDispatcherEvents
    {
        private readonly global::Windows.UI.Core.CoreDispatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.CoreDispatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreDispatcherEvents(global::Windows.UI.Core.CoreDispatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreDispatcher.AcceleratorKeyActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args)> AcceleratorKeyActivated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreDispatcher, global::Windows.UI.Core.AcceleratorKeyEventArgs>, (global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AcceleratorKeyActivated += x, x => _data.AcceleratorKeyActivated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource"/> class as observables.
    /// </summary>
    public class RxCoreIndependentInputSourceEvents
    {
        private readonly global::Windows.UI.Core.CoreIndependentInputSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreIndependentInputSourceEvents(global::Windows.UI.Core.CoreIndependentInputSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.InputEnabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.InputEnabledEventArgs> InputEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.InputEnabledEventArgs>, global::Windows.UI.Core.InputEnabledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.InputEnabledEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.InputEnabled += x, x => _data.InputEnabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.PointerCaptureLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerCaptureLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerCaptureLost += x, x => _data.PointerCaptureLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.PointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerEntered += x, x => _data.PointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.PointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerExited += x, x => _data.PointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreIndependentInputSource.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.CoreWindow"/> class as observables.
    /// </summary>
    public class RxCoreWindowEvents
    {
        private readonly global::Windows.UI.Core.CoreWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.CoreWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreWindowEvents(global::Windows.UI.Core.CoreWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowActivatedEventArgs args)> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.WindowActivatedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowActivatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowActivatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.AutomationProviderRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.AutomationProviderRequestedEventArgs args)> AutomationProviderRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.AutomationProviderRequestedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.AutomationProviderRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.AutomationProviderRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AutomationProviderRequested += x, x => _data.AutomationProviderRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.CharacterReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CharacterReceivedEventArgs args)> CharacterReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.CharacterReceivedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CharacterReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CharacterReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CharacterReceived += x, x => _data.CharacterReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CoreWindowEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.CoreWindowEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CoreWindowEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CoreWindowEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.ClosestInteractiveBoundsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs args)> ClosestInteractiveBoundsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ClosestInteractiveBoundsRequested += x, x => _data.ClosestInteractiveBoundsRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.InputEnabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.InputEnabledEventArgs args)> InputEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.InputEnabledEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.InputEnabledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.InputEnabledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InputEnabled += x, x => _data.InputEnabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.KeyEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.KeyEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerCaptureLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerCaptureLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerCaptureLost += x, x => _data.PointerCaptureLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerEntered += x, x => _data.PointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerExited += x, x => _data.PointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerRoutedAway"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)> PointerRoutedAway => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.ICorePointerRedirector, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerRoutedAway += x, x => _data.PointerRoutedAway -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerRoutedReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)> PointerRoutedReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.ICorePointerRedirector, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerRoutedReleased += x, x => _data.PointerRoutedReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerRoutedTo"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)> PointerRoutedTo => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.ICorePointerRedirector, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerRoutedTo += x, x => _data.PointerRoutedTo -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.ResizeCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, object args)> ResizeCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, object>, (global::Windows.UI.Core.CoreWindow sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ResizeCompleted += x, x => _data.ResizeCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.ResizeStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, object args)> ResizeStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, object>, (global::Windows.UI.Core.CoreWindow sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ResizeStarted += x, x => _data.ResizeStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowSizeChangedEventArgs args)> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.WindowSizeChangedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowSizeChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowSizeChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.TouchHitTesting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.TouchHitTestingEventArgs args)> TouchHitTesting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.TouchHitTestingEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.TouchHitTestingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.TouchHitTestingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TouchHitTesting += x, x => _data.TouchHitTesting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.CoreWindow.VisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.VisibilityChangedEventArgs args)> VisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.VisibilityChangedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.VisibilityChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.VisibilityChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VisibilityChanged += x, x => _data.VisibilityChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.ICoreAcceleratorKeys"/> class as observables.
    /// </summary>
    public class RxICoreAcceleratorKeysEvents
    {
        private readonly global::Windows.UI.Core.ICoreAcceleratorKeys _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.ICoreAcceleratorKeys"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICoreAcceleratorKeysEvents(global::Windows.UI.Core.ICoreAcceleratorKeys data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreAcceleratorKeys.AcceleratorKeyActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args)> AcceleratorKeyActivated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreDispatcher, global::Windows.UI.Core.AcceleratorKeyEventArgs>, (global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreDispatcher sender, global::Windows.UI.Core.AcceleratorKeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AcceleratorKeyActivated += x, x => _data.AcceleratorKeyActivated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.ICoreInputSourceBase"/> class as observables.
    /// </summary>
    public class RxICoreInputSourceBaseEvents
    {
        private readonly global::Windows.UI.Core.ICoreInputSourceBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.ICoreInputSourceBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICoreInputSourceBaseEvents(global::Windows.UI.Core.ICoreInputSourceBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreInputSourceBase.InputEnabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.InputEnabledEventArgs> InputEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.InputEnabledEventArgs>, global::Windows.UI.Core.InputEnabledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.InputEnabledEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.InputEnabled += x, x => _data.InputEnabled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.ICorePointerInputSource"/> class as observables.
    /// </summary>
    public class RxICorePointerInputSourceEvents
    {
        private readonly global::Windows.UI.Core.ICorePointerInputSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.ICorePointerInputSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICorePointerInputSourceEvents(global::Windows.UI.Core.ICorePointerInputSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerInputSource.PointerCaptureLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerCaptureLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerCaptureLost += x, x => _data.PointerCaptureLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerInputSource.PointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerEntered += x, x => _data.PointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerInputSource.PointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerExited += x, x => _data.PointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerInputSource.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerInputSource.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerInputSource.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerInputSource.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.PointerEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.UI.Core.PointerEventArgs>, global::Windows.UI.Core.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.ICorePointerRedirector"/> class as observables.
    /// </summary>
    public class RxICorePointerRedirectorEvents
    {
        private readonly global::Windows.UI.Core.ICorePointerRedirector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.ICorePointerRedirector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICorePointerRedirectorEvents(global::Windows.UI.Core.ICorePointerRedirector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerRedirector.PointerRoutedAway"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)> PointerRoutedAway => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.ICorePointerRedirector, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerRoutedAway += x, x => _data.PointerRoutedAway -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerRedirector.PointerRoutedReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)> PointerRoutedReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.ICorePointerRedirector, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerRoutedReleased += x, x => _data.PointerRoutedReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICorePointerRedirector.PointerRoutedTo"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)> PointerRoutedTo => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.ICorePointerRedirector, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.ICorePointerRedirector sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerRoutedTo += x, x => _data.PointerRoutedTo -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.ICoreWindow"/> class as observables.
    /// </summary>
    public class RxICoreWindowEvents
    {
        private readonly global::Windows.UI.Core.ICoreWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.ICoreWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICoreWindowEvents(global::Windows.UI.Core.ICoreWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowActivatedEventArgs args)> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.WindowActivatedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowActivatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowActivatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.AutomationProviderRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.AutomationProviderRequestedEventArgs args)> AutomationProviderRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.AutomationProviderRequestedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.AutomationProviderRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.AutomationProviderRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AutomationProviderRequested += x, x => _data.AutomationProviderRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.CharacterReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CharacterReceivedEventArgs args)> CharacterReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.CharacterReceivedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CharacterReceivedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CharacterReceivedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CharacterReceived += x, x => _data.CharacterReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CoreWindowEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.CoreWindowEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CoreWindowEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.CoreWindowEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.InputEnabled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.InputEnabledEventArgs args)> InputEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.InputEnabledEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.InputEnabledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.InputEnabledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InputEnabled += x, x => _data.InputEnabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.KeyEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.KeyEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.PointerCaptureLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerCaptureLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerCaptureLost += x, x => _data.PointerCaptureLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.PointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerEntered += x, x => _data.PointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.PointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerExited += x, x => _data.PointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowSizeChangedEventArgs args)> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.WindowSizeChangedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowSizeChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.WindowSizeChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.TouchHitTesting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.TouchHitTestingEventArgs args)> TouchHitTesting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.TouchHitTestingEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.TouchHitTestingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.TouchHitTestingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TouchHitTesting += x, x => _data.TouchHitTesting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.ICoreWindow.VisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.VisibilityChangedEventArgs args)> VisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.VisibilityChangedEventArgs>, (global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.VisibilityChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Core.CoreWindow sender, global::Windows.UI.Core.VisibilityChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VisibilityChanged += x, x => _data.VisibilityChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.SystemNavigationManager"/> class as observables.
    /// </summary>
    public class RxSystemNavigationManagerEvents
    {
        private readonly global::Windows.UI.Core.SystemNavigationManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.SystemNavigationManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSystemNavigationManagerEvents(global::Windows.UI.Core.SystemNavigationManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.SystemNavigationManager.BackRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.BackRequestedEventArgs> BackRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Core.BackRequestedEventArgs>, global::Windows.UI.Core.BackRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.BackRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackRequested += x, x => _data.BackRequested -= x);
    }
}

namespace Windows.UI.Core.Preview
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Core.Preview"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Core.Preview.SystemNavigationManagerPreview"/> class.
        /// </summary>
        public static RxSystemNavigationManagerPreviewEvents Events(this global::Windows.UI.Core.Preview.SystemNavigationManagerPreview item) => new RxSystemNavigationManagerPreviewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Core.Preview.SystemNavigationManagerPreview"/> class as observables.
    /// </summary>
    public class RxSystemNavigationManagerPreviewEvents
    {
        private readonly global::Windows.UI.Core.Preview.SystemNavigationManagerPreview _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Core.Preview.SystemNavigationManagerPreview"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSystemNavigationManagerPreviewEvents(global::Windows.UI.Core.Preview.SystemNavigationManagerPreview data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Core.Preview.SystemNavigationManagerPreview.CloseRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.Preview.SystemNavigationCloseRequestedPreviewEventArgs> CloseRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Core.Preview.SystemNavigationCloseRequestedPreviewEventArgs>, global::Windows.UI.Core.Preview.SystemNavigationCloseRequestedPreviewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.Preview.SystemNavigationCloseRequestedPreviewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CloseRequested += x, x => _data.CloseRequested -= x);
    }
}

namespace Windows.UI.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.EdgeGesture"/> class.
        /// </summary>
        public static RxEdgeGestureEvents Events(this global::Windows.UI.Input.EdgeGesture item) => new RxEdgeGestureEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.GestureRecognizer"/> class.
        /// </summary>
        public static RxGestureRecognizerEvents Events(this global::Windows.UI.Input.GestureRecognizer item) => new RxGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.KeyboardDeliveryInterceptor"/> class.
        /// </summary>
        public static RxKeyboardDeliveryInterceptorEvents Events(this global::Windows.UI.Input.KeyboardDeliveryInterceptor item) => new RxKeyboardDeliveryInterceptorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.RadialController"/> class.
        /// </summary>
        public static RxRadialControllerEvents Events(this global::Windows.UI.Input.RadialController item) => new RxRadialControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.RadialControllerMenuItem"/> class.
        /// </summary>
        public static RxRadialControllerMenuItemEvents Events(this global::Windows.UI.Input.RadialControllerMenuItem item) => new RxRadialControllerMenuItemEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.EdgeGesture"/> class as observables.
    /// </summary>
    public class RxEdgeGestureEvents
    {
        private readonly global::Windows.UI.Input.EdgeGesture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.EdgeGesture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEdgeGestureEvents(global::Windows.UI.Input.EdgeGesture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.EdgeGesture.Canceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args)> Canceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.EdgeGesture, global::Windows.UI.Input.EdgeGestureEventArgs>, (global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Canceled += x, x => _data.Canceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.EdgeGesture.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args)> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.EdgeGesture, global::Windows.UI.Input.EdgeGestureEventArgs>, (global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.EdgeGesture.Starting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args)> Starting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.EdgeGesture, global::Windows.UI.Input.EdgeGestureEventArgs>, (global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.EdgeGesture sender, global::Windows.UI.Input.EdgeGestureEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Starting += x, x => _data.Starting -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.GestureRecognizer"/> class as observables.
    /// </summary>
    public class RxGestureRecognizerEvents
    {
        private readonly global::Windows.UI.Input.GestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.GestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGestureRecognizerEvents(global::Windows.UI.Input.GestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.CrossSliding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.CrossSlidingEventArgs args)> CrossSliding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.CrossSlidingEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.CrossSlidingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.CrossSlidingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CrossSliding += x, x => _data.CrossSliding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.Dragging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.DraggingEventArgs args)> Dragging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.DraggingEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.DraggingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.DraggingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Dragging += x, x => _data.Dragging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.Holding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.HoldingEventArgs args)> Holding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.HoldingEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.HoldingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.HoldingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Holding += x, x => _data.Holding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.ManipulationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationCompletedEventArgs args)> ManipulationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.ManipulationCompletedEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationCompleted += x, x => _data.ManipulationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.ManipulationInertiaStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationInertiaStartingEventArgs args)> ManipulationInertiaStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.ManipulationInertiaStartingEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationInertiaStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationInertiaStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationInertiaStarting += x, x => _data.ManipulationInertiaStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.ManipulationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationStartedEventArgs args)> ManipulationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.ManipulationStartedEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationStarted += x, x => _data.ManipulationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.ManipulationUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationUpdatedEventArgs args)> ManipulationUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.ManipulationUpdatedEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.ManipulationUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationUpdated += x, x => _data.ManipulationUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.RightTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.RightTappedEventArgs args)> RightTapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.RightTappedEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.RightTappedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.RightTappedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RightTapped += x, x => _data.RightTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.GestureRecognizer.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.TappedEventArgs args)> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.GestureRecognizer, global::Windows.UI.Input.TappedEventArgs>, (global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.TappedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.GestureRecognizer sender, global::Windows.UI.Input.TappedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.KeyboardDeliveryInterceptor"/> class as observables.
    /// </summary>
    public class RxKeyboardDeliveryInterceptorEvents
    {
        private readonly global::Windows.UI.Input.KeyboardDeliveryInterceptor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.KeyboardDeliveryInterceptor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxKeyboardDeliveryInterceptorEvents(global::Windows.UI.Input.KeyboardDeliveryInterceptor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.KeyboardDeliveryInterceptor.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.KeyboardDeliveryInterceptor sender, global::Windows.UI.Core.KeyEventArgs args)> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.KeyboardDeliveryInterceptor, global::Windows.UI.Core.KeyEventArgs>, (global::Windows.UI.Input.KeyboardDeliveryInterceptor sender, global::Windows.UI.Core.KeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.KeyboardDeliveryInterceptor sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.KeyboardDeliveryInterceptor.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.KeyboardDeliveryInterceptor sender, global::Windows.UI.Core.KeyEventArgs args)> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.KeyboardDeliveryInterceptor, global::Windows.UI.Core.KeyEventArgs>, (global::Windows.UI.Input.KeyboardDeliveryInterceptor sender, global::Windows.UI.Core.KeyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.KeyboardDeliveryInterceptor sender, global::Windows.UI.Core.KeyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.RadialController"/> class as observables.
    /// </summary>
    public class RxRadialControllerEvents
    {
        private readonly global::Windows.UI.Input.RadialController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.RadialController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRadialControllerEvents(global::Windows.UI.Input.RadialController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonClickedEventArgs args)> ButtonClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerButtonClickedEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonClickedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonClickedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ButtonClicked += x, x => _data.ButtonClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ButtonHolding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonHoldingEventArgs args)> ButtonHolding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerButtonHoldingEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonHoldingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonHoldingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ButtonHolding += x, x => _data.ButtonHolding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonPressedEventArgs args)> ButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerButtonPressedEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonPressedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonPressedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ButtonPressed += x, x => _data.ButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ButtonReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonReleasedEventArgs args)> ButtonReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerButtonReleasedEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonReleasedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerButtonReleasedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ButtonReleased += x, x => _data.ButtonReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ControlAcquired"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerControlAcquiredEventArgs args)> ControlAcquired => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerControlAcquiredEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerControlAcquiredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerControlAcquiredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ControlAcquired += x, x => _data.ControlAcquired -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ControlLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, object args)> ControlLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, object>, (global::Windows.UI.Input.RadialController sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ControlLost += x, x => _data.ControlLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.RotationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerRotationChangedEventArgs args)> RotationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerRotationChangedEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerRotationChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerRotationChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RotationChanged += x, x => _data.RotationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ScreenContactContinued"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs args)> ScreenContactContinued => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScreenContactContinued += x, x => _data.ScreenContactContinued -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ScreenContactEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, object args)> ScreenContactEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, object>, (global::Windows.UI.Input.RadialController sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScreenContactEnded += x, x => _data.ScreenContactEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialController.ScreenContactStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerScreenContactStartedEventArgs args)> ScreenContactStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialController, global::Windows.UI.Input.RadialControllerScreenContactStartedEventArgs>, (global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerScreenContactStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialController sender, global::Windows.UI.Input.RadialControllerScreenContactStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScreenContactStarted += x, x => _data.ScreenContactStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.RadialControllerMenuItem"/> class as observables.
    /// </summary>
    public class RxRadialControllerMenuItemEvents
    {
        private readonly global::Windows.UI.Input.RadialControllerMenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.RadialControllerMenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRadialControllerMenuItemEvents(global::Windows.UI.Input.RadialControllerMenuItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.RadialControllerMenuItem.Invoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.RadialControllerMenuItem sender, object args)> Invoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.RadialControllerMenuItem, object>, (global::Windows.UI.Input.RadialControllerMenuItem sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.RadialControllerMenuItem sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Invoked += x, x => _data.Invoked -= x);
    }
}

namespace Windows.UI.Input.Inking
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Input.Inking"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.Inking.InkPresenter"/> class.
        /// </summary>
        public static RxInkPresenterEvents Events(this global::Windows.UI.Input.Inking.InkPresenter item) => new RxInkPresenterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.Inking.InkStrokeInput"/> class.
        /// </summary>
        public static RxInkStrokeInputEvents Events(this global::Windows.UI.Input.Inking.InkStrokeInput item) => new RxInkStrokeInputEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput"/> class.
        /// </summary>
        public static RxInkUnprocessedInputEvents Events(this global::Windows.UI.Input.Inking.InkUnprocessedInput item) => new RxInkUnprocessedInputEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.Inking.InkPresenter"/> class as observables.
    /// </summary>
    public class RxInkPresenterEvents
    {
        private readonly global::Windows.UI.Input.Inking.InkPresenter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.Inking.InkPresenter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkPresenterEvents(global::Windows.UI.Input.Inking.InkPresenter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkPresenter.StrokesCollected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkPresenter sender, global::Windows.UI.Input.Inking.InkStrokesCollectedEventArgs args)> StrokesCollected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkPresenter, global::Windows.UI.Input.Inking.InkStrokesCollectedEventArgs>, (global::Windows.UI.Input.Inking.InkPresenter sender, global::Windows.UI.Input.Inking.InkStrokesCollectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkPresenter sender, global::Windows.UI.Input.Inking.InkStrokesCollectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StrokesCollected += x, x => _data.StrokesCollected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkPresenter.StrokesErased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkPresenter sender, global::Windows.UI.Input.Inking.InkStrokesErasedEventArgs args)> StrokesErased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkPresenter, global::Windows.UI.Input.Inking.InkStrokesErasedEventArgs>, (global::Windows.UI.Input.Inking.InkPresenter sender, global::Windows.UI.Input.Inking.InkStrokesErasedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkPresenter sender, global::Windows.UI.Input.Inking.InkStrokesErasedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StrokesErased += x, x => _data.StrokesErased -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.Inking.InkStrokeInput"/> class as observables.
    /// </summary>
    public class RxInkStrokeInputEvents
    {
        private readonly global::Windows.UI.Input.Inking.InkStrokeInput _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.Inking.InkStrokeInput"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkStrokeInputEvents(global::Windows.UI.Input.Inking.InkStrokeInput data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkStrokeInput.StrokeCanceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)> StrokeCanceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkStrokeInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StrokeCanceled += x, x => _data.StrokeCanceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkStrokeInput.StrokeContinued"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)> StrokeContinued => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkStrokeInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StrokeContinued += x, x => _data.StrokeContinued -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkStrokeInput.StrokeEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)> StrokeEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkStrokeInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StrokeEnded += x, x => _data.StrokeEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkStrokeInput.StrokeStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)> StrokeStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkStrokeInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkStrokeInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.StrokeStarted += x, x => _data.StrokeStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput"/> class as observables.
    /// </summary>
    public class RxInkUnprocessedInputEvents
    {
        private readonly global::Windows.UI.Input.Inking.InkUnprocessedInput _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkUnprocessedInputEvents(global::Windows.UI.Input.Inking.InkUnprocessedInput data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput.PointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)> PointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkUnprocessedInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerEntered += x, x => _data.PointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput.PointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)> PointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkUnprocessedInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerExited += x, x => _data.PointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput.PointerHovered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)> PointerHovered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkUnprocessedInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerHovered += x, x => _data.PointerHovered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput.PointerLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)> PointerLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkUnprocessedInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerLost += x, x => _data.PointerLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkUnprocessedInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkUnprocessedInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.InkUnprocessedInput.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.InkUnprocessedInput, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.InkUnprocessedInput sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
    }
}

namespace Windows.UI.Input.Inking.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Input.Inking.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource"/> class.
        /// </summary>
        public static RxCoreInkIndependentInputSourceEvents Events(this global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource item) => new RxCoreInkIndependentInputSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource"/> class.
        /// </summary>
        public static RxCoreWetStrokeUpdateSourceEvents Events(this global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource item) => new RxCoreWetStrokeUpdateSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource"/> class as observables.
    /// </summary>
    public class RxCoreInkIndependentInputSourceEvents
    {
        private readonly global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreInkIndependentInputSourceEvents(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource.PointerEntering"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)> PointerEntering => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerEntering += x, x => _data.PointerEntering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource.PointerExiting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)> PointerExiting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerExiting += x, x => _data.PointerExiting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource.PointerHovering"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)> PointerHovering => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerHovering += x, x => _data.PointerHovering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource.PointerLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)> PointerLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerLost += x, x => _data.PointerLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource.PointerMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)> PointerMoving => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerMoving += x, x => _data.PointerMoving -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource.PointerPressing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)> PointerPressing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerPressing += x, x => _data.PointerPressing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource.PointerReleasing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)> PointerReleasing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource, global::Windows.UI.Core.PointerEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource sender, global::Windows.UI.Core.PointerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PointerReleasing += x, x => _data.PointerReleasing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource"/> class as observables.
    /// </summary>
    public class RxCoreWetStrokeUpdateSourceEvents
    {
        private readonly global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreWetStrokeUpdateSourceEvents(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource.WetStrokeCanceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)> WetStrokeCanceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WetStrokeCanceled += x, x => _data.WetStrokeCanceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource.WetStrokeCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)> WetStrokeCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WetStrokeCompleted += x, x => _data.WetStrokeCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource.WetStrokeContinuing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)> WetStrokeContinuing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WetStrokeContinuing += x, x => _data.WetStrokeContinuing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource.WetStrokeStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)> WetStrokeStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WetStrokeStarting += x, x => _data.WetStrokeStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource.WetStrokeStopping"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)> WetStrokeStopping => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs>, (global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource sender, global::Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WetStrokeStopping += x, x => _data.WetStrokeStopping -= x);
    }
}

namespace Windows.UI.Input.Spatial
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Input.Spatial"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer"/> class.
        /// </summary>
        public static RxSpatialGestureRecognizerEvents Events(this global::Windows.UI.Input.Spatial.SpatialGestureRecognizer item) => new RxSpatialGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager"/> class.
        /// </summary>
        public static RxSpatialInteractionManagerEvents Events(this global::Windows.UI.Input.Spatial.SpatialInteractionManager item) => new RxSpatialInteractionManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer"/> class as observables.
    /// </summary>
    public class RxSpatialGestureRecognizerEvents
    {
        private readonly global::Windows.UI.Input.Spatial.SpatialGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpatialGestureRecognizerEvents(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.HoldCanceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldCanceledEventArgs args)> HoldCanceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialHoldCanceledEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldCanceledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldCanceledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HoldCanceled += x, x => _data.HoldCanceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.HoldCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldCompletedEventArgs args)> HoldCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialHoldCompletedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HoldCompleted += x, x => _data.HoldCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.HoldStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldStartedEventArgs args)> HoldStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialHoldStartedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialHoldStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HoldStarted += x, x => _data.HoldStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.ManipulationCanceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationCanceledEventArgs args)> ManipulationCanceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialManipulationCanceledEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationCanceledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationCanceledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationCanceled += x, x => _data.ManipulationCanceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.ManipulationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationCompletedEventArgs args)> ManipulationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialManipulationCompletedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationCompleted += x, x => _data.ManipulationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.ManipulationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationStartedEventArgs args)> ManipulationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialManipulationStartedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationStarted += x, x => _data.ManipulationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.ManipulationUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationUpdatedEventArgs args)> ManipulationUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialManipulationUpdatedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialManipulationUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ManipulationUpdated += x, x => _data.ManipulationUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.NavigationCanceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationCanceledEventArgs args)> NavigationCanceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialNavigationCanceledEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationCanceledEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationCanceledEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationCanceled += x, x => _data.NavigationCanceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.NavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationCompletedEventArgs args)> NavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialNavigationCompletedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationCompleted += x, x => _data.NavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.NavigationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationStartedEventArgs args)> NavigationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialNavigationStartedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationStarted += x, x => _data.NavigationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.NavigationUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationUpdatedEventArgs args)> NavigationUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialNavigationUpdatedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationUpdatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialNavigationUpdatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationUpdated += x, x => _data.NavigationUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.RecognitionEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialRecognitionEndedEventArgs args)> RecognitionEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialRecognitionEndedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialRecognitionEndedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialRecognitionEndedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RecognitionEnded += x, x => _data.RecognitionEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.RecognitionStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialRecognitionStartedEventArgs args)> RecognitionStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialRecognitionStartedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialRecognitionStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialRecognitionStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RecognitionStarted += x, x => _data.RecognitionStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialGestureRecognizer.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialTappedEventArgs args)> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialGestureRecognizer, global::Windows.UI.Input.Spatial.SpatialTappedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialTappedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialGestureRecognizer sender, global::Windows.UI.Input.Spatial.SpatialTappedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager"/> class as observables.
    /// </summary>
    public class RxSpatialInteractionManagerEvents
    {
        private readonly global::Windows.UI.Input.Spatial.SpatialInteractionManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpatialInteractionManagerEvents(global::Windows.UI.Input.Spatial.SpatialInteractionManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager.InteractionDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionDetectedEventArgs args)> InteractionDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialInteractionManager, global::Windows.UI.Input.Spatial.SpatialInteractionDetectedEventArgs>, (global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionDetectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionDetectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InteractionDetected += x, x => _data.InteractionDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager.SourceDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)> SourceDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialInteractionManager, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs>, (global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceDetected += x, x => _data.SourceDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager.SourceLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)> SourceLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialInteractionManager, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs>, (global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceLost += x, x => _data.SourceLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager.SourcePressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)> SourcePressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialInteractionManager, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs>, (global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourcePressed += x, x => _data.SourcePressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager.SourceReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)> SourceReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialInteractionManager, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs>, (global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceReleased += x, x => _data.SourceReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Input.Spatial.SpatialInteractionManager.SourceUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)> SourceUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.Spatial.SpatialInteractionManager, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs>, (global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Input.Spatial.SpatialInteractionManager sender, global::Windows.UI.Input.Spatial.SpatialInteractionSourceEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SourceUpdated += x, x => _data.SourceUpdated -= x);
    }
}

namespace Windows.UI.Notifications
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Notifications"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Notifications.ToastNotification"/> class.
        /// </summary>
        public static RxToastNotificationEvents Events(this global::Windows.UI.Notifications.ToastNotification item) => new RxToastNotificationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Notifications.ToastNotifier"/> class.
        /// </summary>
        public static RxToastNotifierEvents Events(this global::Windows.UI.Notifications.ToastNotifier item) => new RxToastNotifierEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Notifications.ToastNotification"/> class as observables.
    /// </summary>
    public class RxToastNotificationEvents
    {
        private readonly global::Windows.UI.Notifications.ToastNotification _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Notifications.ToastNotification"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToastNotificationEvents(global::Windows.UI.Notifications.ToastNotification data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Notifications.ToastNotification.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Notifications.ToastNotification sender, object args)> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Notifications.ToastNotification, object>, (global::Windows.UI.Notifications.ToastNotification sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Notifications.ToastNotification sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Notifications.ToastNotification.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Notifications.ToastNotification sender, global::Windows.UI.Notifications.ToastDismissedEventArgs args)> Dismissed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Notifications.ToastNotification, global::Windows.UI.Notifications.ToastDismissedEventArgs>, (global::Windows.UI.Notifications.ToastNotification sender, global::Windows.UI.Notifications.ToastDismissedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Notifications.ToastNotification sender, global::Windows.UI.Notifications.ToastDismissedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Dismissed += x, x => _data.Dismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Notifications.ToastNotification.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Notifications.ToastNotification sender, global::Windows.UI.Notifications.ToastFailedEventArgs args)> Failed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Notifications.ToastNotification, global::Windows.UI.Notifications.ToastFailedEventArgs>, (global::Windows.UI.Notifications.ToastNotification sender, global::Windows.UI.Notifications.ToastFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Notifications.ToastNotification sender, global::Windows.UI.Notifications.ToastFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Failed += x, x => _data.Failed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Notifications.ToastNotifier"/> class as observables.
    /// </summary>
    public class RxToastNotifierEvents
    {
        private readonly global::Windows.UI.Notifications.ToastNotifier _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Notifications.ToastNotifier"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToastNotifierEvents(global::Windows.UI.Notifications.ToastNotifier data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Notifications.ToastNotifier.ScheduledToastNotificationShowing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Notifications.ToastNotifier sender, global::Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs args)> ScheduledToastNotificationShowing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Notifications.ToastNotifier, global::Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs>, (global::Windows.UI.Notifications.ToastNotifier sender, global::Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Notifications.ToastNotifier sender, global::Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScheduledToastNotificationShowing += x, x => _data.ScheduledToastNotificationShowing -= x);
    }
}

namespace Windows.UI.Notifications.Management
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Notifications.Management"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Notifications.Management.UserNotificationListener"/> class.
        /// </summary>
        public static RxUserNotificationListenerEvents Events(this global::Windows.UI.Notifications.Management.UserNotificationListener item) => new RxUserNotificationListenerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Notifications.Management.UserNotificationListener"/> class as observables.
    /// </summary>
    public class RxUserNotificationListenerEvents
    {
        private readonly global::Windows.UI.Notifications.Management.UserNotificationListener _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Notifications.Management.UserNotificationListener"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserNotificationListenerEvents(global::Windows.UI.Notifications.Management.UserNotificationListener data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Notifications.Management.UserNotificationListener.NotificationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Notifications.Management.UserNotificationListener sender, global::Windows.UI.Notifications.UserNotificationChangedEventArgs args)> NotificationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Notifications.Management.UserNotificationListener, global::Windows.UI.Notifications.UserNotificationChangedEventArgs>, (global::Windows.UI.Notifications.Management.UserNotificationListener sender, global::Windows.UI.Notifications.UserNotificationChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Notifications.Management.UserNotificationListener sender, global::Windows.UI.Notifications.UserNotificationChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NotificationChanged += x, x => _data.NotificationChanged -= x);
    }
}

namespace Windows.UI.StartScreen
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.StartScreen"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.StartScreen.SecondaryTile"/> class.
        /// </summary>
        public static RxSecondaryTileEvents Events(this global::Windows.UI.StartScreen.SecondaryTile item) => new RxSecondaryTileEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.StartScreen.SecondaryTile"/> class as observables.
    /// </summary>
    public class RxSecondaryTileEvents
    {
        private readonly global::Windows.UI.StartScreen.SecondaryTile _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.StartScreen.SecondaryTile"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSecondaryTileEvents(global::Windows.UI.StartScreen.SecondaryTile data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.StartScreen.SecondaryTile.VisualElementsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.StartScreen.SecondaryTile sender, global::Windows.UI.StartScreen.VisualElementsRequestedEventArgs args)> VisualElementsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.StartScreen.SecondaryTile, global::Windows.UI.StartScreen.VisualElementsRequestedEventArgs>, (global::Windows.UI.StartScreen.SecondaryTile sender, global::Windows.UI.StartScreen.VisualElementsRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.StartScreen.SecondaryTile sender, global::Windows.UI.StartScreen.VisualElementsRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VisualElementsRequested += x, x => _data.VisualElementsRequested -= x);
    }
}

namespace Windows.UI.Text.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Text.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext"/> class.
        /// </summary>
        public static RxCoreTextEditContextEvents Events(this global::Windows.UI.Text.Core.CoreTextEditContext item) => new RxCoreTextEditContextEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Text.Core.CoreTextServicesManager"/> class.
        /// </summary>
        public static RxCoreTextServicesManagerEvents Events(this global::Windows.UI.Text.Core.CoreTextServicesManager item) => new RxCoreTextServicesManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext"/> class as observables.
    /// </summary>
    public class RxCoreTextEditContextEvents
    {
        private readonly global::Windows.UI.Text.Core.CoreTextEditContext _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreTextEditContextEvents(global::Windows.UI.Text.Core.CoreTextEditContext data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.CompositionCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextCompositionCompletedEventArgs args)> CompositionCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextCompositionCompletedEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextCompositionCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextCompositionCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CompositionCompleted += x, x => _data.CompositionCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.CompositionStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextCompositionStartedEventArgs args)> CompositionStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextCompositionStartedEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextCompositionStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextCompositionStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CompositionStarted += x, x => _data.CompositionStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.FocusRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, object args)> FocusRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, object>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FocusRemoved += x, x => _data.FocusRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.FormatUpdating"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextFormatUpdatingEventArgs args)> FormatUpdating => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextFormatUpdatingEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextFormatUpdatingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextFormatUpdatingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FormatUpdating += x, x => _data.FormatUpdating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.LayoutRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextLayoutRequestedEventArgs args)> LayoutRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextLayoutRequestedEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextLayoutRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextLayoutRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LayoutRequested += x, x => _data.LayoutRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.NotifyFocusLeaveCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, object args)> NotifyFocusLeaveCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, object>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NotifyFocusLeaveCompleted += x, x => _data.NotifyFocusLeaveCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.SelectionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextSelectionRequestedEventArgs args)> SelectionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextSelectionRequestedEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextSelectionRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextSelectionRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectionRequested += x, x => _data.SelectionRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.SelectionUpdating"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextSelectionUpdatingEventArgs args)> SelectionUpdating => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextSelectionUpdatingEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextSelectionUpdatingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextSelectionUpdatingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectionUpdating += x, x => _data.SelectionUpdating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.TextRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextTextRequestedEventArgs args)> TextRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextTextRequestedEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextTextRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextTextRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextRequested += x, x => _data.TextRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextEditContext.TextUpdating"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextTextUpdatingEventArgs args)> TextUpdating => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextEditContext, global::Windows.UI.Text.Core.CoreTextTextUpdatingEventArgs>, (global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextTextUpdatingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextEditContext sender, global::Windows.UI.Text.Core.CoreTextTextUpdatingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextUpdating += x, x => _data.TextUpdating -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Text.Core.CoreTextServicesManager"/> class as observables.
    /// </summary>
    public class RxCoreTextServicesManagerEvents
    {
        private readonly global::Windows.UI.Text.Core.CoreTextServicesManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Text.Core.CoreTextServicesManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreTextServicesManagerEvents(global::Windows.UI.Text.Core.CoreTextServicesManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Text.Core.CoreTextServicesManager.InputLanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Text.Core.CoreTextServicesManager sender, object args)> InputLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Text.Core.CoreTextServicesManager, object>, (global::Windows.UI.Text.Core.CoreTextServicesManager sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Text.Core.CoreTextServicesManager sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InputLanguageChanged += x, x => _data.InputLanguageChanged -= x);
    }
}

namespace Windows.UI.ViewManagement
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.ViewManagement"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.ViewManagement.AccessibilitySettings"/> class.
        /// </summary>
        public static RxAccessibilitySettingsEvents Events(this global::Windows.UI.ViewManagement.AccessibilitySettings item) => new RxAccessibilitySettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.ViewManagement.ApplicationView"/> class.
        /// </summary>
        public static RxApplicationViewEvents Events(this global::Windows.UI.ViewManagement.ApplicationView item) => new RxApplicationViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.ViewManagement.InputPane"/> class.
        /// </summary>
        public static RxInputPaneEvents Events(this global::Windows.UI.ViewManagement.InputPane item) => new RxInputPaneEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.ViewManagement.StatusBar"/> class.
        /// </summary>
        public static RxStatusBarEvents Events(this global::Windows.UI.ViewManagement.StatusBar item) => new RxStatusBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.ViewManagement.UISettings"/> class.
        /// </summary>
        public static RxUISettingsEvents Events(this global::Windows.UI.ViewManagement.UISettings item) => new RxUISettingsEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.ViewManagement.AccessibilitySettings"/> class as observables.
    /// </summary>
    public class RxAccessibilitySettingsEvents
    {
        private readonly global::Windows.UI.ViewManagement.AccessibilitySettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.ViewManagement.AccessibilitySettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAccessibilitySettingsEvents(global::Windows.UI.ViewManagement.AccessibilitySettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.AccessibilitySettings.HighContrastChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.AccessibilitySettings sender, object args)> HighContrastChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.AccessibilitySettings, object>, (global::Windows.UI.ViewManagement.AccessibilitySettings sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.AccessibilitySettings sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HighContrastChanged += x, x => _data.HighContrastChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.ViewManagement.ApplicationView"/> class as observables.
    /// </summary>
    public class RxApplicationViewEvents
    {
        private readonly global::Windows.UI.ViewManagement.ApplicationView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.ViewManagement.ApplicationView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationViewEvents(global::Windows.UI.ViewManagement.ApplicationView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.ApplicationView.Consolidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.ApplicationView sender, global::Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs args)> Consolidated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.ApplicationView, global::Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs>, (global::Windows.UI.ViewManagement.ApplicationView sender, global::Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.ApplicationView sender, global::Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Consolidated += x, x => _data.Consolidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.ApplicationView.VisibleBoundsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.ApplicationView sender, object args)> VisibleBoundsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.ApplicationView, object>, (global::Windows.UI.ViewManagement.ApplicationView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.ApplicationView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.VisibleBoundsChanged += x, x => _data.VisibleBoundsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.ViewManagement.InputPane"/> class as observables.
    /// </summary>
    public class RxInputPaneEvents
    {
        private readonly global::Windows.UI.ViewManagement.InputPane _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.ViewManagement.InputPane"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputPaneEvents(global::Windows.UI.ViewManagement.InputPane data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.InputPane.Hiding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.InputPane sender, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs args)> Hiding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.InputPane, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs>, (global::Windows.UI.ViewManagement.InputPane sender, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.InputPane sender, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Hiding += x, x => _data.Hiding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.InputPane.Showing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.InputPane sender, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs args)> Showing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.InputPane, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs>, (global::Windows.UI.ViewManagement.InputPane sender, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.InputPane sender, global::Windows.UI.ViewManagement.InputPaneVisibilityEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Showing += x, x => _data.Showing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.ViewManagement.StatusBar"/> class as observables.
    /// </summary>
    public class RxStatusBarEvents
    {
        private readonly global::Windows.UI.ViewManagement.StatusBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.ViewManagement.StatusBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStatusBarEvents(global::Windows.UI.ViewManagement.StatusBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.StatusBar.Hiding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.StatusBar sender, object args)> Hiding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.StatusBar, object>, (global::Windows.UI.ViewManagement.StatusBar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.StatusBar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Hiding += x, x => _data.Hiding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.StatusBar.Showing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.StatusBar sender, object args)> Showing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.StatusBar, object>, (global::Windows.UI.ViewManagement.StatusBar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.StatusBar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Showing += x, x => _data.Showing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.ViewManagement.UISettings"/> class as observables.
    /// </summary>
    public class RxUISettingsEvents
    {
        private readonly global::Windows.UI.ViewManagement.UISettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.ViewManagement.UISettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUISettingsEvents(global::Windows.UI.ViewManagement.UISettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.UISettings.AdvancedEffectsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.UISettings sender, object args)> AdvancedEffectsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.UISettings, object>, (global::Windows.UI.ViewManagement.UISettings sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.UISettings sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AdvancedEffectsEnabledChanged += x, x => _data.AdvancedEffectsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.UISettings.ColorValuesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.UISettings sender, object args)> ColorValuesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.UISettings, object>, (global::Windows.UI.ViewManagement.UISettings sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.UISettings sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ColorValuesChanged += x, x => _data.ColorValuesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.UISettings.TextScaleFactorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.UISettings sender, object args)> TextScaleFactorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.UISettings, object>, (global::Windows.UI.ViewManagement.UISettings sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.UISettings sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextScaleFactorChanged += x, x => _data.TextScaleFactorChanged -= x);
    }
}

namespace Windows.UI.ViewManagement.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.ViewManagement.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.ViewManagement.Core.CoreInputView"/> class.
        /// </summary>
        public static RxCoreInputViewEvents Events(this global::Windows.UI.ViewManagement.Core.CoreInputView item) => new RxCoreInputViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.ViewManagement.Core.CoreInputView"/> class as observables.
    /// </summary>
    public class RxCoreInputViewEvents
    {
        private readonly global::Windows.UI.ViewManagement.Core.CoreInputView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.ViewManagement.Core.CoreInputView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCoreInputViewEvents(global::Windows.UI.ViewManagement.Core.CoreInputView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.Core.CoreInputView.OcclusionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.Core.CoreInputView sender, global::Windows.UI.ViewManagement.Core.CoreInputViewOcclusionsChangedEventArgs args)> OcclusionsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.Core.CoreInputView, global::Windows.UI.ViewManagement.Core.CoreInputViewOcclusionsChangedEventArgs>, (global::Windows.UI.ViewManagement.Core.CoreInputView sender, global::Windows.UI.ViewManagement.Core.CoreInputViewOcclusionsChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.Core.CoreInputView sender, global::Windows.UI.ViewManagement.Core.CoreInputViewOcclusionsChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OcclusionsChanged += x, x => _data.OcclusionsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.Core.CoreInputView.XYFocusTransferredToPrimaryView"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.Core.CoreInputView sender, object args)> XYFocusTransferredToPrimaryView => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.Core.CoreInputView, object>, (global::Windows.UI.ViewManagement.Core.CoreInputView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.Core.CoreInputView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.XYFocusTransferredToPrimaryView += x, x => _data.XYFocusTransferredToPrimaryView -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.Core.CoreInputView.XYFocusTransferringFromPrimaryView"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.ViewManagement.Core.CoreInputView sender, global::Windows.UI.ViewManagement.Core.CoreInputViewTransferringXYFocusEventArgs args)> XYFocusTransferringFromPrimaryView => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.ViewManagement.Core.CoreInputView, global::Windows.UI.ViewManagement.Core.CoreInputViewTransferringXYFocusEventArgs>, (global::Windows.UI.ViewManagement.Core.CoreInputView sender, global::Windows.UI.ViewManagement.Core.CoreInputViewTransferringXYFocusEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.ViewManagement.Core.CoreInputView sender, global::Windows.UI.ViewManagement.Core.CoreInputViewTransferringXYFocusEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.XYFocusTransferringFromPrimaryView += x, x => _data.XYFocusTransferringFromPrimaryView -= x);
    }
}

namespace Windows.UI.WebUI
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.WebUI"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass"/> class.
        /// </summary>
        public static RxWebUIBackgroundTaskInstanceRuntimeClassEvents Events(this global::Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass item) => new RxWebUIBackgroundTaskInstanceRuntimeClassEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.WebUI.WebUIView"/> class.
        /// </summary>
        public static RxWebUIViewEvents Events(this global::Windows.UI.WebUI.WebUIView item) => new RxWebUIViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass"/> class as observables.
    /// </summary>
    public class RxWebUIBackgroundTaskInstanceRuntimeClassEvents
    {
        private readonly global::Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebUIBackgroundTaskInstanceRuntimeClassEvents(global::Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass.Canceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance sender, global::Windows.ApplicationModel.Background.BackgroundTaskCancellationReason reason)> Canceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler, (global::Windows.ApplicationModel.Background.IBackgroundTaskInstance sender, global::Windows.ApplicationModel.Background.BackgroundTaskCancellationReason reason)>(eventHandler =>
        {
            void Handler(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance sender, global::Windows.ApplicationModel.Background.BackgroundTaskCancellationReason reason) => eventHandler((sender, reason));
            return Handler;
        }

        , x => _data.Canceled += x, x => _data.Canceled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.WebUI.WebUIView"/> class as observables.
    /// </summary>
    public class RxWebUIViewEvents
    {
        private readonly global::Windows.UI.WebUI.WebUIView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.WebUI.WebUIView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebUIViewEvents(global::Windows.UI.WebUI.WebUIView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.WebUI.WebUIView sender, global::Windows.ApplicationModel.Activation.IActivatedEventArgs args)> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.WebUI.WebUIView, global::Windows.ApplicationModel.Activation.IActivatedEventArgs>, (global::Windows.UI.WebUI.WebUIView sender, global::Windows.ApplicationModel.Activation.IActivatedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.WebUI.WebUIView sender, global::Windows.ApplicationModel.Activation.IActivatedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.WebUI.WebUIView sender, object args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.WebUI.WebUIView, object>, (global::Windows.UI.WebUI.WebUIView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.WebUI.WebUIView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.ContainsFullScreenElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, object args)> ContainsFullScreenElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, object>, (global::Windows.Web.UI.IWebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContainsFullScreenElementChanged += x, x => _data.ContainsFullScreenElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.ContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)> ContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentLoading += x, x => _data.ContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.DOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)> DOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DOMContentLoaded += x, x => _data.DOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.FrameContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)> FrameContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameContentLoading += x, x => _data.FrameContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.FrameDOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)> FrameDOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameDOMContentLoaded += x, x => _data.FrameDOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.FrameNavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)> FrameNavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationCompleted += x, x => _data.FrameNavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.FrameNavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)> FrameNavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationStarting += x, x => _data.FrameNavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.LongRunningScriptDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args)> LongRunningScriptDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LongRunningScriptDetected += x, x => _data.LongRunningScriptDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.NavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)> NavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationCompleted += x, x => _data.NavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.NavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)> NavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationStarting += x, x => _data.NavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.NewWindowRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args)> NewWindowRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NewWindowRequested += x, x => _data.NewWindowRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.PermissionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args)> PermissionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PermissionRequested += x, x => _data.PermissionRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.ScriptNotify"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args)> ScriptNotify => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScriptNotify += x, x => _data.ScriptNotify -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.UnsafeContentWarningDisplaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, object args)> UnsafeContentWarningDisplaying => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, object>, (global::Windows.Web.UI.IWebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsafeContentWarningDisplaying += x, x => _data.UnsafeContentWarningDisplaying -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.UnsupportedUriSchemeIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args)> UnsupportedUriSchemeIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsupportedUriSchemeIdentified += x, x => _data.UnsupportedUriSchemeIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.UnviewableContentIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args)> UnviewableContentIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnviewableContentIdentified += x, x => _data.UnviewableContentIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIView.WebResourceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args)> WebResourceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WebResourceRequested += x, x => _data.WebResourceRequested -= x);
    }
}

namespace Windows.UI.Xaml
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Application"/> class.
        /// </summary>
        public static RxApplicationEvents Events(this global::Windows.UI.Xaml.Application item) => new RxApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.AttachedDependencyObject"/> class.
        /// </summary>
        public static RxAttachedDependencyObjectEvents Events(this global::Windows.UI.Xaml.AttachedDependencyObject item) => new RxAttachedDependencyObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.DebugSettings"/> class.
        /// </summary>
        public static RxDebugSettingsEvents Events(this global::Windows.UI.Xaml.DebugSettings item) => new RxDebugSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.DependencyObjectCollectionBase"/> class.
        /// </summary>
        public static RxDependencyObjectCollectionBaseEvents Events(this global::Windows.UI.Xaml.DependencyObjectCollectionBase item) => new RxDependencyObjectCollectionBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.DispatcherTimer"/> class.
        /// </summary>
        public static RxDispatcherTimerEvents Events(this global::Windows.UI.Xaml.DispatcherTimer item) => new RxDispatcherTimerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.FrameworkElement"/> class.
        /// </summary>
        public static RxFrameworkElementEvents Events(this global::Windows.UI.Xaml.FrameworkElement item) => new RxFrameworkElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.FrameworkTemplate"/> class.
        /// </summary>
        public static RxFrameworkTemplateEvents Events(this global::Windows.UI.Xaml.FrameworkTemplate item) => new RxFrameworkTemplateEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.IFrameworkElement"/> class.
        /// </summary>
        public static RxIFrameworkElementEvents Events(this global::Windows.UI.Xaml.IFrameworkElement item) => new RxIFrameworkElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.PropertyPath"/> class.
        /// </summary>
        public static RxPropertyPathEvents Events(this global::Windows.UI.Xaml.PropertyPath item) => new RxPropertyPathEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.ResourceDictionary"/> class.
        /// </summary>
        public static RxResourceDictionaryEvents Events(this global::Windows.UI.Xaml.ResourceDictionary item) => new RxResourceDictionaryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.SetterBase"/> class.
        /// </summary>
        public static RxSetterBaseEvents Events(this global::Windows.UI.Xaml.SetterBase item) => new RxSetterBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.StateTriggerBase"/> class.
        /// </summary>
        public static RxStateTriggerBaseEvents Events(this global::Windows.UI.Xaml.StateTriggerBase item) => new RxStateTriggerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Style"/> class.
        /// </summary>
        public static RxStyleEvents Events(this global::Windows.UI.Xaml.Style item) => new RxStyleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.TriggerAction"/> class.
        /// </summary>
        public static RxTriggerActionEvents Events(this global::Windows.UI.Xaml.TriggerAction item) => new RxTriggerActionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.TriggerBase"/> class.
        /// </summary>
        public static RxTriggerBaseEvents Events(this global::Windows.UI.Xaml.TriggerBase item) => new RxTriggerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.UIElement"/> class.
        /// </summary>
        public static RxUIElementEvents Events(this global::Windows.UI.Xaml.UIElement item) => new RxUIElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.VisualState"/> class.
        /// </summary>
        public static RxVisualStateEvents Events(this global::Windows.UI.Xaml.VisualState item) => new RxVisualStateEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.VisualStateGroup"/> class.
        /// </summary>
        public static RxVisualStateGroupEvents Events(this global::Windows.UI.Xaml.VisualStateGroup item) => new RxVisualStateGroupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.VisualStateManager"/> class.
        /// </summary>
        public static RxVisualStateManagerEvents Events(this global::Windows.UI.Xaml.VisualStateManager item) => new RxVisualStateManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.VisualTransition"/> class.
        /// </summary>
        public static RxVisualTransitionEvents Events(this global::Windows.UI.Xaml.VisualTransition item) => new RxVisualTransitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Window"/> class.
        /// </summary>
        public static RxWindowEvents Events(this global::Windows.UI.Xaml.Window item) => new RxWindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Application"/> class as observables.
    /// </summary>
    public class RxApplicationEvents
    {
        private readonly global::Windows.UI.Xaml.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationEvents(global::Windows.UI.Xaml.Application data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Application.EnteredBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.ApplicationModel.EnteredBackgroundEventArgs> EnteredBackground => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.EnteredBackgroundEventHandler, global::Windows.ApplicationModel.EnteredBackgroundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.EnteredBackgroundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EnteredBackground += x, x => _data.EnteredBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Application.LeavingBackground"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.ApplicationModel.LeavingBackgroundEventArgs> LeavingBackground => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.LeavingBackgroundEventHandler, global::Windows.ApplicationModel.LeavingBackgroundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.LeavingBackgroundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LeavingBackground += x, x => _data.LeavingBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Application.Resuming"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Resuming => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resuming += x, x => _data.Resuming -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Application.Suspending"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.ApplicationModel.SuspendingEventArgs> Suspending => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.SuspendingEventHandler, global::Windows.ApplicationModel.SuspendingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.SuspendingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Suspending += x, x => _data.Suspending -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Application.UnhandledException"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.UnhandledExceptionEventArgs> UnhandledException => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.UnhandledExceptionEventHandler, global::Windows.UI.Xaml.UnhandledExceptionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.UnhandledExceptionEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.UnhandledException += x, x => _data.UnhandledException -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.AttachedDependencyObject"/> class as observables.
    /// </summary>
    public class RxAttachedDependencyObjectEvents
    {
        private readonly global::Windows.UI.Xaml.AttachedDependencyObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.AttachedDependencyObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAttachedDependencyObjectEvents(global::Windows.UI.Xaml.AttachedDependencyObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.AttachedDependencyObject.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.DebugSettings"/> class as observables.
    /// </summary>
    public class RxDebugSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.DebugSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.DebugSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDebugSettingsEvents(global::Windows.UI.Xaml.DebugSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.DebugSettings.BindingFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.BindingFailedEventArgs> BindingFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.BindingFailedEventHandler, global::Windows.UI.Xaml.BindingFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.BindingFailedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BindingFailed += x, x => _data.BindingFailed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.DependencyObjectCollectionBase"/> class as observables.
    /// </summary>
    public class RxDependencyObjectCollectionBaseEvents
    {
        private readonly global::Windows.UI.Xaml.DependencyObjectCollectionBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.DependencyObjectCollectionBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDependencyObjectCollectionBaseEvents(global::Windows.UI.Xaml.DependencyObjectCollectionBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.DependencyObjectCollectionBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.DispatcherTimer"/> class as observables.
    /// </summary>
    public class RxDispatcherTimerEvents
    {
        private readonly global::Windows.UI.Xaml.DispatcherTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.DispatcherTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherTimerEvents(global::Windows.UI.Xaml.DispatcherTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.DispatcherTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tick += x, x => _data.Tick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.FrameworkElement"/> class as observables.
    /// </summary>
    public class RxFrameworkElementEvents : global::Windows.UI.Xaml.RxUIElementEvents
    {
        private readonly global::Windows.UI.Xaml.FrameworkElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.FrameworkElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameworkElementEvents(global::Windows.UI.Xaml.FrameworkElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.ActualThemeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.FrameworkElement sender, object args)> ActualThemeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, object>, (global::Windows.UI.Xaml.FrameworkElement sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.FrameworkElement sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActualThemeChanged += x, x => _data.ActualThemeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.EffectiveViewportChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.EffectiveViewportChangedEventArgs args)> EffectiveViewportChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.EffectiveViewportChangedEventArgs>, (global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.EffectiveViewportChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.EffectiveViewportChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EffectiveViewportChanged += x, x => _data.EffectiveViewportChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.DependencyPropertyChangedEventHandler, global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Loaded += x, x => _data.Loaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.Loading"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Loading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Loading += x, x => _data.Loading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.SizeChangedEventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.SizeChangedEventHandler, global::Windows.UI.Xaml.SizeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.SizeChangedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unloaded += x, x => _data.Unloaded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.FrameworkTemplate"/> class as observables.
    /// </summary>
    public class RxFrameworkTemplateEvents
    {
        private readonly global::Windows.UI.Xaml.FrameworkTemplate _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.FrameworkTemplate"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameworkTemplateEvents(global::Windows.UI.Xaml.FrameworkTemplate data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.FrameworkTemplate.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.IFrameworkElement"/> class as observables.
    /// </summary>
    public class RxIFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.IFrameworkElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.IFrameworkElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIFrameworkElementEvents(global::Windows.UI.Xaml.IFrameworkElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.IFrameworkElement.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.IFrameworkElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Loaded += x, x => _data.Loaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.IFrameworkElement.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.SizeChangedEventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.SizeChangedEventHandler, global::Windows.UI.Xaml.SizeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.SizeChangedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.IFrameworkElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unloaded += x, x => _data.Unloaded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.PropertyPath"/> class as observables.
    /// </summary>
    public class RxPropertyPathEvents
    {
        private readonly global::Windows.UI.Xaml.PropertyPath _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.PropertyPath"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPropertyPathEvents(global::Windows.UI.Xaml.PropertyPath data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.PropertyPath.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.ResourceDictionary"/> class as observables.
    /// </summary>
    public class RxResourceDictionaryEvents
    {
        private readonly global::Windows.UI.Xaml.ResourceDictionary _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.ResourceDictionary"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxResourceDictionaryEvents(global::Windows.UI.Xaml.ResourceDictionary data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.ResourceDictionary.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.SetterBase"/> class as observables.
    /// </summary>
    public class RxSetterBaseEvents
    {
        private readonly global::Windows.UI.Xaml.SetterBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.SetterBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSetterBaseEvents(global::Windows.UI.Xaml.SetterBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.SetterBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.StateTriggerBase"/> class as observables.
    /// </summary>
    public class RxStateTriggerBaseEvents
    {
        private readonly global::Windows.UI.Xaml.StateTriggerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.StateTriggerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStateTriggerBaseEvents(global::Windows.UI.Xaml.StateTriggerBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.StateTriggerBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Style"/> class as observables.
    /// </summary>
    public class RxStyleEvents
    {
        private readonly global::Windows.UI.Xaml.Style _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Style"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStyleEvents(global::Windows.UI.Xaml.Style data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Style.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.TriggerAction"/> class as observables.
    /// </summary>
    public class RxTriggerActionEvents
    {
        private readonly global::Windows.UI.Xaml.TriggerAction _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.TriggerAction"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTriggerActionEvents(global::Windows.UI.Xaml.TriggerAction data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.TriggerAction.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.TriggerBase"/> class as observables.
    /// </summary>
    public class RxTriggerBaseEvents
    {
        private readonly global::Windows.UI.Xaml.TriggerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.TriggerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTriggerBaseEvents(global::Windows.UI.Xaml.TriggerBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.TriggerBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.UIElement"/> class as observables.
    /// </summary>
    public class RxUIElementEvents
    {
        private readonly global::Windows.UI.Xaml.UIElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.UIElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUIElementEvents(global::Windows.UI.Xaml.UIElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.AccessKeyDisplayDismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs args)> AccessKeyDisplayDismissed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccessKeyDisplayDismissed += x, x => _data.AccessKeyDisplayDismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.AccessKeyDisplayRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs args)> AccessKeyDisplayRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccessKeyDisplayRequested += x, x => _data.AccessKeyDisplayRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.AccessKeyInvoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs args)> AccessKeyInvoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccessKeyInvoked += x, x => _data.AccessKeyInvoked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.BringIntoViewRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs args)> BringIntoViewRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BringIntoViewRequested += x, x => _data.BringIntoViewRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.CharacterReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs args)> CharacterReceived => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CharacterReceived += x, x => _data.CharacterReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ContextCanceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.RoutedEventArgs args)> ContextCanceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.RoutedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.RoutedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.RoutedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContextCanceled += x, x => _data.ContextCanceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ContextRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.ContextRequestedEventArgs args)> ContextRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.ContextRequestedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.ContextRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.ContextRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContextRequested += x, x => _data.ContextRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.DoubleTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs> DoubleTapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.DoubleTappedEventHandler, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DoubleTapped += x, x => _data.DoubleTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.DragEventHandler, global::Windows.UI.Xaml.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.DragEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.DragEventHandler, global::Windows.UI.Xaml.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.DragEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.DragEventHandler, global::Windows.UI.Xaml.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.DragEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.DragStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.DragStartingEventArgs args)> DragStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.DragStartingEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.DragStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.DragStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DragStarting += x, x => _data.DragStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.DragEventHandler, global::Windows.UI.Xaml.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.DragEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Drop += x, x => _data.Drop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.DropCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.DropCompletedEventArgs args)> DropCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.DropCompletedEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.DropCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.DropCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DropCompleted += x, x => _data.DropCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.GettingFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.GettingFocusEventArgs args)> GettingFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.GettingFocusEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.GettingFocusEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.GettingFocusEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GettingFocus += x, x => _data.GettingFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.Holding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.HoldingRoutedEventArgs> Holding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.HoldingEventHandler, global::Windows.UI.Xaml.Input.HoldingRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.HoldingRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Holding += x, x => _data.Holding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.KeyRoutedEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.KeyEventHandler, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.KeyRoutedEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.KeyEventHandler, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.LosingFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.LosingFocusEventArgs args)> LosingFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.LosingFocusEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.LosingFocusEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.LosingFocusEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LosingFocus += x, x => _data.LosingFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ManipulationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs> ManipulationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.ManipulationCompletedEventHandler, global::Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ManipulationCompleted += x, x => _data.ManipulationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ManipulationDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs> ManipulationDelta => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.ManipulationDeltaEventHandler, global::Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ManipulationDelta += x, x => _data.ManipulationDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ManipulationInertiaStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs> ManipulationInertiaStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.ManipulationInertiaStartingEventHandler, global::Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ManipulationInertiaStarting += x, x => _data.ManipulationInertiaStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ManipulationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs> ManipulationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.ManipulationStartedEventHandler, global::Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ManipulationStarted += x, x => _data.ManipulationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ManipulationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs> ManipulationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.ManipulationStartingEventHandler, global::Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ManipulationStarting += x, x => _data.ManipulationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.NoFocusCandidateFound"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs args)> NoFocusCandidateFound => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NoFocusCandidateFound += x, x => _data.NoFocusCandidateFound -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerCanceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerCanceled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerCanceled += x, x => _data.PointerCanceled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerCaptureLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerCaptureLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerCaptureLost += x, x => _data.PointerCaptureLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerEntered += x, x => _data.PointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerExited += x, x => _data.PointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.PointerRoutedEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.PointerEventHandler, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.KeyRoutedEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.KeyEventHandler, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.KeyRoutedEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.KeyEventHandler, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.ProcessKeyboardAccelerators"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)> ProcessKeyboardAccelerators => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>, (global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.UIElement sender, global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ProcessKeyboardAccelerators += x, x => _data.ProcessKeyboardAccelerators -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.RightTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.RightTappedRoutedEventArgs> RightTapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.RightTappedEventHandler, global::Windows.UI.Xaml.Input.RightTappedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.RightTappedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RightTapped += x, x => _data.RightTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.UIElement.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Input.TappedRoutedEventArgs> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Input.TappedEventHandler, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.VisualState"/> class as observables.
    /// </summary>
    public class RxVisualStateEvents
    {
        private readonly global::Windows.UI.Xaml.VisualState _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.VisualState"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualStateEvents(global::Windows.UI.Xaml.VisualState data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.VisualState.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.VisualStateGroup"/> class as observables.
    /// </summary>
    public class RxVisualStateGroupEvents
    {
        private readonly global::Windows.UI.Xaml.VisualStateGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.VisualStateGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualStateGroupEvents(global::Windows.UI.Xaml.VisualStateGroup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.VisualStateGroup.CurrentStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.VisualStateChangedEventArgs> CurrentStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.VisualStateChangedEventHandler, global::Windows.UI.Xaml.VisualStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.VisualStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CurrentStateChanged += x, x => _data.CurrentStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.VisualStateGroup.CurrentStateChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.VisualStateChangedEventArgs> CurrentStateChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.VisualStateChangedEventHandler, global::Windows.UI.Xaml.VisualStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.VisualStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CurrentStateChanging += x, x => _data.CurrentStateChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.VisualStateGroup.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.VisualStateManager"/> class as observables.
    /// </summary>
    public class RxVisualStateManagerEvents
    {
        private readonly global::Windows.UI.Xaml.VisualStateManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.VisualStateManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualStateManagerEvents(global::Windows.UI.Xaml.VisualStateManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.VisualStateManager.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.VisualTransition"/> class as observables.
    /// </summary>
    public class RxVisualTransitionEvents
    {
        private readonly global::Windows.UI.Xaml.VisualTransition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.VisualTransition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualTransitionEvents(global::Windows.UI.Xaml.VisualTransition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.VisualTransition.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Window"/> class as observables.
    /// </summary>
    public class RxWindowEvents
    {
        private readonly global::Windows.UI.Xaml.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWindowEvents(global::Windows.UI.Xaml.Window data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Window.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.WindowActivatedEventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.WindowActivatedEventHandler, global::Windows.UI.Core.WindowActivatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.WindowActivatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Window.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.CoreWindowEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.WindowClosedEventHandler, global::Windows.UI.Core.CoreWindowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.CoreWindowEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Window.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.WindowSizeChangedEventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.WindowSizeChangedEventHandler, global::Windows.UI.Core.WindowSizeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.WindowSizeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Window.VisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Core.VisibilityChangedEventArgs> VisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.WindowVisibilityChangedEventHandler, global::Windows.UI.Core.VisibilityChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Core.VisibilityChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VisibilityChanged += x, x => _data.VisibilityChanged -= x);
    }
}

namespace Windows.UI.Xaml.Automation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Automation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.AutomationAnnotation"/> class.
        /// </summary>
        public static RxAutomationAnnotationEvents Events(this global::Windows.UI.Xaml.Automation.AutomationAnnotation item) => new RxAutomationAnnotationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.AutomationAnnotation"/> class as observables.
    /// </summary>
    public class RxAutomationAnnotationEvents
    {
        private readonly global::Windows.UI.Xaml.Automation.AutomationAnnotation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Automation.AutomationAnnotation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutomationAnnotationEvents(global::Windows.UI.Xaml.Automation.AutomationAnnotation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Automation.AutomationAnnotation.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Automation.Peers
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Automation.Peers"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeer"/> class.
        /// </summary>
        public static RxAutomationPeerEvents Events(this global::Windows.UI.Xaml.Automation.Peers.AutomationPeer item) => new RxAutomationPeerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation"/> class.
        /// </summary>
        public static RxAutomationPeerAnnotationEvents Events(this global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation item) => new RxAutomationPeerAnnotationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeer"/> class as observables.
    /// </summary>
    public class RxAutomationPeerEvents
    {
        private readonly global::Windows.UI.Xaml.Automation.Peers.AutomationPeer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutomationPeerEvents(global::Windows.UI.Xaml.Automation.Peers.AutomationPeer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeer.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation"/> class as observables.
    /// </summary>
    public class RxAutomationPeerAnnotationEvents
    {
        private readonly global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutomationPeerAnnotationEvents(global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Automation.Provider
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Automation.Provider"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple"/> class.
        /// </summary>
        public static RxIRawElementProviderSimpleEvents Events(this global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple item) => new RxIRawElementProviderSimpleEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple"/> class as observables.
    /// </summary>
    public class RxIRawElementProviderSimpleEvents
    {
        private readonly global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIRawElementProviderSimpleEvents(global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Controls
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Controls"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AppBar"/> class.
        /// </summary>
        public static RxAppBarEvents Events(this global::Windows.UI.Xaml.Controls.AppBar item) => new RxAppBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBox"/> class.
        /// </summary>
        public static RxAutoSuggestBoxEvents Events(this global::Windows.UI.Xaml.Controls.AutoSuggestBox item) => new RxAutoSuggestBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs"/> class.
        /// </summary>
        public static RxAutoSuggestBoxQuerySubmittedEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs item) => new RxAutoSuggestBoxQuerySubmittedEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs"/> class.
        /// </summary>
        public static RxAutoSuggestBoxSuggestionChosenEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs item) => new RxAutoSuggestBoxSuggestionChosenEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs"/> class.
        /// </summary>
        public static RxAutoSuggestBoxTextChangedEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs item) => new RxAutoSuggestBoxTextChangedEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.CalendarDatePicker"/> class.
        /// </summary>
        public static RxCalendarDatePickerEvents Events(this global::Windows.UI.Xaml.Controls.CalendarDatePicker item) => new RxCalendarDatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.CalendarView"/> class.
        /// </summary>
        public static RxCalendarViewEvents Events(this global::Windows.UI.Xaml.Controls.CalendarView item) => new RxCalendarViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ColorPicker"/> class.
        /// </summary>
        public static RxColorPickerEvents Events(this global::Windows.UI.Xaml.Controls.ColorPicker item) => new RxColorPickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ColumnDefinition"/> class.
        /// </summary>
        public static RxColumnDefinitionEvents Events(this global::Windows.UI.Xaml.Controls.ColumnDefinition item) => new RxColumnDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ComboBox"/> class.
        /// </summary>
        public static RxComboBoxEvents Events(this global::Windows.UI.Xaml.Controls.ComboBox item) => new RxComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.CommandBar"/> class.
        /// </summary>
        public static RxCommandBarEvents Events(this global::Windows.UI.Xaml.Controls.CommandBar item) => new RxCommandBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog"/> class.
        /// </summary>
        public static RxContentDialogEvents Events(this global::Windows.UI.Xaml.Controls.ContentDialog item) => new RxContentDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Control"/> class.
        /// </summary>
        public static RxControlEvents Events(this global::Windows.UI.Xaml.Controls.Control item) => new RxControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePickedEventArgs"/> class.
        /// </summary>
        public static RxDatePickedEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.DatePickedEventArgs item) => new RxDatePickedEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePicker"/> class.
        /// </summary>
        public static RxDatePickerEvents Events(this global::Windows.UI.Xaml.Controls.DatePicker item) => new RxDatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyout"/> class.
        /// </summary>
        public static RxDatePickerFlyoutEvents Events(this global::Windows.UI.Xaml.Controls.DatePickerFlyout item) => new RxDatePickerFlyoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyoutItem"/> class.
        /// </summary>
        public static RxDatePickerFlyoutItemEvents Events(this global::Windows.UI.Xaml.Controls.DatePickerFlyoutItem item) => new RxDatePickerFlyoutItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Frame"/> class.
        /// </summary>
        public static RxFrameEvents Events(this global::Windows.UI.Xaml.Controls.Frame item) => new RxFrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.GroupStyle"/> class.
        /// </summary>
        public static RxGroupStyleEvents Events(this global::Windows.UI.Xaml.Controls.GroupStyle item) => new RxGroupStyleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.HandwritingView"/> class.
        /// </summary>
        public static RxHandwritingViewEvents Events(this global::Windows.UI.Xaml.Controls.HandwritingView item) => new RxHandwritingViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Hub"/> class.
        /// </summary>
        public static RxHubEvents Events(this global::Windows.UI.Xaml.Controls.Hub item) => new RxHubEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.IconSource"/> class.
        /// </summary>
        public static RxIconSourceEvents Events(this global::Windows.UI.Xaml.Controls.IconSource item) => new RxIconSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Image"/> class.
        /// </summary>
        public static RxImageEvents Events(this global::Windows.UI.Xaml.Controls.Image item) => new RxImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar"/> class.
        /// </summary>
        public static RxInkToolbarEvents Events(this global::Windows.UI.Xaml.Controls.InkToolbar item) => new RxInkToolbarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarCustomPen"/> class.
        /// </summary>
        public static RxInkToolbarCustomPenEvents Events(this global::Windows.UI.Xaml.Controls.InkToolbarCustomPen item) => new RxInkToolbarCustomPenEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem"/> class.
        /// </summary>
        public static RxInkToolbarFlyoutItemEvents Events(this global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem item) => new RxInkToolbarFlyoutItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.IPopup"/> class.
        /// </summary>
        public static RxIPopupEvents Events(this global::Windows.UI.Xaml.Controls.IPopup item) => new RxIPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ISelector"/> class.
        /// </summary>
        public static RxISelectorEvents Events(this global::Windows.UI.Xaml.Controls.ISelector item) => new RxISelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemCollection"/> class.
        /// </summary>
        public static RxItemCollectionEvents Events(this global::Windows.UI.Xaml.Controls.ItemCollection item) => new RxItemCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        public static RxItemContainerGeneratorEvents Events(this global::Windows.UI.Xaml.Controls.ItemContainerGenerator item) => new RxItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs"/> class.
        /// </summary>
        public static RxItemsPickedEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs item) => new RxItemsPickedEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPresenter"/> class.
        /// </summary>
        public static RxItemsPresenterEvents Events(this global::Windows.UI.Xaml.Controls.ItemsPresenter item) => new RxItemsPresenterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ListPickerFlyout"/> class.
        /// </summary>
        public static RxListPickerFlyoutEvents Events(this global::Windows.UI.Xaml.Controls.ListPickerFlyout item) => new RxListPickerFlyoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase"/> class.
        /// </summary>
        public static RxListViewBaseEvents Events(this global::Windows.UI.Xaml.Controls.ListViewBase item) => new RxListViewBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement"/> class.
        /// </summary>
        public static RxMediaElementEvents Events(this global::Windows.UI.Xaml.Controls.MediaElement item) => new RxMediaElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.MediaTransportControls"/> class.
        /// </summary>
        public static RxMediaTransportControlsEvents Events(this global::Windows.UI.Xaml.Controls.MediaTransportControls item) => new RxMediaTransportControlsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.MenuFlyoutItem"/> class.
        /// </summary>
        public static RxMenuFlyoutItemEvents Events(this global::Windows.UI.Xaml.Controls.MenuFlyoutItem item) => new RxMenuFlyoutItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView"/> class.
        /// </summary>
        public static RxNavigationViewEvents Events(this global::Windows.UI.Xaml.Controls.NavigationView item) => new RxNavigationViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.NavigationViewTemplateSettings"/> class.
        /// </summary>
        public static RxNavigationViewTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.NavigationViewTemplateSettings item) => new RxNavigationViewTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PasswordBox"/> class.
        /// </summary>
        public static RxPasswordBoxEvents Events(this global::Windows.UI.Xaml.Controls.PasswordBox item) => new RxPasswordBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs"/> class.
        /// </summary>
        public static RxPickerConfirmedEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs item) => new RxPickerConfirmedEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PickerFlyout"/> class.
        /// </summary>
        public static RxPickerFlyoutEvents Events(this global::Windows.UI.Xaml.Controls.PickerFlyout item) => new RxPickerFlyoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Pivot"/> class.
        /// </summary>
        public static RxPivotEvents Events(this global::Windows.UI.Xaml.Controls.Pivot item) => new RxPivotEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PopupBase"/> class.
        /// </summary>
        public static RxPopupBaseEvents Events(this global::Windows.UI.Xaml.Controls.PopupBase item) => new RxPopupBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RatingControl"/> class.
        /// </summary>
        public static RxRatingControlEvents Events(this global::Windows.UI.Xaml.Controls.RatingControl item) => new RxRatingControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RatingItemInfo"/> class.
        /// </summary>
        public static RxRatingItemInfoEvents Events(this global::Windows.UI.Xaml.Controls.RatingItemInfo item) => new RxRatingItemInfoEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RefreshContainer"/> class.
        /// </summary>
        public static RxRefreshContainerEvents Events(this global::Windows.UI.Xaml.Controls.RefreshContainer item) => new RxRefreshContainerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RefreshVisualizer"/> class.
        /// </summary>
        public static RxRefreshVisualizerEvents Events(this global::Windows.UI.Xaml.Controls.RefreshVisualizer item) => new RxRefreshVisualizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox"/> class.
        /// </summary>
        public static RxRichEditBoxEvents Events(this global::Windows.UI.Xaml.Controls.RichEditBox item) => new RxRichEditBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlock"/> class.
        /// </summary>
        public static RxRichTextBlockEvents Events(this global::Windows.UI.Xaml.Controls.RichTextBlock item) => new RxRichTextBlockEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlockOverflow"/> class.
        /// </summary>
        public static RxRichTextBlockOverflowEvents Events(this global::Windows.UI.Xaml.Controls.RichTextBlockOverflow item) => new RxRichTextBlockOverflowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RowDefinition"/> class.
        /// </summary>
        public static RxRowDefinitionEvents Events(this global::Windows.UI.Xaml.Controls.RowDefinition item) => new RxRowDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer"/> class.
        /// </summary>
        public static RxScrollViewerEvents Events(this global::Windows.UI.Xaml.Controls.ScrollViewer item) => new RxScrollViewerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox"/> class.
        /// </summary>
        public static RxSearchBoxEvents Events(this global::Windows.UI.Xaml.Controls.SearchBox item) => new RxSearchBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SemanticZoom"/> class.
        /// </summary>
        public static RxSemanticZoomEvents Events(this global::Windows.UI.Xaml.Controls.SemanticZoom item) => new RxSemanticZoomEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SettingsFlyout"/> class.
        /// </summary>
        public static RxSettingsFlyoutEvents Events(this global::Windows.UI.Xaml.Controls.SettingsFlyout item) => new RxSettingsFlyoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SplitButton"/> class.
        /// </summary>
        public static RxSplitButtonEvents Events(this global::Windows.UI.Xaml.Controls.SplitButton item) => new RxSplitButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SplitView"/> class.
        /// </summary>
        public static RxSplitViewEvents Events(this global::Windows.UI.Xaml.Controls.SplitView item) => new RxSplitViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.StackPanel"/> class.
        /// </summary>
        public static RxStackPanelEvents Events(this global::Windows.UI.Xaml.Controls.StackPanel item) => new RxStackPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SwapChainPanel"/> class.
        /// </summary>
        public static RxSwapChainPanelEvents Events(this global::Windows.UI.Xaml.Controls.SwapChainPanel item) => new RxSwapChainPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItem"/> class.
        /// </summary>
        public static RxSwipeItemEvents Events(this global::Windows.UI.Xaml.Controls.SwipeItem item) => new RxSwipeItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItems"/> class.
        /// </summary>
        public static RxSwipeItemsEvents Events(this global::Windows.UI.Xaml.Controls.SwipeItems item) => new RxSwipeItemsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TextBlock"/> class.
        /// </summary>
        public static RxTextBlockEvents Events(this global::Windows.UI.Xaml.Controls.TextBlock item) => new RxTextBlockEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TextBox"/> class.
        /// </summary>
        public static RxTextBoxEvents Events(this global::Windows.UI.Xaml.Controls.TextBox item) => new RxTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TimePickedEventArgs"/> class.
        /// </summary>
        public static RxTimePickedEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.TimePickedEventArgs item) => new RxTimePickedEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TimePicker"/> class.
        /// </summary>
        public static RxTimePickerEvents Events(this global::Windows.UI.Xaml.Controls.TimePicker item) => new RxTimePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TimePickerFlyout"/> class.
        /// </summary>
        public static RxTimePickerFlyoutEvents Events(this global::Windows.UI.Xaml.Controls.TimePickerFlyout item) => new RxTimePickerFlyoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSplitButton"/> class.
        /// </summary>
        public static RxToggleSplitButtonEvents Events(this global::Windows.UI.Xaml.Controls.ToggleSplitButton item) => new RxToggleSplitButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSwitch"/> class.
        /// </summary>
        public static RxToggleSwitchEvents Events(this global::Windows.UI.Xaml.Controls.ToggleSwitch item) => new RxToggleSwitchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ToolTip"/> class.
        /// </summary>
        public static RxToolTipEvents Events(this global::Windows.UI.Xaml.Controls.ToolTip item) => new RxToolTipEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TreeView"/> class.
        /// </summary>
        public static RxTreeViewEvents Events(this global::Windows.UI.Xaml.Controls.TreeView item) => new RxTreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings"/> class.
        /// </summary>
        public static RxTreeViewItemTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings item) => new RxTreeViewItemTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewNode"/> class.
        /// </summary>
        public static RxTreeViewNodeEvents Events(this global::Windows.UI.Xaml.Controls.TreeViewNode item) => new RxTreeViewNodeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout"/> class.
        /// </summary>
        public static RxVirtualizingPanelLayoutEvents Events(this global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout item) => new RxVirtualizingPanelLayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingStackPanel"/> class.
        /// </summary>
        public static RxVirtualizingStackPanelEvents Events(this global::Windows.UI.Xaml.Controls.VirtualizingStackPanel item) => new RxVirtualizingStackPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.WebView"/> class.
        /// </summary>
        public static RxWebViewEvents Events(this global::Windows.UI.Xaml.Controls.WebView item) => new RxWebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AppBar"/> class as observables.
    /// </summary>
    public class RxAppBarEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.AppBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.AppBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppBarEvents(global::Windows.UI.Xaml.Controls.AppBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AppBar.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AppBar.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AppBar.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AppBar.Opening"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Opening => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opening += x, x => _data.Opening -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBox"/> class as observables.
    /// </summary>
    public class RxAutoSuggestBoxEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.AutoSuggestBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutoSuggestBoxEvents(global::Windows.UI.Xaml.Controls.AutoSuggestBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBox.QuerySubmitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs args)> QuerySubmitted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.AutoSuggestBox, global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs>, (global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.QuerySubmitted += x, x => _data.QuerySubmitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBox.SuggestionChosen"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs args)> SuggestionChosen => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.AutoSuggestBox, global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs>, (global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SuggestionChosen += x, x => _data.SuggestionChosen -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs args)> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.AutoSuggestBox, global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs>, (global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.AutoSuggestBox sender, global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs"/> class as observables.
    /// </summary>
    public class RxAutoSuggestBoxQuerySubmittedEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutoSuggestBoxQuerySubmittedEventArgsEvents(global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs"/> class as observables.
    /// </summary>
    public class RxAutoSuggestBoxSuggestionChosenEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutoSuggestBoxSuggestionChosenEventArgsEvents(global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs"/> class as observables.
    /// </summary>
    public class RxAutoSuggestBoxTextChangedEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutoSuggestBoxTextChangedEventArgsEvents(global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.CalendarDatePicker"/> class as observables.
    /// </summary>
    public class RxCalendarDatePickerEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.CalendarDatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.CalendarDatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarDatePickerEvents(global::Windows.UI.Xaml.Controls.CalendarDatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.CalendarDatePicker.CalendarViewDayItemChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs e)> CalendarViewDayItemChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventHandler, (global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs e)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs e) => eventHandler((sender, e));
            return Handler;
        }

        , x => _data.CalendarViewDayItemChanging += x, x => _data.CalendarViewDayItemChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.CalendarDatePicker.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.CalendarDatePicker.DateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.CalendarDatePicker sender, global::Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs args)> DateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.CalendarDatePicker, global::Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs>, (global::Windows.UI.Xaml.Controls.CalendarDatePicker sender, global::Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.CalendarDatePicker sender, global::Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DateChanged += x, x => _data.DateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.CalendarDatePicker.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.CalendarView"/> class as observables.
    /// </summary>
    public class RxCalendarViewEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.CalendarView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.CalendarView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarViewEvents(global::Windows.UI.Xaml.Controls.CalendarView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.CalendarView.CalendarViewDayItemChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs args)> CalendarViewDayItemChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.CalendarView, global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs>, (global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CalendarViewDayItemChanging += x, x => _data.CalendarViewDayItemChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.CalendarView.SelectedDatesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs args)> SelectedDatesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.CalendarView, global::Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs>, (global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.CalendarView sender, global::Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectedDatesChanged += x, x => _data.SelectedDatesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ColorPicker"/> class as observables.
    /// </summary>
    public class RxColorPickerEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ColorPicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ColorPicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxColorPickerEvents(global::Windows.UI.Xaml.Controls.ColorPicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ColorPicker.ColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ColorPicker sender, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs args)> ColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ColorPicker, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs>, (global::Windows.UI.Xaml.Controls.ColorPicker sender, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ColorPicker sender, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ColorChanged += x, x => _data.ColorChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ColumnDefinition"/> class as observables.
    /// </summary>
    public class RxColumnDefinitionEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ColumnDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ColumnDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxColumnDefinitionEvents(global::Windows.UI.Xaml.Controls.ColumnDefinition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ColumnDefinition.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ComboBox"/> class as observables.
    /// </summary>
    public class RxComboBoxEvents : global::Windows.UI.Xaml.Controls.RxListViewBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComboBoxEvents(global::Windows.UI.Xaml.Controls.ComboBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ComboBox.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> DropDownOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ComboBox.TextSubmitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ComboBox sender, global::Windows.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs args)> TextSubmitted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ComboBox, global::Windows.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs>, (global::Windows.UI.Xaml.Controls.ComboBox sender, global::Windows.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ComboBox sender, global::Windows.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextSubmitted += x, x => _data.TextSubmitted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.CommandBar"/> class as observables.
    /// </summary>
    public class RxCommandBarEvents : global::Windows.UI.Xaml.Controls.RxAppBarEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.CommandBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.CommandBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommandBarEvents(global::Windows.UI.Xaml.Controls.CommandBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.CommandBar.DynamicOverflowItemsChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.CommandBar sender, global::Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs args)> DynamicOverflowItemsChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.CommandBar, global::Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs>, (global::Windows.UI.Xaml.Controls.CommandBar sender, global::Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.CommandBar sender, global::Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DynamicOverflowItemsChanging += x, x => _data.DynamicOverflowItemsChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog"/> class as observables.
    /// </summary>
    public class RxContentDialogEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ContentDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContentDialogEvents(global::Windows.UI.Xaml.Controls.ContentDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog.CloseButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args)> CloseButtonClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ContentDialog, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs>, (global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CloseButtonClick += x, x => _data.CloseButtonClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ContentDialog, global::Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs>, (global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs args)> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ContentDialog, global::Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs>, (global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs args)> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ContentDialog, global::Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs>, (global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog.PrimaryButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args)> PrimaryButtonClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ContentDialog, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs>, (global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PrimaryButtonClick += x, x => _data.PrimaryButtonClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ContentDialog.SecondaryButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args)> SecondaryButtonClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ContentDialog, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs>, (global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ContentDialog sender, global::Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SecondaryButtonClick += x, x => _data.SecondaryButtonClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Control"/> class as observables.
    /// </summary>
    public class RxControlEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Control _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Control"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxControlEvents(global::Windows.UI.Xaml.Controls.Control data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Control.FocusDisengaged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Control sender, global::Windows.UI.Xaml.Controls.FocusDisengagedEventArgs args)> FocusDisengaged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.FocusDisengagedEventArgs>, (global::Windows.UI.Xaml.Controls.Control sender, global::Windows.UI.Xaml.Controls.FocusDisengagedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Control sender, global::Windows.UI.Xaml.Controls.FocusDisengagedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FocusDisengaged += x, x => _data.FocusDisengaged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Control.FocusEngaged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Control sender, global::Windows.UI.Xaml.Controls.FocusEngagedEventArgs args)> FocusEngaged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.FocusEngagedEventArgs>, (global::Windows.UI.Xaml.Controls.Control sender, global::Windows.UI.Xaml.Controls.FocusEngagedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Control sender, global::Windows.UI.Xaml.Controls.FocusEngagedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FocusEngaged += x, x => _data.FocusEngaged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePickedEventArgs"/> class as observables.
    /// </summary>
    public class RxDatePickedEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.DatePickedEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.DatePickedEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickedEventArgsEvents(global::Windows.UI.Xaml.Controls.DatePickedEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.DatePickedEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePicker"/> class as observables.
    /// </summary>
    public class RxDatePickerEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickerEvents(global::Windows.UI.Xaml.Controls.DatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.DatePicker.DateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs> DateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs>, global::Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateChanged += x, x => _data.DateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.DatePicker.SelectedDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.DatePicker sender, global::Windows.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs args)> SelectedDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.DatePicker, global::Windows.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs>, (global::Windows.UI.Xaml.Controls.DatePicker sender, global::Windows.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.DatePicker sender, global::Windows.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectedDateChanged += x, x => _data.SelectedDateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyout"/> class as observables.
    /// </summary>
    public class RxDatePickerFlyoutEvents : global::Windows.UI.Xaml.Controls.Primitives.RxFlyoutBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.DatePickerFlyout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickerFlyoutEvents(global::Windows.UI.Xaml.Controls.DatePickerFlyout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyout.DatePicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.DatePickerFlyout sender, global::Windows.UI.Xaml.Controls.DatePickedEventArgs args)> DatePicked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.DatePickerFlyout, global::Windows.UI.Xaml.Controls.DatePickedEventArgs>, (global::Windows.UI.Xaml.Controls.DatePickerFlyout sender, global::Windows.UI.Xaml.Controls.DatePickedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.DatePickerFlyout sender, global::Windows.UI.Xaml.Controls.DatePickedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DatePicked += x, x => _data.DatePicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyoutItem"/> class as observables.
    /// </summary>
    public class RxDatePickerFlyoutItemEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.DatePickerFlyoutItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyoutItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickerFlyoutItemEvents(global::Windows.UI.Xaml.Controls.DatePickerFlyoutItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.DatePickerFlyoutItem.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Frame"/> class as observables.
    /// </summary>
    public class RxFrameEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Frame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Frame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFrameEvents(global::Windows.UI.Xaml.Controls.Frame data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Frame.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Navigation.NavigatedEventHandler, global::Windows.UI.Xaml.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Frame.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Navigation.NavigatingCancelEventHandler, global::Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Frame.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Navigation.NavigationFailedEventHandler, global::Windows.UI.Xaml.Navigation.NavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Navigation.NavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Frame.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Navigation.NavigationStoppedEventHandler, global::Windows.UI.Xaml.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.GroupStyle"/> class as observables.
    /// </summary>
    public class RxGroupStyleEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.GroupStyle _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.GroupStyle"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGroupStyleEvents(global::Windows.UI.Xaml.Controls.GroupStyle data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.GroupStyle.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.HandwritingView"/> class as observables.
    /// </summary>
    public class RxHandwritingViewEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.HandwritingView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.HandwritingView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHandwritingViewEvents(global::Windows.UI.Xaml.Controls.HandwritingView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.HandwritingView.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.HandwritingView sender, global::Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs args)> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.HandwritingView, global::Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs>, (global::Windows.UI.Xaml.Controls.HandwritingView sender, global::Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.HandwritingView sender, global::Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.HandwritingView.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.HandwritingView sender, global::Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs args)> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.HandwritingView, global::Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs>, (global::Windows.UI.Xaml.Controls.HandwritingView sender, global::Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.HandwritingView sender, global::Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Hub"/> class as observables.
    /// </summary>
    public class RxHubEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Hub _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Hub"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHubEvents(global::Windows.UI.Xaml.Controls.Hub data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Hub.SectionHeaderClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs> SectionHeaderClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.HubSectionHeaderClickEventHandler, global::Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SectionHeaderClick += x, x => _data.SectionHeaderClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Hub.SectionsInViewChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs> SectionsInViewChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.SectionsInViewChangedEventHandler, global::Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SectionsInViewChanged += x, x => _data.SectionsInViewChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.IconSource"/> class as observables.
    /// </summary>
    public class RxIconSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.IconSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.IconSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIconSourceEvents(global::Windows.UI.Xaml.Controls.IconSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.IconSource.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Image"/> class as observables.
    /// </summary>
    public class RxImageEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Image _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Image"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImageEvents(global::Windows.UI.Xaml.Controls.Image data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Image.ImageFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> ImageFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ImageFailed += x, x => _data.ImageFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Image.ImageOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> ImageOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ImageOpened += x, x => _data.ImageOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar"/> class as observables.
    /// </summary>
    public class RxInkToolbarEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.InkToolbar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkToolbarEvents(global::Windows.UI.Xaml.Controls.InkToolbar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar.ActiveToolChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)> ActiveToolChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.InkToolbar, object>, (global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActiveToolChanged += x, x => _data.ActiveToolChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar.EraseAllClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)> EraseAllClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.InkToolbar, object>, (global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.EraseAllClicked += x, x => _data.EraseAllClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar.InkDrawingAttributesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)> InkDrawingAttributesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.InkToolbar, object>, (global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.InkDrawingAttributesChanged += x, x => _data.InkDrawingAttributesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar.IsRulerButtonCheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)> IsRulerButtonCheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.InkToolbar, object>, (global::Windows.UI.Xaml.Controls.InkToolbar sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.InkToolbar sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsRulerButtonCheckedChanged += x, x => _data.IsRulerButtonCheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbar.IsStencilButtonCheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.InkToolbar sender, global::Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs args)> IsStencilButtonCheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.InkToolbar, global::Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs>, (global::Windows.UI.Xaml.Controls.InkToolbar sender, global::Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.InkToolbar sender, global::Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsStencilButtonCheckedChanged += x, x => _data.IsStencilButtonCheckedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarCustomPen"/> class as observables.
    /// </summary>
    public class RxInkToolbarCustomPenEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.InkToolbarCustomPen _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarCustomPen"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkToolbarCustomPenEvents(global::Windows.UI.Xaml.Controls.InkToolbarCustomPen data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarCustomPen.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem"/> class as observables.
    /// </summary>
    public class RxInkToolbarFlyoutItemEvents : global::Windows.UI.Xaml.Controls.Primitives.RxButtonBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInkToolbarFlyoutItemEvents(global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem sender, object args)> Checked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem, object>, (global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Checked += x, x => _data.Checked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem sender, object args)> Unchecked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem, object>, (global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.InkToolbarFlyoutItem sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Unchecked += x, x => _data.Unchecked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.IPopup"/> class as observables.
    /// </summary>
    public class RxIPopupEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.IPopup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.IPopup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIPopupEvents(global::Windows.UI.Xaml.Controls.IPopup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.IPopup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.IPopup.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ISelector"/> class as observables.
    /// </summary>
    public class RxISelectorEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ISelector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ISelector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxISelectorEvents(global::Windows.UI.Xaml.Controls.ISelector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ISelector.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.SelectionChangedEventHandler, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemCollection"/> class as observables.
    /// </summary>
    public class RxItemCollectionEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ItemCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ItemCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemCollectionEvents(global::Windows.UI.Xaml.Controls.ItemCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ItemCollection.VectorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Foundation.Collections.IObservableVector<object> sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs @event)> VectorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.Collections.VectorChangedEventHandler<object>, (global::Windows.Foundation.Collections.IObservableVector<object> sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs @event)>(eventHandler =>
        {
            void Handler(global::Windows.Foundation.Collections.IObservableVector<object> sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs @event) => eventHandler((sender, @event));
            return Handler;
        }

        , x => _data.VectorChanged += x, x => _data.VectorChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemContainerGenerator"/> class as observables.
    /// </summary>
    public class RxItemContainerGeneratorEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemContainerGeneratorEvents(global::Windows.UI.Xaml.Controls.ItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ItemContainerGenerator.ItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs> ItemsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler, global::Windows.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemsChanged += x, x => _data.ItemsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs"/> class as observables.
    /// </summary>
    public class RxItemsPickedEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemsPickedEventArgsEvents(global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPresenter"/> class as observables.
    /// </summary>
    public class RxItemsPresenterEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ItemsPresenter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPresenter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemsPresenterEvents(global::Windows.UI.Xaml.Controls.ItemsPresenter data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPresenter.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ItemsPresenter.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ListPickerFlyout"/> class as observables.
    /// </summary>
    public class RxListPickerFlyoutEvents : global::Windows.UI.Xaml.Controls.Primitives.RxFlyoutBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ListPickerFlyout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ListPickerFlyout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListPickerFlyoutEvents(global::Windows.UI.Xaml.Controls.ListPickerFlyout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ListPickerFlyout.ItemsPicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ListPickerFlyout sender, global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs args)> ItemsPicked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListPickerFlyout, global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs>, (global::Windows.UI.Xaml.Controls.ListPickerFlyout sender, global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ListPickerFlyout sender, global::Windows.UI.Xaml.Controls.ItemsPickedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemsPicked += x, x => _data.ItemsPicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase"/> class as observables.
    /// </summary>
    public class RxListViewBaseEvents : global::Windows.UI.Xaml.Controls.Primitives.RxSelectorEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ListViewBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListViewBaseEvents(global::Windows.UI.Xaml.Controls.ListViewBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase.ChoosingGroupHeaderContainer"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs args)> ChoosingGroupHeaderContainer => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs>, (global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ChoosingGroupHeaderContainer += x, x => _data.ChoosingGroupHeaderContainer -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase.ChoosingItemContainer"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs args)> ChoosingItemContainer => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs>, (global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ChoosingItemContainer += x, x => _data.ChoosingItemContainer -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase.ContainerContentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)> ContainerContentChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs>, (global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContainerContentChanging += x, x => _data.ContainerContentChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase.DragItemsCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs args)> DragItemsCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs>, (global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ListViewBase sender, global::Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DragItemsCompleted += x, x => _data.DragItemsCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase.DragItemsStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.DragItemsStartingEventArgs> DragItemsStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.DragItemsStartingEventHandler, global::Windows.UI.Xaml.Controls.DragItemsStartingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.DragItemsStartingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragItemsStarting += x, x => _data.DragItemsStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ListViewBase.ItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ItemClickEventArgs> ItemClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.ItemClickEventHandler, global::Windows.UI.Xaml.Controls.ItemClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemClick += x, x => _data.ItemClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement"/> class as observables.
    /// </summary>
    public class RxMediaElementEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.MediaElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaElementEvents(global::Windows.UI.Xaml.Controls.MediaElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.BufferingProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> BufferingProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BufferingProgressChanged += x, x => _data.BufferingProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.CurrentStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> CurrentStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CurrentStateChanged += x, x => _data.CurrentStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.DownloadProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> DownloadProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DownloadProgressChanged += x, x => _data.DownloadProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.MarkerReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs> MarkerReached => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Media.TimelineMarkerRoutedEventHandler, global::Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MarkerReached += x, x => _data.MarkerReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> MediaEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MediaEnded += x, x => _data.MediaEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.ExceptionRoutedEventArgs> MediaFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.ExceptionRoutedEventHandler, global::Windows.UI.Xaml.ExceptionRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.ExceptionRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MediaFailed += x, x => _data.MediaFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> MediaOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MediaOpened += x, x => _data.MediaOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.PartialMediaFailureDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.MediaElement sender, global::Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs args)> PartialMediaFailureDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.MediaElement, global::Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs>, (global::Windows.UI.Xaml.Controls.MediaElement sender, global::Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.MediaElement sender, global::Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PartialMediaFailureDetected += x, x => _data.PartialMediaFailureDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.RateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Media.RateChangedRoutedEventArgs> RateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Media.RateChangedRoutedEventHandler, global::Windows.UI.Xaml.Media.RateChangedRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Media.RateChangedRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RateChanged += x, x => _data.RateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.SeekCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> SeekCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SeekCompleted += x, x => _data.SeekCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaElement.VolumeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> VolumeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VolumeChanged += x, x => _data.VolumeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.MediaTransportControls"/> class as observables.
    /// </summary>
    public class RxMediaTransportControlsEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.MediaTransportControls _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.MediaTransportControls"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaTransportControlsEvents(global::Windows.UI.Xaml.Controls.MediaTransportControls data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MediaTransportControls.ThumbnailRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.MediaTransportControls sender, global::Windows.UI.Xaml.Media.MediaTransportControlsThumbnailRequestedEventArgs args)> ThumbnailRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.MediaTransportControls, global::Windows.UI.Xaml.Media.MediaTransportControlsThumbnailRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.MediaTransportControls sender, global::Windows.UI.Xaml.Media.MediaTransportControlsThumbnailRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.MediaTransportControls sender, global::Windows.UI.Xaml.Media.MediaTransportControlsThumbnailRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ThumbnailRequested += x, x => _data.ThumbnailRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.MenuFlyoutItem"/> class as observables.
    /// </summary>
    public class RxMenuFlyoutItemEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.MenuFlyoutItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.MenuFlyoutItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuFlyoutItemEvents(global::Windows.UI.Xaml.Controls.MenuFlyoutItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.MenuFlyoutItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView"/> class as observables.
    /// </summary>
    public class RxNavigationViewEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.NavigationView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationViewEvents(global::Windows.UI.Xaml.Controls.NavigationView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.BackRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs args)> BackRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, global::Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BackRequested += x, x => _data.BackRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.DisplayModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs args)> DisplayModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, global::Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs>, (global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DisplayModeChanged += x, x => _data.DisplayModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.ItemInvoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs args)> ItemInvoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, global::Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs>, (global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemInvoked += x, x => _data.ItemInvoked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.PaneClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, object args)> PaneClosed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, object>, (global::Windows.UI.Xaml.Controls.NavigationView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneClosed += x, x => _data.PaneClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.PaneClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs args)> PaneClosing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, global::Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs>, (global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneClosing += x, x => _data.PaneClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.PaneOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, object args)> PaneOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, object>, (global::Windows.UI.Xaml.Controls.NavigationView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneOpened += x, x => _data.PaneOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.PaneOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, object args)> PaneOpening => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, object>, (global::Windows.UI.Xaml.Controls.NavigationView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneOpening += x, x => _data.PaneOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs args)> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.NavigationView, global::Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs>, (global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.NavigationView sender, global::Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.NavigationViewTemplateSettings"/> class as observables.
    /// </summary>
    public class RxNavigationViewTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.NavigationViewTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.NavigationViewTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationViewTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.NavigationViewTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.NavigationViewTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PasswordBox"/> class as observables.
    /// </summary>
    public class RxPasswordBoxEvents : global::Windows.UI.Xaml.Controls.RxTextBoxEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.PasswordBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.PasswordBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPasswordBoxEvents(global::Windows.UI.Xaml.Controls.PasswordBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PasswordBox.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PasswordBox.PasswordChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> PasswordChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PasswordChanged += x, x => _data.PasswordChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PasswordBox.PasswordChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.PasswordBox sender, global::Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs args)> PasswordChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.PasswordBox, global::Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs>, (global::Windows.UI.Xaml.Controls.PasswordBox sender, global::Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.PasswordBox sender, global::Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PasswordChanging += x, x => _data.PasswordChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PasswordBox.Paste"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs> Paste => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.TextControlPasteEventHandler, global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paste += x, x => _data.Paste -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs"/> class as observables.
    /// </summary>
    public class RxPickerConfirmedEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPickerConfirmedEventArgsEvents(global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PickerFlyout"/> class as observables.
    /// </summary>
    public class RxPickerFlyoutEvents : global::Windows.UI.Xaml.Controls.Primitives.RxFlyoutBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.PickerFlyout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.PickerFlyout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPickerFlyoutEvents(global::Windows.UI.Xaml.Controls.PickerFlyout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PickerFlyout.Confirmed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.PickerFlyout sender, global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs args)> Confirmed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.PickerFlyout, global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs>, (global::Windows.UI.Xaml.Controls.PickerFlyout sender, global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.PickerFlyout sender, global::Windows.UI.Xaml.Controls.PickerConfirmedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Confirmed += x, x => _data.Confirmed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Pivot"/> class as observables.
    /// </summary>
    public class RxPivotEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Pivot _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Pivot"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPivotEvents(global::Windows.UI.Xaml.Controls.Pivot data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Pivot.PivotItemLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)> PivotItemLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Pivot, global::Windows.UI.Xaml.Controls.PivotItemEventArgs>, (global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PivotItemLoaded += x, x => _data.PivotItemLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Pivot.PivotItemLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)> PivotItemLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Pivot, global::Windows.UI.Xaml.Controls.PivotItemEventArgs>, (global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PivotItemLoading += x, x => _data.PivotItemLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Pivot.PivotItemUnloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)> PivotItemUnloaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Pivot, global::Windows.UI.Xaml.Controls.PivotItemEventArgs>, (global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PivotItemUnloaded += x, x => _data.PivotItemUnloaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Pivot.PivotItemUnloading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)> PivotItemUnloading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Pivot, global::Windows.UI.Xaml.Controls.PivotItemEventArgs>, (global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Pivot sender, global::Windows.UI.Xaml.Controls.PivotItemEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PivotItemUnloading += x, x => _data.PivotItemUnloading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Pivot.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.SelectionChangedEventHandler, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.PopupBase"/> class as observables.
    /// </summary>
    public class RxPopupBaseEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.PopupBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.PopupBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPopupBaseEvents(global::Windows.UI.Xaml.Controls.PopupBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PopupBase.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.PopupBase.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RatingControl"/> class as observables.
    /// </summary>
    public class RxRatingControlEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RatingControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RatingControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRatingControlEvents(global::Windows.UI.Xaml.Controls.RatingControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RatingControl.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RatingControl sender, object args)> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RatingControl, object>, (global::Windows.UI.Xaml.Controls.RatingControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RatingControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RatingItemInfo"/> class as observables.
    /// </summary>
    public class RxRatingItemInfoEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RatingItemInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RatingItemInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRatingItemInfoEvents(global::Windows.UI.Xaml.Controls.RatingItemInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RatingItemInfo.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RefreshContainer"/> class as observables.
    /// </summary>
    public class RxRefreshContainerEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RefreshContainer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RefreshContainer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRefreshContainerEvents(global::Windows.UI.Xaml.Controls.RefreshContainer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RefreshContainer.RefreshRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RefreshContainer sender, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs args)> RefreshRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RefreshContainer, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.RefreshContainer sender, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RefreshContainer sender, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RefreshRequested += x, x => _data.RefreshRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RefreshVisualizer"/> class as observables.
    /// </summary>
    public class RxRefreshVisualizerEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RefreshVisualizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RefreshVisualizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRefreshVisualizerEvents(global::Windows.UI.Xaml.Controls.RefreshVisualizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RefreshVisualizer.RefreshRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RefreshVisualizer sender, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs args)> RefreshRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RefreshVisualizer, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.RefreshVisualizer sender, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RefreshVisualizer sender, global::Windows.UI.Xaml.Controls.RefreshRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RefreshRequested += x, x => _data.RefreshRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RefreshVisualizer.RefreshStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RefreshVisualizer sender, global::Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs args)> RefreshStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RefreshVisualizer, global::Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs>, (global::Windows.UI.Xaml.Controls.RefreshVisualizer sender, global::Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RefreshVisualizer sender, global::Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.RefreshStateChanged += x, x => _data.RefreshStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox"/> class as observables.
    /// </summary>
    public class RxRichEditBoxEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RichEditBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRichEditBoxEvents(global::Windows.UI.Xaml.Controls.RichEditBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.CandidateWindowBoundsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs args)> CandidateWindowBoundsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CandidateWindowBoundsChanged += x, x => _data.CandidateWindowBoundsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.ContentLinkChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs args)> ContentLinkChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentLinkChanged += x, x => _data.ContentLinkChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.ContentLinkInvoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs args)> ContentLinkInvoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentLinkInvoked += x, x => _data.ContentLinkInvoked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.CopyingToClipboard"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs args)> CopyingToClipboard => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CopyingToClipboard += x, x => _data.CopyingToClipboard -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.CuttingToClipboard"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs args)> CuttingToClipboard => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CuttingToClipboard += x, x => _data.CuttingToClipboard -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.Paste"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs> Paste => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.TextControlPasteEventHandler, global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paste += x, x => _data.Paste -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.SelectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs args)> SelectionChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectionChanging += x, x => _data.SelectionChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.TextChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs args)> TextChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextChanging += x, x => _data.TextChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.TextCompositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs args)> TextCompositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextCompositionChanged += x, x => _data.TextCompositionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.TextCompositionEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs args)> TextCompositionEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextCompositionEnded += x, x => _data.TextCompositionEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichEditBox.TextCompositionStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs args)> TextCompositionStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichEditBox, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs>, (global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichEditBox sender, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextCompositionStarted += x, x => _data.TextCompositionStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlock"/> class as observables.
    /// </summary>
    public class RxRichTextBlockEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RichTextBlock _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlock"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRichTextBlockEvents(global::Windows.UI.Xaml.Controls.RichTextBlock data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlock.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlock.IsTextTrimmedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichTextBlock sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args)> IsTextTrimmedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichTextBlock, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>, (global::Windows.UI.Xaml.Controls.RichTextBlock sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichTextBlock sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsTextTrimmedChanged += x, x => _data.IsTextTrimmedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlock.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlockOverflow"/> class as observables.
    /// </summary>
    public class RxRichTextBlockOverflowEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RichTextBlockOverflow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlockOverflow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRichTextBlockOverflowEvents(global::Windows.UI.Xaml.Controls.RichTextBlockOverflow data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RichTextBlockOverflow.IsTextTrimmedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.RichTextBlockOverflow sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args)> IsTextTrimmedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.RichTextBlockOverflow, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>, (global::Windows.UI.Xaml.Controls.RichTextBlockOverflow sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.RichTextBlockOverflow sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsTextTrimmedChanged += x, x => _data.IsTextTrimmedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.RowDefinition"/> class as observables.
    /// </summary>
    public class RxRowDefinitionEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.RowDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.RowDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRowDefinitionEvents(global::Windows.UI.Xaml.Controls.RowDefinition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.RowDefinition.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer"/> class as observables.
    /// </summary>
    public class RxScrollViewerEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ScrollViewer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollViewerEvents(global::Windows.UI.Xaml.Controls.ScrollViewer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer.AnchorRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ScrollViewer sender, global::Windows.UI.Xaml.Controls.AnchorRequestedEventArgs args)> AnchorRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ScrollViewer, global::Windows.UI.Xaml.Controls.AnchorRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.ScrollViewer sender, global::Windows.UI.Xaml.Controls.AnchorRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ScrollViewer sender, global::Windows.UI.Xaml.Controls.AnchorRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AnchorRequested += x, x => _data.AnchorRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer.DirectManipulationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> DirectManipulationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DirectManipulationCompleted += x, x => _data.DirectManipulationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer.DirectManipulationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> DirectManipulationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DirectManipulationStarted += x, x => _data.DirectManipulationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer.ViewChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs> ViewChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs>, global::Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ViewChanged += x, x => _data.ViewChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ScrollViewer.ViewChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs> ViewChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs>, global::Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ViewChanging += x, x => _data.ViewChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox"/> class as observables.
    /// </summary>
    public class RxSearchBoxEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SearchBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSearchBoxEvents(global::Windows.UI.Xaml.Controls.SearchBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox.PrepareForFocusOnKeyboardInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.RoutedEventArgs args)> PrepareForFocusOnKeyboardInput => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SearchBox, global::Windows.UI.Xaml.RoutedEventArgs>, (global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.RoutedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.RoutedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PrepareForFocusOnKeyboardInput += x, x => _data.PrepareForFocusOnKeyboardInput -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox.QueryChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs args)> QueryChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SearchBox, global::Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs>, (global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.QueryChanged += x, x => _data.QueryChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox.QuerySubmitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs args)> QuerySubmitted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SearchBox, global::Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs>, (global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.QuerySubmitted += x, x => _data.QuerySubmitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox.ResultSuggestionChosen"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs args)> ResultSuggestionChosen => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SearchBox, global::Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs>, (global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ResultSuggestionChosen += x, x => _data.ResultSuggestionChosen -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SearchBox.SuggestionsRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs args)> SuggestionsRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SearchBox, global::Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SearchBox sender, global::Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SuggestionsRequested += x, x => _data.SuggestionsRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SemanticZoom"/> class as observables.
    /// </summary>
    public class RxSemanticZoomEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SemanticZoom _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SemanticZoom"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSemanticZoomEvents(global::Windows.UI.Xaml.Controls.SemanticZoom data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SemanticZoom.ViewChangeCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs> ViewChangeCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventHandler, global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ViewChangeCompleted += x, x => _data.ViewChangeCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SemanticZoom.ViewChangeStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs> ViewChangeStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventHandler, global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ViewChangeStarted += x, x => _data.ViewChangeStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SettingsFlyout"/> class as observables.
    /// </summary>
    public class RxSettingsFlyoutEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SettingsFlyout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SettingsFlyout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSettingsFlyoutEvents(global::Windows.UI.Xaml.Controls.SettingsFlyout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SettingsFlyout.BackClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.BackClickEventArgs> BackClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.BackClickEventHandler, global::Windows.UI.Xaml.Controls.BackClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.BackClickEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackClick += x, x => _data.BackClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SplitButton"/> class as observables.
    /// </summary>
    public class RxSplitButtonEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SplitButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SplitButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitButtonEvents(global::Windows.UI.Xaml.Controls.SplitButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SplitButton.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SplitButton sender, global::Windows.UI.Xaml.Controls.SplitButtonClickEventArgs args)> Click => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SplitButton, global::Windows.UI.Xaml.Controls.SplitButtonClickEventArgs>, (global::Windows.UI.Xaml.Controls.SplitButton sender, global::Windows.UI.Xaml.Controls.SplitButtonClickEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SplitButton sender, global::Windows.UI.Xaml.Controls.SplitButtonClickEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SplitView"/> class as observables.
    /// </summary>
    public class RxSplitViewEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SplitView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SplitView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitViewEvents(global::Windows.UI.Xaml.Controls.SplitView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SplitView.PaneClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SplitView sender, object args)> PaneClosed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SplitView, object>, (global::Windows.UI.Xaml.Controls.SplitView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SplitView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneClosed += x, x => _data.PaneClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SplitView.PaneClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SplitView sender, global::Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs args)> PaneClosing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SplitView, global::Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs>, (global::Windows.UI.Xaml.Controls.SplitView sender, global::Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SplitView sender, global::Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneClosing += x, x => _data.PaneClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SplitView.PaneOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SplitView sender, object args)> PaneOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SplitView, object>, (global::Windows.UI.Xaml.Controls.SplitView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SplitView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneOpened += x, x => _data.PaneOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SplitView.PaneOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SplitView sender, object args)> PaneOpening => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SplitView, object>, (global::Windows.UI.Xaml.Controls.SplitView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SplitView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PaneOpening += x, x => _data.PaneOpening -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.StackPanel"/> class as observables.
    /// </summary>
    public class RxStackPanelEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.StackPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.StackPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStackPanelEvents(global::Windows.UI.Xaml.Controls.StackPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.StackPanel.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.StackPanel.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SwapChainPanel"/> class as observables.
    /// </summary>
    public class RxSwapChainPanelEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SwapChainPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SwapChainPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSwapChainPanelEvents(global::Windows.UI.Xaml.Controls.SwapChainPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SwapChainPanel.CompositionScaleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SwapChainPanel sender, object args)> CompositionScaleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SwapChainPanel, object>, (global::Windows.UI.Xaml.Controls.SwapChainPanel sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SwapChainPanel sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CompositionScaleChanged += x, x => _data.CompositionScaleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItem"/> class as observables.
    /// </summary>
    public class RxSwipeItemEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SwipeItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSwipeItemEvents(global::Windows.UI.Xaml.Controls.SwipeItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItem.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItem.Invoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.SwipeItem sender, global::Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs args)> Invoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SwipeItem, global::Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs>, (global::Windows.UI.Xaml.Controls.SwipeItem sender, global::Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.SwipeItem sender, global::Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Invoked += x, x => _data.Invoked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItems"/> class as observables.
    /// </summary>
    public class RxSwipeItemsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.SwipeItems _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItems"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSwipeItemsEvents(global::Windows.UI.Xaml.Controls.SwipeItems data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.SwipeItems.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TextBlock"/> class as observables.
    /// </summary>
    public class RxTextBlockEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TextBlock _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TextBlock"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBlockEvents(global::Windows.UI.Xaml.Controls.TextBlock data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBlock.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBlock.IsTextTrimmedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBlock sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args)> IsTextTrimmedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBlock, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>, (global::Windows.UI.Xaml.Controls.TextBlock sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBlock sender, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsTextTrimmedChanged += x, x => _data.IsTextTrimmedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBlock.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TextBox"/> class as observables.
    /// </summary>
    public class RxTextBoxEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBoxEvents(global::Windows.UI.Xaml.Controls.TextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.BeforeTextChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs args)> BeforeTextChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BeforeTextChanging += x, x => _data.BeforeTextChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.CandidateWindowBoundsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs args)> CandidateWindowBoundsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CandidateWindowBoundsChanged += x, x => _data.CandidateWindowBoundsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.ContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.CopyingToClipboard"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs args)> CopyingToClipboard => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CopyingToClipboard += x, x => _data.CopyingToClipboard -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.CuttingToClipboard"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs args)> CuttingToClipboard => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CuttingToClipboard += x, x => _data.CuttingToClipboard -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.Paste"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs> Paste => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.TextControlPasteEventHandler, global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paste += x, x => _data.Paste -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.SelectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs args)> SelectionChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectionChanging += x, x => _data.SelectionChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.TextChangedEventHandler, global::Windows.UI.Xaml.Controls.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.TextChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs args)> TextChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextChanging += x, x => _data.TextChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.TextCompositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs args)> TextCompositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextCompositionChanged += x, x => _data.TextCompositionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.TextCompositionEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs args)> TextCompositionEnded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextCompositionEnded += x, x => _data.TextCompositionEnded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TextBox.TextCompositionStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs args)> TextCompositionStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs>, (global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TextBox sender, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TextCompositionStarted += x, x => _data.TextCompositionStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TimePickedEventArgs"/> class as observables.
    /// </summary>
    public class RxTimePickedEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TimePickedEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TimePickedEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimePickedEventArgsEvents(global::Windows.UI.Xaml.Controls.TimePickedEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TimePickedEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TimePicker"/> class as observables.
    /// </summary>
    public class RxTimePickerEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TimePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TimePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimePickerEvents(global::Windows.UI.Xaml.Controls.TimePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TimePicker.SelectedTimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TimePicker sender, global::Windows.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs args)> SelectedTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TimePicker, global::Windows.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs>, (global::Windows.UI.Xaml.Controls.TimePicker sender, global::Windows.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TimePicker sender, global::Windows.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SelectedTimeChanged += x, x => _data.SelectedTimeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TimePicker.TimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs> TimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs>, global::Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TimeChanged += x, x => _data.TimeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TimePickerFlyout"/> class as observables.
    /// </summary>
    public class RxTimePickerFlyoutEvents : global::Windows.UI.Xaml.Controls.Primitives.RxFlyoutBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TimePickerFlyout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TimePickerFlyout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimePickerFlyoutEvents(global::Windows.UI.Xaml.Controls.TimePickerFlyout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TimePickerFlyout.TimePicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TimePickerFlyout sender, global::Windows.UI.Xaml.Controls.TimePickedEventArgs args)> TimePicked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TimePickerFlyout, global::Windows.UI.Xaml.Controls.TimePickedEventArgs>, (global::Windows.UI.Xaml.Controls.TimePickerFlyout sender, global::Windows.UI.Xaml.Controls.TimePickedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TimePickerFlyout sender, global::Windows.UI.Xaml.Controls.TimePickedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TimePicked += x, x => _data.TimePicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSplitButton"/> class as observables.
    /// </summary>
    public class RxToggleSplitButtonEvents : global::Windows.UI.Xaml.Controls.RxSplitButtonEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ToggleSplitButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSplitButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToggleSplitButtonEvents(global::Windows.UI.Xaml.Controls.ToggleSplitButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSplitButton.IsCheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.ToggleSplitButton sender, global::Windows.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs args)> IsCheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ToggleSplitButton, global::Windows.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs>, (global::Windows.UI.Xaml.Controls.ToggleSplitButton sender, global::Windows.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.ToggleSplitButton sender, global::Windows.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.IsCheckedChanged += x, x => _data.IsCheckedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSwitch"/> class as observables.
    /// </summary>
    public class RxToggleSwitchEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ToggleSwitch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSwitch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToggleSwitchEvents(global::Windows.UI.Xaml.Controls.ToggleSwitch data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ToggleSwitch.Toggled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Toggled => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Toggled += x, x => _data.Toggled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.ToolTip"/> class as observables.
    /// </summary>
    public class RxToolTipEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.ToolTip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.ToolTip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolTipEvents(global::Windows.UI.Xaml.Controls.ToolTip data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ToolTip.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.ToolTip.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TreeView"/> class as observables.
    /// </summary>
    public class RxTreeViewEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewEvents(global::Windows.UI.Xaml.Controls.TreeView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TreeView.Collapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs args)> Collapsed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TreeView, global::Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs>, (global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Collapsed += x, x => _data.Collapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TreeView.DragItemsCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs args)> DragItemsCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TreeView, global::Windows.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs>, (global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DragItemsCompleted += x, x => _data.DragItemsCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TreeView.DragItemsStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs args)> DragItemsStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TreeView, global::Windows.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs>, (global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DragItemsStarting += x, x => _data.DragItemsStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TreeView.Expanding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs args)> Expanding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TreeView, global::Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs>, (global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Expanding += x, x => _data.Expanding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TreeView.ItemInvoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs args)> ItemInvoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TreeView, global::Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs>, (global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.TreeView sender, global::Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ItemInvoked += x, x => _data.ItemInvoked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings"/> class as observables.
    /// </summary>
    public class RxTreeViewItemTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewItemTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewNode"/> class as observables.
    /// </summary>
    public class RxTreeViewNodeEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.TreeViewNode _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewNode"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewNodeEvents(global::Windows.UI.Xaml.Controls.TreeViewNode data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.TreeViewNode.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout"/> class as observables.
    /// </summary>
    public class RxVirtualizingPanelLayoutEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVirtualizingPanelLayoutEvents(global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingPanelLayout.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingStackPanel"/> class as observables.
    /// </summary>
    public class RxVirtualizingStackPanelEvents : global::Windows.UI.Xaml.Controls.Primitives.RxOrientedVirtualizingPanelEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.VirtualizingStackPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingStackPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVirtualizingStackPanelEvents(global::Windows.UI.Xaml.Controls.VirtualizingStackPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.VirtualizingStackPanel.CleanUpVirtualizedItemEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs> CleanUpVirtualizedItemEvent => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventHandler, global::Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CleanUpVirtualizedItemEvent += x, x => _data.CleanUpVirtualizedItemEvent -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.WebView"/> class as observables.
    /// </summary>
    public class RxWebViewEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.WebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.WebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebViewEvents(global::Windows.UI.Xaml.Controls.WebView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.ContainsFullScreenElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, object args)> ContainsFullScreenElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, object>, (global::Windows.UI.Xaml.Controls.WebView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContainsFullScreenElementChanged += x, x => _data.ContainsFullScreenElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.ContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs args)> ContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentLoading += x, x => _data.ContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.DOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs args)> DOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DOMContentLoaded += x, x => _data.DOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.FrameContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs args)> FrameContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameContentLoading += x, x => _data.FrameContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.FrameDOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs args)> FrameDOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameDOMContentLoaded += x, x => _data.FrameDOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.FrameNavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs args)> FrameNavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationCompleted += x, x => _data.FrameNavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.FrameNavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs args)> FrameNavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationStarting += x, x => _data.FrameNavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Navigation.LoadCompletedEventHandler, global::Windows.UI.Xaml.Navigation.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Navigation.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.LongRunningScriptDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs args)> LongRunningScriptDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LongRunningScriptDetected += x, x => _data.LongRunningScriptDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.NavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs args)> NavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationCompleted += x, x => _data.NavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.WebViewNavigationFailedEventHandler, global::Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.NavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs args)> NavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationStarting += x, x => _data.NavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.NewWindowRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs args)> NewWindowRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NewWindowRequested += x, x => _data.NewWindowRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.PermissionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs args)> PermissionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PermissionRequested += x, x => _data.PermissionRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.ScriptNotify"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.NotifyEventArgs> ScriptNotify => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.NotifyEventHandler, global::Windows.UI.Xaml.Controls.NotifyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.NotifyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScriptNotify += x, x => _data.ScriptNotify -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.SeparateProcessLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs args)> SeparateProcessLost => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.SeparateProcessLost += x, x => _data.SeparateProcessLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.UnsafeContentWarningDisplaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, object args)> UnsafeContentWarningDisplaying => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, object>, (global::Windows.UI.Xaml.Controls.WebView sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsafeContentWarningDisplaying += x, x => _data.UnsafeContentWarningDisplaying -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.UnsupportedUriSchemeIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs args)> UnsupportedUriSchemeIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsupportedUriSchemeIdentified += x, x => _data.UnsupportedUriSchemeIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.UnviewableContentIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs args)> UnviewableContentIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnviewableContentIdentified += x, x => _data.UnviewableContentIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.WebView.WebResourceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewWebResourceRequestedEventArgs args)> WebResourceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.WebView, global::Windows.UI.Xaml.Controls.WebViewWebResourceRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewWebResourceRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.WebView sender, global::Windows.UI.Xaml.Controls.WebViewWebResourceRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WebResourceRequested += x, x => _data.WebResourceRequested -= x);
    }
}

namespace Windows.UI.Xaml.Controls.Maps
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Controls.Maps"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource"/> class.
        /// </summary>
        public static RxCustomMapTileDataSourceEvents Events(this global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource item) => new RxCustomMapTileDataSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource"/> class.
        /// </summary>
        public static RxHttpMapTileDataSourceEvents Events(this global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource item) => new RxHttpMapTileDataSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource"/> class.
        /// </summary>
        public static RxLocalMapTileDataSourceEvents Events(this global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource item) => new RxLocalMapTileDataSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCamera"/> class.
        /// </summary>
        public static RxMapCameraEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapCamera item) => new RxMapCameraEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl"/> class.
        /// </summary>
        public static RxMapControlEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapControl item) => new RxMapControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCustomExperience"/> class.
        /// </summary>
        public static RxMapCustomExperienceEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapCustomExperience item) => new RxMapCustomExperienceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElement"/> class.
        /// </summary>
        public static RxMapElementEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapElement item) => new RxMapElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer"/> class.
        /// </summary>
        public static RxMapElementsLayerEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer item) => new RxMapElementsLayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs"/> class.
        /// </summary>
        public static RxMapInputEventArgsEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs item) => new RxMapInputEventArgsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapItemsControl"/> class.
        /// </summary>
        public static RxMapItemsControlEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapItemsControl item) => new RxMapItemsControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapLayer"/> class.
        /// </summary>
        public static RxMapLayerEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapLayer item) => new RxMapLayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapModel3D"/> class.
        /// </summary>
        public static RxMapModel3DEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapModel3D item) => new RxMapModel3DEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapRouteView"/> class.
        /// </summary>
        public static RxMapRouteViewEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapRouteView item) => new RxMapRouteViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapScene"/> class.
        /// </summary>
        public static RxMapSceneEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapScene item) => new RxMapSceneEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapStyleSheet"/> class.
        /// </summary>
        public static RxMapStyleSheetEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapStyleSheet item) => new RxMapStyleSheetEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileDataSource"/> class.
        /// </summary>
        public static RxMapTileDataSourceEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapTileDataSource item) => new RxMapTileDataSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileSource"/> class.
        /// </summary>
        public static RxMapTileSourceEvents Events(this global::Windows.UI.Xaml.Controls.Maps.MapTileSource item) => new RxMapTileSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.StreetsidePanorama"/> class.
        /// </summary>
        public static RxStreetsidePanoramaEvents Events(this global::Windows.UI.Xaml.Controls.Maps.StreetsidePanorama item) => new RxStreetsidePanoramaEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource"/> class as observables.
    /// </summary>
    public class RxCustomMapTileDataSourceEvents : global::Windows.UI.Xaml.Controls.Maps.RxMapTileDataSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCustomMapTileDataSourceEvents(global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource.BitmapRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs args)> BitmapRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource, global::Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.BitmapRequested += x, x => _data.BitmapRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource"/> class as observables.
    /// </summary>
    public class RxHttpMapTileDataSourceEvents : global::Windows.UI.Xaml.Controls.Maps.RxMapTileDataSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHttpMapTileDataSourceEvents(global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource.UriRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs args)> UriRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UriRequested += x, x => _data.UriRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource"/> class as observables.
    /// </summary>
    public class RxLocalMapTileDataSourceEvents : global::Windows.UI.Xaml.Controls.Maps.RxMapTileDataSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLocalMapTileDataSourceEvents(global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource.UriRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs args)> UriRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource sender, global::Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UriRequested += x, x => _data.UriRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCamera"/> class as observables.
    /// </summary>
    public class RxMapCameraEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapCamera _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCamera"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapCameraEvents(global::Windows.UI.Xaml.Controls.Maps.MapCamera data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCamera.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl"/> class as observables.
    /// </summary>
    public class RxMapControlEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapControlEvents(global::Windows.UI.Xaml.Controls.Maps.MapControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs args)> ActualCameraChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActualCameraChanged += x, x => _data.ActualCameraChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs args)> ActualCameraChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ActualCameraChanging += x, x => _data.ActualCameraChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.CenterChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)> CenterChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, object>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CenterChanged += x, x => _data.CenterChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.CustomExperienceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs args)> CustomExperienceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CustomExperienceChanged += x, x => _data.CustomExperienceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.HeadingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)> HeadingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, object>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.HeadingChanged += x, x => _data.HeadingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.LoadingStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)> LoadingStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, object>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LoadingStatusChanged += x, x => _data.LoadingStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapContextRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs args)> MapContextRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapContextRequested += x, x => _data.MapContextRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapDoubleTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args)> MapDoubleTapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapDoubleTapped += x, x => _data.MapDoubleTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapElementClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs args)> MapElementClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapElementClick += x, x => _data.MapElementClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs args)> MapElementPointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapElementPointerEntered += x, x => _data.MapElementPointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs args)> MapElementPointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapElementPointerExited += x, x => _data.MapElementPointerExited -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapHolding"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args)> MapHolding => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapHolding += x, x => _data.MapHolding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapRightTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs args)> MapRightTapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapRightTapped += x, x => _data.MapRightTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.MapTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args)> MapTapped => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapTapped += x, x => _data.MapTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.PitchChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)> PitchChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, object>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PitchChanged += x, x => _data.PitchChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.TargetCameraChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs args)> TargetCameraChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TargetCameraChanged += x, x => _data.TargetCameraChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.TransformOriginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)> TransformOriginChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, object>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TransformOriginChanged += x, x => _data.TransformOriginChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapControl.ZoomLevelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)> ZoomLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapControl, object>, (global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ZoomLevelChanged += x, x => _data.ZoomLevelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCustomExperience"/> class as observables.
    /// </summary>
    public class RxMapCustomExperienceEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapCustomExperience _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCustomExperience"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapCustomExperienceEvents(global::Windows.UI.Xaml.Controls.Maps.MapCustomExperience data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapCustomExperience.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElement"/> class as observables.
    /// </summary>
    public class RxMapElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapElementEvents(global::Windows.UI.Xaml.Controls.Maps.MapElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer"/> class as observables.
    /// </summary>
    public class RxMapElementsLayerEvents : global::Windows.UI.Xaml.Controls.Maps.RxMapLayerEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapElementsLayerEvents(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer.MapContextRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs args)> MapContextRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapContextRequested += x, x => _data.MapContextRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer.MapElementClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs args)> MapElementClick => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapElementClick += x, x => _data.MapElementClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer.MapElementPointerEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs args)> MapElementPointerEntered => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapElementPointerEntered += x, x => _data.MapElementPointerEntered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer.MapElementPointerExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs args)> MapElementPointerExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapElementsLayer sender, global::Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MapElementPointerExited += x, x => _data.MapElementPointerExited -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs"/> class as observables.
    /// </summary>
    public class RxMapInputEventArgsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapInputEventArgsEvents(global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapInputEventArgs.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapItemsControl"/> class as observables.
    /// </summary>
    public class RxMapItemsControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapItemsControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapItemsControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapItemsControlEvents(global::Windows.UI.Xaml.Controls.Maps.MapItemsControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapItemsControl.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapLayer"/> class as observables.
    /// </summary>
    public class RxMapLayerEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapLayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapLayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapLayerEvents(global::Windows.UI.Xaml.Controls.Maps.MapLayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapLayer.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapModel3D"/> class as observables.
    /// </summary>
    public class RxMapModel3DEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapModel3D _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapModel3D"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapModel3DEvents(global::Windows.UI.Xaml.Controls.Maps.MapModel3D data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapModel3D.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapRouteView"/> class as observables.
    /// </summary>
    public class RxMapRouteViewEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapRouteView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapRouteView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapRouteViewEvents(global::Windows.UI.Xaml.Controls.Maps.MapRouteView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapRouteView.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapScene"/> class as observables.
    /// </summary>
    public class RxMapSceneEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapScene _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapScene"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapSceneEvents(global::Windows.UI.Xaml.Controls.Maps.MapScene data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapScene.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapScene.TargetCameraChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Maps.MapScene sender, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs args)> TargetCameraChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Maps.MapScene, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>, (global::Windows.UI.Xaml.Controls.Maps.MapScene sender, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Maps.MapScene sender, global::Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.TargetCameraChanged += x, x => _data.TargetCameraChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapStyleSheet"/> class as observables.
    /// </summary>
    public class RxMapStyleSheetEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapStyleSheet _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapStyleSheet"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapStyleSheetEvents(global::Windows.UI.Xaml.Controls.Maps.MapStyleSheet data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapStyleSheet.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileDataSource"/> class as observables.
    /// </summary>
    public class RxMapTileDataSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapTileDataSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileDataSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapTileDataSourceEvents(global::Windows.UI.Xaml.Controls.Maps.MapTileDataSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileDataSource.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileSource"/> class as observables.
    /// </summary>
    public class RxMapTileSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.MapTileSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMapTileSourceEvents(global::Windows.UI.Xaml.Controls.Maps.MapTileSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.MapTileSource.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Maps.StreetsidePanorama"/> class as observables.
    /// </summary>
    public class RxStreetsidePanoramaEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Maps.StreetsidePanorama _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Maps.StreetsidePanorama"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStreetsidePanoramaEvents(global::Windows.UI.Xaml.Controls.Maps.StreetsidePanorama data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Maps.StreetsidePanorama.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Controls.Primitives
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Controls.Primitives"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings"/> class.
        /// </summary>
        public static RxAppBarButtonTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings item) => new RxAppBarButtonTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings"/> class.
        /// </summary>
        public static RxAppBarTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings item) => new RxAppBarTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings"/> class.
        /// </summary>
        public static RxAppBarToggleButtonTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings item) => new RxAppBarToggleButtonTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        public static RxButtonBaseEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ButtonBase item) => new RxButtonBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings"/> class.
        /// </summary>
        public static RxCalendarViewTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings item) => new RxCalendarViewTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel"/> class.
        /// </summary>
        public static RxCarouselPanelEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel item) => new RxCarouselPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum"/> class.
        /// </summary>
        public static RxColorSpectrumEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum item) => new RxColorSpectrumEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings"/> class.
        /// </summary>
        public static RxComboBoxTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings item) => new RxComboBoxTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings"/> class.
        /// </summary>
        public static RxCommandBarFlyoutCommandBarTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings item) => new RxCommandBarFlyoutCommandBarTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings"/> class.
        /// </summary>
        public static RxCommandBarTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings item) => new RxCommandBarTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase"/> class.
        /// </summary>
        public static RxFlyoutBaseEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase item) => new RxFlyoutBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings"/> class.
        /// </summary>
        public static RxGridViewItemTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings item) => new RxGridViewItemTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo"/> class.
        /// </summary>
        public static RxIScrollSnapPointsInfoEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo item) => new RxIScrollSnapPointsInfoEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter"/> class.
        /// </summary>
        public static RxJumpListItemBackgroundConverterEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter item) => new RxJumpListItemBackgroundConverterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter"/> class.
        /// </summary>
        public static RxJumpListItemForegroundConverterEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter item) => new RxJumpListItemForegroundConverterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings"/> class.
        /// </summary>
        public static RxListViewItemTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings item) => new RxListViewItemTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelector"/> class.
        /// </summary>
        public static RxLoopingSelectorEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.LoopingSelector item) => new RxLoopingSelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel"/> class.
        /// </summary>
        public static RxLoopingSelectorPanelEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel item) => new RxLoopingSelectorPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings"/> class.
        /// </summary>
        public static RxMenuFlyoutItemTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings item) => new RxMenuFlyoutItemTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings"/> class.
        /// </summary>
        public static RxMenuFlyoutPresenterTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings item) => new RxMenuFlyoutPresenterTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel"/> class.
        /// </summary>
        public static RxOrientedVirtualizingPanelEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel item) => new RxOrientedVirtualizingPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.PivotPanel"/> class.
        /// </summary>
        public static RxPivotPanelEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.PivotPanel item) => new RxPivotPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Popup"/> class.
        /// </summary>
        public static RxPopupEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.Popup item) => new RxPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings"/> class.
        /// </summary>
        public static RxProgressBarTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings item) => new RxProgressBarTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings"/> class.
        /// </summary>
        public static RxProgressRingTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings item) => new RxProgressRingTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        public static RxRangeBaseEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.RangeBase item) => new RxRangeBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        public static RxScrollBarEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ScrollBar item) => new RxScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Selector"/> class.
        /// </summary>
        public static RxSelectorEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.Selector item) => new RxSelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings"/> class.
        /// </summary>
        public static RxSettingsFlyoutTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings item) => new RxSettingsFlyoutTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings"/> class.
        /// </summary>
        public static RxSplitViewTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings item) => new RxSplitViewTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Thumb"/> class.
        /// </summary>
        public static RxThumbEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.Thumb item) => new RxThumbEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        public static RxToggleButtonEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ToggleButton item) => new RxToggleButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings"/> class.
        /// </summary>
        public static RxToggleSwitchTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings item) => new RxToggleSwitchTemplateSettingsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings"/> class.
        /// </summary>
        public static RxToolTipTemplateSettingsEvents Events(this global::Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings item) => new RxToolTipTemplateSettingsEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings"/> class as observables.
    /// </summary>
    public class RxAppBarButtonTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppBarButtonTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings"/> class as observables.
    /// </summary>
    public class RxAppBarTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppBarTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings"/> class as observables.
    /// </summary>
    public class RxAppBarToggleButtonTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAppBarToggleButtonTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ButtonBase"/> class as observables.
    /// </summary>
    public class RxButtonBaseEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ButtonBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonBaseEvents(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ButtonBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings"/> class as observables.
    /// </summary>
    public class RxCalendarViewTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarViewTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel"/> class as observables.
    /// </summary>
    public class RxCarouselPanelEvents : global::Windows.UI.Xaml.Controls.RxStackPanelEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCarouselPanelEvents(global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CarouselPanel.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum"/> class as observables.
    /// </summary>
    public class RxColorSpectrumEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxColorSpectrumEvents(global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum.ColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum sender, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs args)> ColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs>, (global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum sender, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Primitives.ColorSpectrum sender, global::Windows.UI.Xaml.Controls.ColorChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ColorChanged += x, x => _data.ColorChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings"/> class as observables.
    /// </summary>
    public class RxComboBoxTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComboBoxTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings"/> class as observables.
    /// </summary>
    public class RxCommandBarFlyoutCommandBarTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommandBarFlyoutCommandBarTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings"/> class as observables.
    /// </summary>
    public class RxCommandBarTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommandBarTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase"/> class as observables.
    /// </summary>
    public class RxFlyoutBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFlyoutBaseEvents(global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase sender, global::Windows.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs args)> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase, global::Windows.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>, (global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase sender, global::Windows.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase sender, global::Windows.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Closing += x, x => _data.Closing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.FlyoutBase.Opening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opening => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opening += x, x => _data.Opening -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings"/> class as observables.
    /// </summary>
    public class RxGridViewItemTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGridViewItemTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo"/> class as observables.
    /// </summary>
    public class RxIScrollSnapPointsInfoEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIScrollSnapPointsInfoEvents(global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter"/> class as observables.
    /// </summary>
    public class RxJumpListItemBackgroundConverterEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxJumpListItemBackgroundConverterEvents(global::Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter"/> class as observables.
    /// </summary>
    public class RxJumpListItemForegroundConverterEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxJumpListItemForegroundConverterEvents(global::Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings"/> class as observables.
    /// </summary>
    public class RxListViewItemTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListViewItemTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelector"/> class as observables.
    /// </summary>
    public class RxLoopingSelectorEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.LoopingSelector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLoopingSelectorEvents(global::Windows.UI.Xaml.Controls.Primitives.LoopingSelector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelector.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.SelectionChangedEventHandler, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel"/> class as observables.
    /// </summary>
    public class RxLoopingSelectorPanelEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLoopingSelectorPanelEvents(global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings"/> class as observables.
    /// </summary>
    public class RxMenuFlyoutItemTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuFlyoutItemTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings"/> class as observables.
    /// </summary>
    public class RxMenuFlyoutPresenterTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuFlyoutPresenterTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel"/> class as observables.
    /// </summary>
    public class RxOrientedVirtualizingPanelEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxOrientedVirtualizingPanelEvents(global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.PivotPanel"/> class as observables.
    /// </summary>
    public class RxPivotPanelEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.PivotPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.PivotPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPivotPanelEvents(global::Windows.UI.Xaml.Controls.Primitives.PivotPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.PivotPanel.HorizontalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> HorizontalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HorizontalSnapPointsChanged += x, x => _data.HorizontalSnapPointsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.PivotPanel.VerticalSnapPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> VerticalSnapPointsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VerticalSnapPointsChanged += x, x => _data.VerticalSnapPointsChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Popup"/> class as observables.
    /// </summary>
    public class RxPopupEvents : global::Windows.UI.Xaml.RxFrameworkElementEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPopupEvents(global::Windows.UI.Xaml.Controls.Primitives.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Popup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Popup.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings"/> class as observables.
    /// </summary>
    public class RxProgressBarTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxProgressBarTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings"/> class as observables.
    /// </summary>
    public class RxProgressRingTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxProgressRingTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.RangeBase"/> class as observables.
    /// </summary>
    public class RxRangeBaseEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.RangeBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRangeBaseEvents(global::Windows.UI.Xaml.Controls.Primitives.RangeBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.RangeBase.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler, global::Windows.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ScrollBar"/> class as observables.
    /// </summary>
    public class RxScrollBarEvents : global::Windows.UI.Xaml.Controls.Primitives.RxRangeBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollBarEvents(global::Windows.UI.Xaml.Controls.Primitives.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.Primitives.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.Primitives.ScrollEventHandler, global::Windows.UI.Xaml.Controls.Primitives.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.Primitives.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scroll += x, x => _data.Scroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Selector"/> class as observables.
    /// </summary>
    public class RxSelectorEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.Selector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Selector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSelectorEvents(global::Windows.UI.Xaml.Controls.Primitives.Selector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.SelectionChangedEventHandler, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings"/> class as observables.
    /// </summary>
    public class RxSettingsFlyoutTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSettingsFlyoutTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings"/> class as observables.
    /// </summary>
    public class RxSplitViewTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitViewTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Thumb"/> class as observables.
    /// </summary>
    public class RxThumbEvents : global::Windows.UI.Xaml.Controls.RxControlEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.Thumb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Thumb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxThumbEvents(global::Windows.UI.Xaml.Controls.Primitives.Thumb data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Thumb.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.Primitives.DragCompletedEventHandler, global::Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragCompleted += x, x => _data.DragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Thumb.DragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs> DragDelta => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.Primitives.DragDeltaEventHandler, global::Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragDelta += x, x => _data.DragDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.Thumb.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Controls.Primitives.DragStartedEventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Controls.Primitives.DragStartedEventHandler, global::Windows.UI.Xaml.Controls.Primitives.DragStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Controls.Primitives.DragStartedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStarted += x, x => _data.DragStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleButton"/> class as observables.
    /// </summary>
    public class RxToggleButtonEvents : global::Windows.UI.Xaml.Controls.Primitives.RxButtonBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ToggleButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToggleButtonEvents(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Checked += x, x => _data.Checked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.Indeterminate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Indeterminate => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Indeterminate += x, x => _data.Indeterminate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unchecked += x, x => _data.Unchecked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings"/> class as observables.
    /// </summary>
    public class RxToggleSwitchTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToggleSwitchTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings"/> class as observables.
    /// </summary>
    public class RxToolTipTemplateSettingsEvents
    {
        private readonly global::Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolTipTemplateSettingsEvents(global::Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Data"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Data.BindingBase"/> class.
        /// </summary>
        public static RxBindingBaseEvents Events(this global::Windows.UI.Xaml.Data.BindingBase item) => new RxBindingBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Data.CollectionViewSource"/> class.
        /// </summary>
        public static RxCollectionViewSourceEvents Events(this global::Windows.UI.Xaml.Data.CollectionViewSource item) => new RxCollectionViewSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Data.ElementNameSubject"/> class.
        /// </summary>
        public static RxElementNameSubjectEvents Events(this global::Windows.UI.Xaml.Data.ElementNameSubject item) => new RxElementNameSubjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Data.ICollectionView"/> class.
        /// </summary>
        public static RxICollectionViewEvents Events(this global::Windows.UI.Xaml.Data.ICollectionView item) => new RxICollectionViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Data.BindingBase"/> class as observables.
    /// </summary>
    public class RxBindingBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Data.BindingBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Data.BindingBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingBaseEvents(global::Windows.UI.Xaml.Data.BindingBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Data.BindingBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Data.CollectionViewSource"/> class as observables.
    /// </summary>
    public class RxCollectionViewSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Data.CollectionViewSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Data.CollectionViewSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCollectionViewSourceEvents(global::Windows.UI.Xaml.Data.CollectionViewSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Data.CollectionViewSource.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Data.ElementNameSubject"/> class as observables.
    /// </summary>
    public class RxElementNameSubjectEvents
    {
        private readonly global::Windows.UI.Xaml.Data.ElementNameSubject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Data.ElementNameSubject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxElementNameSubjectEvents(global::Windows.UI.Xaml.Data.ElementNameSubject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Data.ElementNameSubject.ElementInstanceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> ElementInstanceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Data.ElementNameSubject.ElementInstanceChangedHandler, object>(eventHandler =>
        {
            void Handler(object sender, object instance) => eventHandler(instance);
            return Handler;
        }

        , x => _data.ElementInstanceChanged += x, x => _data.ElementInstanceChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Data.ICollectionView"/> class as observables.
    /// </summary>
    public class RxICollectionViewEvents
    {
        private readonly global::Windows.UI.Xaml.Data.ICollectionView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Data.ICollectionView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICollectionViewEvents(global::Windows.UI.Xaml.Data.ICollectionView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Data.ICollectionView.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Data.ICollectionView.CurrentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Data.CurrentChangingEventArgs> CurrentChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Data.CurrentChangingEventHandler, global::Windows.UI.Xaml.Data.CurrentChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Data.CurrentChangingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CurrentChanging += x, x => _data.CurrentChanging -= x);
    }
}

namespace Windows.UI.Xaml.Documents
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Documents"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.ContentLink"/> class.
        /// </summary>
        public static RxContentLinkEvents Events(this global::Windows.UI.Xaml.Documents.ContentLink item) => new RxContentLinkEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.ContentLinkProvider"/> class.
        /// </summary>
        public static RxContentLinkProviderEvents Events(this global::Windows.UI.Xaml.Documents.ContentLinkProvider item) => new RxContentLinkProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.Hyperlink"/> class.
        /// </summary>
        public static RxHyperlinkEvents Events(this global::Windows.UI.Xaml.Documents.Hyperlink item) => new RxHyperlinkEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.TextElement"/> class.
        /// </summary>
        public static RxTextElementEvents Events(this global::Windows.UI.Xaml.Documents.TextElement item) => new RxTextElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.TextHighlighterBase"/> class.
        /// </summary>
        public static RxTextHighlighterBaseEvents Events(this global::Windows.UI.Xaml.Documents.TextHighlighterBase item) => new RxTextHighlighterBaseEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.ContentLink"/> class as observables.
    /// </summary>
    public class RxContentLinkEvents : global::Windows.UI.Xaml.Documents.RxTextElementEvents
    {
        private readonly global::Windows.UI.Xaml.Documents.ContentLink _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Documents.ContentLink"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContentLinkEvents(global::Windows.UI.Xaml.Documents.ContentLink data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.ContentLink.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.ContentLink.Invoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Documents.ContentLink sender, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs args)> Invoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Documents.ContentLink, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs>, (global::Windows.UI.Xaml.Documents.ContentLink sender, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Documents.ContentLink sender, global::Windows.UI.Xaml.Documents.ContentLinkInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Invoked += x, x => _data.Invoked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.ContentLink.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LostFocus += x, x => _data.LostFocus -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.ContentLinkProvider"/> class as observables.
    /// </summary>
    public class RxContentLinkProviderEvents
    {
        private readonly global::Windows.UI.Xaml.Documents.ContentLinkProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Documents.ContentLinkProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContentLinkProviderEvents(global::Windows.UI.Xaml.Documents.ContentLinkProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.ContentLinkProvider.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.Hyperlink"/> class as observables.
    /// </summary>
    public class RxHyperlinkEvents : global::Windows.UI.Xaml.Documents.RxTextElementEvents
    {
        private readonly global::Windows.UI.Xaml.Documents.Hyperlink _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Documents.Hyperlink"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHyperlinkEvents(global::Windows.UI.Xaml.Documents.Hyperlink data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.Hyperlink.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Documents.Hyperlink sender, global::Windows.UI.Xaml.Documents.HyperlinkClickEventArgs args)> Click => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Documents.Hyperlink, global::Windows.UI.Xaml.Documents.HyperlinkClickEventArgs>, (global::Windows.UI.Xaml.Documents.Hyperlink sender, global::Windows.UI.Xaml.Documents.HyperlinkClickEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Documents.Hyperlink sender, global::Windows.UI.Xaml.Documents.HyperlinkClickEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.TextElement"/> class as observables.
    /// </summary>
    public class RxTextElementEvents : global::Windows.UI.Xaml.RxUIElementEvents
    {
        private readonly global::Windows.UI.Xaml.Documents.TextElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Documents.TextElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextElementEvents(global::Windows.UI.Xaml.Documents.TextElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.TextElement.AccessKeyDisplayDismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs args)> AccessKeyDisplayDismissed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Documents.TextElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>, (global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccessKeyDisplayDismissed += x, x => _data.AccessKeyDisplayDismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.TextElement.AccessKeyDisplayRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs args)> AccessKeyDisplayRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Documents.TextElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>, (global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccessKeyDisplayRequested += x, x => _data.AccessKeyDisplayRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.TextElement.AccessKeyInvoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs args)> AccessKeyInvoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Documents.TextElement, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs>, (global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Documents.TextElement sender, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AccessKeyInvoked += x, x => _data.AccessKeyInvoked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Documents.TextHighlighterBase"/> class as observables.
    /// </summary>
    public class RxTextHighlighterBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Documents.TextHighlighterBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Documents.TextHighlighterBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextHighlighterBaseEvents(global::Windows.UI.Xaml.Documents.TextHighlighterBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Documents.TextHighlighterBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Input.InputScope"/> class.
        /// </summary>
        public static RxInputScopeEvents Events(this global::Windows.UI.Xaml.Input.InputScope item) => new RxInputScopeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Input.InputScopeName"/> class.
        /// </summary>
        public static RxInputScopeNameEvents Events(this global::Windows.UI.Xaml.Input.InputScopeName item) => new RxInputScopeNameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Input.KeyboardAccelerator"/> class.
        /// </summary>
        public static RxKeyboardAcceleratorEvents Events(this global::Windows.UI.Xaml.Input.KeyboardAccelerator item) => new RxKeyboardAcceleratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Input.XamlUICommand"/> class.
        /// </summary>
        public static RxXamlUICommandEvents Events(this global::Windows.UI.Xaml.Input.XamlUICommand item) => new RxXamlUICommandEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Input.InputScope"/> class as observables.
    /// </summary>
    public class RxInputScopeEvents
    {
        private readonly global::Windows.UI.Xaml.Input.InputScope _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Input.InputScope"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputScopeEvents(global::Windows.UI.Xaml.Input.InputScope data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.InputScope.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Input.InputScopeName"/> class as observables.
    /// </summary>
    public class RxInputScopeNameEvents
    {
        private readonly global::Windows.UI.Xaml.Input.InputScopeName _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Input.InputScopeName"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputScopeNameEvents(global::Windows.UI.Xaml.Input.InputScopeName data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.InputScopeName.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Input.KeyboardAccelerator"/> class as observables.
    /// </summary>
    public class RxKeyboardAcceleratorEvents
    {
        private readonly global::Windows.UI.Xaml.Input.KeyboardAccelerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Input.KeyboardAccelerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxKeyboardAcceleratorEvents(global::Windows.UI.Xaml.Input.KeyboardAccelerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.KeyboardAccelerator.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.KeyboardAccelerator.Invoked"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Input.KeyboardAccelerator sender, global::Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args)> Invoked => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Input.KeyboardAccelerator, global::Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>, (global::Windows.UI.Xaml.Input.KeyboardAccelerator sender, global::Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Input.KeyboardAccelerator sender, global::Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Invoked += x, x => _data.Invoked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Input.XamlUICommand"/> class as observables.
    /// </summary>
    public class RxXamlUICommandEvents
    {
        private readonly global::Windows.UI.Xaml.Input.XamlUICommand _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Input.XamlUICommand"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxXamlUICommandEvents(global::Windows.UI.Xaml.Input.XamlUICommand data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.XamlUICommand.CanExecuteChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanExecuteChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CanExecuteChanged += x, x => _data.CanExecuteChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.XamlUICommand.CanExecuteRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Input.XamlUICommand sender, global::Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs args)> CanExecuteRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Input.XamlUICommand, global::Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs>, (global::Windows.UI.Xaml.Input.XamlUICommand sender, global::Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Input.XamlUICommand sender, global::Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.CanExecuteRequested += x, x => _data.CanExecuteRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.XamlUICommand.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.XamlUICommand.ExecuteRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Input.XamlUICommand sender, global::Windows.UI.Xaml.Input.ExecuteRequestedEventArgs args)> ExecuteRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Input.XamlUICommand, global::Windows.UI.Xaml.Input.ExecuteRequestedEventArgs>, (global::Windows.UI.Xaml.Input.XamlUICommand sender, global::Windows.UI.Xaml.Input.ExecuteRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Input.XamlUICommand sender, global::Windows.UI.Xaml.Input.ExecuteRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ExecuteRequested += x, x => _data.ExecuteRequested -= x);
    }
}

namespace Windows.UI.Xaml.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Interop"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Interop.IBindableObservableVector"/> class.
        /// </summary>
        public static RxIBindableObservableVectorEvents Events(this global::Windows.UI.Xaml.Interop.IBindableObservableVector item) => new RxIBindableObservableVectorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Interop.IBindableObservableVector"/> class as observables.
    /// </summary>
    public class RxIBindableObservableVectorEvents
    {
        private readonly global::Windows.UI.Xaml.Interop.IBindableObservableVector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Interop.IBindableObservableVector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIBindableObservableVectorEvents(global::Windows.UI.Xaml.Interop.IBindableObservableVector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Interop.IBindableObservableVector.VectorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Interop.IBindableObservableVector vector, object e)> VectorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Interop.BindableVectorChangedEventHandler, (global::Windows.UI.Xaml.Interop.IBindableObservableVector vector, object e)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Interop.IBindableObservableVector vector, object e) => eventHandler((vector, e));
            return Handler;
        }

        , x => _data.VectorChanged += x, x => _data.VectorChanged -= x);
    }
}

namespace Windows.UI.Xaml.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Brush"/> class.
        /// </summary>
        public static RxBrushEvents Events(this global::Windows.UI.Xaml.Media.Brush item) => new RxBrushEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.CacheMode"/> class.
        /// </summary>
        public static RxCacheModeEvents Events(this global::Windows.UI.Xaml.Media.CacheMode item) => new RxCacheModeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.GeneralTransform"/> class.
        /// </summary>
        public static RxGeneralTransformEvents Events(this global::Windows.UI.Xaml.Media.GeneralTransform item) => new RxGeneralTransformEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Geometry"/> class.
        /// </summary>
        public static RxGeometryEvents Events(this global::Windows.UI.Xaml.Media.Geometry item) => new RxGeometryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.GradientStop"/> class.
        /// </summary>
        public static RxGradientStopEvents Events(this global::Windows.UI.Xaml.Media.GradientStop item) => new RxGradientStopEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.ImageBrush"/> class.
        /// </summary>
        public static RxImageBrushEvents Events(this global::Windows.UI.Xaml.Media.ImageBrush item) => new RxImageBrushEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.ImageSource"/> class.
        /// </summary>
        public static RxImageSourceEvents Events(this global::Windows.UI.Xaml.Media.ImageSource item) => new RxImageSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.LoadedImageSurface"/> class.
        /// </summary>
        public static RxLoadedImageSurfaceEvents Events(this global::Windows.UI.Xaml.Media.LoadedImageSurface item) => new RxLoadedImageSurfaceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.PathFigure"/> class.
        /// </summary>
        public static RxPathFigureEvents Events(this global::Windows.UI.Xaml.Media.PathFigure item) => new RxPathFigureEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.PathSegment"/> class.
        /// </summary>
        public static RxPathSegmentEvents Events(this global::Windows.UI.Xaml.Media.PathSegment item) => new RxPathSegmentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Projection"/> class.
        /// </summary>
        public static RxProjectionEvents Events(this global::Windows.UI.Xaml.Media.Projection item) => new RxProjectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.TimelineMarker"/> class.
        /// </summary>
        public static RxTimelineMarkerEvents Events(this global::Windows.UI.Xaml.Media.TimelineMarker item) => new RxTimelineMarkerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.XamlLight"/> class.
        /// </summary>
        public static RxXamlLightEvents Events(this global::Windows.UI.Xaml.Media.XamlLight item) => new RxXamlLightEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Brush"/> class as observables.
    /// </summary>
    public class RxBrushEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Brush _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Brush"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBrushEvents(global::Windows.UI.Xaml.Media.Brush data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Brush.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.CacheMode"/> class as observables.
    /// </summary>
    public class RxCacheModeEvents
    {
        private readonly global::Windows.UI.Xaml.Media.CacheMode _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.CacheMode"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCacheModeEvents(global::Windows.UI.Xaml.Media.CacheMode data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.CacheMode.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.GeneralTransform"/> class as observables.
    /// </summary>
    public class RxGeneralTransformEvents
    {
        private readonly global::Windows.UI.Xaml.Media.GeneralTransform _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.GeneralTransform"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGeneralTransformEvents(global::Windows.UI.Xaml.Media.GeneralTransform data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.GeneralTransform.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Geometry"/> class as observables.
    /// </summary>
    public class RxGeometryEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Geometry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Geometry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGeometryEvents(global::Windows.UI.Xaml.Media.Geometry data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Geometry.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.GradientStop"/> class as observables.
    /// </summary>
    public class RxGradientStopEvents
    {
        private readonly global::Windows.UI.Xaml.Media.GradientStop _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.GradientStop"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGradientStopEvents(global::Windows.UI.Xaml.Media.GradientStop data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.GradientStop.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.ImageBrush"/> class as observables.
    /// </summary>
    public class RxImageBrushEvents : global::Windows.UI.Xaml.Media.RxBrushEvents
    {
        private readonly global::Windows.UI.Xaml.Media.ImageBrush _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.ImageBrush"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImageBrushEvents(global::Windows.UI.Xaml.Media.ImageBrush data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.ImageBrush.ImageFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.ExceptionRoutedEventArgs> ImageFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.ExceptionRoutedEventHandler, global::Windows.UI.Xaml.ExceptionRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.ExceptionRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ImageFailed += x, x => _data.ImageFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.ImageBrush.ImageOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> ImageOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ImageOpened += x, x => _data.ImageOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.ImageSource"/> class as observables.
    /// </summary>
    public class RxImageSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Media.ImageSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.ImageSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImageSourceEvents(global::Windows.UI.Xaml.Media.ImageSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.ImageSource.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.LoadedImageSurface"/> class as observables.
    /// </summary>
    public class RxLoadedImageSurfaceEvents
    {
        private readonly global::Windows.UI.Xaml.Media.LoadedImageSurface _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.LoadedImageSurface"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLoadedImageSurfaceEvents(global::Windows.UI.Xaml.Media.LoadedImageSurface data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.LoadedImageSurface.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Media.LoadedImageSurface sender, global::Windows.UI.Xaml.Media.LoadedImageSourceLoadCompletedEventArgs args)> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Media.LoadedImageSurface, global::Windows.UI.Xaml.Media.LoadedImageSourceLoadCompletedEventArgs>, (global::Windows.UI.Xaml.Media.LoadedImageSurface sender, global::Windows.UI.Xaml.Media.LoadedImageSourceLoadCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Media.LoadedImageSurface sender, global::Windows.UI.Xaml.Media.LoadedImageSourceLoadCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.PathFigure"/> class as observables.
    /// </summary>
    public class RxPathFigureEvents
    {
        private readonly global::Windows.UI.Xaml.Media.PathFigure _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.PathFigure"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPathFigureEvents(global::Windows.UI.Xaml.Media.PathFigure data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.PathFigure.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.PathSegment"/> class as observables.
    /// </summary>
    public class RxPathSegmentEvents
    {
        private readonly global::Windows.UI.Xaml.Media.PathSegment _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.PathSegment"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPathSegmentEvents(global::Windows.UI.Xaml.Media.PathSegment data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.PathSegment.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Projection"/> class as observables.
    /// </summary>
    public class RxProjectionEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Projection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Projection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxProjectionEvents(global::Windows.UI.Xaml.Media.Projection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Projection.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.TimelineMarker"/> class as observables.
    /// </summary>
    public class RxTimelineMarkerEvents
    {
        private readonly global::Windows.UI.Xaml.Media.TimelineMarker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.TimelineMarker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimelineMarkerEvents(global::Windows.UI.Xaml.Media.TimelineMarker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.TimelineMarker.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.XamlLight"/> class as observables.
    /// </summary>
    public class RxXamlLightEvents
    {
        private readonly global::Windows.UI.Xaml.Media.XamlLight _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.XamlLight"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxXamlLightEvents(global::Windows.UI.Xaml.Media.XamlLight data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.XamlLight.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Media.Animation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Media.Animation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.ColorKeyFrame"/> class.
        /// </summary>
        public static RxColorKeyFrameEvents Events(this global::Windows.UI.Xaml.Media.Animation.ColorKeyFrame item) => new RxColorKeyFrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation"/> class.
        /// </summary>
        public static RxConnectedAnimationEvents Events(this global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation item) => new RxConnectedAnimationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.DoubleKeyFrame"/> class.
        /// </summary>
        public static RxDoubleKeyFrameEvents Events(this global::Windows.UI.Xaml.Media.Animation.DoubleKeyFrame item) => new RxDoubleKeyFrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase"/> class.
        /// </summary>
        public static RxEasingFunctionBaseEvents Events(this global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase item) => new RxEasingFunctionBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.KeySpline"/> class.
        /// </summary>
        public static RxKeySplineEvents Events(this global::Windows.UI.Xaml.Media.Animation.KeySpline item) => new RxKeySplineEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo"/> class.
        /// </summary>
        public static RxNavigationTransitionInfoEvents Events(this global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo item) => new RxNavigationTransitionInfoEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.ObjectKeyFrame"/> class.
        /// </summary>
        public static RxObjectKeyFrameEvents Events(this global::Windows.UI.Xaml.Media.Animation.ObjectKeyFrame item) => new RxObjectKeyFrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.PointKeyFrame"/> class.
        /// </summary>
        public static RxPointKeyFrameEvents Events(this global::Windows.UI.Xaml.Media.Animation.PointKeyFrame item) => new RxPointKeyFrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.Timeline"/> class.
        /// </summary>
        public static RxTimelineEvents Events(this global::Windows.UI.Xaml.Media.Animation.Timeline item) => new RxTimelineEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.Transition"/> class.
        /// </summary>
        public static RxTransitionEvents Events(this global::Windows.UI.Xaml.Media.Animation.Transition item) => new RxTransitionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.ColorKeyFrame"/> class as observables.
    /// </summary>
    public class RxColorKeyFrameEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.ColorKeyFrame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.ColorKeyFrame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxColorKeyFrameEvents(global::Windows.UI.Xaml.Media.Animation.ColorKeyFrame data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.ColorKeyFrame.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation"/> class as observables.
    /// </summary>
    public class RxConnectedAnimationEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxConnectedAnimationEvents(global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation sender, object args)> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation, object>, (global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Media.Animation.ConnectedAnimation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.DoubleKeyFrame"/> class as observables.
    /// </summary>
    public class RxDoubleKeyFrameEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.DoubleKeyFrame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.DoubleKeyFrame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDoubleKeyFrameEvents(global::Windows.UI.Xaml.Media.Animation.DoubleKeyFrame data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.DoubleKeyFrame.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase"/> class as observables.
    /// </summary>
    public class RxEasingFunctionBaseEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEasingFunctionBaseEvents(global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.KeySpline"/> class as observables.
    /// </summary>
    public class RxKeySplineEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.KeySpline _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.KeySpline"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxKeySplineEvents(global::Windows.UI.Xaml.Media.Animation.KeySpline data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.KeySpline.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo"/> class as observables.
    /// </summary>
    public class RxNavigationTransitionInfoEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationTransitionInfoEvents(global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.ObjectKeyFrame"/> class as observables.
    /// </summary>
    public class RxObjectKeyFrameEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.ObjectKeyFrame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.ObjectKeyFrame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxObjectKeyFrameEvents(global::Windows.UI.Xaml.Media.Animation.ObjectKeyFrame data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.ObjectKeyFrame.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.PointKeyFrame"/> class as observables.
    /// </summary>
    public class RxPointKeyFrameEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.PointKeyFrame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.PointKeyFrame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPointKeyFrameEvents(global::Windows.UI.Xaml.Media.Animation.PointKeyFrame data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.PointKeyFrame.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.Timeline"/> class as observables.
    /// </summary>
    public class RxTimelineEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.Timeline _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.Timeline"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimelineEvents(global::Windows.UI.Xaml.Media.Animation.Timeline data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.Timeline.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<object> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.Timeline.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Animation.Transition"/> class as observables.
    /// </summary>
    public class RxTransitionEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Animation.Transition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Animation.Transition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTransitionEvents(global::Windows.UI.Xaml.Media.Animation.Transition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Animation.Transition.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Media.Imaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Media.Imaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Imaging.BitmapImage"/> class.
        /// </summary>
        public static RxBitmapImageEvents Events(this global::Windows.UI.Xaml.Media.Imaging.BitmapImage item) => new RxBitmapImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Imaging.SvgImageSource"/> class.
        /// </summary>
        public static RxSvgImageSourceEvents Events(this global::Windows.UI.Xaml.Media.Imaging.SvgImageSource item) => new RxSvgImageSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Imaging.BitmapImage"/> class as observables.
    /// </summary>
    public class RxBitmapImageEvents : global::Windows.UI.Xaml.Media.RxImageSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Imaging.BitmapImage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Imaging.BitmapImage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBitmapImageEvents(global::Windows.UI.Xaml.Media.Imaging.BitmapImage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Imaging.BitmapImage.DownloadProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Media.Imaging.DownloadProgressEventArgs> DownloadProgress => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Media.Imaging.DownloadProgressEventHandler, global::Windows.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Media.Imaging.DownloadProgressEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DownloadProgress += x, x => _data.DownloadProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Imaging.BitmapImage.ImageFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.ExceptionRoutedEventArgs> ImageFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.ExceptionRoutedEventHandler, global::Windows.UI.Xaml.ExceptionRoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.ExceptionRoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ImageFailed += x, x => _data.ImageFailed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Imaging.BitmapImage.ImageOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.RoutedEventArgs> ImageOpened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.RoutedEventHandler, global::Windows.UI.Xaml.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ImageOpened += x, x => _data.ImageOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Imaging.SvgImageSource"/> class as observables.
    /// </summary>
    public class RxSvgImageSourceEvents : global::Windows.UI.Xaml.Media.RxImageSourceEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Imaging.SvgImageSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Imaging.SvgImageSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSvgImageSourceEvents(global::Windows.UI.Xaml.Media.Imaging.SvgImageSource data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Imaging.SvgImageSource.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Media.Imaging.SvgImageSource sender, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs args)> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Media.Imaging.SvgImageSource, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>, (global::Windows.UI.Xaml.Media.Imaging.SvgImageSource sender, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Media.Imaging.SvgImageSource sender, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Imaging.SvgImageSource.OpenFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.Media.Imaging.SvgImageSource sender, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs args)> OpenFailed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Media.Imaging.SvgImageSource, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>, (global::Windows.UI.Xaml.Media.Imaging.SvgImageSource sender, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.Media.Imaging.SvgImageSource sender, global::Windows.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.OpenFailed += x, x => _data.OpenFailed -= x);
    }
}

namespace Windows.UI.Xaml.Media.Media3D
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Media.Media3D"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Media3D.Transform3D"/> class.
        /// </summary>
        public static RxTransform3DEvents Events(this global::Windows.UI.Xaml.Media.Media3D.Transform3D item) => new RxTransform3DEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Media.Media3D.Transform3D"/> class as observables.
    /// </summary>
    public class RxTransform3DEvents
    {
        private readonly global::Windows.UI.Xaml.Media.Media3D.Transform3D _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Media.Media3D.Transform3D"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTransform3DEvents(global::Windows.UI.Xaml.Media.Media3D.Transform3D data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.Media3D.Transform3D.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Navigation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Navigation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Navigation.PageStackEntry"/> class.
        /// </summary>
        public static RxPageStackEntryEvents Events(this global::Windows.UI.Xaml.Navigation.PageStackEntry item) => new RxPageStackEntryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Navigation.PageStackEntry"/> class as observables.
    /// </summary>
    public class RxPageStackEntryEvents
    {
        private readonly global::Windows.UI.Xaml.Navigation.PageStackEntry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Navigation.PageStackEntry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPageStackEntryEvents(global::Windows.UI.Xaml.Navigation.PageStackEntry data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Navigation.PageStackEntry.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
    }
}

namespace Windows.UI.Xaml.Printing
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.UI.Xaml.Printing"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.UI.Xaml.Printing.PrintDocument"/> class.
        /// </summary>
        public static RxPrintDocumentEvents Events(this global::Windows.UI.Xaml.Printing.PrintDocument item) => new RxPrintDocumentEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.UI.Xaml.Printing.PrintDocument"/> class as observables.
    /// </summary>
    public class RxPrintDocumentEvents
    {
        private readonly global::Windows.UI.Xaml.Printing.PrintDocument _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.UI.Xaml.Printing.PrintDocument"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPrintDocumentEvents(global::Windows.UI.Xaml.Printing.PrintDocument data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Printing.PrintDocument.AddPages"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Printing.AddPagesEventArgs> AddPages => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Printing.AddPagesEventHandler, global::Windows.UI.Xaml.Printing.AddPagesEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Printing.AddPagesEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AddPages += x, x => _data.AddPages -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Printing.PrintDocument.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.DataContextChangedEventArgs>, (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Printing.PrintDocument.GetPreviewPage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Printing.GetPreviewPageEventArgs> GetPreviewPage => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Printing.GetPreviewPageEventHandler, global::Windows.UI.Xaml.Printing.GetPreviewPageEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Printing.GetPreviewPageEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GetPreviewPage += x, x => _data.GetPreviewPage -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Printing.PrintDocument.Paginate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Windows.UI.Xaml.Printing.PaginateEventArgs> Paginate => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.Xaml.Printing.PaginateEventHandler, global::Windows.UI.Xaml.Printing.PaginateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Printing.PaginateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paginate += x, x => _data.Paginate -= x);
    }
}

namespace Windows.Web.Http.Filters
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Web.Http.Filters"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Web.Http.Filters.HttpBaseProtocolFilter"/> class.
        /// </summary>
        public static RxHttpBaseProtocolFilterEvents Events(this global::Windows.Web.Http.Filters.HttpBaseProtocolFilter item) => new RxHttpBaseProtocolFilterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Web.Http.Filters.HttpBaseProtocolFilter"/> class as observables.
    /// </summary>
    public class RxHttpBaseProtocolFilterEvents
    {
        private readonly global::Windows.Web.Http.Filters.HttpBaseProtocolFilter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Web.Http.Filters.HttpBaseProtocolFilter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHttpBaseProtocolFilterEvents(global::Windows.Web.Http.Filters.HttpBaseProtocolFilter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.Http.Filters.HttpBaseProtocolFilter.ServerCustomValidationRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.Http.Filters.HttpBaseProtocolFilter sender, global::Windows.Web.Http.Filters.HttpServerCustomValidationRequestedEventArgs args)> ServerCustomValidationRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.Http.Filters.HttpBaseProtocolFilter, global::Windows.Web.Http.Filters.HttpServerCustomValidationRequestedEventArgs>, (global::Windows.Web.Http.Filters.HttpBaseProtocolFilter sender, global::Windows.Web.Http.Filters.HttpServerCustomValidationRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.Http.Filters.HttpBaseProtocolFilter sender, global::Windows.Web.Http.Filters.HttpServerCustomValidationRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ServerCustomValidationRequested += x, x => _data.ServerCustomValidationRequested -= x);
    }
}

namespace Windows.Web.UI
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Web.UI"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Web.UI.IWebViewControl"/> class.
        /// </summary>
        public static RxIWebViewControlEvents Events(this global::Windows.Web.UI.IWebViewControl item) => new RxIWebViewControlEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Web.UI.IWebViewControl"/> class as observables.
    /// </summary>
    public class RxIWebViewControlEvents
    {
        private readonly global::Windows.Web.UI.IWebViewControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Web.UI.IWebViewControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIWebViewControlEvents(global::Windows.Web.UI.IWebViewControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.ContainsFullScreenElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, object args)> ContainsFullScreenElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, object>, (global::Windows.Web.UI.IWebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContainsFullScreenElementChanged += x, x => _data.ContainsFullScreenElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.ContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)> ContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentLoading += x, x => _data.ContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.DOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)> DOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DOMContentLoaded += x, x => _data.DOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.FrameContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)> FrameContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameContentLoading += x, x => _data.FrameContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.FrameDOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)> FrameDOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameDOMContentLoaded += x, x => _data.FrameDOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.FrameNavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)> FrameNavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationCompleted += x, x => _data.FrameNavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.FrameNavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)> FrameNavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationStarting += x, x => _data.FrameNavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.LongRunningScriptDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args)> LongRunningScriptDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LongRunningScriptDetected += x, x => _data.LongRunningScriptDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.NavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)> NavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationCompleted += x, x => _data.NavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.NavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)> NavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationStarting += x, x => _data.NavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.NewWindowRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args)> NewWindowRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NewWindowRequested += x, x => _data.NewWindowRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.PermissionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args)> PermissionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PermissionRequested += x, x => _data.PermissionRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.ScriptNotify"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args)> ScriptNotify => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScriptNotify += x, x => _data.ScriptNotify -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.UnsafeContentWarningDisplaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, object args)> UnsafeContentWarningDisplaying => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, object>, (global::Windows.Web.UI.IWebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsafeContentWarningDisplaying += x, x => _data.UnsafeContentWarningDisplaying -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.UnsupportedUriSchemeIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args)> UnsupportedUriSchemeIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsupportedUriSchemeIdentified += x, x => _data.UnsupportedUriSchemeIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.UnviewableContentIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args)> UnviewableContentIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnviewableContentIdentified += x, x => _data.UnviewableContentIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.IWebViewControl.WebResourceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args)> WebResourceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WebResourceRequested += x, x => _data.WebResourceRequested -= x);
    }
}

namespace Windows.Web.UI.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Windows.Web.UI.Interop"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Web.UI.Interop.WebViewControl"/> class.
        /// </summary>
        public static RxWebViewControlEvents Events(this global::Windows.Web.UI.Interop.WebViewControl item) => new RxWebViewControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Windows.Web.UI.Interop.WebViewControlProcess"/> class.
        /// </summary>
        public static RxWebViewControlProcessEvents Events(this global::Windows.Web.UI.Interop.WebViewControlProcess item) => new RxWebViewControlProcessEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Web.UI.Interop.WebViewControl"/> class as observables.
    /// </summary>
    public class RxWebViewControlEvents
    {
        private readonly global::Windows.Web.UI.Interop.WebViewControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Web.UI.Interop.WebViewControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebViewControlEvents(global::Windows.Web.UI.Interop.WebViewControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.AcceleratorKeyPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.Interop.WebViewControl sender, global::Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs args)> AcceleratorKeyPressed => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.Interop.WebViewControl, global::Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs>, (global::Windows.Web.UI.Interop.WebViewControl sender, global::Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.Interop.WebViewControl sender, global::Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.AcceleratorKeyPressed += x, x => _data.AcceleratorKeyPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.ContainsFullScreenElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, object args)> ContainsFullScreenElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, object>, (global::Windows.Web.UI.IWebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContainsFullScreenElementChanged += x, x => _data.ContainsFullScreenElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.ContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)> ContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ContentLoading += x, x => _data.ContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.DOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)> DOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.DOMContentLoaded += x, x => _data.DOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.FrameContentLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)> FrameContentLoading => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlContentLoadingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameContentLoading += x, x => _data.FrameContentLoading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.FrameDOMContentLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)> FrameDOMContentLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameDOMContentLoaded += x, x => _data.FrameDOMContentLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.FrameNavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)> FrameNavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationCompleted += x, x => _data.FrameNavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.FrameNavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)> FrameNavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.FrameNavigationStarting += x, x => _data.FrameNavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.Interop.WebViewControl sender, object args)> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.Interop.WebViewControl, object>, (global::Windows.Web.UI.Interop.WebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.Interop.WebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.LongRunningScriptDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args)> LongRunningScriptDetected => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LongRunningScriptDetected += x, x => _data.LongRunningScriptDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.Interop.WebViewControl sender, object args)> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.Interop.WebViewControl, object>, (global::Windows.Web.UI.Interop.WebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.Interop.WebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.MoveFocusRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.Interop.WebViewControl sender, global::Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs args)> MoveFocusRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.Interop.WebViewControl, global::Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs>, (global::Windows.Web.UI.Interop.WebViewControl sender, global::Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.Interop.WebViewControl sender, global::Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.MoveFocusRequested += x, x => _data.MoveFocusRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.NavigationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)> NavigationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationCompletedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationCompleted += x, x => _data.NavigationCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.NavigationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)> NavigationStarting => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNavigationStartingEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NavigationStarting += x, x => _data.NavigationStarting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.NewWindowRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args)> NewWindowRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.NewWindowRequested += x, x => _data.NewWindowRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.PermissionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args)> PermissionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlPermissionRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.PermissionRequested += x, x => _data.PermissionRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.ScriptNotify"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args)> ScriptNotify => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlScriptNotifyEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ScriptNotify += x, x => _data.ScriptNotify -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.UnsafeContentWarningDisplaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, object args)> UnsafeContentWarningDisplaying => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, object>, (global::Windows.Web.UI.IWebViewControl sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsafeContentWarningDisplaying += x, x => _data.UnsafeContentWarningDisplaying -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.UnsupportedUriSchemeIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args)> UnsupportedUriSchemeIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnsupportedUriSchemeIdentified += x, x => _data.UnsupportedUriSchemeIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.UnviewableContentIdentified"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args)> UnviewableContentIdentified => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.UnviewableContentIdentified += x, x => _data.UnviewableContentIdentified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControl.WebResourceRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args)> WebResourceRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.IWebViewControl, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs>, (global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.IWebViewControl sender, global::Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.WebResourceRequested += x, x => _data.WebResourceRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Windows.Web.UI.Interop.WebViewControlProcess"/> class as observables.
    /// </summary>
    public class RxWebViewControlProcessEvents
    {
        private readonly global::Windows.Web.UI.Interop.WebViewControlProcess _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Windows.Web.UI.Interop.WebViewControlProcess"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebViewControlProcessEvents(global::Windows.Web.UI.Interop.WebViewControlProcess data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Web.UI.Interop.WebViewControlProcess.ProcessExited"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Windows.Web.UI.Interop.WebViewControlProcess sender, object args)> ProcessExited => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Web.UI.Interop.WebViewControlProcess, object>, (global::Windows.Web.UI.Interop.WebViewControlProcess sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Web.UI.Interop.WebViewControlProcess sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => _data.ProcessExited += x, x => _data.ProcessExited -= x);
    }
}

namespace Windows.ApplicationModel.Chat
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.ApplicationModel.Chat"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Chat.RcsManager.TransportListChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> RcsManagerTransportListChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Chat.RcsManager.TransportListChanged += x, x => global::Windows.ApplicationModel.Chat.RcsManager.TransportListChanged -= x);
    }
}

namespace Windows.ApplicationModel.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.ApplicationModel.Core"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplication.BackgroundActivated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs> CoreApplicationBackgroundActivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs>, global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Core.CoreApplication.BackgroundActivated += x, x => global::Windows.ApplicationModel.Core.CoreApplication.BackgroundActivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplication.EnteredBackground"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.EnteredBackgroundEventArgs> CoreApplicationEnteredBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.ApplicationModel.EnteredBackgroundEventArgs>, global::Windows.ApplicationModel.EnteredBackgroundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.EnteredBackgroundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Core.CoreApplication.EnteredBackground += x, x => global::Windows.ApplicationModel.Core.CoreApplication.EnteredBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplication.Exiting"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> CoreApplicationExiting => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Core.CoreApplication.Exiting += x, x => global::Windows.ApplicationModel.Core.CoreApplication.Exiting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplication.LeavingBackground"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.LeavingBackgroundEventArgs> CoreApplicationLeavingBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.ApplicationModel.LeavingBackgroundEventArgs>, global::Windows.ApplicationModel.LeavingBackgroundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.LeavingBackgroundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Core.CoreApplication.LeavingBackground += x, x => global::Windows.ApplicationModel.Core.CoreApplication.LeavingBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplication.Resuming"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> CoreApplicationResuming => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Core.CoreApplication.Resuming += x, x => global::Windows.ApplicationModel.Core.CoreApplication.Resuming -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplication.Suspending"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.SuspendingEventArgs> CoreApplicationSuspending => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.ApplicationModel.SuspendingEventArgs>, global::Windows.ApplicationModel.SuspendingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.SuspendingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Core.CoreApplication.Suspending += x, x => global::Windows.ApplicationModel.Core.CoreApplication.Suspending -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.Core.CoreApplication.UnhandledErrorDetected"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs> CoreApplicationUnhandledErrorDetected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs>, global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.Core.CoreApplication.UnhandledErrorDetected += x, x => global::Windows.ApplicationModel.Core.CoreApplication.UnhandledErrorDetected -= x);
    }
}

namespace Windows.ApplicationModel.DataTransfer
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.ApplicationModel.DataTransfer"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.Clipboard.ContentChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> ClipboardContentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.DataTransfer.Clipboard.ContentChanged += x, x => global::Windows.ApplicationModel.DataTransfer.Clipboard.ContentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.Clipboard.HistoryChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.DataTransfer.ClipboardHistoryChangedEventArgs> ClipboardHistoryChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.ApplicationModel.DataTransfer.ClipboardHistoryChangedEventArgs>, global::Windows.ApplicationModel.DataTransfer.ClipboardHistoryChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.DataTransfer.ClipboardHistoryChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.DataTransfer.Clipboard.HistoryChanged += x, x => global::Windows.ApplicationModel.DataTransfer.Clipboard.HistoryChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.Clipboard.HistoryEnabledChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> ClipboardHistoryEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.DataTransfer.Clipboard.HistoryEnabledChanged += x, x => global::Windows.ApplicationModel.DataTransfer.Clipboard.HistoryEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.ApplicationModel.DataTransfer.Clipboard.RoamingEnabledChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> ClipboardRoamingEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.ApplicationModel.DataTransfer.Clipboard.RoamingEnabledChanged += x, x => global::Windows.ApplicationModel.DataTransfer.Clipboard.RoamingEnabledChanged -= x);
    }
}

namespace Windows.Foundation.Diagnostics
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Foundation.Diagnostics"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Foundation.Diagnostics.AsyncCausalityTracer.TracingStatusChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs> AsyncCausalityTracerTracingStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs>, global::Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Foundation.Diagnostics.AsyncCausalityTracer.TracingStatusChanged += x, x => global::Windows.Foundation.Diagnostics.AsyncCausalityTracer.TracingStatusChanged -= x);
    }
}

namespace Windows.Gaming.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Gaming.Input"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.ArcadeStick.ArcadeStickAdded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.ArcadeStick> ArcadeStickArcadeStickAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.ArcadeStick>, global::Windows.Gaming.Input.ArcadeStick>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.ArcadeStick e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.ArcadeStick.ArcadeStickAdded += x, x => global::Windows.Gaming.Input.ArcadeStick.ArcadeStickAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.ArcadeStick.ArcadeStickRemoved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.ArcadeStick> ArcadeStickArcadeStickRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.ArcadeStick>, global::Windows.Gaming.Input.ArcadeStick>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.ArcadeStick e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.ArcadeStick.ArcadeStickRemoved += x, x => global::Windows.Gaming.Input.ArcadeStick.ArcadeStickRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.FlightStick.FlightStickAdded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.FlightStick> FlightStickFlightStickAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.FlightStick>, global::Windows.Gaming.Input.FlightStick>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.FlightStick e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.FlightStick.FlightStickAdded += x, x => global::Windows.Gaming.Input.FlightStick.FlightStickAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.FlightStick.FlightStickRemoved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.FlightStick> FlightStickFlightStickRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.FlightStick>, global::Windows.Gaming.Input.FlightStick>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.FlightStick e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.FlightStick.FlightStickRemoved += x, x => global::Windows.Gaming.Input.FlightStick.FlightStickRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.Gamepad.GamepadAdded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.Gamepad> GamepadGamepadAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.Gamepad>, global::Windows.Gaming.Input.Gamepad>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.Gamepad e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.Gamepad.GamepadAdded += x, x => global::Windows.Gaming.Input.Gamepad.GamepadAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.Gamepad.GamepadRemoved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.Gamepad> GamepadGamepadRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.Gamepad>, global::Windows.Gaming.Input.Gamepad>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.Gamepad e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.Gamepad.GamepadRemoved += x, x => global::Windows.Gaming.Input.Gamepad.GamepadRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RacingWheel.RacingWheelAdded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.RacingWheel> RacingWheelRacingWheelAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.RacingWheel>, global::Windows.Gaming.Input.RacingWheel>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.RacingWheel e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.RacingWheel.RacingWheelAdded += x, x => global::Windows.Gaming.Input.RacingWheel.RacingWheelAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RacingWheel.RacingWheelRemoved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.RacingWheel> RacingWheelRacingWheelRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.RacingWheel>, global::Windows.Gaming.Input.RacingWheel>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.RacingWheel e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.RacingWheel.RacingWheelRemoved += x, x => global::Windows.Gaming.Input.RacingWheel.RacingWheelRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RawGameController.RawGameControllerAdded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.RawGameController> RawGameControllerRawGameControllerAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.RawGameController>, global::Windows.Gaming.Input.RawGameController>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.RawGameController e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.RawGameController.RawGameControllerAdded += x, x => global::Windows.Gaming.Input.RawGameController.RawGameControllerAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.RawGameController.RawGameControllerRemoved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.RawGameController> RawGameControllerRawGameControllerRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.RawGameController>, global::Windows.Gaming.Input.RawGameController>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.RawGameController e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.RawGameController.RawGameControllerRemoved += x, x => global::Windows.Gaming.Input.RawGameController.RawGameControllerRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.UINavigationController.UINavigationControllerAdded"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.UINavigationController> UINavigationControllerUINavigationControllerAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.UINavigationController>, global::Windows.Gaming.Input.UINavigationController>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.UINavigationController e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.UINavigationController.UINavigationControllerAdded += x, x => global::Windows.Gaming.Input.UINavigationController.UINavigationControllerAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.Input.UINavigationController.UINavigationControllerRemoved"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Gaming.Input.UINavigationController> UINavigationControllerUINavigationControllerRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Gaming.Input.UINavigationController>, global::Windows.Gaming.Input.UINavigationController>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Gaming.Input.UINavigationController e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.Input.UINavigationController.UINavigationControllerRemoved += x, x => global::Windows.Gaming.Input.UINavigationController.UINavigationControllerRemoved -= x);
    }
}

namespace Windows.Gaming.UI
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Gaming.UI"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.UI.GameBar.IsInputRedirectedChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> GameBarIsInputRedirectedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.UI.GameBar.IsInputRedirectedChanged += x, x => global::Windows.Gaming.UI.GameBar.IsInputRedirectedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Gaming.UI.GameBar.VisibilityChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> GameBarVisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Gaming.UI.GameBar.VisibilityChanged += x, x => global::Windows.Gaming.UI.GameBar.VisibilityChanged -= x);
    }
}

namespace Windows.Graphics.Display
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Graphics.Display"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayInformation.DisplayContentsInvalidated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<(global::Windows.Graphics.Display.DisplayInformation sender, object args)> DisplayInformationDisplayContentsInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<global::Windows.Graphics.Display.DisplayInformation, object>, (global::Windows.Graphics.Display.DisplayInformation sender, object args)>(eventHandler =>
        {
            void Handler(global::Windows.Graphics.Display.DisplayInformation sender, object args) => eventHandler((sender, args));
            return Handler;
        }

        , x => global::Windows.Graphics.Display.DisplayInformation.DisplayContentsInvalidated += x, x => global::Windows.Graphics.Display.DisplayInformation.DisplayContentsInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayProperties.ColorProfileChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> DisplayPropertiesColorProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Graphics.Display.DisplayPropertiesEventHandler, object>(eventHandler =>
        {
            void Handler(object sender) => eventHandler(sender);
            return Handler;
        }

        , x => global::Windows.Graphics.Display.DisplayProperties.ColorProfileChanged += x, x => global::Windows.Graphics.Display.DisplayProperties.ColorProfileChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayProperties.DisplayContentsInvalidated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> DisplayPropertiesDisplayContentsInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Graphics.Display.DisplayPropertiesEventHandler, object>(eventHandler =>
        {
            void Handler(object sender) => eventHandler(sender);
            return Handler;
        }

        , x => global::Windows.Graphics.Display.DisplayProperties.DisplayContentsInvalidated += x, x => global::Windows.Graphics.Display.DisplayProperties.DisplayContentsInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayProperties.LogicalDpiChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> DisplayPropertiesLogicalDpiChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Graphics.Display.DisplayPropertiesEventHandler, object>(eventHandler =>
        {
            void Handler(object sender) => eventHandler(sender);
            return Handler;
        }

        , x => global::Windows.Graphics.Display.DisplayProperties.LogicalDpiChanged += x, x => global::Windows.Graphics.Display.DisplayProperties.LogicalDpiChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayProperties.OrientationChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> DisplayPropertiesOrientationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Graphics.Display.DisplayPropertiesEventHandler, object>(eventHandler =>
        {
            void Handler(object sender) => eventHandler(sender);
            return Handler;
        }

        , x => global::Windows.Graphics.Display.DisplayProperties.OrientationChanged += x, x => global::Windows.Graphics.Display.DisplayProperties.OrientationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Display.DisplayProperties.StereoEnabledChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> DisplayPropertiesStereoEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Graphics.Display.DisplayPropertiesEventHandler, object>(eventHandler =>
        {
            void Handler(object sender) => eventHandler(sender);
            return Handler;
        }

        , x => global::Windows.Graphics.Display.DisplayProperties.StereoEnabledChanged += x, x => global::Windows.Graphics.Display.DisplayProperties.StereoEnabledChanged -= x);
    }
}

namespace Windows.Graphics.Holographic
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Graphics.Holographic"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Graphics.Holographic.HolographicSpace.IsAvailableChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> HolographicSpaceIsAvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Graphics.Holographic.HolographicSpace.IsAvailableChanged += x, x => global::Windows.Graphics.Holographic.HolographicSpace.IsAvailableChanged -= x);
    }
}

namespace Windows.Media.Core.Preview
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Media.Core.Preview"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Core.Preview.SoundLevelBroker.SoundLevelChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> SoundLevelBrokerSoundLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Media.Core.Preview.SoundLevelBroker.SoundLevelChanged += x, x => global::Windows.Media.Core.Preview.SoundLevelBroker.SoundLevelChanged -= x);
    }
}

namespace Windows.Media.Devices
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Media.Devices"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Devices.MediaDevice.DefaultAudioCaptureDeviceChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Media.Devices.DefaultAudioCaptureDeviceChangedEventArgs> MediaDeviceDefaultAudioCaptureDeviceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.Media.Devices.DefaultAudioCaptureDeviceChangedEventArgs>, global::Windows.Media.Devices.DefaultAudioCaptureDeviceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Media.Devices.DefaultAudioCaptureDeviceChangedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => global::Windows.Media.Devices.MediaDevice.DefaultAudioCaptureDeviceChanged += x, x => global::Windows.Media.Devices.MediaDevice.DefaultAudioCaptureDeviceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Devices.MediaDevice.DefaultAudioRenderDeviceChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Media.Devices.DefaultAudioRenderDeviceChangedEventArgs> MediaDeviceDefaultAudioRenderDeviceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.Media.Devices.DefaultAudioRenderDeviceChangedEventArgs>, global::Windows.Media.Devices.DefaultAudioRenderDeviceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Media.Devices.DefaultAudioRenderDeviceChangedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => global::Windows.Media.Devices.MediaDevice.DefaultAudioRenderDeviceChanged += x, x => global::Windows.Media.Devices.MediaDevice.DefaultAudioRenderDeviceChanged -= x);
    }
}

namespace Windows.Media.Playback
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Media.Playback"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.BackgroundMediaPlayer.MessageReceivedFromBackground"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs> BackgroundMediaPlayerMessageReceivedFromBackground => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs>, global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Media.Playback.BackgroundMediaPlayer.MessageReceivedFromBackground += x, x => global::Windows.Media.Playback.BackgroundMediaPlayer.MessageReceivedFromBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Media.Playback.BackgroundMediaPlayer.MessageReceivedFromForeground"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs> BackgroundMediaPlayerMessageReceivedFromForeground => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs>, global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Media.Playback.MediaPlayerDataReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Media.Playback.BackgroundMediaPlayer.MessageReceivedFromForeground += x, x => global::Windows.Media.Playback.BackgroundMediaPlayer.MessageReceivedFromForeground -= x);
    }
}

namespace Windows.Networking.Connectivity
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Networking.Connectivity"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Connectivity.NetworkInformation.NetworkStatusChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> NetworkInformationNetworkStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler, object>(eventHandler =>
        {
            void Handler(object sender) => eventHandler(sender);
            return Handler;
        }

        , x => global::Windows.Networking.Connectivity.NetworkInformation.NetworkStatusChanged += x, x => global::Windows.Networking.Connectivity.NetworkInformation.NetworkStatusChanged -= x);
    }
}

namespace Windows.Networking.NetworkOperators
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Networking.NetworkOperators"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.NetworkOperators.ESimManager.ServiceInfoChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> ESimManagerServiceInfoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Networking.NetworkOperators.ESimManager.ServiceInfoChanged += x, x => global::Windows.Networking.NetworkOperators.ESimManager.ServiceInfoChanged -= x);
    }
}

namespace Windows.Networking.Proximity
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Networking.Proximity"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.PeerFinder.ConnectionRequested"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Networking.Proximity.ConnectionRequestedEventArgs> PeerFinderConnectionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.Networking.Proximity.ConnectionRequestedEventArgs>, global::Windows.Networking.Proximity.ConnectionRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Networking.Proximity.ConnectionRequestedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => global::Windows.Networking.Proximity.PeerFinder.ConnectionRequested += x, x => global::Windows.Networking.Proximity.PeerFinder.ConnectionRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Networking.Proximity.PeerFinder.TriggeredConnectionStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs> PeerFinderTriggeredConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, global::Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs>, global::Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => global::Windows.Networking.Proximity.PeerFinder.TriggeredConnectionStateChanged += x, x => global::Windows.Networking.Proximity.PeerFinder.TriggeredConnectionStateChanged -= x);
    }
}

namespace Windows.Perception.Spatial
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Perception.Spatial"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Perception.Spatial.SpatialStageFrameOfReference.CurrentChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> SpatialStageFrameOfReferenceCurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Perception.Spatial.SpatialStageFrameOfReference.CurrentChanged += x, x => global::Windows.Perception.Spatial.SpatialStageFrameOfReference.CurrentChanged -= x);
    }
}

namespace Windows.Phone.System.Power
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Phone.System.Power"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Phone.System.Power.PowerManager.PowerSavingModeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> PowerManagerPowerSavingModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Phone.System.Power.PowerManager.PowerSavingModeChanged += x, x => global::Windows.Phone.System.Power.PowerManager.PowerSavingModeChanged -= x);
    }
}

namespace Windows.Phone.UI.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Phone.UI.Input"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Phone.UI.Input.HardwareButtons.BackPressed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Phone.UI.Input.BackPressedEventArgs> HardwareButtonsBackPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Phone.UI.Input.BackPressedEventArgs>, global::Windows.Phone.UI.Input.BackPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Phone.UI.Input.BackPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Phone.UI.Input.HardwareButtons.BackPressed += x, x => global::Windows.Phone.UI.Input.HardwareButtons.BackPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Phone.UI.Input.HardwareButtons.CameraHalfPressed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Phone.UI.Input.CameraEventArgs> HardwareButtonsCameraHalfPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Phone.UI.Input.CameraEventArgs>, global::Windows.Phone.UI.Input.CameraEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Phone.UI.Input.CameraEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Phone.UI.Input.HardwareButtons.CameraHalfPressed += x, x => global::Windows.Phone.UI.Input.HardwareButtons.CameraHalfPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Phone.UI.Input.HardwareButtons.CameraPressed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Phone.UI.Input.CameraEventArgs> HardwareButtonsCameraPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Phone.UI.Input.CameraEventArgs>, global::Windows.Phone.UI.Input.CameraEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Phone.UI.Input.CameraEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Phone.UI.Input.HardwareButtons.CameraPressed += x, x => global::Windows.Phone.UI.Input.HardwareButtons.CameraPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Phone.UI.Input.HardwareButtons.CameraReleased"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Phone.UI.Input.CameraEventArgs> HardwareButtonsCameraReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Phone.UI.Input.CameraEventArgs>, global::Windows.Phone.UI.Input.CameraEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Phone.UI.Input.CameraEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Phone.UI.Input.HardwareButtons.CameraReleased += x, x => global::Windows.Phone.UI.Input.HardwareButtons.CameraReleased -= x);
    }
}

namespace Windows.Security.Authentication.Identity.Provider
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.Security.Authentication.Identity.Provider"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication.AuthenticationStageChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs> SecondaryAuthenticationFactorAuthenticationAuthenticationStageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs>, global::Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication.AuthenticationStageChanged += x, x => global::Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication.AuthenticationStageChanged -= x);
    }
}

namespace Windows.System
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.System"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.MemoryManager.AppMemoryUsageDecreased"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> MemoryManagerAppMemoryUsageDecreased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.MemoryManager.AppMemoryUsageDecreased += x, x => global::Windows.System.MemoryManager.AppMemoryUsageDecreased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.MemoryManager.AppMemoryUsageIncreased"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> MemoryManagerAppMemoryUsageIncreased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.MemoryManager.AppMemoryUsageIncreased += x, x => global::Windows.System.MemoryManager.AppMemoryUsageIncreased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.MemoryManager.AppMemoryUsageLimitChanging"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.System.AppMemoryUsageLimitChangingEventArgs> MemoryManagerAppMemoryUsageLimitChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.System.AppMemoryUsageLimitChangingEventArgs>, global::Windows.System.AppMemoryUsageLimitChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.System.AppMemoryUsageLimitChangingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.MemoryManager.AppMemoryUsageLimitChanging += x, x => global::Windows.System.MemoryManager.AppMemoryUsageLimitChanging -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.UserDeviceAssociation.UserDeviceAssociationChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.System.UserDeviceAssociationChangedEventArgs> UserDeviceAssociationUserDeviceAssociationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.System.UserDeviceAssociationChangedEventArgs>, global::Windows.System.UserDeviceAssociationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.System.UserDeviceAssociationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.UserDeviceAssociation.UserDeviceAssociationChanged += x, x => global::Windows.System.UserDeviceAssociation.UserDeviceAssociationChanged -= x);
    }
}

namespace Windows.System.Power
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.System.Power"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.BackgroundEnergyManager.RecentEnergyUsageIncreased"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> BackgroundEnergyManagerRecentEnergyUsageIncreased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.BackgroundEnergyManager.RecentEnergyUsageIncreased += x, x => global::Windows.System.Power.BackgroundEnergyManager.RecentEnergyUsageIncreased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.BackgroundEnergyManager.RecentEnergyUsageReturnedToLow"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> BackgroundEnergyManagerRecentEnergyUsageReturnedToLow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.BackgroundEnergyManager.RecentEnergyUsageReturnedToLow += x, x => global::Windows.System.Power.BackgroundEnergyManager.RecentEnergyUsageReturnedToLow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.ForegroundEnergyManager.RecentEnergyUsageIncreased"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> ForegroundEnergyManagerRecentEnergyUsageIncreased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.ForegroundEnergyManager.RecentEnergyUsageIncreased += x, x => global::Windows.System.Power.ForegroundEnergyManager.RecentEnergyUsageIncreased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.ForegroundEnergyManager.RecentEnergyUsageReturnedToLow"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> ForegroundEnergyManagerRecentEnergyUsageReturnedToLow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.ForegroundEnergyManager.RecentEnergyUsageReturnedToLow += x, x => global::Windows.System.Power.ForegroundEnergyManager.RecentEnergyUsageReturnedToLow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.PowerManager.BatteryStatusChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> PowerManagerBatteryStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.PowerManager.BatteryStatusChanged += x, x => global::Windows.System.Power.PowerManager.BatteryStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.PowerManager.EnergySaverStatusChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> PowerManagerEnergySaverStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.PowerManager.EnergySaverStatusChanged += x, x => global::Windows.System.Power.PowerManager.EnergySaverStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.PowerManager.PowerSupplyStatusChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> PowerManagerPowerSupplyStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.PowerManager.PowerSupplyStatusChanged += x, x => global::Windows.System.Power.PowerManager.PowerSupplyStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.PowerManager.RemainingChargePercentChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> PowerManagerRemainingChargePercentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.PowerManager.RemainingChargePercentChanged += x, x => global::Windows.System.Power.PowerManager.RemainingChargePercentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Power.PowerManager.RemainingDischargeTimeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> PowerManagerRemainingDischargeTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Power.PowerManager.RemainingDischargeTimeChanged += x, x => global::Windows.System.Power.PowerManager.RemainingDischargeTimeChanged -= x);
    }
}

namespace Windows.System.Profile
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.System.Profile"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings.CollectionLevelChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> PlatformDiagnosticsAndUsageDataSettingsCollectionLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings.CollectionLevelChanged += x, x => global::Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings.CollectionLevelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Profile.SystemSetupInfo.OutOfBoxExperienceStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> SystemSetupInfoOutOfBoxExperienceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Profile.SystemSetupInfo.OutOfBoxExperienceStateChanged += x, x => global::Windows.System.Profile.SystemSetupInfo.OutOfBoxExperienceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.System.Profile.WindowsIntegrityPolicy.PolicyChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> WindowsIntegrityPolicyPolicyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.System.Profile.WindowsIntegrityPolicy.PolicyChanged += x, x => global::Windows.System.Profile.WindowsIntegrityPolicy.PolicyChanged -= x);
    }
}

namespace Windows.UI.ViewManagement
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.UI.ViewManagement"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.ViewManagement.ProjectionManager.ProjectionDisplayAvailableChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> ProjectionManagerProjectionDisplayAvailableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.ViewManagement.ProjectionManager.ProjectionDisplayAvailableChanged += x, x => global::Windows.UI.ViewManagement.ProjectionManager.ProjectionDisplayAvailableChanged -= x);
    }
}

namespace Windows.UI.WebUI
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.UI.WebUI"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.Activated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.Activation.IActivatedEventArgs> WebUIApplicationActivated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.WebUI.ActivatedEventHandler, global::Windows.ApplicationModel.Activation.IActivatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.Activation.IActivatedEventArgs eventArgs) => eventHandler(eventArgs);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.Activated += x, x => global::Windows.UI.WebUI.WebUIApplication.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.BackgroundActivated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs> WebUIApplicationBackgroundActivated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.WebUI.BackgroundActivatedEventHandler, global::Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs eventArgs) => eventHandler(eventArgs);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.BackgroundActivated += x, x => global::Windows.UI.WebUI.WebUIApplication.BackgroundActivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.EnteredBackground"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.IEnteredBackgroundEventArgs> WebUIApplicationEnteredBackground => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.WebUI.EnteredBackgroundEventHandler, global::Windows.ApplicationModel.IEnteredBackgroundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.IEnteredBackgroundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.EnteredBackground += x, x => global::Windows.UI.WebUI.WebUIApplication.EnteredBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.LeavingBackground"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.ILeavingBackgroundEventArgs> WebUIApplicationLeavingBackground => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.WebUI.LeavingBackgroundEventHandler, global::Windows.ApplicationModel.ILeavingBackgroundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.ILeavingBackgroundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.LeavingBackground += x, x => global::Windows.UI.WebUI.WebUIApplication.LeavingBackground -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.Navigated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.UI.WebUI.IWebUINavigatedEventArgs> WebUIApplicationNavigated => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.WebUI.NavigatedEventHandler, global::Windows.UI.WebUI.IWebUINavigatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.WebUI.IWebUINavigatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.Navigated += x, x => global::Windows.UI.WebUI.WebUIApplication.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.NewWebUIViewCreated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.UI.WebUI.NewWebUIViewCreatedEventArgs> WebUIApplicationNewWebUIViewCreated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.WebUI.NewWebUIViewCreatedEventArgs>, global::Windows.UI.WebUI.NewWebUIViewCreatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.WebUI.NewWebUIViewCreatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.NewWebUIViewCreated += x, x => global::Windows.UI.WebUI.WebUIApplication.NewWebUIViewCreated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.Resuming"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> WebUIApplicationResuming => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.WebUI.ResumingEventHandler, object>(eventHandler =>
        {
            void Handler(object sender) => eventHandler(sender);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.Resuming += x, x => global::Windows.UI.WebUI.WebUIApplication.Resuming -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.WebUI.WebUIApplication.Suspending"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.ApplicationModel.ISuspendingEventArgs> WebUIApplicationSuspending => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.UI.WebUI.SuspendingEventHandler, global::Windows.ApplicationModel.ISuspendingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.ApplicationModel.ISuspendingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.WebUI.WebUIApplication.Suspending += x, x => global::Windows.UI.WebUI.WebUIApplication.Suspending -= x);
    }
}

namespace Windows.UI.Xaml.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.UI.Xaml.Input"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.AccessKeyManager.IsDisplayModeEnabledChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> AccessKeyManagerIsDisplayModeEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Windows.Foundation.TypedEventHandler<object, object>, object>(eventHandler =>
        {
            void Handler(object sender, object args) => eventHandler(args);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Input.AccessKeyManager.IsDisplayModeEnabledChanged += x, x => global::Windows.UI.Xaml.Input.AccessKeyManager.IsDisplayModeEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.FocusManager.GettingFocus"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.UI.Xaml.Input.GettingFocusEventArgs> FocusManagerGettingFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Input.GettingFocusEventArgs>, global::Windows.UI.Xaml.Input.GettingFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.GettingFocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Input.FocusManager.GettingFocus += x, x => global::Windows.UI.Xaml.Input.FocusManager.GettingFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.FocusManager.GotFocus"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs> FocusManagerGotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs>, global::Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Input.FocusManager.GotFocus += x, x => global::Windows.UI.Xaml.Input.FocusManager.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.FocusManager.LosingFocus"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.UI.Xaml.Input.LosingFocusEventArgs> FocusManagerLosingFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Input.LosingFocusEventArgs>, global::Windows.UI.Xaml.Input.LosingFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.LosingFocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Input.FocusManager.LosingFocus += x, x => global::Windows.UI.Xaml.Input.FocusManager.LosingFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Input.FocusManager.LostFocus"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs> FocusManagerLostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs>, global::Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Input.FocusManager.LostFocus += x, x => global::Windows.UI.Xaml.Input.FocusManager.LostFocus -= x);
    }
}

namespace Windows.UI.Xaml.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Windows.UI.Xaml.Media"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.CompositionTarget.Rendered"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Windows.UI.Xaml.Media.RenderedEventArgs> CompositionTargetRendered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Windows.UI.Xaml.Media.RenderedEventArgs>, global::Windows.UI.Xaml.Media.RenderedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Windows.UI.Xaml.Media.RenderedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Media.CompositionTarget.Rendered += x, x => global::Windows.UI.Xaml.Media.CompositionTarget.Rendered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.CompositionTarget.Rendering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> CompositionTargetRendering => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Media.CompositionTarget.Rendering += x, x => global::Windows.UI.Xaml.Media.CompositionTarget.Rendering -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Windows.UI.Xaml.Media.CompositionTarget.SurfaceContentsLost"/> event triggers.
        /// </summary>
        public static global::System.IObservable<object> CompositionTargetSurfaceContentsLost => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<object>, object>(eventHandler =>
        {
            void Handler(object sender, object e) => eventHandler(e);
            return Handler;
        }

        , x => global::Windows.UI.Xaml.Media.CompositionTarget.SurfaceContentsLost += x, x => global::Windows.UI.Xaml.Media.CompositionTarget.SurfaceContentsLost -= x);
    }
}