using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Avalonia
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Application"/> class.
        /// </summary>
        public static ApplicationEvents Events(this global::Avalonia.Application item) => new ApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.AvaloniaObject"/> class.
        /// </summary>
        public static AvaloniaObjectEvents Events(this global::Avalonia.AvaloniaObject item) => new AvaloniaObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.IAvaloniaObject"/> class.
        /// </summary>
        public static IAvaloniaObjectEvents Events(this global::Avalonia.IAvaloniaObject item) => new IAvaloniaObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.IStyledElement"/> class.
        /// </summary>
        public static IStyledElementEvents Events(this global::Avalonia.IStyledElement item) => new IStyledElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.StyledElement"/> class.
        /// </summary>
        public static StyledElementEvents Events(this global::Avalonia.StyledElement item) => new StyledElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Visual"/> class.
        /// </summary>
        public static VisualEvents Events(this global::Avalonia.Visual item) => new VisualEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Application"/> class as observables.
    /// </summary>
    public class ApplicationEvents
    {
        private readonly global::Avalonia.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ApplicationEvents(global::Avalonia.Application data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Application.OnExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnExit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OnExit += x, x => _data.OnExit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Application.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.AvaloniaObject"/> class as observables.
    /// </summary>
    public class AvaloniaObjectEvents
    {
        private readonly global::Avalonia.AvaloniaObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.AvaloniaObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AvaloniaObjectEvents(global::Avalonia.AvaloniaObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.AvaloniaObject.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.AvaloniaPropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.AvaloniaPropertyChangedEventArgs>, global::Avalonia.AvaloniaPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.AvaloniaPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.IAvaloniaObject"/> class as observables.
    /// </summary>
    public class IAvaloniaObjectEvents
    {
        private readonly global::Avalonia.IAvaloniaObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.IAvaloniaObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IAvaloniaObjectEvents(global::Avalonia.IAvaloniaObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.IAvaloniaObject.InheritablePropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.AvaloniaPropertyChangedEventArgs> InheritablePropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.AvaloniaPropertyChangedEventArgs>, global::Avalonia.AvaloniaPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.AvaloniaPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.InheritablePropertyChanged += x, x => _data.InheritablePropertyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.IAvaloniaObject.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.AvaloniaPropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.AvaloniaPropertyChangedEventArgs>, global::Avalonia.AvaloniaPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.AvaloniaPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.IStyledElement"/> class as observables.
    /// </summary>
    public class IStyledElementEvents
    {
        private readonly global::Avalonia.IStyledElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.IStyledElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IStyledElementEvents(global::Avalonia.IStyledElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.IStyledElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Initialized += x, x => _data.Initialized -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.StyledElement"/> class as observables.
    /// </summary>
    public class StyledElementEvents : global::Avalonia.AvaloniaObjectEvents
    {
        private readonly global::Avalonia.StyledElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.StyledElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StyledElementEvents(global::Avalonia.StyledElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.AttachedToLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> AttachedToLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AttachedToLogicalTree += x, x => _data.AttachedToLogicalTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.DetachedFromLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> DetachedFromLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DetachedFromLogicalTree += x, x => _data.DetachedFromLogicalTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Initialized += x, x => _data.Initialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Visual"/> class as observables.
    /// </summary>
    public class VisualEvents : global::Avalonia.StyledElementEvents
    {
        private readonly global::Avalonia.Visual _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Visual"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VisualEvents(global::Avalonia.Visual data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Visual.AttachedToVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> AttachedToVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AttachedToVisualTree += x, x => _data.AttachedToVisualTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Visual.DetachedFromVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> DetachedFromVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DetachedFromVisualTree += x, x => _data.DetachedFromVisualTree -= x);
    }
}

namespace Avalonia.Collections
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Collections"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{global::TKey, global::TValue}"/> class.
        /// </summary>
        public static AvaloniaDictionaryEvents Events(this global::Avalonia.Collections.AvaloniaDictionary<global::TKey, global::TValue> item) => new AvaloniaDictionaryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{global::TKey, global::TValue}"/> class as observables.
    /// </summary>
    public class AvaloniaDictionaryEvents
    {
        private readonly global::Avalonia.Collections.AvaloniaDictionary<global::TKey, global::TValue> _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{global::TKey, global::TValue}"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AvaloniaDictionaryEvents(global::Avalonia.Collections.AvaloniaDictionary<global::TKey, global::TValue> data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{global::TKey, global::TValue}.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{global::TKey, global::TValue}.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }
}

namespace Avalonia.Controls
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.AutoCompleteBox"/> class.
        /// </summary>
        public static AutoCompleteBoxEvents Events(this global::Avalonia.Controls.AutoCompleteBox item) => new AutoCompleteBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Button"/> class.
        /// </summary>
        public static ButtonEvents Events(this global::Avalonia.Controls.Button item) => new ButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Calendar"/> class.
        /// </summary>
        public static CalendarEvents Events(this global::Avalonia.Controls.Calendar item) => new CalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ContextMenu"/> class.
        /// </summary>
        public static ContextMenuEvents Events(this global::Avalonia.Controls.ContextMenu item) => new ContextMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.DatePicker"/> class.
        /// </summary>
        public static DatePickerEvents Events(this global::Avalonia.Controls.DatePicker item) => new DatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.IApplicationLifecycle"/> class.
        /// </summary>
        public static IApplicationLifecycleEvents Events(this global::Avalonia.Controls.IApplicationLifecycle item) => new IApplicationLifecycleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.INameScope"/> class.
        /// </summary>
        public static INameScopeEvents Events(this global::Avalonia.Controls.INameScope item) => new INameScopeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.IResourceProvider"/> class.
        /// </summary>
        public static IResourceProviderEvents Events(this global::Avalonia.Controls.IResourceProvider item) => new IResourceProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.MenuBase"/> class.
        /// </summary>
        public static MenuBaseEvents Events(this global::Avalonia.Controls.MenuBase item) => new MenuBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.MenuItem"/> class.
        /// </summary>
        public static MenuItemEvents Events(this global::Avalonia.Controls.MenuItem item) => new MenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.NameScope"/> class.
        /// </summary>
        public static NameScopeEvents Events(this global::Avalonia.Controls.NameScope item) => new NameScopeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.NumericUpDown"/> class.
        /// </summary>
        public static NumericUpDownEvents Events(this global::Avalonia.Controls.NumericUpDown item) => new NumericUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ResourceDictionary"/> class.
        /// </summary>
        public static ResourceDictionaryEvents Events(this global::Avalonia.Controls.ResourceDictionary item) => new ResourceDictionaryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Spinner"/> class.
        /// </summary>
        public static SpinnerEvents Events(this global::Avalonia.Controls.Spinner item) => new SpinnerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.TopLevel"/> class.
        /// </summary>
        public static TopLevelEvents Events(this global::Avalonia.Controls.TopLevel item) => new TopLevelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.TreeView"/> class.
        /// </summary>
        public static TreeViewEvents Events(this global::Avalonia.Controls.TreeView item) => new TreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Window"/> class.
        /// </summary>
        public static WindowEvents Events(this global::Avalonia.Controls.Window item) => new WindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.WindowBase"/> class.
        /// </summary>
        public static WindowBaseEvents Events(this global::Avalonia.Controls.WindowBase item) => new WindowBaseEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.AutoCompleteBox"/> class as observables.
    /// </summary>
    public class AutoCompleteBoxEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.AutoCompleteBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.AutoCompleteBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AutoCompleteBoxEvents(global::Avalonia.Controls.AutoCompleteBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> DropDownClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.CancelEventArgs>, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DropDownClosing += x, x => _data.DropDownClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> DropDownOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.CancelEventArgs>, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DropDownOpening += x, x => _data.DropDownOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.Populated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.PopulatedEventArgs> Populated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.PopulatedEventArgs>, global::Avalonia.Controls.PopulatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.PopulatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Populated += x, x => _data.Populated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.Populating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.PopulatingEventArgs> Populating => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.PopulatingEventArgs>, global::Avalonia.Controls.PopulatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.PopulatingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Populating += x, x => _data.Populating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Button"/> class as observables.
    /// </summary>
    public class ButtonEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonEvents(global::Avalonia.Controls.Button data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Button.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Calendar"/> class as observables.
    /// </summary>
    public class CalendarEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Calendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Calendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CalendarEvents(global::Avalonia.Controls.Calendar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Calendar.DisplayDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.CalendarDateChangedEventArgs> DisplayDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.CalendarDateChangedEventArgs>, global::Avalonia.Controls.CalendarDateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.CalendarDateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DisplayDateChanged += x, x => _data.DisplayDateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Calendar.DisplayModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.CalendarModeChangedEventArgs> DisplayModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.CalendarModeChangedEventArgs>, global::Avalonia.Controls.CalendarModeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.CalendarModeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DisplayModeChanged += x, x => _data.DisplayModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Calendar.SelectedDatesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectedDatesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectedDatesChanged += x, x => _data.SelectedDatesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ContextMenu"/> class as observables.
    /// </summary>
    public class ContextMenuEvents : global::Avalonia.Controls.MenuBaseEvents
    {
        private readonly global::Avalonia.Controls.ContextMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ContextMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContextMenuEvents(global::Avalonia.Controls.ContextMenu data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ContextMenu.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ContextMenu.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.DatePicker"/> class as observables.
    /// </summary>
    public class DatePickerEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DatePickerEvents(global::Avalonia.Controls.DatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.CalendarClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CalendarClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CalendarClosed += x, x => _data.CalendarClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.CalendarOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CalendarOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CalendarOpened += x, x => _data.CalendarOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.DateValidationError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs> DateValidationError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs>, global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateValidationError += x, x => _data.DateValidationError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.SelectedDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectedDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectedDateChanged += x, x => _data.SelectedDateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.IApplicationLifecycle"/> class as observables.
    /// </summary>
    public class IApplicationLifecycleEvents
    {
        private readonly global::Avalonia.Controls.IApplicationLifecycle _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.IApplicationLifecycle"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IApplicationLifecycleEvents(global::Avalonia.Controls.IApplicationLifecycle data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.IApplicationLifecycle.OnExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnExit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OnExit += x, x => _data.OnExit -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.INameScope"/> class as observables.
    /// </summary>
    public class INameScopeEvents
    {
        private readonly global::Avalonia.Controls.INameScope _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.INameScope"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public INameScopeEvents(global::Avalonia.Controls.INameScope data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.INameScope.Registered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NameScopeEventArgs> Registered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NameScopeEventArgs>, global::Avalonia.Controls.NameScopeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NameScopeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Registered += x, x => _data.Registered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.INameScope.Unregistered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NameScopeEventArgs> Unregistered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NameScopeEventArgs>, global::Avalonia.Controls.NameScopeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NameScopeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unregistered += x, x => _data.Unregistered -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.IResourceProvider"/> class as observables.
    /// </summary>
    public class IResourceProviderEvents
    {
        private readonly global::Avalonia.Controls.IResourceProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.IResourceProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IResourceProviderEvents(global::Avalonia.Controls.IResourceProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.IResourceProvider.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.MenuBase"/> class as observables.
    /// </summary>
    public class MenuBaseEvents : global::Avalonia.Controls.Primitives.SelectingItemsControlEvents
    {
        private readonly global::Avalonia.Controls.MenuBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.MenuBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MenuBaseEvents(global::Avalonia.Controls.MenuBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuBase.MenuClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> MenuClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MenuClosed += x, x => _data.MenuClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuBase.MenuOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> MenuOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MenuOpened += x, x => _data.MenuOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.MenuItem"/> class as observables.
    /// </summary>
    public class MenuItemEvents : global::Avalonia.Controls.Primitives.SelectingItemsControlEvents
    {
        private readonly global::Avalonia.Controls.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MenuItemEvents(global::Avalonia.Controls.MenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.PointerEnterItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerEnterItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerEnterItem += x, x => _data.PointerEnterItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.PointerLeaveItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerLeaveItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerLeaveItem += x, x => _data.PointerLeaveItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.SubmenuOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> SubmenuOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SubmenuOpened += x, x => _data.SubmenuOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.NameScope"/> class as observables.
    /// </summary>
    public class NameScopeEvents
    {
        private readonly global::Avalonia.Controls.NameScope _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.NameScope"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NameScopeEvents(global::Avalonia.Controls.NameScope data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.NameScope.Registered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NameScopeEventArgs> Registered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NameScopeEventArgs>, global::Avalonia.Controls.NameScopeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NameScopeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Registered += x, x => _data.Registered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.NameScope.Unregistered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NameScopeEventArgs> Unregistered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NameScopeEventArgs>, global::Avalonia.Controls.NameScopeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NameScopeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unregistered += x, x => _data.Unregistered -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.NumericUpDown"/> class as observables.
    /// </summary>
    public class NumericUpDownEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.NumericUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.NumericUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NumericUpDownEvents(global::Avalonia.Controls.NumericUpDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.NumericUpDown.Spinned"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SpinEventArgs> Spinned => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SpinEventArgs>, global::Avalonia.Controls.SpinEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SpinEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Spinned += x, x => _data.Spinned -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.NumericUpDown.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NumericUpDownValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NumericUpDownValueChangedEventArgs>, global::Avalonia.Controls.NumericUpDownValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NumericUpDownValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ResourceDictionary"/> class as observables.
    /// </summary>
    public class ResourceDictionaryEvents : global::Avalonia.Collections.AvaloniaDictionaryEvents
    {
        private readonly global::Avalonia.Controls.ResourceDictionary _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ResourceDictionary"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ResourceDictionaryEvents(global::Avalonia.Controls.ResourceDictionary data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ResourceDictionary.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Spinner"/> class as observables.
    /// </summary>
    public class SpinnerEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Spinner _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Spinner"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SpinnerEvents(global::Avalonia.Controls.Spinner data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Spinner.Spin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SpinEventArgs> Spin => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SpinEventArgs>, global::Avalonia.Controls.SpinEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SpinEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Spin += x, x => _data.Spin -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.TopLevel"/> class as observables.
    /// </summary>
    public class TopLevelEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.TopLevel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.TopLevel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TopLevelEvents(global::Avalonia.Controls.TopLevel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.TopLevel.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.TopLevel.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.TreeView"/> class as observables.
    /// </summary>
    public class TreeViewEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TreeViewEvents(global::Avalonia.Controls.TreeView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.TreeView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Window"/> class as observables.
    /// </summary>
    public class WindowEvents : global::Avalonia.Controls.WindowBaseEvents
    {
        private readonly global::Avalonia.Controls.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WindowEvents(global::Avalonia.Controls.Window data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Window.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.CancelEventArgs>, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closing += x, x => _data.Closing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.WindowBase"/> class as observables.
    /// </summary>
    public class WindowBaseEvents : global::Avalonia.Controls.TopLevelEvents
    {
        private readonly global::Avalonia.Controls.WindowBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.WindowBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WindowBaseEvents(global::Avalonia.Controls.WindowBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.WindowBase.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.WindowBase.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.WindowBase.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.PixelPointEventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.PixelPointEventArgs>, global::Avalonia.Controls.PixelPointEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.PixelPointEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }
}

namespace Avalonia.Controls.Embedding
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Embedding"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Embedding.EmbeddableControlRoot"/> class.
        /// </summary>
        public static EmbeddableControlRootEvents Events(this global::Avalonia.Controls.Embedding.EmbeddableControlRoot item) => new EmbeddableControlRootEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Embedding.EmbeddableControlRoot"/> class as observables.
    /// </summary>
    public class EmbeddableControlRootEvents : global::Avalonia.Controls.TopLevelEvents
    {
        private readonly global::Avalonia.Controls.Embedding.EmbeddableControlRoot _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Embedding.EmbeddableControlRoot"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EmbeddableControlRootEvents(global::Avalonia.Controls.Embedding.EmbeddableControlRoot data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Embedding.EmbeddableControlRoot.Registered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NameScopeEventArgs> Registered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NameScopeEventArgs>, global::Avalonia.Controls.NameScopeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NameScopeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Registered += x, x => _data.Registered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Embedding.EmbeddableControlRoot.Unregistered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NameScopeEventArgs> Unregistered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NameScopeEventArgs>, global::Avalonia.Controls.NameScopeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NameScopeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unregistered += x, x => _data.Unregistered -= x);
    }
}

namespace Avalonia.Controls.Generators
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Generators"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator"/> class.
        /// </summary>
        public static IItemContainerGeneratorEvents Events(this global::Avalonia.Controls.Generators.IItemContainerGenerator item) => new IItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator"/> class.
        /// </summary>
        public static ItemContainerGeneratorEvents Events(this global::Avalonia.Controls.Generators.ItemContainerGenerator item) => new ItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex"/> class.
        /// </summary>
        public static TreeContainerIndexEvents Events(this global::Avalonia.Controls.Generators.TreeContainerIndex item) => new TreeContainerIndexEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator"/> class as observables.
    /// </summary>
    public class IItemContainerGeneratorEvents
    {
        private readonly global::Avalonia.Controls.Generators.IItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IItemContainerGeneratorEvents(global::Avalonia.Controls.Generators.IItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Dematerialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Dematerialized += x, x => _data.Dematerialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator.Materialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Materialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Materialized += x, x => _data.Materialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator.Recycled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Recycled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Recycled += x, x => _data.Recycled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator"/> class as observables.
    /// </summary>
    public class ItemContainerGeneratorEvents
    {
        private readonly global::Avalonia.Controls.Generators.ItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ItemContainerGeneratorEvents(global::Avalonia.Controls.Generators.ItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator.Dematerialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Dematerialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Dematerialized += x, x => _data.Dematerialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator.Materialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Materialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Materialized += x, x => _data.Materialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator.Recycled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Recycled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Recycled += x, x => _data.Recycled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex"/> class as observables.
    /// </summary>
    public class TreeContainerIndexEvents
    {
        private readonly global::Avalonia.Controls.Generators.TreeContainerIndex _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TreeContainerIndexEvents(global::Avalonia.Controls.Generators.TreeContainerIndex data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex.Dematerialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Dematerialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Dematerialized += x, x => _data.Dematerialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex.Materialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Materialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Materialized += x, x => _data.Materialized -= x);
    }
}

namespace Avalonia.Controls.Platform
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Platform"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface"/> class.
        /// </summary>
        public static InternalPlatformThreadingInterfaceEvents Events(this global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface item) => new InternalPlatformThreadingInterfaceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface"/> class as observables.
    /// </summary>
    public class InternalPlatformThreadingInterfaceEvents
    {
        private readonly global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public InternalPlatformThreadingInterfaceEvents(global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface.Signaled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>> Signaled => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>, global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>(eventHandler =>
        {
            void Handler(global::System.Nullable<global::Avalonia.Threading.DispatcherPriority> obj) => eventHandler(obj);
            return Handler;
        }

        , x => _data.Signaled += x, x => _data.Signaled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.TimeSpan> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.TimeSpan>, global::System.TimeSpan>(eventHandler =>
        {
            void Handler(global::System.TimeSpan obj) => eventHandler(obj);
            return Handler;
        }

        , x => _data.Tick += x, x => _data.Tick -= x);
    }
}

namespace Avalonia.Controls.Presenters
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Presenters"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Presenters.IContentPresenter"/> class.
        /// </summary>
        public static IContentPresenterEvents Events(this global::Avalonia.Controls.Presenters.IContentPresenter item) => new IContentPresenterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Presenters.IContentPresenter"/> class as observables.
    /// </summary>
    public class IContentPresenterEvents
    {
        private readonly global::Avalonia.Controls.Presenters.IContentPresenter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Presenters.IContentPresenter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IContentPresenterEvents(global::Avalonia.Controls.Presenters.IContentPresenter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Presenters.IContentPresenter.ChildChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.AvaloniaPropertyChangedEventArgs> ChildChanging => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.AvaloniaPropertyChangedEventArgs>, global::Avalonia.AvaloniaPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.AvaloniaPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildChanging += x, x => _data.ChildChanging -= x);
    }
}

namespace Avalonia.Controls.Primitives
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Primitives"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton"/> class.
        /// </summary>
        public static CalendarButtonEvents Events(this global::Avalonia.Controls.Primitives.CalendarButton item) => new CalendarButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton"/> class.
        /// </summary>
        public static CalendarDayButtonEvents Events(this global::Avalonia.Controls.Primitives.CalendarDayButton item) => new CalendarDayButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Popup"/> class.
        /// </summary>
        public static PopupEvents Events(this global::Avalonia.Controls.Primitives.Popup item) => new PopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        public static ScrollBarEvents Events(this global::Avalonia.Controls.Primitives.ScrollBar item) => new ScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl"/> class.
        /// </summary>
        public static SelectingItemsControlEvents Events(this global::Avalonia.Controls.Primitives.SelectingItemsControl item) => new SelectingItemsControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl"/> class.
        /// </summary>
        public static TemplatedControlEvents Events(this global::Avalonia.Controls.Primitives.TemplatedControl item) => new TemplatedControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Thumb"/> class.
        /// </summary>
        public static ThumbEvents Events(this global::Avalonia.Controls.Primitives.Thumb item) => new ThumbEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton"/> class as observables.
    /// </summary>
    public class CalendarButtonEvents : global::Avalonia.Controls.ButtonEvents
    {
        private readonly global::Avalonia.Controls.Primitives.CalendarButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CalendarButtonEvents(global::Avalonia.Controls.Primitives.CalendarButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> CalendarLeftMouseButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CalendarLeftMouseButtonDown += x, x => _data.CalendarLeftMouseButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> CalendarLeftMouseButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CalendarLeftMouseButtonUp += x, x => _data.CalendarLeftMouseButtonUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton"/> class as observables.
    /// </summary>
    public class CalendarDayButtonEvents : global::Avalonia.Controls.ButtonEvents
    {
        private readonly global::Avalonia.Controls.Primitives.CalendarDayButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CalendarDayButtonEvents(global::Avalonia.Controls.Primitives.CalendarDayButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> CalendarDayButtonMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CalendarDayButtonMouseDown += x, x => _data.CalendarDayButtonMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> CalendarDayButtonMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CalendarDayButtonMouseUp += x, x => _data.CalendarDayButtonMouseUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Popup"/> class as observables.
    /// </summary>
    public class PopupEvents : global::Avalonia.Input.InputElementEvents
    {
        private readonly global::Avalonia.Controls.Primitives.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PopupEvents(global::Avalonia.Controls.Primitives.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Popup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Popup.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Popup.PopupRootCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PopupRootCreated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopupRootCreated += x, x => _data.PopupRootCreated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar"/> class as observables.
    /// </summary>
    public class ScrollBarEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Primitives.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollBarEvents(global::Avalonia.Controls.Primitives.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Primitives.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Primitives.ScrollEventArgs>, global::Avalonia.Controls.Primitives.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Primitives.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scroll += x, x => _data.Scroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl"/> class as observables.
    /// </summary>
    public class SelectingItemsControlEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Primitives.SelectingItemsControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SelectingItemsControlEvents(global::Avalonia.Controls.Primitives.SelectingItemsControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl"/> class as observables.
    /// </summary>
    public class TemplatedControlEvents : global::Avalonia.Input.InputElementEvents
    {
        private readonly global::Avalonia.Controls.Primitives.TemplatedControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TemplatedControlEvents(global::Avalonia.Controls.Primitives.TemplatedControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs> TemplateApplied => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs>, global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TemplateApplied += x, x => _data.TemplateApplied -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Thumb"/> class as observables.
    /// </summary>
    public class ThumbEvents : global::Avalonia.Controls.Primitives.TemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Primitives.Thumb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.Thumb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ThumbEvents(global::Avalonia.Controls.Primitives.Thumb data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Thumb.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.VectorEventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.VectorEventArgs>, global::Avalonia.Input.VectorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.VectorEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragCompleted += x, x => _data.DragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Thumb.DragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.VectorEventArgs> DragDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.VectorEventArgs>, global::Avalonia.Input.VectorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.VectorEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragDelta += x, x => _data.DragDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Thumb.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.VectorEventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.VectorEventArgs>, global::Avalonia.Input.VectorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.VectorEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStarted += x, x => _data.DragStarted -= x);
    }
}

namespace Avalonia.Controls.Utils
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Utils"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter"/> class.
        /// </summary>
        public static ISelectionAdapterEvents Events(this global::Avalonia.Controls.Utils.ISelectionAdapter item) => new ISelectionAdapterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter"/> class.
        /// </summary>
        public static SelectingItemsControlSelectionAdapterEvents Events(this global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter item) => new SelectingItemsControlSelectionAdapterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter"/> class as observables.
    /// </summary>
    public class ISelectionAdapterEvents
    {
        private readonly global::Avalonia.Controls.Utils.ISelectionAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ISelectionAdapterEvents(global::Avalonia.Controls.Utils.ISelectionAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter.Cancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Cancel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Cancel += x, x => _data.Cancel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter.Commit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Commit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Commit += x, x => _data.Commit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter"/> class as observables.
    /// </summary>
    public class SelectingItemsControlSelectionAdapterEvents
    {
        private readonly global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SelectingItemsControlSelectionAdapterEvents(global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Cancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Cancel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Cancel += x, x => _data.Cancel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Commit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Commit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Commit += x, x => _data.Commit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }
}

namespace Avalonia.Diagnostics.ViewModels
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Diagnostics.ViewModels"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Diagnostics.ViewModels.ViewModelBase"/> class.
        /// </summary>
        public static ViewModelBaseEvents Events(this global::Avalonia.Diagnostics.ViewModels.ViewModelBase item) => new ViewModelBaseEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Diagnostics.ViewModels.ViewModelBase"/> class as observables.
    /// </summary>
    public class ViewModelBaseEvents
    {
        private readonly global::Avalonia.Diagnostics.ViewModels.ViewModelBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Diagnostics.ViewModels.ViewModelBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewModelBaseEvents(global::Avalonia.Diagnostics.ViewModels.ViewModelBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Diagnostics.ViewModels.ViewModelBase.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }
}

namespace Avalonia.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.ICloseable"/> class.
        /// </summary>
        public static ICloseableEvents Events(this global::Avalonia.Input.ICloseable item) => new ICloseableEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.IInputElement"/> class.
        /// </summary>
        public static IInputElementEvents Events(this global::Avalonia.Input.IInputElement item) => new IInputElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.IMainMenu"/> class.
        /// </summary>
        public static IMainMenuEvents Events(this global::Avalonia.Input.IMainMenu item) => new IMainMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.InputElement"/> class.
        /// </summary>
        public static InputElementEvents Events(this global::Avalonia.Input.InputElement item) => new InputElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.KeyboardDevice"/> class.
        /// </summary>
        public static KeyboardDeviceEvents Events(this global::Avalonia.Input.KeyboardDevice item) => new KeyboardDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.ICloseable"/> class as observables.
    /// </summary>
    public class ICloseableEvents
    {
        private readonly global::Avalonia.Input.ICloseable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.ICloseable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ICloseableEvents(global::Avalonia.Input.ICloseable data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.ICloseable.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.IInputElement"/> class as observables.
    /// </summary>
    public class IInputElementEvents
    {
        private readonly global::Avalonia.Input.IInputElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.IInputElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IInputElementEvents(global::Avalonia.Input.IInputElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.GotFocusEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.GotFocusEventArgs>, global::Avalonia.Input.GotFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.GotFocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerEnter += x, x => _data.PointerEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerLeave += x, x => _data.PointerLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerWheelEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerWheelEventArgs>, global::Avalonia.Input.PointerWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerWheelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.TextInputEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.TextInputEventArgs>, global::Avalonia.Input.TextInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.TextInputEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextInput += x, x => _data.TextInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.IMainMenu"/> class as observables.
    /// </summary>
    public class IMainMenuEvents
    {
        private readonly global::Avalonia.Input.IMainMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.IMainMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IMainMenuEvents(global::Avalonia.Input.IMainMenu data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IMainMenu.MenuClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> MenuClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MenuClosed += x, x => _data.MenuClosed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.InputElement"/> class as observables.
    /// </summary>
    public class InputElementEvents : global::Avalonia.Layout.LayoutableEvents
    {
        private readonly global::Avalonia.Input.InputElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.InputElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public InputElementEvents(global::Avalonia.Input.InputElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.DoubleTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> DoubleTapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DoubleTapped += x, x => _data.DoubleTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.GotFocusEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.GotFocusEventArgs>, global::Avalonia.Input.GotFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.GotFocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerEnter += x, x => _data.PointerEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerLeave += x, x => _data.PointerLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerWheelEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerWheelEventArgs>, global::Avalonia.Input.PointerWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerWheelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.TextInputEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.TextInputEventArgs>, global::Avalonia.Input.TextInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.TextInputEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextInput += x, x => _data.TextInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.KeyboardDevice"/> class as observables.
    /// </summary>
    public class KeyboardDeviceEvents
    {
        private readonly global::Avalonia.Input.KeyboardDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.KeyboardDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public KeyboardDeviceEvents(global::Avalonia.Input.KeyboardDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.KeyboardDevice.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }
}

namespace Avalonia.Layout
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Layout"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Layout.Layoutable"/> class.
        /// </summary>
        public static LayoutableEvents Events(this global::Avalonia.Layout.Layoutable item) => new LayoutableEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Layout.Layoutable"/> class as observables.
    /// </summary>
    public class LayoutableEvents : global::Avalonia.VisualEvents
    {
        private readonly global::Avalonia.Layout.Layoutable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Layout.Layoutable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LayoutableEvents(global::Avalonia.Layout.Layoutable data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Layout.Layoutable.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
    }
}

namespace Avalonia.LogicalTree
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.LogicalTree"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.LogicalTree.ILogical"/> class.
        /// </summary>
        public static ILogicalEvents Events(this global::Avalonia.LogicalTree.ILogical item) => new ILogicalEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.LogicalTree.ILogical"/> class as observables.
    /// </summary>
    public class ILogicalEvents
    {
        private readonly global::Avalonia.LogicalTree.ILogical _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.LogicalTree.ILogical"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ILogicalEvents(global::Avalonia.LogicalTree.ILogical data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.LogicalTree.ILogical.AttachedToLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> AttachedToLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AttachedToLogicalTree += x, x => _data.AttachedToLogicalTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.LogicalTree.ILogical.DetachedFromLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> DetachedFromLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DetachedFromLogicalTree += x, x => _data.DetachedFromLogicalTree -= x);
    }
}

namespace Avalonia.Markup.Xaml.MarkupExtensions
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Markup.Xaml.MarkupExtensions"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude"/> class.
        /// </summary>
        public static ResourceIncludeEvents Events(this global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude item) => new ResourceIncludeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude"/> class as observables.
    /// </summary>
    public class ResourceIncludeEvents
    {
        private readonly global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ResourceIncludeEvents(global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }
}

namespace Avalonia.Markup.Xaml.Styling
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Markup.Xaml.Styling"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude"/> class.
        /// </summary>
        public static StyleIncludeEvents Events(this global::Avalonia.Markup.Xaml.Styling.StyleInclude item) => new StyleIncludeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude"/> class as observables.
    /// </summary>
    public class StyleIncludeEvents
    {
        private readonly global::Avalonia.Markup.Xaml.Styling.StyleInclude _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StyleIncludeEvents(global::Avalonia.Markup.Xaml.Styling.StyleInclude data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }
}

namespace Avalonia.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.Brush"/> class.
        /// </summary>
        public static BrushEvents Events(this global::Avalonia.Media.Brush item) => new BrushEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.Geometry"/> class.
        /// </summary>
        public static GeometryEvents Events(this global::Avalonia.Media.Geometry item) => new GeometryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.IAffectsRender"/> class.
        /// </summary>
        public static IAffectsRenderEvents Events(this global::Avalonia.Media.IAffectsRender item) => new IAffectsRenderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.Transform"/> class.
        /// </summary>
        public static TransformEvents Events(this global::Avalonia.Media.Transform item) => new TransformEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.Brush"/> class as observables.
    /// </summary>
    public class BrushEvents : global::Avalonia.AvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.Brush _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.Brush"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BrushEvents(global::Avalonia.Media.Brush data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.Brush.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Invalidated += x, x => _data.Invalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.Geometry"/> class as observables.
    /// </summary>
    public class GeometryEvents : global::Avalonia.AvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.Geometry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.Geometry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GeometryEvents(global::Avalonia.Media.Geometry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.Geometry.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.IAffectsRender"/> class as observables.
    /// </summary>
    public class IAffectsRenderEvents
    {
        private readonly global::Avalonia.Media.IAffectsRender _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.IAffectsRender"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IAffectsRenderEvents(global::Avalonia.Media.IAffectsRender data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.IAffectsRender.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Invalidated += x, x => _data.Invalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.Transform"/> class as observables.
    /// </summary>
    public class TransformEvents : global::Avalonia.AvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.Transform _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.Transform"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TransformEvents(global::Avalonia.Media.Transform data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.Transform.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
    }
}

namespace Avalonia.Platform
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Platform"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl"/> class.
        /// </summary>
        public static IEmbeddableWindowImplEvents Events(this global::Avalonia.Platform.IEmbeddableWindowImpl item) => new IEmbeddableWindowImplEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface"/> class.
        /// </summary>
        public static IPlatformThreadingInterfaceEvents Events(this global::Avalonia.Platform.IPlatformThreadingInterface item) => new IPlatformThreadingInterfaceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl"/> class as observables.
    /// </summary>
    public class IEmbeddableWindowImplEvents
    {
        private readonly global::Avalonia.Platform.IEmbeddableWindowImpl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IEmbeddableWindowImplEvents(global::Avalonia.Platform.IEmbeddableWindowImpl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action, global::System.Reactive.Unit>(eventHandler =>
        {
            void Handler() => eventHandler(global::System.Reactive.Unit.Default);
            return Handler;
        }

        , x => _data.LostFocus += x, x => _data.LostFocus -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface"/> class as observables.
    /// </summary>
    public class IPlatformThreadingInterfaceEvents
    {
        private readonly global::Avalonia.Platform.IPlatformThreadingInterface _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IPlatformThreadingInterfaceEvents(global::Avalonia.Platform.IPlatformThreadingInterface data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface.Signaled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>> Signaled => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>, global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>(eventHandler =>
        {
            void Handler(global::System.Nullable<global::Avalonia.Threading.DispatcherPriority> obj) => eventHandler(obj);
            return Handler;
        }

        , x => _data.Signaled += x, x => _data.Signaled -= x);
    }
}

namespace Avalonia.Rendering
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Rendering"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer"/> class.
        /// </summary>
        public static DefaultRenderTimerEvents Events(this global::Avalonia.Rendering.DefaultRenderTimer item) => new DefaultRenderTimerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.DeferredRenderer"/> class.
        /// </summary>
        public static DeferredRendererEvents Events(this global::Avalonia.Rendering.DeferredRenderer item) => new DeferredRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.ImmediateRenderer"/> class.
        /// </summary>
        public static ImmediateRendererEvents Events(this global::Avalonia.Rendering.ImmediateRenderer item) => new ImmediateRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.IRenderer"/> class.
        /// </summary>
        public static IRendererEvents Events(this global::Avalonia.Rendering.IRenderer item) => new IRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.IRenderTimer"/> class.
        /// </summary>
        public static IRenderTimerEvents Events(this global::Avalonia.Rendering.IRenderTimer item) => new IRenderTimerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer"/> class as observables.
    /// </summary>
    public class DefaultRenderTimerEvents
    {
        private readonly global::Avalonia.Rendering.DefaultRenderTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DefaultRenderTimerEvents(global::Avalonia.Rendering.DefaultRenderTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.TimeSpan> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.TimeSpan>, global::System.TimeSpan>(eventHandler =>
        {
            void Handler(global::System.TimeSpan obj) => eventHandler(obj);
            return Handler;
        }

        , x => _data.Tick += x, x => _data.Tick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.DeferredRenderer"/> class as observables.
    /// </summary>
    public class DeferredRendererEvents
    {
        private readonly global::Avalonia.Rendering.DeferredRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.DeferredRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DeferredRendererEvents(global::Avalonia.Rendering.DeferredRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.DeferredRenderer.SceneInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Rendering.SceneInvalidatedEventArgs> SceneInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Rendering.SceneInvalidatedEventArgs>, global::Avalonia.Rendering.SceneInvalidatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Rendering.SceneInvalidatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SceneInvalidated += x, x => _data.SceneInvalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.ImmediateRenderer"/> class as observables.
    /// </summary>
    public class ImmediateRendererEvents
    {
        private readonly global::Avalonia.Rendering.ImmediateRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.ImmediateRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImmediateRendererEvents(global::Avalonia.Rendering.ImmediateRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.ImmediateRenderer.SceneInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Rendering.SceneInvalidatedEventArgs> SceneInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Rendering.SceneInvalidatedEventArgs>, global::Avalonia.Rendering.SceneInvalidatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Rendering.SceneInvalidatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SceneInvalidated += x, x => _data.SceneInvalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.IRenderer"/> class as observables.
    /// </summary>
    public class IRendererEvents
    {
        private readonly global::Avalonia.Rendering.IRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.IRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IRendererEvents(global::Avalonia.Rendering.IRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.IRenderer.SceneInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Rendering.SceneInvalidatedEventArgs> SceneInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Rendering.SceneInvalidatedEventArgs>, global::Avalonia.Rendering.SceneInvalidatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Rendering.SceneInvalidatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SceneInvalidated += x, x => _data.SceneInvalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.IRenderTimer"/> class as observables.
    /// </summary>
    public class IRenderTimerEvents
    {
        private readonly global::Avalonia.Rendering.IRenderTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.IRenderTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IRenderTimerEvents(global::Avalonia.Rendering.IRenderTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.IRenderTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.TimeSpan> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.TimeSpan>, global::System.TimeSpan>(eventHandler =>
        {
            void Handler(global::System.TimeSpan obj) => eventHandler(obj);
            return Handler;
        }

        , x => _data.Tick += x, x => _data.Tick -= x);
    }
}

namespace Avalonia.Styling
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Styling"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Styling.Style"/> class.
        /// </summary>
        public static StyleEvents Events(this global::Avalonia.Styling.Style item) => new StyleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Styling.Styles"/> class.
        /// </summary>
        public static StylesEvents Events(this global::Avalonia.Styling.Styles item) => new StylesEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Styling.Style"/> class as observables.
    /// </summary>
    public class StyleEvents : global::Avalonia.AvaloniaObjectEvents
    {
        private readonly global::Avalonia.Styling.Style _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Styling.Style"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StyleEvents(global::Avalonia.Styling.Style data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Styling.Style.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Styling.Styles"/> class as observables.
    /// </summary>
    public class StylesEvents : global::Avalonia.AvaloniaObjectEvents
    {
        private readonly global::Avalonia.Styling.Styles _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Styling.Styles"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StylesEvents(global::Avalonia.Styling.Styles data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Styling.Styles.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Styling.Styles.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }
}

namespace Avalonia.Threading
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Threading"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Threading.DispatcherTimer"/> class.
        /// </summary>
        public static DispatcherTimerEvents Events(this global::Avalonia.Threading.DispatcherTimer item) => new DispatcherTimerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Threading.DispatcherTimer"/> class as observables.
    /// </summary>
    public class DispatcherTimerEvents
    {
        private readonly global::Avalonia.Threading.DispatcherTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Threading.DispatcherTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DispatcherTimerEvents(global::Avalonia.Threading.DispatcherTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Threading.DispatcherTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tick += x, x => _data.Tick -= x);
    }
}

namespace Avalonia.VisualTree
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.VisualTree"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.VisualTree.IVisual"/> class.
        /// </summary>
        public static IVisualEvents Events(this global::Avalonia.VisualTree.IVisual item) => new IVisualEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.VisualTree.IVisual"/> class as observables.
    /// </summary>
    public class IVisualEvents
    {
        private readonly global::Avalonia.VisualTree.IVisual _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.VisualTree.IVisual"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IVisualEvents(global::Avalonia.VisualTree.IVisual data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.VisualTree.IVisual.AttachedToVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> AttachedToVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AttachedToVisualTree += x, x => _data.AttachedToVisualTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.VisualTree.IVisual.DetachedFromVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> DetachedFromVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DetachedFromVisualTree += x, x => _data.DetachedFromVisualTree -= x);
    }
}

namespace Portable.Xaml
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Portable.Xaml"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Portable.Xaml.IXamlNameResolver"/> class.
        /// </summary>
        public static IXamlNameResolverEvents Events(this global::Portable.Xaml.IXamlNameResolver item) => new IXamlNameResolverEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Portable.Xaml.IXamlNameResolver"/> class as observables.
    /// </summary>
    public class IXamlNameResolverEvents
    {
        private readonly global::Portable.Xaml.IXamlNameResolver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Portable.Xaml.IXamlNameResolver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IXamlNameResolverEvents(global::Portable.Xaml.IXamlNameResolver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Portable.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnNameScopeInitializationComplete => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OnNameScopeInitializationComplete += x, x => _data.OnNameScopeInitializationComplete -= x);
    }
}