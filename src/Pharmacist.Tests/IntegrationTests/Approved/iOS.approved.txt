// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;

using global::Pharmacist.Common;

namespace AddressBook
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AddressBook"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AddressBook.ABAddressBook"/> class.
        /// </summary>
        public static ABAddressBookEvents Events(this global::AddressBook.ABAddressBook item) => new ABAddressBookEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AddressBook.ABAddressBook"/> class as observables.
    /// </summary>
    public class ABAddressBookEvents
    {
        private readonly global::AddressBook.ABAddressBook _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AddressBook.ABAddressBook"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ABAddressBookEvents(global::AddressBook.ABAddressBook data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBook.ABAddressBook.ExternalChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBook.ExternalChangeEventArgs> ExternalChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBook.ExternalChangeEventArgs>, global::AddressBook.ExternalChangeEventArgs>(x => _data.ExternalChange += x, x => _data.ExternalChange -= x).Select(x => x.EventArgs);
    }
}

namespace AddressBookUI
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AddressBookUI"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AddressBookUI.ABNewPersonViewController"/> class.
        /// </summary>
        public static ABNewPersonViewControllerEvents Events(this global::AddressBookUI.ABNewPersonViewController item) => new ABNewPersonViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AddressBookUI.ABPeoplePickerNavigationController"/> class.
        /// </summary>
        public static ABPeoplePickerNavigationControllerEvents Events(this global::AddressBookUI.ABPeoplePickerNavigationController item) => new ABPeoplePickerNavigationControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AddressBookUI.ABPersonViewController"/> class.
        /// </summary>
        public static ABPersonViewControllerEvents Events(this global::AddressBookUI.ABPersonViewController item) => new ABPersonViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AddressBookUI.ABUnknownPersonViewController"/> class.
        /// </summary>
        public static ABUnknownPersonViewControllerEvents Events(this global::AddressBookUI.ABUnknownPersonViewController item) => new ABUnknownPersonViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AddressBookUI.ABNewPersonViewController"/> class as observables.
    /// </summary>
    public class ABNewPersonViewControllerEvents
    {
        private readonly global::AddressBookUI.ABNewPersonViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AddressBookUI.ABNewPersonViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ABNewPersonViewControllerEvents(global::AddressBookUI.ABNewPersonViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABNewPersonViewController.NewPersonComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABNewPersonCompleteEventArgs> NewPersonComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABNewPersonCompleteEventArgs>, global::AddressBookUI.ABNewPersonCompleteEventArgs>(x => _data.NewPersonComplete += x, x => _data.NewPersonComplete -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AddressBookUI.ABPeoplePickerNavigationController"/> class as observables.
    /// </summary>
    public class ABPeoplePickerNavigationControllerEvents
    {
        private readonly global::AddressBookUI.ABPeoplePickerNavigationController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AddressBookUI.ABPeoplePickerNavigationController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ABPeoplePickerNavigationControllerEvents(global::AddressBookUI.ABPeoplePickerNavigationController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPeoplePickerNavigationController.Cancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Cancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Cancelled += x, x => _data.Cancelled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPeoplePickerNavigationController.PerformAction"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABPeoplePickerPerformActionEventArgs> PerformAction => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABPeoplePickerPerformActionEventArgs>, global::AddressBookUI.ABPeoplePickerPerformActionEventArgs>(x => _data.PerformAction += x, x => _data.PerformAction -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPeoplePickerNavigationController.PerformAction2"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABPeoplePickerPerformAction2EventArgs> PerformAction2 => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABPeoplePickerPerformAction2EventArgs>, global::AddressBookUI.ABPeoplePickerPerformAction2EventArgs>(x => _data.PerformAction2 += x, x => _data.PerformAction2 -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPeoplePickerNavigationController.SelectPerson"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABPeoplePickerSelectPersonEventArgs> SelectPerson => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABPeoplePickerSelectPersonEventArgs>, global::AddressBookUI.ABPeoplePickerSelectPersonEventArgs>(x => _data.SelectPerson += x, x => _data.SelectPerson -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPeoplePickerNavigationController.SelectPerson2"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABPeoplePickerSelectPerson2EventArgs> SelectPerson2 => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABPeoplePickerSelectPerson2EventArgs>, global::AddressBookUI.ABPeoplePickerSelectPerson2EventArgs>(x => _data.SelectPerson2 += x, x => _data.SelectPerson2 -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AddressBookUI.ABPersonViewController"/> class as observables.
    /// </summary>
    public class ABPersonViewControllerEvents
    {
        private readonly global::AddressBookUI.ABPersonViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AddressBookUI.ABPersonViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ABPersonViewControllerEvents(global::AddressBookUI.ABPersonViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPersonViewController.PerformDefaultAction"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABPersonViewPerformDefaultActionEventArgs> PerformDefaultAction => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABPersonViewPerformDefaultActionEventArgs>, global::AddressBookUI.ABPersonViewPerformDefaultActionEventArgs>(x => _data.PerformDefaultAction += x, x => _data.PerformDefaultAction -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AddressBookUI.ABUnknownPersonViewController"/> class as observables.
    /// </summary>
    public class ABUnknownPersonViewControllerEvents
    {
        private readonly global::AddressBookUI.ABUnknownPersonViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AddressBookUI.ABUnknownPersonViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ABUnknownPersonViewControllerEvents(global::AddressBookUI.ABUnknownPersonViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABUnknownPersonViewController.PerformDefaultAction"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABPersonViewPerformDefaultActionEventArgs> PerformDefaultAction => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABPersonViewPerformDefaultActionEventArgs>, global::AddressBookUI.ABPersonViewPerformDefaultActionEventArgs>(x => _data.PerformDefaultAction += x, x => _data.PerformDefaultAction -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABUnknownPersonViewController.PersonCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABUnknownPersonCreatedEventArgs> PersonCreated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AddressBookUI.ABUnknownPersonCreatedEventArgs>, global::AddressBookUI.ABUnknownPersonCreatedEventArgs>(x => _data.PersonCreated += x, x => _data.PersonCreated -= x).Select(x => x.EventArgs);
    }
}

namespace AudioToolbox
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AudioToolbox"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.AudioConverter"/> class.
        /// </summary>
        public static AudioConverterEvents Events(this global::AudioToolbox.AudioConverter item) => new AudioConverterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.InputAudioQueue"/> class.
        /// </summary>
        public static InputAudioQueueEvents Events(this global::AudioToolbox.InputAudioQueue item) => new InputAudioQueueEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class.
        /// </summary>
        public static OutputAudioQueueEvents Events(this global::AudioToolbox.OutputAudioQueue item) => new OutputAudioQueueEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.AudioConverter"/> class as observables.
    /// </summary>
    public class AudioConverterEvents
    {
        private readonly global::AudioToolbox.AudioConverter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.AudioConverter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioConverterEvents(global::AudioToolbox.AudioConverter data)
        {
            _data = data;
        }
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.InputAudioQueue"/> class as observables.
    /// </summary>
    public class InputAudioQueueEvents
    {
        private readonly global::AudioToolbox.InputAudioQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.InputAudioQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public InputAudioQueueEvents(global::AudioToolbox.InputAudioQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.InputAudioQueue.InputCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AudioToolbox.InputCompletedEventArgs> InputCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AudioToolbox.InputCompletedEventArgs>, global::AudioToolbox.InputCompletedEventArgs>(x => _data.InputCompleted += x, x => _data.InputCompleted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class as observables.
    /// </summary>
    public class OutputAudioQueueEvents
    {
        private readonly global::AudioToolbox.OutputAudioQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public OutputAudioQueueEvents(global::AudioToolbox.OutputAudioQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.OutputAudioQueue.BufferCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AudioToolbox.BufferCompletedEventArgs> BufferCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AudioToolbox.BufferCompletedEventArgs>, global::AudioToolbox.BufferCompletedEventArgs>(x => _data.BufferCompleted += x, x => _data.BufferCompleted -= x).Select(x => x.EventArgs);
    }
}

namespace AVFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AVFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVAudioPlayer"/> class.
        /// </summary>
        public static AVAudioPlayerEvents Events(this global::AVFoundation.AVAudioPlayer item) => new AVAudioPlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVAudioRecorder"/> class.
        /// </summary>
        public static AVAudioRecorderEvents Events(this global::AVFoundation.AVAudioRecorder item) => new AVAudioRecorderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVAudioSession"/> class.
        /// </summary>
        public static AVAudioSessionEvents Events(this global::AVFoundation.AVAudioSession item) => new AVAudioSessionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class.
        /// </summary>
        public static AVSpeechSynthesizerEvents Events(this global::AVFoundation.AVSpeechSynthesizer item) => new AVSpeechSynthesizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVAudioPlayer"/> class as observables.
    /// </summary>
    public class AVAudioPlayerEvents
    {
        private readonly global::AVFoundation.AVAudioPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVAudioPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVAudioPlayerEvents(global::AVFoundation.AVAudioPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.BeginInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginInterruption += x, x => _data.BeginInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.DecoderError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVErrorEventArgs> DecoderError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVErrorEventArgs>, global::AVFoundation.AVErrorEventArgs>(x => _data.DecoderError += x, x => _data.DecoderError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.EndInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndInterruption += x, x => _data.EndInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.FinishedPlaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVStatusEventArgs> FinishedPlaying => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVStatusEventArgs>, global::AVFoundation.AVStatusEventArgs>(x => _data.FinishedPlaying += x, x => _data.FinishedPlaying -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVAudioRecorder"/> class as observables.
    /// </summary>
    public class AVAudioRecorderEvents
    {
        private readonly global::AVFoundation.AVAudioRecorder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVAudioRecorder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVAudioRecorderEvents(global::AVFoundation.AVAudioRecorder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.BeginInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginInterruption += x, x => _data.BeginInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.EncoderError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVErrorEventArgs> EncoderError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVErrorEventArgs>, global::AVFoundation.AVErrorEventArgs>(x => _data.EncoderError += x, x => _data.EncoderError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.EndInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndInterruption += x, x => _data.EndInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.FinishedRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVStatusEventArgs> FinishedRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVStatusEventArgs>, global::AVFoundation.AVStatusEventArgs>(x => _data.FinishedRecording += x, x => _data.FinishedRecording -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVAudioSession"/> class as observables.
    /// </summary>
    public class AVAudioSessionEvents
    {
        private readonly global::AVFoundation.AVAudioSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVAudioSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVAudioSessionEvents(global::AVFoundation.AVAudioSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSession.BeginInterruption"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Deprecated since iOS 6, Use 'AVAudioSession.Notification.ObserveInterruption' instead.", false)]
        public global::System.IObservable<global::System.EventArgs> BeginInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginInterruption += x, x => _data.BeginInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSession.CategoryChanged"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Deprecated since iOS 6, Use 'AVAudioSession.Notification.ObserveAudioRouteChange'.", false)]
        public global::System.IObservable<global::AVFoundation.AVCategoryEventArgs> CategoryChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVCategoryEventArgs>, global::AVFoundation.AVCategoryEventArgs>(x => _data.CategoryChanged += x, x => _data.CategoryChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSession.EndInterruption"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Deprecated since iOS 6, Use 'AVAudioSession.Notification.ObserveInterruption' instead.", false)]
        public global::System.IObservable<global::System.EventArgs> EndInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndInterruption += x, x => _data.EndInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSession.InputAvailabilityChanged"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Deprecated since iOS 6, Use 'AVAudioSession.Notification.ObserveAudioRouteChange'.", false)]
        public global::System.IObservable<global::AVFoundation.AVStatusEventArgs> InputAvailabilityChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVStatusEventArgs>, global::AVFoundation.AVStatusEventArgs>(x => _data.InputAvailabilityChanged += x, x => _data.InputAvailabilityChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSession.InputChannelsChanged"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use 'AVAudioSession.Notification.ObserveAudioRouteChange', this event does nothing.", false)]
        public global::System.IObservable<global::AVFoundation.AVChannelsEventArgs> InputChannelsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVChannelsEventArgs>, global::AVFoundation.AVChannelsEventArgs>(x => _data.InputChannelsChanged += x, x => _data.InputChannelsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSession.OutputChannelsChanged"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use 'AVAudioSession.Notification.ObserveAudioRouteChange', this event does nothing.", false)]
        public global::System.IObservable<global::AVFoundation.AVChannelsEventArgs> OutputChannelsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVChannelsEventArgs>, global::AVFoundation.AVChannelsEventArgs>(x => _data.OutputChannelsChanged += x, x => _data.OutputChannelsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSession.SampleRateChanged"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Deprecated since iOS 6, Use 'AVAudioSession.Notification.ObserveAudioRouteChange'.", false)]
        public global::System.IObservable<global::AVFoundation.AVSampleRateEventArgs> SampleRateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSampleRateEventArgs>, global::AVFoundation.AVSampleRateEventArgs>(x => _data.SampleRateChanged += x, x => _data.SampleRateChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class as observables.
    /// </summary>
    public class AVSpeechSynthesizerEvents
    {
        private readonly global::AVFoundation.AVSpeechSynthesizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVSpeechSynthesizerEvents(global::AVFoundation.AVSpeechSynthesizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidCancelSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidCancelSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidCancelSpeechUtterance += x, x => _data.DidCancelSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidContinueSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidContinueSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidContinueSpeechUtterance += x, x => _data.DidContinueSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidFinishSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidFinishSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidFinishSpeechUtterance += x, x => _data.DidFinishSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidPauseSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidPauseSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidPauseSpeechUtterance += x, x => _data.DidPauseSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidStartSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidStartSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidStartSpeechUtterance += x, x => _data.DidStartSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.WillSpeakRangeOfSpeechString"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs> WillSpeakRangeOfSpeechString => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs>, global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs>(x => _data.WillSpeakRangeOfSpeechString += x, x => _data.WillSpeakRangeOfSpeechString -= x).Select(x => x.EventArgs);
    }
}

namespace CoreAnimation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreAnimation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreAnimation.CAAnimation"/> class.
        /// </summary>
        public static CAAnimationEvents Events(this global::CoreAnimation.CAAnimation item) => new CAAnimationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreAnimation.CAAnimation"/> class as observables.
    /// </summary>
    public class CAAnimationEvents
    {
        private readonly global::CoreAnimation.CAAnimation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreAnimation.CAAnimation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CAAnimationEvents(global::CoreAnimation.CAAnimation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimation.AnimationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationStarted += x, x => _data.AnimationStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimation.AnimationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CAAnimationStateEventArgs> AnimationStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreAnimation.CAAnimationStateEventArgs>, global::CoreAnimation.CAAnimationStateEventArgs>(x => _data.AnimationStopped += x, x => _data.AnimationStopped -= x).Select(x => x.EventArgs);
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreBluetooth"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        public static CBCentralManagerEvents Events(this global::CoreBluetooth.CBCentralManager item) => new CBCentralManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        public static CBPeripheralEvents Events(this global::CoreBluetooth.CBPeripheral item) => new CBPeripheralEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        public static CBPeripheralManagerEvents Events(this global::CoreBluetooth.CBPeripheralManager item) => new CBPeripheralManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class as observables.
    /// </summary>
    public class CBCentralManagerEvents
    {
        private readonly global::CoreBluetooth.CBCentralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBCentralManagerEvents(global::CoreBluetooth.CBCentralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.ConnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralEventArgs> ConnectedPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralEventArgs>, global::CoreBluetooth.CBPeripheralEventArgs>(x => _data.ConnectedPeripheral += x, x => _data.ConnectedPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.DisconnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> DisconnectedPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(x => _data.DisconnectedPeripheral += x, x => _data.DisconnectedPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.DiscoveredPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs> DiscoveredPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>, global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>(x => _data.DiscoveredPeripheral += x, x => _data.DiscoveredPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.FailedToConnectPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> FailedToConnectPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(x => _data.FailedToConnectPeripheral += x, x => _data.FailedToConnectPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.RetrievedConnectedPeripherals"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralsEventArgs> RetrievedConnectedPeripherals => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralsEventArgs>, global::CoreBluetooth.CBPeripheralsEventArgs>(x => _data.RetrievedConnectedPeripherals += x, x => _data.RetrievedConnectedPeripherals -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.RetrievedPeripherals"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralsEventArgs> RetrievedPeripherals => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralsEventArgs>, global::CoreBluetooth.CBPeripheralsEventArgs>(x => _data.RetrievedPeripherals += x, x => _data.RetrievedPeripherals -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.UpdatedState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UpdatedState += x, x => _data.UpdatedState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class as observables.
    /// </summary>
    public class CBPeripheralEvents
    {
        private readonly global::CoreBluetooth.CBPeripheral _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBPeripheralEvents(global::CoreBluetooth.CBPeripheral data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>(x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredCharacteristic"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredCharacteristic => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(x => _data.DiscoveredCharacteristic += x, x => _data.DiscoveredCharacteristic -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredDescriptor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> DiscoveredDescriptor => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.DiscoveredDescriptor += x, x => _data.DiscoveredDescriptor -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredIncludedService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredIncludedService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(x => _data.DiscoveredIncludedService += x, x => _data.DiscoveredIncludedService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DiscoveredService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DiscoveredService += x, x => _data.DiscoveredService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.InvalidatedService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> InvalidatedService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.InvalidatedService += x, x => _data.InvalidatedService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.IsReadyToSendWriteWithoutResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsReadyToSendWriteWithoutResponse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.IsReadyToSendWriteWithoutResponse += x, x => _data.IsReadyToSendWriteWithoutResponse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.ModifiedServices"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralServicesEventArgs> ModifiedServices => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralServicesEventArgs>, global::CoreBluetooth.CBPeripheralServicesEventArgs>(x => _data.ModifiedServices += x, x => _data.ModifiedServices -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.RssiRead"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBRssiEventArgs> RssiRead => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBRssiEventArgs>, global::CoreBluetooth.CBRssiEventArgs>(x => _data.RssiRead += x, x => _data.RssiRead -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.RssiUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> RssiUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.RssiUpdated += x, x => _data.RssiUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedCharacterteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedCharacterteristicValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.UpdatedCharacterteristicValue += x, x => _data.UpdatedCharacterteristicValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedName"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedName => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UpdatedName += x, x => _data.UpdatedName -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedNotificationState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedNotificationState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.UpdatedNotificationState += x, x => _data.UpdatedNotificationState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> UpdatedValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(x => _data.UpdatedValue += x, x => _data.UpdatedValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.WroteCharacteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> WroteCharacteristicValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.WroteCharacteristicValue += x, x => _data.WroteCharacteristicValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.WroteDescriptorValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> WroteDescriptorValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(x => _data.WroteDescriptorValue += x, x => _data.WroteDescriptorValue -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class as observables.
    /// </summary>
    public class CBPeripheralManagerEvents
    {
        private readonly global::CoreBluetooth.CBPeripheralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBPeripheralManagerEvents(global::CoreBluetooth.CBPeripheralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.AdvertisingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> AdvertisingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.AdvertisingStarted += x, x => _data.AdvertisingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.CharacteristicSubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicSubscribed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(x => _data.CharacteristicSubscribed += x, x => _data.CharacteristicSubscribed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.CharacteristicUnsubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicUnsubscribed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(x => _data.CharacteristicUnsubscribed += x, x => _data.CharacteristicUnsubscribed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>(x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidPublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidPublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(x => _data.DidPublishL2CapChannel += x, x => _data.DidPublishL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidUnpublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidUnpublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(x => _data.DidUnpublishL2CapChannel += x, x => _data.DidUnpublishL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ReadRequestReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestEventArgs> ReadRequestReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBATTRequestEventArgs>, global::CoreBluetooth.CBATTRequestEventArgs>(x => _data.ReadRequestReceived += x, x => _data.ReadRequestReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ReadyToUpdateSubscribers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadyToUpdateSubscribers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadyToUpdateSubscribers += x, x => _data.ReadyToUpdateSubscribers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ServiceAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs> ServiceAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>, global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>(x => _data.ServiceAdded += x, x => _data.ServiceAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.StateUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StateUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StateUpdated += x, x => _data.StateUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.WriteRequestsReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestsEventArgs> WriteRequestsReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBATTRequestsEventArgs>, global::CoreBluetooth.CBATTRequestsEventArgs>(x => _data.WriteRequestsReceived += x, x => _data.WriteRequestsReceived -= x).Select(x => x.EventArgs);
    }
}

namespace CoreFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        public static CFSocketEvents Events(this global::CoreFoundation.CFSocket item) => new CFSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        public static CFStreamEvents Events(this global::CoreFoundation.CFStream item) => new CFStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class as observables.
    /// </summary>
    public class CFSocketEvents
    {
        private readonly global::CoreFoundation.CFSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CFSocketEvents(global::CoreFoundation.CFSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.AcceptEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs> AcceptEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>, global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>(x => _data.AcceptEvent += x, x => _data.AcceptEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.ConnectEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs> ConnectEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>, global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>(x => _data.ConnectEvent += x, x => _data.ConnectEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.DataEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketDataEventArgs> DataEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketDataEventArgs>, global::CoreFoundation.CFSocket.CFSocketDataEventArgs>(x => _data.DataEvent += x, x => _data.DataEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.ReadEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketReadEventArgs> ReadEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketReadEventArgs>, global::CoreFoundation.CFSocket.CFSocketReadEventArgs>(x => _data.ReadEvent += x, x => _data.ReadEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.WriteEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs> WriteEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>, global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>(x => _data.WriteEvent += x, x => _data.WriteEvent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class as observables.
    /// </summary>
    public class CFStreamEvents
    {
        private readonly global::CoreFoundation.CFStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CFStreamEvents(global::CoreFoundation.CFStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.CanAcceptBytesEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> CanAcceptBytesEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.CanAcceptBytesEvent += x, x => _data.CanAcceptBytesEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.ClosedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ClosedEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.ClosedEvent += x, x => _data.ClosedEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.ErrorEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ErrorEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.ErrorEvent += x, x => _data.ErrorEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.HasBytesAvailableEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> HasBytesAvailableEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.HasBytesAvailableEvent += x, x => _data.HasBytesAvailableEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.OpenCompletedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> OpenCompletedEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.OpenCompletedEvent += x, x => _data.OpenCompletedEvent -= x).Select(x => x.EventArgs);
    }
}

namespace CoreLocation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreLocation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        public static CLLocationManagerEvents Events(this global::CoreLocation.CLLocationManager item) => new CLLocationManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class as observables.
    /// </summary>
    public class CLLocationManagerEvents
    {
        private readonly global::CoreLocation.CLLocationManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CLLocationManagerEvents(global::CoreLocation.CLLocationManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.AuthorizationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLAuthorizationChangedEventArgs> AuthorizationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLAuthorizationChangedEventArgs>, global::CoreLocation.CLAuthorizationChangedEventArgs>(x => _data.AuthorizationChanged += x, x => _data.AuthorizationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DeferredUpdatesFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DeferredUpdatesFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DeferredUpdatesFinished += x, x => _data.DeferredUpdatesFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DidDetermineState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionStateDeterminedEventArgs> DidDetermineState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionStateDeterminedEventArgs>, global::CoreLocation.CLRegionStateDeterminedEventArgs>(x => _data.DidDetermineState += x, x => _data.DidDetermineState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DidRangeBeacons"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionBeaconsRangedEventArgs> DidRangeBeacons => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionBeaconsRangedEventArgs>, global::CoreLocation.CLRegionBeaconsRangedEventArgs>(x => _data.DidRangeBeacons += x, x => _data.DidRangeBeacons -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DidStartMonitoringForRegion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionEventArgs> DidStartMonitoringForRegion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionEventArgs>, global::CoreLocation.CLRegionEventArgs>(x => _data.DidStartMonitoringForRegion += x, x => _data.DidStartMonitoringForRegion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DidVisit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLVisitedEventArgs> DidVisit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLVisitedEventArgs>, global::CoreLocation.CLVisitedEventArgs>(x => _data.DidVisit += x, x => _data.DidVisit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.LocationsUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationsUpdatedEventArgs> LocationsUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLLocationsUpdatedEventArgs>, global::CoreLocation.CLLocationsUpdatedEventArgs>(x => _data.LocationsUpdated += x, x => _data.LocationsUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.LocationUpdatesPaused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationUpdatesPaused => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationUpdatesPaused += x, x => _data.LocationUpdatesPaused -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.LocationUpdatesResumed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationUpdatesResumed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationUpdatesResumed += x, x => _data.LocationUpdatesResumed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.MonitoringFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionErrorEventArgs> MonitoringFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionErrorEventArgs>, global::CoreLocation.CLRegionErrorEventArgs>(x => _data.MonitoringFailed += x, x => _data.MonitoringFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.RangingBeaconsDidFailForRegion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionBeaconsFailedEventArgs> RangingBeaconsDidFailForRegion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionBeaconsFailedEventArgs>, global::CoreLocation.CLRegionBeaconsFailedEventArgs>(x => _data.RangingBeaconsDidFailForRegion += x, x => _data.RangingBeaconsDidFailForRegion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.RegionEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionEventArgs> RegionEntered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionEventArgs>, global::CoreLocation.CLRegionEventArgs>(x => _data.RegionEntered += x, x => _data.RegionEntered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.RegionLeft"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionEventArgs> RegionLeft => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionEventArgs>, global::CoreLocation.CLRegionEventArgs>(x => _data.RegionLeft += x, x => _data.RegionLeft -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.UpdatedHeading"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLHeadingUpdatedEventArgs> UpdatedHeading => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLHeadingUpdatedEventArgs>, global::CoreLocation.CLHeadingUpdatedEventArgs>(x => _data.UpdatedHeading += x, x => _data.UpdatedHeading -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.UpdatedLocation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationUpdatedEventArgs> UpdatedLocation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLLocationUpdatedEventArgs>, global::CoreLocation.CLLocationUpdatedEventArgs>(x => _data.UpdatedLocation += x, x => _data.UpdatedLocation -= x).Select(x => x.EventArgs);
    }
}

namespace CoreMidi
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreMidi"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreMidi.MidiClient"/> class.
        /// </summary>
        public static MidiClientEvents Events(this global::CoreMidi.MidiClient item) => new MidiClientEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreMidi.MidiEndpoint"/> class.
        /// </summary>
        public static MidiEndpointEvents Events(this global::CoreMidi.MidiEndpoint item) => new MidiEndpointEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreMidi.MidiPort"/> class.
        /// </summary>
        public static MidiPortEvents Events(this global::CoreMidi.MidiPort item) => new MidiPortEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreMidi.MidiClient"/> class as observables.
    /// </summary>
    public class MidiClientEvents
    {
        private readonly global::CoreMidi.MidiClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreMidi.MidiClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MidiClientEvents(global::CoreMidi.MidiClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.IOError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.IOErrorEventArgs> IOError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.IOErrorEventArgs>, global::CoreMidi.IOErrorEventArgs>(x => _data.IOError += x, x => _data.IOError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.ObjectAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.ObjectAddedOrRemovedEventArgs> ObjectAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.ObjectAddedOrRemovedEventArgs>, global::CoreMidi.ObjectAddedOrRemovedEventArgs>(x => _data.ObjectAdded += x, x => _data.ObjectAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.ObjectRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.ObjectAddedOrRemovedEventArgs> ObjectRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.ObjectAddedOrRemovedEventArgs>, global::CoreMidi.ObjectAddedOrRemovedEventArgs>(x => _data.ObjectRemoved += x, x => _data.ObjectRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.ObjectPropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.ObjectPropertyChangedEventArgs>, global::CoreMidi.ObjectPropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.SerialPortOwnerChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SerialPortOwnerChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SerialPortOwnerChanged += x, x => _data.SerialPortOwnerChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.SetupChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SetupChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SetupChanged += x, x => _data.SetupChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.ThruConnectionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ThruConnectionsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ThruConnectionsChanged += x, x => _data.ThruConnectionsChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreMidi.MidiEndpoint"/> class as observables.
    /// </summary>
    public class MidiEndpointEvents
    {
        private readonly global::CoreMidi.MidiEndpoint _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreMidi.MidiEndpoint"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MidiEndpointEvents(global::CoreMidi.MidiEndpoint data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiEndpoint.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.MidiPacketsEventArgs> MessageReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.MidiPacketsEventArgs>, global::CoreMidi.MidiPacketsEventArgs>(x => _data.MessageReceived += x, x => _data.MessageReceived -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreMidi.MidiPort"/> class as observables.
    /// </summary>
    public class MidiPortEvents
    {
        private readonly global::CoreMidi.MidiPort _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreMidi.MidiPort"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MidiPortEvents(global::CoreMidi.MidiPort data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiPort.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.MidiPacketsEventArgs> MessageReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.MidiPacketsEventArgs>, global::CoreMidi.MidiPacketsEventArgs>(x => _data.MessageReceived += x, x => _data.MessageReceived -= x).Select(x => x.EventArgs);
    }
}

namespace EventKitUI
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "EventKitUI"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::EventKitUI.EKCalendarChooser"/> class.
        /// </summary>
        public static EKCalendarChooserEvents Events(this global::EventKitUI.EKCalendarChooser item) => new EKCalendarChooserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::EventKitUI.EKEventEditViewController"/> class.
        /// </summary>
        public static EKEventEditViewControllerEvents Events(this global::EventKitUI.EKEventEditViewController item) => new EKEventEditViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::EventKitUI.EKEventViewController"/> class.
        /// </summary>
        public static EKEventViewControllerEvents Events(this global::EventKitUI.EKEventViewController item) => new EKEventViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::EventKitUI.EKCalendarChooser"/> class as observables.
    /// </summary>
    public class EKCalendarChooserEvents
    {
        private readonly global::EventKitUI.EKCalendarChooser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::EventKitUI.EKCalendarChooser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EKCalendarChooserEvents(global::EventKitUI.EKCalendarChooser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKCalendarChooser.Cancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Cancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Cancelled += x, x => _data.Cancelled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKCalendarChooser.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKCalendarChooser.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::EventKitUI.EKEventEditViewController"/> class as observables.
    /// </summary>
    public class EKEventEditViewControllerEvents
    {
        private readonly global::EventKitUI.EKEventEditViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::EventKitUI.EKEventEditViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EKEventEditViewControllerEvents(global::EventKitUI.EKEventEditViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKEventEditViewController.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::EventKitUI.EKEventEditEventArgs> Completed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::EventKitUI.EKEventEditEventArgs>, global::EventKitUI.EKEventEditEventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::EventKitUI.EKEventViewController"/> class as observables.
    /// </summary>
    public class EKEventViewControllerEvents
    {
        private readonly global::EventKitUI.EKEventViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::EventKitUI.EKEventViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EKEventViewControllerEvents(global::EventKitUI.EKEventViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKEventViewController.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::EventKitUI.EKEventViewEventArgs> Completed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::EventKitUI.EKEventViewEventArgs>, global::EventKitUI.EKEventViewEventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
    }
}

namespace ExternalAccessory
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "ExternalAccessory"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ExternalAccessory.EAAccessory"/> class.
        /// </summary>
        public static EAAccessoryEvents Events(this global::ExternalAccessory.EAAccessory item) => new EAAccessoryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser"/> class.
        /// </summary>
        public static EAWiFiUnconfiguredAccessoryBrowserEvents Events(this global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser item) => new EAWiFiUnconfiguredAccessoryBrowserEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ExternalAccessory.EAAccessory"/> class as observables.
    /// </summary>
    public class EAAccessoryEvents
    {
        private readonly global::ExternalAccessory.EAAccessory _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ExternalAccessory.EAAccessory"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EAAccessoryEvents(global::ExternalAccessory.EAAccessory data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAAccessory.Disconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disconnected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disconnected += x, x => _data.Disconnected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser"/> class as observables.
    /// </summary>
    public class EAWiFiUnconfiguredAccessoryBrowserEvents
    {
        private readonly global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EAWiFiUnconfiguredAccessoryBrowserEvents(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidFindUnconfiguredAccessories"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEventArgs> DidFindUnconfiguredAccessories => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEventArgs>, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEventArgs>(x => _data.DidFindUnconfiguredAccessories += x, x => _data.DidFindUnconfiguredAccessories -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidFinishConfiguringAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryDidFinishEventArgs> DidFinishConfiguringAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryDidFinishEventArgs>, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryDidFinishEventArgs>(x => _data.DidFinishConfiguringAccessory += x, x => _data.DidFinishConfiguringAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidRemoveUnconfiguredAccessories"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEventArgs> DidRemoveUnconfiguredAccessories => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEventArgs>, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEventArgs>(x => _data.DidRemoveUnconfiguredAccessories += x, x => _data.DidRemoveUnconfiguredAccessories -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidUpdateState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryEventArgs> DidUpdateState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ExternalAccessory.EAWiFiUnconfiguredAccessoryEventArgs>, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryEventArgs>(x => _data.DidUpdateState += x, x => _data.DidUpdateState -= x).Select(x => x.EventArgs);
    }
}

namespace Foundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Foundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        public static NSCacheEvents Events(this global::Foundation.NSCache item) => new NSCacheEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        public static NSKeyedArchiverEvents Events(this global::Foundation.NSKeyedArchiver item) => new NSKeyedArchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        public static NSKeyedUnarchiverEvents Events(this global::Foundation.NSKeyedUnarchiver item) => new NSKeyedUnarchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSNetService"/> class.
        /// </summary>
        public static NSNetServiceEvents Events(this global::Foundation.NSNetService item) => new NSNetServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSNetServiceBrowser"/> class.
        /// </summary>
        public static NSNetServiceBrowserEvents Events(this global::Foundation.NSNetServiceBrowser item) => new NSNetServiceBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        public static NSStreamEvents Events(this global::Foundation.NSStream item) => new NSStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSCache"/> class as observables.
    /// </summary>
    public class NSCacheEvents
    {
        private readonly global::Foundation.NSCache _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSCacheEvents(global::Foundation.NSCache data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSCache.WillEvictObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> WillEvictObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(x => _data.WillEvictObject += x, x => _data.WillEvictObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class as observables.
    /// </summary>
    public class NSKeyedArchiverEvents
    {
        private readonly global::Foundation.NSKeyedArchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSKeyedArchiverEvents(global::Foundation.NSKeyedArchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.EncodedObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> EncodedObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(x => _data.EncodedObject += x, x => _data.EncodedObject -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finishing += x, x => _data.Finishing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class as observables.
    /// </summary>
    public class NSKeyedUnarchiverEvents
    {
        private readonly global::Foundation.NSKeyedUnarchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSKeyedUnarchiverEvents(global::Foundation.NSKeyedUnarchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finishing += x, x => _data.Finishing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSNetService"/> class as observables.
    /// </summary>
    public class NSNetServiceEvents
    {
        private readonly global::Foundation.NSNetService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSNetService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSNetServiceEvents(global::Foundation.NSNetService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.AddressResolved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AddressResolved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AddressResolved += x, x => _data.AddressResolved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.DidAcceptConnection"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceConnectionEventArgs> DidAcceptConnection => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceConnectionEventArgs>, global::Foundation.NSNetServiceConnectionEventArgs>(x => _data.DidAcceptConnection += x, x => _data.DidAcceptConnection -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.Published"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Published => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Published += x, x => _data.Published -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.PublishFailure"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> PublishFailure => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.PublishFailure += x, x => _data.PublishFailure -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.ResolveFailure"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> ResolveFailure => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.ResolveFailure += x, x => _data.ResolveFailure -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Stopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Stopped += x, x => _data.Stopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.UpdatedTxtRecordData"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceDataEventArgs> UpdatedTxtRecordData => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceDataEventArgs>, global::Foundation.NSNetServiceDataEventArgs>(x => _data.UpdatedTxtRecordData += x, x => _data.UpdatedTxtRecordData -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.WillPublish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPublish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPublish += x, x => _data.WillPublish -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.WillResolve"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillResolve => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillResolve += x, x => _data.WillResolve -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSNetServiceBrowser"/> class as observables.
    /// </summary>
    public class NSNetServiceBrowserEvents
    {
        private readonly global::Foundation.NSNetServiceBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSNetServiceBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSNetServiceBrowserEvents(global::Foundation.NSNetServiceBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.DomainRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetDomainEventArgs> DomainRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetDomainEventArgs>, global::Foundation.NSNetDomainEventArgs>(x => _data.DomainRemoved += x, x => _data.DomainRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.FoundDomain"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetDomainEventArgs> FoundDomain => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetDomainEventArgs>, global::Foundation.NSNetDomainEventArgs>(x => _data.FoundDomain += x, x => _data.FoundDomain -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.FoundService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceEventArgs> FoundService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceEventArgs>, global::Foundation.NSNetServiceEventArgs>(x => _data.FoundService += x, x => _data.FoundService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.NotSearched"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> NotSearched => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.NotSearched += x, x => _data.NotSearched -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.SearchStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchStarted += x, x => _data.SearchStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.SearchStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchStopped += x, x => _data.SearchStopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.ServiceRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceEventArgs> ServiceRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceEventArgs>, global::Foundation.NSNetServiceEventArgs>(x => _data.ServiceRemoved += x, x => _data.ServiceRemoved -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSStream"/> class as observables.
    /// </summary>
    public class NSStreamEvents
    {
        private readonly global::Foundation.NSStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSStreamEvents(global::Foundation.NSStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSStream.OnEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSStreamEventArgs> OnEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSStreamEventArgs>, global::Foundation.NSStreamEventArgs>(x => _data.OnEvent += x, x => _data.OnEvent -= x).Select(x => x.EventArgs);
    }
}

namespace GameKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "GameKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKAchievementViewController"/> class.
        /// </summary>
        public static GKAchievementViewControllerEvents Events(this global::GameKit.GKAchievementViewController item) => new GKAchievementViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKChallengeEventHandler"/> class.
        /// </summary>
        public static GKChallengeEventHandlerEvents Events(this global::GameKit.GKChallengeEventHandler item) => new GKChallengeEventHandlerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKFriendRequestComposeViewController"/> class.
        /// </summary>
        public static GKFriendRequestComposeViewControllerEvents Events(this global::GameKit.GKFriendRequestComposeViewController item) => new GKFriendRequestComposeViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKGameCenterViewController"/> class.
        /// </summary>
        public static GKGameCenterViewControllerEvents Events(this global::GameKit.GKGameCenterViewController item) => new GKGameCenterViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKLeaderboardViewController"/> class.
        /// </summary>
        public static GKLeaderboardViewControllerEvents Events(this global::GameKit.GKLeaderboardViewController item) => new GKLeaderboardViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKMatch"/> class.
        /// </summary>
        public static GKMatchEvents Events(this global::GameKit.GKMatch item) => new GKMatchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKMatchmakerViewController"/> class.
        /// </summary>
        public static GKMatchmakerViewControllerEvents Events(this global::GameKit.GKMatchmakerViewController item) => new GKMatchmakerViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKSession"/> class.
        /// </summary>
        public static GKSessionEvents Events(this global::GameKit.GKSession item) => new GKSessionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKAchievementViewController"/> class as observables.
    /// </summary>
    public class GKAchievementViewControllerEvents
    {
        private readonly global::GameKit.GKAchievementViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKAchievementViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKAchievementViewControllerEvents(global::GameKit.GKAchievementViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKAchievementViewController.DidFinish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinish += x, x => _data.DidFinish -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKChallengeEventHandler"/> class as observables.
    /// </summary>
    public class GKChallengeEventHandlerEvents
    {
        private readonly global::GameKit.GKChallengeEventHandler _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKChallengeEventHandler"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKChallengeEventHandlerEvents(global::GameKit.GKChallengeEventHandler data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.LocalPlayerCompletedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocalPlayerCompletedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocalPlayerCompletedChallenge += x, x => _data.LocalPlayerCompletedChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.LocalPlayerReceivedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocalPlayerReceivedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocalPlayerReceivedChallenge += x, x => _data.LocalPlayerReceivedChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.LocalPlayerSelectedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocalPlayerSelectedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocalPlayerSelectedChallenge += x, x => _data.LocalPlayerSelectedChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.RemotePlayerCompletedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemotePlayerCompletedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RemotePlayerCompletedChallenge += x, x => _data.RemotePlayerCompletedChallenge -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKFriendRequestComposeViewController"/> class as observables.
    /// </summary>
    public class GKFriendRequestComposeViewControllerEvents
    {
        private readonly global::GameKit.GKFriendRequestComposeViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKFriendRequestComposeViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKFriendRequestComposeViewControllerEvents(global::GameKit.GKFriendRequestComposeViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKFriendRequestComposeViewController.DidFinish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinish += x, x => _data.DidFinish -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKGameCenterViewController"/> class as observables.
    /// </summary>
    public class GKGameCenterViewControllerEvents
    {
        private readonly global::GameKit.GKGameCenterViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKGameCenterViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKGameCenterViewControllerEvents(global::GameKit.GKGameCenterViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKGameCenterViewController.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKLeaderboardViewController"/> class as observables.
    /// </summary>
    public class GKLeaderboardViewControllerEvents
    {
        private readonly global::GameKit.GKLeaderboardViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKLeaderboardViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKLeaderboardViewControllerEvents(global::GameKit.GKLeaderboardViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKLeaderboardViewController.DidFinish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinish += x, x => _data.DidFinish -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKMatch"/> class as observables.
    /// </summary>
    public class GKMatchEvents
    {
        private readonly global::GameKit.GKMatch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKMatch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKMatchEvents(global::GameKit.GKMatch data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKDataEventArgs> DataReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKDataEventArgs>, global::GameKit.GKDataEventArgs>(x => _data.DataReceived += x, x => _data.DataReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceivedForRecipient"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKDataReceivedForRecipientEventArgs> DataReceivedForRecipient => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKDataReceivedForRecipientEventArgs>, global::GameKit.GKDataReceivedForRecipientEventArgs>(x => _data.DataReceivedForRecipient += x, x => _data.DataReceivedForRecipient -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceivedFromPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs> DataReceivedFromPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs>, global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs>(x => _data.DataReceivedFromPlayer += x, x => _data.DataReceivedFromPlayer -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKErrorEventArgs>, global::GameKit.GKErrorEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKStateEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKStateEventArgs>, global::GameKit.GKStateEventArgs>(x => _data.StateChanged += x, x => _data.StateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.StateChangedForPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchConnectionChangedEventArgs> StateChangedForPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchConnectionChangedEventArgs>, global::GameKit.GKMatchConnectionChangedEventArgs>(x => _data.StateChangedForPlayer += x, x => _data.StateChangedForPlayer -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKMatchmakerViewController"/> class as observables.
    /// </summary>
    public class GKMatchmakerViewControllerEvents
    {
        private readonly global::GameKit.GKMatchmakerViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKMatchmakerViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKMatchmakerViewControllerEvents(global::GameKit.GKMatchmakerViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFailWithError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKErrorEventArgs> DidFailWithError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKErrorEventArgs>, global::GameKit.GKErrorEventArgs>(x => _data.DidFailWithError += x, x => _data.DidFailWithError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindHostedPlayers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakingPlayersEventArgs> DidFindHostedPlayers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchmakingPlayersEventArgs>, global::GameKit.GKMatchmakingPlayersEventArgs>(x => _data.DidFindHostedPlayers += x, x => _data.DidFindHostedPlayers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindMatch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchEventArgs> DidFindMatch => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchEventArgs>, global::GameKit.GKMatchEventArgs>(x => _data.DidFindMatch += x, x => _data.DidFindMatch -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindPlayers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPlayersEventArgs> DidFindPlayers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPlayersEventArgs>, global::GameKit.GKPlayersEventArgs>(x => _data.DidFindPlayers += x, x => _data.DidFindPlayers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.HostedPlayerDidAccept"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakingPlayerEventArgs> HostedPlayerDidAccept => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchmakingPlayerEventArgs>, global::GameKit.GKMatchmakingPlayerEventArgs>(x => _data.HostedPlayerDidAccept += x, x => _data.HostedPlayerDidAccept -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.ReceivedAcceptFromHostedPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPlayerEventArgs> ReceivedAcceptFromHostedPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPlayerEventArgs>, global::GameKit.GKPlayerEventArgs>(x => _data.ReceivedAcceptFromHostedPlayer += x, x => _data.ReceivedAcceptFromHostedPlayer -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.WasCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WasCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WasCancelled += x, x => _data.WasCancelled -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKSession"/> class as observables.
    /// </summary>
    public class GKSessionEvents
    {
        private readonly global::GameKit.GKSession _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKSession"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKSessionEvents(global::GameKit.GKSession data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSession.ConnectionFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPeerConnectionEventArgs> ConnectionFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPeerConnectionEventArgs>, global::GameKit.GKPeerConnectionEventArgs>(x => _data.ConnectionFailed += x, x => _data.ConnectionFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSession.ConnectionRequest"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPeerConnectionEventArgs> ConnectionRequest => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPeerConnectionEventArgs>, global::GameKit.GKPeerConnectionEventArgs>(x => _data.ConnectionRequest += x, x => _data.ConnectionRequest -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSession.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPeerConnectionEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPeerConnectionEventArgs>, global::GameKit.GKPeerConnectionEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSession.PeerChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPeerChangedStateEventArgs> PeerChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPeerChangedStateEventArgs>, global::GameKit.GKPeerChangedStateEventArgs>(x => _data.PeerChanged += x, x => _data.PeerChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSession.ReceiveData"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKDataReceivedEventArgs> ReceiveData => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKDataReceivedEventArgs>, global::GameKit.GKDataReceivedEventArgs>(x => _data.ReceiveData += x, x => _data.ReceiveData -= x).Select(x => x.EventArgs);
    }
}

namespace GLKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "GLKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GLKit.GLKView"/> class.
        /// </summary>
        public static GLKViewEvents Events(this global::GLKit.GLKView item) => new GLKViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GLKit.GLKView"/> class as observables.
    /// </summary>
    public class GLKViewEvents
    {
        private readonly global::GLKit.GLKView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GLKit.GLKView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GLKViewEvents(global::GLKit.GLKView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKView.DrawInRect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GLKit.GLKViewDrawEventArgs> DrawInRect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GLKit.GLKViewDrawEventArgs>, global::GLKit.GLKViewDrawEventArgs>(x => _data.DrawInRect += x, x => _data.DrawInRect -= x).Select(x => x.EventArgs);
    }
}

namespace HomeKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "HomeKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMAccessory"/> class.
        /// </summary>
        public static HMAccessoryEvents Events(this global::HomeKit.HMAccessory item) => new HMAccessoryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMAccessoryBrowser"/> class.
        /// </summary>
        public static HMAccessoryBrowserEvents Events(this global::HomeKit.HMAccessoryBrowser item) => new HMAccessoryBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMHome"/> class.
        /// </summary>
        public static HMHomeEvents Events(this global::HomeKit.HMHome item) => new HMHomeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMHomeManager"/> class.
        /// </summary>
        public static HMHomeManagerEvents Events(this global::HomeKit.HMHomeManager item) => new HMHomeManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMAccessory"/> class as observables.
    /// </summary>
    public class HMAccessoryEvents
    {
        private readonly global::HomeKit.HMAccessory _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMAccessory"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HMAccessoryEvents(global::HomeKit.HMAccessory data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidAddProfile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryProfileEventArgs> DidAddProfile => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryProfileEventArgs>, global::HomeKit.HMAccessoryProfileEventArgs>(x => _data.DidAddProfile += x, x => _data.DidAddProfile -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidRemoveProfile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryProfileEventArgs> DidRemoveProfile => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryProfileEventArgs>, global::HomeKit.HMAccessoryProfileEventArgs>(x => _data.DidRemoveProfile += x, x => _data.DidRemoveProfile -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateAssociatedServiceType"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryUpdateEventArgs> DidUpdateAssociatedServiceType => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryUpdateEventArgs>, global::HomeKit.HMAccessoryUpdateEventArgs>(x => _data.DidUpdateAssociatedServiceType += x, x => _data.DidUpdateAssociatedServiceType -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateFirmwareVersion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryFirmwareVersionEventArgs> DidUpdateFirmwareVersion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryFirmwareVersionEventArgs>, global::HomeKit.HMAccessoryFirmwareVersionEventArgs>(x => _data.DidUpdateFirmwareVersion += x, x => _data.DidUpdateFirmwareVersion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateName"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateName => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateName += x, x => _data.DidUpdateName -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateNameForService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryUpdateEventArgs> DidUpdateNameForService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryUpdateEventArgs>, global::HomeKit.HMAccessoryUpdateEventArgs>(x => _data.DidUpdateNameForService += x, x => _data.DidUpdateNameForService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateReachability"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateReachability => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateReachability += x, x => _data.DidUpdateReachability -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateServices"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateServices => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateServices += x, x => _data.DidUpdateServices -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateValueForCharacteristic"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs> DidUpdateValueForCharacteristic => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs>, global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs>(x => _data.DidUpdateValueForCharacteristic += x, x => _data.DidUpdateValueForCharacteristic -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMAccessoryBrowser"/> class as observables.
    /// </summary>
    public class HMAccessoryBrowserEvents
    {
        private readonly global::HomeKit.HMAccessoryBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMAccessoryBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HMAccessoryBrowserEvents(global::HomeKit.HMAccessoryBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryBrowser.DidFindNewAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryBrowserEventArgs> DidFindNewAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryBrowserEventArgs>, global::HomeKit.HMAccessoryBrowserEventArgs>(x => _data.DidFindNewAccessory += x, x => _data.DidFindNewAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryBrowser.DidRemoveNewAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryBrowserEventArgs> DidRemoveNewAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryBrowserEventArgs>, global::HomeKit.HMAccessoryBrowserEventArgs>(x => _data.DidRemoveNewAccessory += x, x => _data.DidRemoveNewAccessory -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMHome"/> class as observables.
    /// </summary>
    public class HMHomeEvents
    {
        private readonly global::HomeKit.HMHome _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMHome"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HMHomeEvents(global::HomeKit.HMHome data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidAddAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(x => _data.DidAddAccessory += x, x => _data.DidAddAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidAddActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidAddActionSet += x, x => _data.DidAddActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidAddRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(x => _data.DidAddRoom += x, x => _data.DidAddRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddRoomToZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomZoneEventArgs> DidAddRoomToZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomZoneEventArgs>, global::HomeKit.HMHomeRoomZoneEventArgs>(x => _data.DidAddRoomToZone += x, x => _data.DidAddRoomToZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceServiceGroupEventArgs> DidAddService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceServiceGroupEventArgs>, global::HomeKit.HMHomeServiceServiceGroupEventArgs>(x => _data.DidAddService += x, x => _data.DidAddService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidAddServiceGroup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(x => _data.DidAddServiceGroup += x, x => _data.DidAddServiceGroup -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidAddTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidAddTrigger += x, x => _data.DidAddTrigger -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeUserEventArgs> DidAddUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeUserEventArgs>, global::HomeKit.HMHomeUserEventArgs>(x => _data.DidAddUser += x, x => _data.DidAddUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidAddZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(x => _data.DidAddZone += x, x => _data.DidAddZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidEncounterError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeErrorAccessoryEventArgs> DidEncounterError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeErrorAccessoryEventArgs>, global::HomeKit.HMHomeErrorAccessoryEventArgs>(x => _data.DidEncounterError += x, x => _data.DidEncounterError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidRemoveAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(x => _data.DidRemoveAccessory += x, x => _data.DidRemoveAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidRemoveActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidRemoveActionSet += x, x => _data.DidRemoveActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidRemoveRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(x => _data.DidRemoveRoom += x, x => _data.DidRemoveRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveRoomFromZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomZoneEventArgs> DidRemoveRoomFromZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomZoneEventArgs>, global::HomeKit.HMHomeRoomZoneEventArgs>(x => _data.DidRemoveRoomFromZone += x, x => _data.DidRemoveRoomFromZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceServiceGroupEventArgs> DidRemoveService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceServiceGroupEventArgs>, global::HomeKit.HMHomeServiceServiceGroupEventArgs>(x => _data.DidRemoveService += x, x => _data.DidRemoveService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidRemoveServiceGroup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(x => _data.DidRemoveServiceGroup += x, x => _data.DidRemoveServiceGroup -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidRemoveTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidRemoveTrigger += x, x => _data.DidRemoveTrigger -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeUserEventArgs> DidRemoveUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeUserEventArgs>, global::HomeKit.HMHomeUserEventArgs>(x => _data.DidRemoveUser += x, x => _data.DidRemoveUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidRemoveZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(x => _data.DidRemoveZone += x, x => _data.DidRemoveZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUnblockAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidUnblockAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(x => _data.DidUnblockAccessory += x, x => _data.DidUnblockAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateAccessControlForCurrentUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateAccessControlForCurrentUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateAccessControlForCurrentUser += x, x => _data.DidUpdateAccessControlForCurrentUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateActionsForActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidUpdateActionsForActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidUpdateActionsForActionSet += x, x => _data.DidUpdateActionsForActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateHomeHubState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeHubStateEventArgs> DidUpdateHomeHubState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeHubStateEventArgs>, global::HomeKit.HMHomeHubStateEventArgs>(x => _data.DidUpdateHomeHubState += x, x => _data.DidUpdateHomeHubState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidUpdateNameForActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidUpdateNameForActionSet += x, x => _data.DidUpdateNameForActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateNameForHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateNameForHome += x, x => _data.DidUpdateNameForHome -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidUpdateNameForRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(x => _data.DidUpdateNameForRoom += x, x => _data.DidUpdateNameForRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidUpdateNameForServiceGroup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(x => _data.DidUpdateNameForServiceGroup += x, x => _data.DidUpdateNameForServiceGroup -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidUpdateNameForTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidUpdateNameForTrigger += x, x => _data.DidUpdateNameForTrigger -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidUpdateNameForZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(x => _data.DidUpdateNameForZone += x, x => _data.DidUpdateNameForZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomAccessoryEventArgs> DidUpdateRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomAccessoryEventArgs>, global::HomeKit.HMHomeRoomAccessoryEventArgs>(x => _data.DidUpdateRoom += x, x => _data.DidUpdateRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidUpdateTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidUpdateTrigger += x, x => _data.DidUpdateTrigger -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMHomeManager"/> class as observables.
    /// </summary>
    public class HMHomeManagerEvents
    {
        private readonly global::HomeKit.HMHomeManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMHomeManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HMHomeManagerEvents(global::HomeKit.HMHomeManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidAddHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManagerEventArgs> DidAddHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeManagerEventArgs>, global::HomeKit.HMHomeManagerEventArgs>(x => _data.DidAddHome += x, x => _data.DidAddHome -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidRemoveHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManagerEventArgs> DidRemoveHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeManagerEventArgs>, global::HomeKit.HMHomeManagerEventArgs>(x => _data.DidRemoveHome += x, x => _data.DidRemoveHome -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidUpdateHomes"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateHomes => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateHomes += x, x => _data.DidUpdateHomes -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidUpdatePrimaryHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdatePrimaryHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdatePrimaryHome += x, x => _data.DidUpdatePrimaryHome -= x).Select(x => x.EventArgs);
    }
}

namespace iAd
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "iAd"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::iAd.ADBannerView"/> class.
        /// </summary>
        public static ADBannerViewEvents Events(this global::iAd.ADBannerView item) => new ADBannerViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::iAd.ADInterstitialAd"/> class.
        /// </summary>
        public static ADInterstitialAdEvents Events(this global::iAd.ADInterstitialAd item) => new ADInterstitialAdEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::iAd.ADBannerView"/> class as observables.
    /// </summary>
    public class ADBannerViewEvents
    {
        private readonly global::iAd.ADBannerView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::iAd.ADBannerView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ADBannerViewEvents(global::iAd.ADBannerView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerView.ActionFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ActionFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ActionFinished += x, x => _data.ActionFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerView.AdLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AdLoaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AdLoaded += x, x => _data.AdLoaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerView.FailedToReceiveAd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::iAd.AdErrorEventArgs> FailedToReceiveAd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::iAd.AdErrorEventArgs>, global::iAd.AdErrorEventArgs>(x => _data.FailedToReceiveAd += x, x => _data.FailedToReceiveAd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerView.WillLoad"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillLoad => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillLoad += x, x => _data.WillLoad -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::iAd.ADInterstitialAd"/> class as observables.
    /// </summary>
    public class ADInterstitialAdEvents
    {
        private readonly global::iAd.ADInterstitialAd _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::iAd.ADInterstitialAd"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ADInterstitialAdEvents(global::iAd.ADInterstitialAd data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAd.ActionFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ActionFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ActionFinished += x, x => _data.ActionFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAd.AdLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AdLoaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AdLoaded += x, x => _data.AdLoaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAd.AdUnloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AdUnloaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AdUnloaded += x, x => _data.AdUnloaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAd.FailedToReceiveAd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::iAd.ADErrorEventArgs> FailedToReceiveAd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::iAd.ADErrorEventArgs>, global::iAd.ADErrorEventArgs>(x => _data.FailedToReceiveAd += x, x => _data.FailedToReceiveAd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAd.WillLoad"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillLoad => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillLoad += x, x => _data.WillLoad -= x).Select(x => x.EventArgs);
    }
}

namespace MapKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "MapKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::MapKit.MKMapView"/> class.
        /// </summary>
        public static MKMapViewEvents Events(this global::MapKit.MKMapView item) => new MKMapViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::MapKit.MKMapView"/> class as observables.
    /// </summary>
    public class MKMapViewEvents
    {
        private readonly global::MapKit.MKMapView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::MapKit.MKMapView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MKMapViewEvents(global::MapKit.MKMapView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.CalloutAccessoryControlTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewAccessoryTappedEventArgs> CalloutAccessoryControlTapped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewAccessoryTappedEventArgs>, global::MapKit.MKMapViewAccessoryTappedEventArgs>(x => _data.CalloutAccessoryControlTapped += x, x => _data.CalloutAccessoryControlTapped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.ChangedDragState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewDragStateEventArgs> ChangedDragState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewDragStateEventArgs>, global::MapKit.MKMapViewDragStateEventArgs>(x => _data.ChangedDragState += x, x => _data.ChangedDragState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidAddAnnotationViews"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewAnnotationEventArgs> DidAddAnnotationViews => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewAnnotationEventArgs>, global::MapKit.MKMapViewAnnotationEventArgs>(x => _data.DidAddAnnotationViews += x, x => _data.DidAddAnnotationViews -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidAddOverlayRenderers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKDidAddOverlayRenderersEventArgs> DidAddOverlayRenderers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKDidAddOverlayRenderersEventArgs>, global::MapKit.MKDidAddOverlayRenderersEventArgs>(x => _data.DidAddOverlayRenderers += x, x => _data.DidAddOverlayRenderers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidAddOverlayViews"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKOverlayViewsEventArgs> DidAddOverlayViews => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKOverlayViewsEventArgs>, global::MapKit.MKOverlayViewsEventArgs>(x => _data.DidAddOverlayViews += x, x => _data.DidAddOverlayViews -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidChangeUserTrackingMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MMapViewUserTrackingEventArgs> DidChangeUserTrackingMode => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MMapViewUserTrackingEventArgs>, global::MapKit.MMapViewUserTrackingEventArgs>(x => _data.DidChangeUserTrackingMode += x, x => _data.DidChangeUserTrackingMode -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidChangeVisibleRegion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeVisibleRegion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeVisibleRegion += x, x => _data.DidChangeVisibleRegion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidDeselectAnnotationView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKAnnotationViewEventArgs> DidDeselectAnnotationView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKAnnotationViewEventArgs>, global::MapKit.MKAnnotationViewEventArgs>(x => _data.DidDeselectAnnotationView += x, x => _data.DidDeselectAnnotationView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidFailToLocateUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DidFailToLocateUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DidFailToLocateUser += x, x => _data.DidFailToLocateUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidFinishRenderingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKDidFinishRenderingMapEventArgs> DidFinishRenderingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKDidFinishRenderingMapEventArgs>, global::MapKit.MKDidFinishRenderingMapEventArgs>(x => _data.DidFinishRenderingMap += x, x => _data.DidFinishRenderingMap -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidSelectAnnotationView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKAnnotationViewEventArgs> DidSelectAnnotationView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKAnnotationViewEventArgs>, global::MapKit.MKAnnotationViewEventArgs>(x => _data.DidSelectAnnotationView += x, x => _data.DidSelectAnnotationView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidStopLocatingUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidStopLocatingUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidStopLocatingUser += x, x => _data.DidStopLocatingUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidUpdateUserLocation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKUserLocationEventArgs> DidUpdateUserLocation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKUserLocationEventArgs>, global::MapKit.MKUserLocationEventArgs>(x => _data.DidUpdateUserLocation += x, x => _data.DidUpdateUserLocation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.LoadingMapFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> LoadingMapFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.LoadingMapFailed += x, x => _data.LoadingMapFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.MapLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MapLoaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MapLoaded += x, x => _data.MapLoaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewChangeEventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewChangeEventArgs>, global::MapKit.MKMapViewChangeEventArgs>(x => _data.RegionChanged += x, x => _data.RegionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.RegionWillChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewChangeEventArgs> RegionWillChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewChangeEventArgs>, global::MapKit.MKMapViewChangeEventArgs>(x => _data.RegionWillChange += x, x => _data.RegionWillChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartLoadingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLoadingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLoadingMap += x, x => _data.WillStartLoadingMap -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartLocatingUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLocatingUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLocatingUser += x, x => _data.WillStartLocatingUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartRenderingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartRenderingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartRenderingMap += x, x => _data.WillStartRenderingMap -= x).Select(x => x.EventArgs);
    }
}

namespace MediaPlayer
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "MediaPlayer"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::MediaPlayer.MPMediaPickerController"/> class.
        /// </summary>
        public static MPMediaPickerControllerEvents Events(this global::MediaPlayer.MPMediaPickerController item) => new MPMediaPickerControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::MediaPlayer.MPMediaPickerController"/> class as observables.
    /// </summary>
    public class MPMediaPickerControllerEvents
    {
        private readonly global::MediaPlayer.MPMediaPickerController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::MediaPlayer.MPMediaPickerController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MPMediaPickerControllerEvents(global::MediaPlayer.MPMediaPickerController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPMediaPickerController.DidCancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidCancel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidCancel += x, x => _data.DidCancel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPMediaPickerController.ItemsPicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MediaPlayer.ItemsPickedEventArgs> ItemsPicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MediaPlayer.ItemsPickedEventArgs>, global::MediaPlayer.ItemsPickedEventArgs>(x => _data.ItemsPicked += x, x => _data.ItemsPicked -= x).Select(x => x.EventArgs);
    }
}

namespace MessageUI
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "MessageUI"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::MessageUI.MFMailComposeViewController"/> class.
        /// </summary>
        public static MFMailComposeViewControllerEvents Events(this global::MessageUI.MFMailComposeViewController item) => new MFMailComposeViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::MessageUI.MFMessageComposeViewController"/> class.
        /// </summary>
        public static MFMessageComposeViewControllerEvents Events(this global::MessageUI.MFMessageComposeViewController item) => new MFMessageComposeViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::MessageUI.MFMailComposeViewController"/> class as observables.
    /// </summary>
    public class MFMailComposeViewControllerEvents
    {
        private readonly global::MessageUI.MFMailComposeViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::MessageUI.MFMailComposeViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MFMailComposeViewControllerEvents(global::MessageUI.MFMailComposeViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "MessageUI.MFMailComposeViewController.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MessageUI.MFComposeResultEventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MessageUI.MFComposeResultEventArgs>, global::MessageUI.MFComposeResultEventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::MessageUI.MFMessageComposeViewController"/> class as observables.
    /// </summary>
    public class MFMessageComposeViewControllerEvents
    {
        private readonly global::MessageUI.MFMessageComposeViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::MessageUI.MFMessageComposeViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MFMessageComposeViewControllerEvents(global::MessageUI.MFMessageComposeViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "MessageUI.MFMessageComposeViewController.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MessageUI.MFMessageComposeResultEventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MessageUI.MFMessageComposeResultEventArgs>, global::MessageUI.MFMessageComposeResultEventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
    }
}

namespace PassKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "PassKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::PassKit.PKAddPassesViewController"/> class.
        /// </summary>
        public static PKAddPassesViewControllerEvents Events(this global::PassKit.PKAddPassesViewController item) => new PKAddPassesViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::PassKit.PKPaymentAuthorizationViewController"/> class.
        /// </summary>
        public static PKPaymentAuthorizationViewControllerEvents Events(this global::PassKit.PKPaymentAuthorizationViewController item) => new PKPaymentAuthorizationViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::PassKit.PKAddPassesViewController"/> class as observables.
    /// </summary>
    public class PKAddPassesViewControllerEvents
    {
        private readonly global::PassKit.PKAddPassesViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::PassKit.PKAddPassesViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PKAddPassesViewControllerEvents(global::PassKit.PKAddPassesViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKAddPassesViewController.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::PassKit.PKPaymentAuthorizationViewController"/> class as observables.
    /// </summary>
    public class PKPaymentAuthorizationViewControllerEvents
    {
        private readonly global::PassKit.PKPaymentAuthorizationViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::PassKit.PKPaymentAuthorizationViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PKPaymentAuthorizationViewControllerEvents(global::PassKit.PKPaymentAuthorizationViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidAuthorizePayment"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationEventArgs> DidAuthorizePayment => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentAuthorizationEventArgs>, global::PassKit.PKPaymentAuthorizationEventArgs>(x => _data.DidAuthorizePayment += x, x => _data.DidAuthorizePayment -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidAuthorizePayment2"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationResultEventArgs> DidAuthorizePayment2 => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentAuthorizationResultEventArgs>, global::PassKit.PKPaymentAuthorizationResultEventArgs>(x => _data.DidAuthorizePayment2 += x, x => _data.DidAuthorizePayment2 -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidSelectPaymentMethod"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentMethodSelectedEventArgs> DidSelectPaymentMethod => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentMethodSelectedEventArgs>, global::PassKit.PKPaymentMethodSelectedEventArgs>(x => _data.DidSelectPaymentMethod += x, x => _data.DidSelectPaymentMethod -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidSelectPaymentMethod2"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentRequestPaymentMethodUpdateEventArgs> DidSelectPaymentMethod2 => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentRequestPaymentMethodUpdateEventArgs>, global::PassKit.PKPaymentRequestPaymentMethodUpdateEventArgs>(x => _data.DidSelectPaymentMethod2 += x, x => _data.DidSelectPaymentMethod2 -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidSelectShippingAddress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentShippingAddressSelectedEventArgs> DidSelectShippingAddress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentShippingAddressSelectedEventArgs>, global::PassKit.PKPaymentShippingAddressSelectedEventArgs>(x => _data.DidSelectShippingAddress += x, x => _data.DidSelectShippingAddress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidSelectShippingContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentSelectedContactEventArgs> DidSelectShippingContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentSelectedContactEventArgs>, global::PassKit.PKPaymentSelectedContactEventArgs>(x => _data.DidSelectShippingContact += x, x => _data.DidSelectShippingContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidSelectShippingContact2"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentRequestShippingContactUpdateEventArgs> DidSelectShippingContact2 => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentRequestShippingContactUpdateEventArgs>, global::PassKit.PKPaymentRequestShippingContactUpdateEventArgs>(x => _data.DidSelectShippingContact2 += x, x => _data.DidSelectShippingContact2 -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidSelectShippingMethod"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentShippingMethodSelectedEventArgs> DidSelectShippingMethod => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentShippingMethodSelectedEventArgs>, global::PassKit.PKPaymentShippingMethodSelectedEventArgs>(x => _data.DidSelectShippingMethod += x, x => _data.DidSelectShippingMethod -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.DidSelectShippingMethod2"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentRequestShippingMethodUpdateEventArgs> DidSelectShippingMethod2 => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PassKit.PKPaymentRequestShippingMethodUpdateEventArgs>, global::PassKit.PKPaymentRequestShippingMethodUpdateEventArgs>(x => _data.DidSelectShippingMethod2 += x, x => _data.DidSelectShippingMethod2 -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.PaymentAuthorizationViewControllerDidFinish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaymentAuthorizationViewControllerDidFinish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaymentAuthorizationViewControllerDidFinish += x, x => _data.PaymentAuthorizationViewControllerDidFinish -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewController.WillAuthorizePayment"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillAuthorizePayment => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillAuthorizePayment += x, x => _data.WillAuthorizePayment -= x).Select(x => x.EventArgs);
    }
}

namespace PdfKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "PdfKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::PdfKit.PdfDocument"/> class.
        /// </summary>
        public static PdfDocumentEvents Events(this global::PdfKit.PdfDocument item) => new PdfDocumentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::PdfKit.PdfView"/> class.
        /// </summary>
        public static PdfViewEvents Events(this global::PdfKit.PdfView item) => new PdfViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::PdfKit.PdfDocument"/> class as observables.
    /// </summary>
    public class PdfDocumentEvents
    {
        private readonly global::PdfKit.PdfDocument _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::PdfKit.PdfDocument"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PdfDocumentEvents(global::PdfKit.PdfDocument data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.DidBeginDocumentFind"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBeginDocumentFind => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBeginDocumentFind += x, x => _data.DidBeginDocumentFind -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.DidMatchString"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidMatchString => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidMatchString += x, x => _data.DidMatchString -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.DidUnlock"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUnlock => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUnlock += x, x => _data.DidUnlock -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.FindFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FindFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FindFinished += x, x => _data.FindFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.MatchFound"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MatchFound => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MatchFound += x, x => _data.MatchFound -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.PageFindFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageFindFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageFindFinished += x, x => _data.PageFindFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.PageFindStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageFindStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageFindStarted += x, x => _data.PageFindStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::PdfKit.PdfView"/> class as observables.
    /// </summary>
    public class PdfViewEvents
    {
        private readonly global::PdfKit.PdfView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::PdfKit.PdfView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PdfViewEvents(global::PdfKit.PdfView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.OpenPdf"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfViewActionEventArgs> OpenPdf => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PdfKit.PdfViewActionEventArgs>, global::PdfKit.PdfViewActionEventArgs>(x => _data.OpenPdf += x, x => _data.OpenPdf -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.PerformFind"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PerformFind => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PerformFind += x, x => _data.PerformFind -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.PerformGoToPage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PerformGoToPage => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PerformGoToPage += x, x => _data.PerformGoToPage -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.WillClickOnLink"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfViewUrlEventArgs> WillClickOnLink => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PdfKit.PdfViewUrlEventArgs>, global::PdfKit.PdfViewUrlEventArgs>(x => _data.WillClickOnLink += x, x => _data.WillClickOnLink -= x).Select(x => x.EventArgs);
    }
}

namespace QuickLook
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "QuickLook"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::QuickLook.QLPreviewController"/> class.
        /// </summary>
        public static QLPreviewControllerEvents Events(this global::QuickLook.QLPreviewController item) => new QLPreviewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::QuickLook.QLPreviewController"/> class as observables.
    /// </summary>
    public class QLPreviewControllerEvents
    {
        private readonly global::QuickLook.QLPreviewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::QuickLook.QLPreviewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public QLPreviewControllerEvents(global::QuickLook.QLPreviewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLook.QLPreviewController.DidDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDismiss += x, x => _data.DidDismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLook.QLPreviewController.WillDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillDismiss += x, x => _data.WillDismiss -= x).Select(x => x.EventArgs);
    }
}

namespace SceneKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SceneKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        public static SCNPhysicsWorldEvents Events(this global::SceneKit.SCNPhysicsWorld item) => new SCNPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class as observables.
    /// </summary>
    public class SCNPhysicsWorldEvents
    {
        private readonly global::SceneKit.SCNPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SCNPhysicsWorldEvents(global::SceneKit.SCNPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidEndContact += x, x => _data.DidEndContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidUpdateContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidUpdateContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidUpdateContact += x, x => _data.DidUpdateContact -= x).Select(x => x.EventArgs);
    }
}

namespace SpriteKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SpriteKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        public static SKPhysicsWorldEvents Events(this global::SpriteKit.SKPhysicsWorld item) => new SKPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class as observables.
    /// </summary>
    public class SKPhysicsWorldEvents
    {
        private readonly global::SpriteKit.SKPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKPhysicsWorldEvents(global::SpriteKit.SKPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEndContact += x, x => _data.DidEndContact -= x).Select(x => x.EventArgs);
    }
}

namespace StoreKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "StoreKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        public static SKProductsRequestEvents Events(this global::StoreKit.SKProductsRequest item) => new SKProductsRequestEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        public static SKRequestEvents Events(this global::StoreKit.SKRequest item) => new SKRequestEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKStoreProductViewController"/> class.
        /// </summary>
        public static SKStoreProductViewControllerEvents Events(this global::StoreKit.SKStoreProductViewController item) => new SKStoreProductViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class as observables.
    /// </summary>
    public class SKProductsRequestEvents
    {
        private readonly global::StoreKit.SKProductsRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKProductsRequestEvents(global::StoreKit.SKProductsRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKProductsRequest.ReceivedResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKProductsRequestResponseEventArgs> ReceivedResponse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::StoreKit.SKProductsRequestResponseEventArgs>, global::StoreKit.SKProductsRequestResponseEventArgs>(x => _data.ReceivedResponse += x, x => _data.ReceivedResponse -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKRequest"/> class as observables.
    /// </summary>
    public class SKRequestEvents
    {
        private readonly global::StoreKit.SKRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKRequestEvents(global::StoreKit.SKRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequest.RequestFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequestErrorEventArgs> RequestFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::StoreKit.SKRequestErrorEventArgs>, global::StoreKit.SKRequestErrorEventArgs>(x => _data.RequestFailed += x, x => _data.RequestFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequest.RequestFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RequestFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RequestFinished += x, x => _data.RequestFinished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKStoreProductViewController"/> class as observables.
    /// </summary>
    public class SKStoreProductViewControllerEvents
    {
        private readonly global::StoreKit.SKStoreProductViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKStoreProductViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKStoreProductViewControllerEvents(global::StoreKit.SKStoreProductViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKStoreProductViewController.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
    }
}

namespace UIKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "UIKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.NSTextStorage"/> class.
        /// </summary>
        public static NSTextStorageEvents Events(this global::UIKit.NSTextStorage item) => new NSTextStorageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIAccelerometer"/> class.
        /// </summary>
        public static UIAccelerometerEvents Events(this global::UIKit.UIAccelerometer item) => new UIAccelerometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIActionSheet"/> class.
        /// </summary>
        public static UIActionSheetEvents Events(this global::UIKit.UIActionSheet item) => new UIActionSheetEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIAlertView"/> class.
        /// </summary>
        public static UIAlertViewEvents Events(this global::UIKit.UIAlertView item) => new UIAlertViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIBarButtonItem"/> class.
        /// </summary>
        public static UIBarButtonItemEvents Events(this global::UIKit.UIBarButtonItem item) => new UIBarButtonItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UICollisionBehavior"/> class.
        /// </summary>
        public static UICollisionBehaviorEvents Events(this global::UIKit.UICollisionBehavior item) => new UICollisionBehaviorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIControl"/> class.
        /// </summary>
        public static UIControlEvents Events(this global::UIKit.UIControl item) => new UIControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIDocumentInteractionController"/> class.
        /// </summary>
        public static UIDocumentInteractionControllerEvents Events(this global::UIKit.UIDocumentInteractionController item) => new UIDocumentInteractionControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIDocumentMenuViewController"/> class.
        /// </summary>
        public static UIDocumentMenuViewControllerEvents Events(this global::UIKit.UIDocumentMenuViewController item) => new UIDocumentMenuViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIDocumentPickerViewController"/> class.
        /// </summary>
        public static UIDocumentPickerViewControllerEvents Events(this global::UIKit.UIDocumentPickerViewController item) => new UIDocumentPickerViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIImagePickerController"/> class.
        /// </summary>
        public static UIImagePickerControllerEvents Events(this global::UIKit.UIImagePickerController item) => new UIImagePickerControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIPageViewController"/> class.
        /// </summary>
        public static UIPageViewControllerEvents Events(this global::UIKit.UIPageViewController item) => new UIPageViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIPopoverController"/> class.
        /// </summary>
        public static UIPopoverControllerEvents Events(this global::UIKit.UIPopoverController item) => new UIPopoverControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIPopoverPresentationController"/> class.
        /// </summary>
        public static UIPopoverPresentationControllerEvents Events(this global::UIKit.UIPopoverPresentationController item) => new UIPopoverPresentationControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIPreviewInteraction"/> class.
        /// </summary>
        public static UIPreviewInteractionEvents Events(this global::UIKit.UIPreviewInteraction item) => new UIPreviewInteractionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIPrintInteractionController"/> class.
        /// </summary>
        public static UIPrintInteractionControllerEvents Events(this global::UIKit.UIPrintInteractionController item) => new UIPrintInteractionControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIScrollView"/> class.
        /// </summary>
        public static UIScrollViewEvents Events(this global::UIKit.UIScrollView item) => new UIScrollViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UISearchBar"/> class.
        /// </summary>
        public static UISearchBarEvents Events(this global::UIKit.UISearchBar item) => new UISearchBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UISplitViewController"/> class.
        /// </summary>
        public static UISplitViewControllerEvents Events(this global::UIKit.UISplitViewController item) => new UISplitViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITabBar"/> class.
        /// </summary>
        public static UITabBarEvents Events(this global::UIKit.UITabBar item) => new UITabBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITabBarController"/> class.
        /// </summary>
        public static UITabBarControllerEvents Events(this global::UIKit.UITabBarController item) => new UITabBarControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITextField"/> class.
        /// </summary>
        public static UITextFieldEvents Events(this global::UIKit.UITextField item) => new UITextFieldEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITextView"/> class.
        /// </summary>
        public static UITextViewEvents Events(this global::UIKit.UITextView item) => new UITextViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIVideoEditorController"/> class.
        /// </summary>
        public static UIVideoEditorControllerEvents Events(this global::UIKit.UIVideoEditorController item) => new UIVideoEditorControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIWebView"/> class.
        /// </summary>
        public static UIWebViewEvents Events(this global::UIKit.UIWebView item) => new UIWebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.NSTextStorage"/> class as observables.
    /// </summary>
    public class NSTextStorageEvents
    {
        private readonly global::UIKit.NSTextStorage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.NSTextStorage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTextStorageEvents(global::UIKit.NSTextStorage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorage.DidProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSTextStorageEventArgs> DidProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.NSTextStorageEventArgs>, global::UIKit.NSTextStorageEventArgs>(x => _data.DidProcessEditing += x, x => _data.DidProcessEditing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorage.WillProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSTextStorageEventArgs> WillProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.NSTextStorageEventArgs>, global::UIKit.NSTextStorageEventArgs>(x => _data.WillProcessEditing += x, x => _data.WillProcessEditing -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIAccelerometer"/> class as observables.
    /// </summary>
    public class UIAccelerometerEvents
    {
        private readonly global::UIKit.UIAccelerometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIAccelerometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIAccelerometerEvents(global::UIKit.UIAccelerometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAccelerometer.Acceleration"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIAccelerometerEventArgs> Acceleration => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIAccelerometerEventArgs>, global::UIKit.UIAccelerometerEventArgs>(x => _data.Acceleration += x, x => _data.Acceleration -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIActionSheet"/> class as observables.
    /// </summary>
    public class UIActionSheetEvents
    {
        private readonly global::UIKit.UIActionSheet _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIActionSheet"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIActionSheetEvents(global::UIKit.UIActionSheet data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheet.Canceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Canceled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Canceled += x, x => _data.Canceled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheet.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIButtonEventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIButtonEventArgs>, global::UIKit.UIButtonEventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheet.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIButtonEventArgs> Dismissed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIButtonEventArgs>, global::UIKit.UIButtonEventArgs>(x => _data.Dismissed += x, x => _data.Dismissed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheet.Presented"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Presented => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Presented += x, x => _data.Presented -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheet.WillDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIButtonEventArgs> WillDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIButtonEventArgs>, global::UIKit.UIButtonEventArgs>(x => _data.WillDismiss += x, x => _data.WillDismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheet.WillPresent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPresent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPresent += x, x => _data.WillPresent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIAlertView"/> class as observables.
    /// </summary>
    public class UIAlertViewEvents
    {
        private readonly global::UIKit.UIAlertView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIAlertView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIAlertViewEvents(global::UIKit.UIAlertView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertView.Canceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Canceled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Canceled += x, x => _data.Canceled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertView.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIButtonEventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIButtonEventArgs>, global::UIKit.UIButtonEventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertView.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIButtonEventArgs> Dismissed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIButtonEventArgs>, global::UIKit.UIButtonEventArgs>(x => _data.Dismissed += x, x => _data.Dismissed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertView.Presented"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Presented => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Presented += x, x => _data.Presented -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertView.WillDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIButtonEventArgs> WillDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIButtonEventArgs>, global::UIKit.UIButtonEventArgs>(x => _data.WillDismiss += x, x => _data.WillDismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertView.WillPresent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPresent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPresent += x, x => _data.WillPresent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIBarButtonItem"/> class as observables.
    /// </summary>
    public class UIBarButtonItemEvents
    {
        private readonly global::UIKit.UIBarButtonItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIBarButtonItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIBarButtonItemEvents(global::UIKit.UIBarButtonItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIBarButtonItem.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UICollisionBehavior"/> class as observables.
    /// </summary>
    public class UICollisionBehaviorEvents
    {
        private readonly global::UIKit.UICollisionBehavior _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UICollisionBehavior"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UICollisionBehaviorEvents(global::UIKit.UICollisionBehavior data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.BeganBoundaryContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionBeganBoundaryContactEventArgs> BeganBoundaryContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionBeganBoundaryContactEventArgs>, global::UIKit.UICollisionBeganBoundaryContactEventArgs>(x => _data.BeganBoundaryContact += x, x => _data.BeganBoundaryContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.BeganContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionBeganContactEventArgs> BeganContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionBeganContactEventArgs>, global::UIKit.UICollisionBeganContactEventArgs>(x => _data.BeganContact += x, x => _data.BeganContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.EndedBoundaryContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionEndedBoundaryContactEventArgs> EndedBoundaryContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionEndedBoundaryContactEventArgs>, global::UIKit.UICollisionEndedBoundaryContactEventArgs>(x => _data.EndedBoundaryContact += x, x => _data.EndedBoundaryContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.EndedContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionEndedContactEventArgs> EndedContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionEndedContactEventArgs>, global::UIKit.UICollisionEndedContactEventArgs>(x => _data.EndedContact += x, x => _data.EndedContact -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIControl"/> class as observables.
    /// </summary>
    public class UIControlEvents
    {
        private readonly global::UIKit.UIControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIControlEvents(global::UIKit.UIControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.AllEditingEvents"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllEditingEvents => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllEditingEvents += x, x => _data.AllEditingEvents -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.AllEvents"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllEvents => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllEvents += x, x => _data.AllEvents -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.AllTouchEvents"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllTouchEvents => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllTouchEvents += x, x => _data.AllTouchEvents -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingChanged += x, x => _data.EditingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingDidBegin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingDidBegin => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingDidBegin += x, x => _data.EditingDidBegin -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingDidEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingDidEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingDidEnd += x, x => _data.EditingDidEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingDidEndOnExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingDidEndOnExit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingDidEndOnExit += x, x => _data.EditingDidEndOnExit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.PrimaryActionTriggered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PrimaryActionTriggered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PrimaryActionTriggered += x, x => _data.PrimaryActionTriggered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchCancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchCancel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchCancel += x, x => _data.TouchCancel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDown += x, x => _data.TouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDownRepeat"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDownRepeat => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDownRepeat += x, x => _data.TouchDownRepeat -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragEnter += x, x => _data.TouchDragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragExit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragExit += x, x => _data.TouchDragExit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragInside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragInside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragInside += x, x => _data.TouchDragInside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragOutside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragOutside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragOutside += x, x => _data.TouchDragOutside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchUpInside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchUpInside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchUpInside += x, x => _data.TouchUpInside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchUpOutside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchUpOutside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchUpOutside += x, x => _data.TouchUpOutside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIDocumentInteractionController"/> class as observables.
    /// </summary>
    public class UIDocumentInteractionControllerEvents
    {
        private readonly global::UIKit.UIDocumentInteractionController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIDocumentInteractionController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIDocumentInteractionControllerEvents(global::UIKit.UIDocumentInteractionController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.DidDismissOpenInMenu"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDismissOpenInMenu => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDismissOpenInMenu += x, x => _data.DidDismissOpenInMenu -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.DidDismissOptionsMenu"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDismissOptionsMenu => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDismissOptionsMenu += x, x => _data.DidDismissOptionsMenu -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.DidEndPreview"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndPreview => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEndPreview += x, x => _data.DidEndPreview -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.DidEndSendingToApplication"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentSendingToApplicationEventArgs> DidEndSendingToApplication => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIDocumentSendingToApplicationEventArgs>, global::UIKit.UIDocumentSendingToApplicationEventArgs>(x => _data.DidEndSendingToApplication += x, x => _data.DidEndSendingToApplication -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.WillBeginPreview"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillBeginPreview => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillBeginPreview += x, x => _data.WillBeginPreview -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.WillBeginSendingToApplication"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentSendingToApplicationEventArgs> WillBeginSendingToApplication => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIDocumentSendingToApplicationEventArgs>, global::UIKit.UIDocumentSendingToApplicationEventArgs>(x => _data.WillBeginSendingToApplication += x, x => _data.WillBeginSendingToApplication -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.WillPresentOpenInMenu"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPresentOpenInMenu => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPresentOpenInMenu += x, x => _data.WillPresentOpenInMenu -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionController.WillPresentOptionsMenu"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPresentOptionsMenu => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPresentOptionsMenu += x, x => _data.WillPresentOptionsMenu -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIDocumentMenuViewController"/> class as observables.
    /// </summary>
    public class UIDocumentMenuViewControllerEvents
    {
        private readonly global::UIKit.UIDocumentMenuViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIDocumentMenuViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIDocumentMenuViewControllerEvents(global::UIKit.UIDocumentMenuViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentMenuViewController.DidPickDocumentPicker"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentMenuDocumentPickedEventArgs> DidPickDocumentPicker => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIDocumentMenuDocumentPickedEventArgs>, global::UIKit.UIDocumentMenuDocumentPickedEventArgs>(x => _data.DidPickDocumentPicker += x, x => _data.DidPickDocumentPicker -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentMenuViewController.WasCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WasCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WasCancelled += x, x => _data.WasCancelled -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIDocumentPickerViewController"/> class as observables.
    /// </summary>
    public class UIDocumentPickerViewControllerEvents
    {
        private readonly global::UIKit.UIDocumentPickerViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIDocumentPickerViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIDocumentPickerViewControllerEvents(global::UIKit.UIDocumentPickerViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentPickerViewController.DidPickDocument"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentPickedEventArgs> DidPickDocument => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIDocumentPickedEventArgs>, global::UIKit.UIDocumentPickedEventArgs>(x => _data.DidPickDocument += x, x => _data.DidPickDocument -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentPickerViewController.DidPickDocumentAtUrls"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentPickedAtUrlsEventArgs> DidPickDocumentAtUrls => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIDocumentPickedAtUrlsEventArgs>, global::UIKit.UIDocumentPickedAtUrlsEventArgs>(x => _data.DidPickDocumentAtUrls += x, x => _data.DidPickDocumentAtUrls -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentPickerViewController.WasCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WasCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WasCancelled += x, x => _data.WasCancelled -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIImagePickerController"/> class as observables.
    /// </summary>
    public class UIImagePickerControllerEvents
    {
        private readonly global::UIKit.UIImagePickerController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIImagePickerController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIImagePickerControllerEvents(global::UIKit.UIImagePickerController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIImagePickerController.Canceled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Canceled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Canceled += x, x => _data.Canceled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIImagePickerController.FinishedPickingImage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIImagePickerImagePickedEventArgs> FinishedPickingImage => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIImagePickerImagePickedEventArgs>, global::UIKit.UIImagePickerImagePickedEventArgs>(x => _data.FinishedPickingImage += x, x => _data.FinishedPickingImage -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIImagePickerController.FinishedPickingMedia"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIImagePickerMediaPickedEventArgs> FinishedPickingMedia => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIImagePickerMediaPickedEventArgs>, global::UIKit.UIImagePickerMediaPickedEventArgs>(x => _data.FinishedPickingMedia += x, x => _data.FinishedPickingMedia -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIPageViewController"/> class as observables.
    /// </summary>
    public class UIPageViewControllerEvents
    {
        private readonly global::UIKit.UIPageViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIPageViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIPageViewControllerEvents(global::UIKit.UIPageViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewController.DidFinishAnimating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPageViewFinishedAnimationEventArgs> DidFinishAnimating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPageViewFinishedAnimationEventArgs>, global::UIKit.UIPageViewFinishedAnimationEventArgs>(x => _data.DidFinishAnimating += x, x => _data.DidFinishAnimating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewController.WillTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPageViewControllerTransitionEventArgs> WillTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPageViewControllerTransitionEventArgs>, global::UIKit.UIPageViewControllerTransitionEventArgs>(x => _data.WillTransition += x, x => _data.WillTransition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIPopoverController"/> class as observables.
    /// </summary>
    public class UIPopoverControllerEvents
    {
        private readonly global::UIKit.UIPopoverController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIPopoverController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIPopoverControllerEvents(global::UIKit.UIPopoverController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverController.DidDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDismiss += x, x => _data.DidDismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverController.WillReposition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPopoverControllerRepositionEventArgs> WillReposition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPopoverControllerRepositionEventArgs>, global::UIKit.UIPopoverControllerRepositionEventArgs>(x => _data.WillReposition += x, x => _data.WillReposition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIPopoverPresentationController"/> class as observables.
    /// </summary>
    public class UIPopoverPresentationControllerEvents
    {
        private readonly global::UIKit.UIPopoverPresentationController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIPopoverPresentationController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIPopoverPresentationControllerEvents(global::UIKit.UIPopoverPresentationController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverPresentationController.DidDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDismiss += x, x => _data.DidDismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverPresentationController.PrepareForPresentation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PrepareForPresentation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PrepareForPresentation += x, x => _data.PrepareForPresentation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverPresentationController.WillReposition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPopoverPresentationControllerRepositionEventArgs> WillReposition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPopoverPresentationControllerRepositionEventArgs>, global::UIKit.UIPopoverPresentationControllerRepositionEventArgs>(x => _data.WillReposition += x, x => _data.WillReposition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIPreviewInteraction"/> class as observables.
    /// </summary>
    public class UIPreviewInteractionEvents
    {
        private readonly global::UIKit.UIPreviewInteraction _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIPreviewInteraction"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIPreviewInteractionEvents(global::UIKit.UIPreviewInteraction data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPreviewInteraction.DidCancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidCancel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidCancel += x, x => _data.DidCancel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPreviewInteraction.DidUpdateCommit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSPreviewInteractionPreviewUpdateEventArgs> DidUpdateCommit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.NSPreviewInteractionPreviewUpdateEventArgs>, global::UIKit.NSPreviewInteractionPreviewUpdateEventArgs>(x => _data.DidUpdateCommit += x, x => _data.DidUpdateCommit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPreviewInteraction.DidUpdatePreviewTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSPreviewInteractionPreviewUpdateEventArgs> DidUpdatePreviewTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.NSPreviewInteractionPreviewUpdateEventArgs>, global::UIKit.NSPreviewInteractionPreviewUpdateEventArgs>(x => _data.DidUpdatePreviewTransition += x, x => _data.DidUpdatePreviewTransition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIPrintInteractionController"/> class as observables.
    /// </summary>
    public class UIPrintInteractionControllerEvents
    {
        private readonly global::UIKit.UIPrintInteractionController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIPrintInteractionController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIPrintInteractionControllerEvents(global::UIKit.UIPrintInteractionController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionController.DidDismissPrinterOptions"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDismissPrinterOptions => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDismissPrinterOptions += x, x => _data.DidDismissPrinterOptions -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionController.DidFinishJob"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinishJob => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinishJob += x, x => _data.DidFinishJob -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionController.DidPresentPrinterOptions"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidPresentPrinterOptions => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidPresentPrinterOptions += x, x => _data.DidPresentPrinterOptions -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionController.WillDismissPrinterOptions"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillDismissPrinterOptions => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillDismissPrinterOptions += x, x => _data.WillDismissPrinterOptions -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionController.WillPresentPrinterOptions"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPresentPrinterOptions => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPresentPrinterOptions += x, x => _data.WillPresentPrinterOptions -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionController.WillStartJob"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartJob => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartJob += x, x => _data.WillStartJob -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIScrollView"/> class as observables.
    /// </summary>
    public class UIScrollViewEvents
    {
        private readonly global::UIKit.UIScrollView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIScrollView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIScrollViewEvents(global::UIKit.UIScrollView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DecelerationEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DecelerationEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DecelerationEnded += x, x => _data.DecelerationEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DecelerationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DecelerationStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DecelerationStarted += x, x => _data.DecelerationStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DidChangeAdjustedContentInset"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeAdjustedContentInset => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeAdjustedContentInset += x, x => _data.DidChangeAdjustedContentInset -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DidZoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidZoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidZoom += x, x => _data.DidZoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DraggingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.DraggingEventArgs> DraggingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.DraggingEventArgs>, global::UIKit.DraggingEventArgs>(x => _data.DraggingEnded += x, x => _data.DraggingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DraggingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DraggingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DraggingStarted += x, x => _data.DraggingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ScrollAnimationEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollAnimationEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScrollAnimationEnded += x, x => _data.ScrollAnimationEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Scrolled += x, x => _data.Scrolled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ScrolledToTop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrolledToTop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScrolledToTop += x, x => _data.ScrolledToTop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.WillEndDragging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.WillEndDraggingEventArgs> WillEndDragging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.WillEndDraggingEventArgs>, global::UIKit.WillEndDraggingEventArgs>(x => _data.WillEndDragging += x, x => _data.WillEndDragging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ZoomingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.ZoomingEndedEventArgs> ZoomingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.ZoomingEndedEventArgs>, global::UIKit.ZoomingEndedEventArgs>(x => _data.ZoomingEnded += x, x => _data.ZoomingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ZoomingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollViewZoomingEventArgs> ZoomingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIScrollViewZoomingEventArgs>, global::UIKit.UIScrollViewZoomingEventArgs>(x => _data.ZoomingStarted += x, x => _data.ZoomingStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UISearchBar"/> class as observables.
    /// </summary>
    public class UISearchBarEvents
    {
        private readonly global::UIKit.UISearchBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UISearchBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UISearchBarEvents(global::UIKit.UISearchBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.BookmarkButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BookmarkButtonClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BookmarkButtonClicked += x, x => _data.BookmarkButtonClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.CancelButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CancelButtonClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CancelButtonClicked += x, x => _data.CancelButtonClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.ListButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ListButtonClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ListButtonClicked += x, x => _data.ListButtonClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.OnEditingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnEditingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OnEditingStarted += x, x => _data.OnEditingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.OnEditingStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnEditingStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OnEditingStopped += x, x => _data.OnEditingStopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.SearchButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchButtonClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchButtonClicked += x, x => _data.SearchButtonClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.SelectedScopeButtonIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBarButtonIndexEventArgs> SelectedScopeButtonIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISearchBarButtonIndexEventArgs>, global::UIKit.UISearchBarButtonIndexEventArgs>(x => _data.SelectedScopeButtonIndexChanged += x, x => _data.SelectedScopeButtonIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBarTextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISearchBarTextChangedEventArgs>, global::UIKit.UISearchBarTextChangedEventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UISplitViewController"/> class as observables.
    /// </summary>
    public class UISplitViewControllerEvents
    {
        private readonly global::UIKit.UISplitViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UISplitViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UISplitViewControllerEvents(global::UIKit.UISplitViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewController.WillChangeDisplayMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISplitViewControllerDisplayModeEventArgs> WillChangeDisplayMode => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISplitViewControllerDisplayModeEventArgs>, global::UIKit.UISplitViewControllerDisplayModeEventArgs>(x => _data.WillChangeDisplayMode += x, x => _data.WillChangeDisplayMode -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewController.WillHideViewController"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISplitViewHideEventArgs> WillHideViewController => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISplitViewHideEventArgs>, global::UIKit.UISplitViewHideEventArgs>(x => _data.WillHideViewController += x, x => _data.WillHideViewController -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewController.WillPresentViewController"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISplitViewPresentEventArgs> WillPresentViewController => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISplitViewPresentEventArgs>, global::UIKit.UISplitViewPresentEventArgs>(x => _data.WillPresentViewController += x, x => _data.WillPresentViewController -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewController.WillShowViewController"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISplitViewShowEventArgs> WillShowViewController => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISplitViewShowEventArgs>, global::UIKit.UISplitViewShowEventArgs>(x => _data.WillShowViewController += x, x => _data.WillShowViewController -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITabBar"/> class as observables.
    /// </summary>
    public class UITabBarEvents
    {
        private readonly global::UIKit.UITabBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITabBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITabBarEvents(global::UIKit.UITabBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBar.DidBeginCustomizingItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarItemsEventArgs> DidBeginCustomizingItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarItemsEventArgs>, global::UIKit.UITabBarItemsEventArgs>(x => _data.DidBeginCustomizingItems += x, x => _data.DidBeginCustomizingItems -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBar.DidEndCustomizingItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarFinalItemsEventArgs> DidEndCustomizingItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarFinalItemsEventArgs>, global::UIKit.UITabBarFinalItemsEventArgs>(x => _data.DidEndCustomizingItems += x, x => _data.DidEndCustomizingItems -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBar.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarItemEventArgs>, global::UIKit.UITabBarItemEventArgs>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBar.WillBeginCustomizingItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarItemsEventArgs> WillBeginCustomizingItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarItemsEventArgs>, global::UIKit.UITabBarItemsEventArgs>(x => _data.WillBeginCustomizingItems += x, x => _data.WillBeginCustomizingItems -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBar.WillEndCustomizingItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarFinalItemsEventArgs> WillEndCustomizingItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarFinalItemsEventArgs>, global::UIKit.UITabBarFinalItemsEventArgs>(x => _data.WillEndCustomizingItems += x, x => _data.WillEndCustomizingItems -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITabBarController"/> class as observables.
    /// </summary>
    public class UITabBarControllerEvents
    {
        private readonly global::UIKit.UITabBarController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITabBarController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITabBarControllerEvents(global::UIKit.UITabBarController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarController.FinishedCustomizingViewControllers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarCustomizeChangeEventArgs> FinishedCustomizingViewControllers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarCustomizeChangeEventArgs>, global::UIKit.UITabBarCustomizeChangeEventArgs>(x => _data.FinishedCustomizingViewControllers += x, x => _data.FinishedCustomizingViewControllers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarController.OnCustomizingViewControllers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarCustomizeEventArgs> OnCustomizingViewControllers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarCustomizeEventArgs>, global::UIKit.UITabBarCustomizeEventArgs>(x => _data.OnCustomizingViewControllers += x, x => _data.OnCustomizingViewControllers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarController.OnEndCustomizingViewControllers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarCustomizeChangeEventArgs> OnEndCustomizingViewControllers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarCustomizeChangeEventArgs>, global::UIKit.UITabBarCustomizeChangeEventArgs>(x => _data.OnEndCustomizingViewControllers += x, x => _data.OnEndCustomizingViewControllers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarController.ViewControllerSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarSelectionEventArgs> ViewControllerSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarSelectionEventArgs>, global::UIKit.UITabBarSelectionEventArgs>(x => _data.ViewControllerSelected += x, x => _data.ViewControllerSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITextField"/> class as observables.
    /// </summary>
    public class UITextFieldEvents
    {
        private readonly global::UIKit.UITextField _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITextField"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITextFieldEvents(global::UIKit.UITextField data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextField.Ended"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Ended => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Ended += x, x => _data.Ended -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextField.EndedWithReason"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextFieldEditingEndedEventArgs> EndedWithReason => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITextFieldEditingEndedEventArgs>, global::UIKit.UITextFieldEditingEndedEventArgs>(x => _data.EndedWithReason += x, x => _data.EndedWithReason -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextField.Started"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Started => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Started += x, x => _data.Started -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITextView"/> class as observables.
    /// </summary>
    public class UITextViewEvents
    {
        private readonly global::UIKit.UITextView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITextView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITextViewEvents(global::UIKit.UITextView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Changed += x, x => _data.Changed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.Ended"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Ended => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Ended += x, x => _data.Ended -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.Started"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Started => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Started += x, x => _data.Started -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIVideoEditorController"/> class as observables.
    /// </summary>
    public class UIVideoEditorControllerEvents
    {
        private readonly global::UIKit.UIVideoEditorController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIVideoEditorController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIVideoEditorControllerEvents(global::UIKit.UIVideoEditorController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIVideoEditorController.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIVideoEditorController.Saved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPathEventArgs> Saved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPathEventArgs>, global::UIKit.UIPathEventArgs>(x => _data.Saved += x, x => _data.Saved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIVideoEditorController.UserCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UserCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UserCancelled += x, x => _data.UserCancelled -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIWebView"/> class as observables.
    /// </summary>
    public class UIWebViewEvents
    {
        private readonly global::UIKit.UIWebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIWebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIWebViewEvents(global::UIKit.UIWebView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIWebView.LoadError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIWebErrorArgs> LoadError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIWebErrorArgs>, global::UIKit.UIWebErrorArgs>(x => _data.LoadError += x, x => _data.LoadError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIWebView.LoadFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LoadFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LoadFinished += x, x => _data.LoadFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIWebView.LoadStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LoadStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LoadStarted += x, x => _data.LoadStarted -= x).Select(x => x.EventArgs);
    }
}

namespace AudioToolbox
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "AudioToolbox"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.AudioInputBecameAvailable"/> event triggers.
        /// </summary>
        public static global::System.IObservable<bool> AudioSessionAudioInputBecameAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<bool>, bool>(eventHandler =>
        {
            void Handler(bool obj) => eventHandler(obj);
            return Handler;
        }

        , x => global::AudioToolbox.AudioSession.AudioInputBecameAvailable += x, x => global::AudioToolbox.AudioSession.AudioInputBecameAvailable -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.AudioRouteChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::AudioToolbox.AudioSessionRouteChangeEventArgs> AudioSessionAudioRouteChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AudioToolbox.AudioSessionRouteChangeEventArgs>, global::AudioToolbox.AudioSessionRouteChangeEventArgs>(x => global::AudioToolbox.AudioSession.AudioRouteChanged += x, x => global::AudioToolbox.AudioSession.AudioRouteChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.CurrentHardwareOutputVolumeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<float> AudioSessionCurrentHardwareOutputVolumeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<float>, float>(eventHandler =>
        {
            void Handler(float obj) => eventHandler(obj);
            return Handler;
        }

        , x => global::AudioToolbox.AudioSession.CurrentHardwareOutputVolumeChanged += x, x => global::AudioToolbox.AudioSession.CurrentHardwareOutputVolumeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.InputGainBecameAvailable"/> event triggers.
        /// </summary>
        public static global::System.IObservable<bool> AudioSessionInputGainBecameAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<bool>, bool>(eventHandler =>
        {
            void Handler(bool obj) => eventHandler(obj);
            return Handler;
        }

        , x => global::AudioToolbox.AudioSession.InputGainBecameAvailable += x, x => global::AudioToolbox.AudioSession.InputGainBecameAvailable -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.InputGainScalarChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<float> AudioSessionInputGainScalarChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<float>, float>(eventHandler =>
        {
            void Handler(float obj) => eventHandler(obj);
            return Handler;
        }

        , x => global::AudioToolbox.AudioSession.InputGainScalarChanged += x, x => global::AudioToolbox.AudioSession.InputGainScalarChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.InputSourcesChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::AudioToolbox.AccessoryInfo[]> AudioSessionInputSourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::AudioToolbox.AccessoryInfo[]>, global::AudioToolbox.AccessoryInfo[]>(eventHandler =>
        {
            void Handler(global::AudioToolbox.AccessoryInfo[] obj) => eventHandler(obj);
            return Handler;
        }

        , x => global::AudioToolbox.AudioSession.InputSourcesChanged += x, x => global::AudioToolbox.AudioSession.InputSourcesChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.Interrupted"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> AudioSessionInterrupted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::AudioToolbox.AudioSession.Interrupted += x, x => global::AudioToolbox.AudioSession.Interrupted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.OutputDestinationsChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::AudioToolbox.AccessoryInfo[]> AudioSessionOutputDestinationsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::AudioToolbox.AccessoryInfo[]>, global::AudioToolbox.AccessoryInfo[]>(eventHandler =>
        {
            void Handler(global::AudioToolbox.AccessoryInfo[] obj) => eventHandler(obj);
            return Handler;
        }

        , x => global::AudioToolbox.AudioSession.OutputDestinationsChanged += x, x => global::AudioToolbox.AudioSession.OutputDestinationsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.Resumed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> AudioSessionResumed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::AudioToolbox.AudioSession.Resumed += x, x => global::AudioToolbox.AudioSession.Resumed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.AudioSession.ServerDied"/> event triggers.
        /// </summary>
        public static global::System.IObservable<bool> AudioSessionServerDied => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<bool>, bool>(eventHandler =>
        {
            void Handler(bool obj) => eventHandler(obj);
            return Handler;
        }

        , x => global::AudioToolbox.AudioSession.ServerDied += x, x => global::AudioToolbox.AudioSession.ServerDied -= x);
    }
}

namespace ObjCRuntime
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "ObjCRuntime"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ObjCRuntime.Runtime.MarshalManagedException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalManagedExceptionEventArgs> RuntimeMarshalManagedException => global::System.Reactive.Linq.Observable.FromEventPattern<global::ObjCRuntime.MarshalManagedExceptionHandler, global::ObjCRuntime.MarshalManagedExceptionEventArgs>(x => global::ObjCRuntime.Runtime.MarshalManagedException += x, x => global::ObjCRuntime.Runtime.MarshalManagedException -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ObjCRuntime.Runtime.MarshalObjectiveCException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs> RuntimeMarshalObjectiveCException => global::System.Reactive.Linq.Observable.FromEventPattern<global::ObjCRuntime.MarshalObjectiveCExceptionHandler, global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs>(x => global::ObjCRuntime.Runtime.MarshalObjectiveCException += x, x => global::ObjCRuntime.Runtime.MarshalObjectiveCException -= x).Select(x => x.EventArgs);
    }
}

namespace UIKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "UIKit"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIView.AnimationWillEnd"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Reactive.Unit> UIViewAnimationWillEnd => global::System.Reactive.Linq.Observable.FromEvent(x => global::UIKit.UIView.AnimationWillEnd += x, x => global::UIKit.UIView.AnimationWillEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIView.AnimationWillStart"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Reactive.Unit> UIViewAnimationWillStart => global::System.Reactive.Linq.Observable.FromEvent(x => global::UIKit.UIView.AnimationWillStart += x, x => global::UIKit.UIView.AnimationWillStart -= x);
    }
}

namespace AddressBookUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AddressBookUI.ABNewPersonViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class ABNewPersonViewControllerDelegateRx : global::AddressBookUI.ABNewPersonViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AddressBookUI.ABNewPersonViewController controller, global::AddressBook.ABPerson person)> _didCompleteWithNewPerson = new Pharmacist.Common.SingleAwaitSubject<(global::AddressBookUI.ABNewPersonViewController controller, global::AddressBook.ABPerson person)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABNewPersonViewControllerDelegate.DidCompleteWithNewPerson"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AddressBookUI.ABNewPersonViewController controller, global::AddressBook.ABPerson person)> DidCompleteWithNewPersonObs => _didCompleteWithNewPerson;
        /// <inheritdoc/>
        public override void DidCompleteWithNewPerson(global::AddressBookUI.ABNewPersonViewController controller, global::AddressBook.ABPerson person) => _didCompleteWithNewPerson.OnNext((controller, person));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AddressBookUI.ABPeoplePickerNavigationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class ABPeoplePickerNavigationControllerDelegateRx : global::AddressBookUI.ABPeoplePickerNavigationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AddressBookUI.ABPeoplePickerNavigationController> _cancelled = new Pharmacist.Common.SingleAwaitSubject<global::AddressBookUI.ABPeoplePickerNavigationController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AddressBookUI.ABPeoplePickerNavigationController peoplePicker, global::AddressBook.ABPerson selectedPerson, int propertyId, int identifier)> _didSelectPerson = new Pharmacist.Common.SingleAwaitSubject<(global::AddressBookUI.ABPeoplePickerNavigationController peoplePicker, global::AddressBook.ABPerson selectedPerson, int propertyId, int identifier)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPeoplePickerNavigationControllerDelegate.Cancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AddressBookUI.ABPeoplePickerNavigationController> CancelledObs => _cancelled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABPeoplePickerNavigationControllerDelegate.DidSelectPerson"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AddressBookUI.ABPeoplePickerNavigationController peoplePicker, global::AddressBook.ABPerson selectedPerson, int propertyId, int identifier)> DidSelectPersonObs => _didSelectPerson;
        /// <inheritdoc/>
        public override void Cancelled(global::AddressBookUI.ABPeoplePickerNavigationController peoplePicker) => _cancelled.OnNext(peoplePicker);
        /// <inheritdoc/>
        public override void DidSelectPerson(global::AddressBookUI.ABPeoplePickerNavigationController peoplePicker, global::AddressBook.ABPerson selectedPerson, int propertyId, int identifier) => _didSelectPerson.OnNext((peoplePicker, selectedPerson, propertyId, identifier));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AddressBookUI.ABUnknownPersonViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class ABUnknownPersonViewControllerDelegateRx : global::AddressBookUI.ABUnknownPersonViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AddressBookUI.ABUnknownPersonViewController unknownPersonView, global::AddressBook.ABPerson person)> _didResolveToPerson = new Pharmacist.Common.SingleAwaitSubject<(global::AddressBookUI.ABUnknownPersonViewController unknownPersonView, global::AddressBook.ABPerson person)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AddressBookUI.ABUnknownPersonViewControllerDelegate.DidResolveToPerson"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AddressBookUI.ABUnknownPersonViewController unknownPersonView, global::AddressBook.ABPerson person)> DidResolveToPersonObs => _didResolveToPerson;
        /// <inheritdoc/>
        public override void DidResolveToPerson(global::AddressBookUI.ABUnknownPersonViewController unknownPersonView, global::AddressBook.ABPerson person) => _didResolveToPerson.OnNext((unknownPersonView, person));
    }
}

namespace ARKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ARKit.ARSCNViewDelegate"/> into Observables.
    /// </summary>
    public partial class ARSCNViewDelegateRx : global::ARKit.ARSCNViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)> _cameraDidChangeTrackingState = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> _didAddNode = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didApplyAnimations = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)> _didOutputAudioSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> _didRemoveNode = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _didRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> _didUpdateNode = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession> _interruptionEnded = new Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _update = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession> _wasInterrupted = new Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _willRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> _willUpdateNode = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.CameraDidChangeTrackingState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)> CameraDidChangeTrackingStateObs => _cameraDidChangeTrackingState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidAddNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> DidAddNodeObs => _didAddNode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidApplyAnimations"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidApplyAnimationsObs => _didApplyAnimations;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidApplyConstraints"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidOutputAudioSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)> DidOutputAudioSampleBufferObs => _didOutputAudioSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidRemoveNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> DidRemoveNodeObs => _didRemoveNode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> DidRenderSceneObs => _didRenderScene;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidSimulatePhysics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.DidUpdateNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> DidUpdateNodeObs => _didUpdateNode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.InterruptionEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ARKit.ARSession> InterruptionEndedObs => _interruptionEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> UpdateObs => _update;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.WasInterrupted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ARKit.ARSession> WasInterruptedObs => _wasInterrupted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.WillRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> WillRenderSceneObs => _willRenderScene;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSCNViewDelegate.WillUpdateNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor)> WillUpdateNodeObs => _willUpdateNode;
        /// <inheritdoc/>
        public override void CameraDidChangeTrackingState(global::ARKit.ARSession session, global::ARKit.ARCamera camera) => _cameraDidChangeTrackingState.OnNext((session, camera));
        /// <inheritdoc/>
        public override void DidAddNode(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor) => _didAddNode.OnNext((renderer, node, anchor));
        /// <inheritdoc/>
        public override void DidApplyAnimations(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didApplyAnimations.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SceneKit.ISCNSceneRenderer renderer, double atTime) => _didApplyConstraints.OnNext((renderer, atTime));
        /// <inheritdoc/>
        public override void DidFail(global::ARKit.ARSession session, global::Foundation.NSError error) => _didFail.OnNext((session, error));
        /// <inheritdoc/>
        public override void DidOutputAudioSampleBuffer(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer) => _didOutputAudioSampleBuffer.OnNext((session, audioSampleBuffer));
        /// <inheritdoc/>
        public override void DidRemoveNode(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor) => _didRemoveNode.OnNext((renderer, node, anchor));
        /// <inheritdoc/>
        public override void DidRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _didRenderScene.OnNext((renderer, scene, timeInSeconds));
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didSimulatePhysics.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void DidUpdateNode(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor) => _didUpdateNode.OnNext((renderer, node, anchor));
        /// <inheritdoc/>
        public override void InterruptionEnded(global::ARKit.ARSession session) => _interruptionEnded.OnNext(session);
        /// <inheritdoc/>
        public override void Update(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _update.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void WasInterrupted(global::ARKit.ARSession session) => _wasInterrupted.OnNext(session);
        /// <inheritdoc/>
        public override void WillRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _willRenderScene.OnNext((renderer, scene, timeInSeconds));
        /// <inheritdoc/>
        public override void WillUpdateNode(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNNode node, global::ARKit.ARAnchor anchor) => _willUpdateNode.OnNext((renderer, node, anchor));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ARKit.ARSessionDelegate"/> into Observables.
    /// </summary>
    public partial class ARSessionDelegateRx : global::ARKit.ARSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)> _cameraDidChangeTrackingState = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)> _didAddAnchors = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)> _didOutputAudioSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)> _didRemoveAnchors = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)> _didUpdateAnchors = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARFrame frame)> _didUpdateFrame = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARFrame frame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession> _interruptionEnded = new Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession> _wasInterrupted = new Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.CameraDidChangeTrackingState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)> CameraDidChangeTrackingStateObs => _cameraDidChangeTrackingState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.DidAddAnchors"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)> DidAddAnchorsObs => _didAddAnchors;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.DidOutputAudioSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)> DidOutputAudioSampleBufferObs => _didOutputAudioSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.DidRemoveAnchors"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)> DidRemoveAnchorsObs => _didRemoveAnchors;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.DidUpdateAnchors"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors)> DidUpdateAnchorsObs => _didUpdateAnchors;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.DidUpdateFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::ARKit.ARFrame frame)> DidUpdateFrameObs => _didUpdateFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.InterruptionEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ARKit.ARSession> InterruptionEndedObs => _interruptionEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSessionDelegate.WasInterrupted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ARKit.ARSession> WasInterruptedObs => _wasInterrupted;
        /// <inheritdoc/>
        public override void CameraDidChangeTrackingState(global::ARKit.ARSession session, global::ARKit.ARCamera camera) => _cameraDidChangeTrackingState.OnNext((session, camera));
        /// <inheritdoc/>
        public override void DidAddAnchors(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors) => _didAddAnchors.OnNext((session, anchors));
        /// <inheritdoc/>
        public override void DidFail(global::ARKit.ARSession session, global::Foundation.NSError error) => _didFail.OnNext((session, error));
        /// <inheritdoc/>
        public override void DidOutputAudioSampleBuffer(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer) => _didOutputAudioSampleBuffer.OnNext((session, audioSampleBuffer));
        /// <inheritdoc/>
        public override void DidRemoveAnchors(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors) => _didRemoveAnchors.OnNext((session, anchors));
        /// <inheritdoc/>
        public override void DidUpdateAnchors(global::ARKit.ARSession session, global::ARKit.ARAnchor[] anchors) => _didUpdateAnchors.OnNext((session, anchors));
        /// <inheritdoc/>
        public override void DidUpdateFrame(global::ARKit.ARSession session, global::ARKit.ARFrame frame) => _didUpdateFrame.OnNext((session, frame));
        /// <inheritdoc/>
        public override void InterruptionEnded(global::ARKit.ARSession session) => _interruptionEnded.OnNext(session);
        /// <inheritdoc/>
        public override void WasInterrupted(global::ARKit.ARSession session) => _wasInterrupted.OnNext(session);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ARKit.ARSKViewDelegate"/> into Observables.
    /// </summary>
    public partial class ARSKViewDelegateRx : global::ARKit.ARSKViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)> _cameraDidChangeTrackingState = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> _didAddNode = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)> _didOutputAudioSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> _didRemoveNode = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> _didUpdateNode = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession> _interruptionEnded = new Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession> _wasInterrupted = new Pharmacist.Common.SingleAwaitSubject<global::ARKit.ARSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> _willUpdateNode = new Pharmacist.Common.SingleAwaitSubject<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.CameraDidChangeTrackingState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::ARKit.ARCamera camera)> CameraDidChangeTrackingStateObs => _cameraDidChangeTrackingState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.DidAddNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> DidAddNodeObs => _didAddNode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.DidOutputAudioSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer)> DidOutputAudioSampleBufferObs => _didOutputAudioSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.DidRemoveNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> DidRemoveNodeObs => _didRemoveNode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.DidUpdateNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> DidUpdateNodeObs => _didUpdateNode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.InterruptionEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ARKit.ARSession> InterruptionEndedObs => _interruptionEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.WasInterrupted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ARKit.ARSession> WasInterruptedObs => _wasInterrupted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ARKit.ARSKViewDelegate.WillUpdateNode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor)> WillUpdateNodeObs => _willUpdateNode;
        /// <inheritdoc/>
        public override void CameraDidChangeTrackingState(global::ARKit.ARSession session, global::ARKit.ARCamera camera) => _cameraDidChangeTrackingState.OnNext((session, camera));
        /// <inheritdoc/>
        public override void DidAddNode(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor) => _didAddNode.OnNext((view, node, anchor));
        /// <inheritdoc/>
        public override void DidFail(global::ARKit.ARSession session, global::Foundation.NSError error) => _didFail.OnNext((session, error));
        /// <inheritdoc/>
        public override void DidOutputAudioSampleBuffer(global::ARKit.ARSession session, global::CoreMedia.CMSampleBuffer audioSampleBuffer) => _didOutputAudioSampleBuffer.OnNext((session, audioSampleBuffer));
        /// <inheritdoc/>
        public override void DidRemoveNode(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor) => _didRemoveNode.OnNext((view, node, anchor));
        /// <inheritdoc/>
        public override void DidUpdateNode(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor) => _didUpdateNode.OnNext((view, node, anchor));
        /// <inheritdoc/>
        public override void InterruptionEnded(global::ARKit.ARSession session) => _interruptionEnded.OnNext(session);
        /// <inheritdoc/>
        public override void WasInterrupted(global::ARKit.ARSession session) => _wasInterrupted.OnNext(session);
        /// <inheritdoc/>
        public override void WillUpdateNode(global::ARKit.ARSKView view, global::SpriteKit.SKNode node, global::ARKit.ARAnchor anchor) => _willUpdateNode.OnNext((view, node, anchor));
    }
}

namespace AVFoundation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAssetDownloadDelegate"/> into Observables.
    /// </summary>
    public partial class AVAssetDownloadDelegateRx : global::AVFoundation.AVAssetDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::AVFoundation.AVMediaSelection mediaSelection)> _didCompleteForMediaSelection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::AVFoundation.AVMediaSelection mediaSelection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> _didCompleteWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> _didFinishCollectingMetrics = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location)> _didFinishDownloadingToUrl = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad, global::AVFoundation.AVMediaSelection mediaSelection)> _didLoadTimeRange = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad, global::AVFoundation.AVMediaSelection mediaSelection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection)> _didResolveMediaSelection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> _didSendBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> _needNewBodyStream = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> _taskIsWaitingForConnectivity = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> _willBeginDelayedRequest = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::Foundation.NSUrl location)> _willDownloadToUrl = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::Foundation.NSUrl location)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> _willPerformHttpRedirection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidCompleteForMediaSelection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::AVFoundation.AVMediaSelection mediaSelection)> DidCompleteForMediaSelectionObs => _didCompleteForMediaSelection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidCompleteWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> DidCompleteWithErrorObs => _didCompleteWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidFinishCollectingMetrics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> DidFinishCollectingMetricsObs => _didFinishCollectingMetrics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidFinishDownloadingToUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location)> DidFinishDownloadingToUrlObs => _didFinishDownloadingToUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidLoadTimeRange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad, global::AVFoundation.AVMediaSelection mediaSelection)> DidLoadTimeRangeObs => _didLoadTimeRange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidResolveMediaSelection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection)> DidResolveMediaSelectionObs => _didResolveMediaSelection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidSendBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> DidSendBodyDataObs => _didSendBodyData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.NeedNewBodyStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> NeedNewBodyStreamObs => _needNewBodyStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.TaskIsWaitingForConnectivity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> TaskIsWaitingForConnectivityObs => _taskIsWaitingForConnectivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.WillBeginDelayedRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> WillBeginDelayedRequestObs => _willBeginDelayedRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.WillDownloadToUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::Foundation.NSUrl location)> WillDownloadToUrlObs => _willDownloadToUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.WillPerformHttpRedirection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> WillPerformHttpRedirectionObs => _willPerformHttpRedirection;
        /// <inheritdoc/>
        public override void DidCompleteForMediaSelection(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::AVFoundation.AVMediaSelection mediaSelection) => _didCompleteForMediaSelection.OnNext((session, aggregateAssetDownloadTask, mediaSelection));
        /// <inheritdoc/>
        public override void DidCompleteWithError(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error) => _didCompleteWithError.OnNext((session, task, error));
        /// <inheritdoc/>
        public override void DidFinishCollectingMetrics(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics) => _didFinishCollectingMetrics.OnNext((session, task, metrics));
        /// <inheritdoc/>
        public override void DidFinishDownloadingToUrl(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location) => _didFinishDownloadingToUrl.OnNext((session, assetDownloadTask, location));
        /// <inheritdoc/>
        public override void DidLoadTimeRange(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad, global::AVFoundation.AVMediaSelection mediaSelection) => _didLoadTimeRange.OnNext((session, aggregateAssetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad, mediaSelection));
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, task, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidResolveMediaSelection(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection) => _didResolveMediaSelection.OnNext((session, assetDownloadTask, resolvedMediaSelection));
        /// <inheritdoc/>
        public override void DidSendBodyData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend) => _didSendBodyData.OnNext((session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend));
        /// <inheritdoc/>
        public override void NeedNewBodyStream(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler) => _needNewBodyStream.OnNext((session, task, completionHandler));
        /// <inheritdoc/>
        public override void TaskIsWaitingForConnectivity(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task) => _taskIsWaitingForConnectivity.OnNext((session, task));
        /// <inheritdoc/>
        public override void WillBeginDelayedRequest(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler) => _willBeginDelayedRequest.OnNext((session, task, request, completionHandler));
        /// <inheritdoc/>
        public override void WillDownloadToUrl(global::Foundation.NSUrlSession session, global::AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, global::Foundation.NSUrl location) => _willDownloadToUrl.OnNext((session, aggregateAssetDownloadTask, location));
        /// <inheritdoc/>
        public override void WillPerformHttpRedirection(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler) => _willPerformHttpRedirection.OnNext((session, task, response, newRequest, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAssetResourceLoaderDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVAssetResourceLoaderDelegateRx : global::AVFoundation.AVAssetResourceLoaderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)> _didCancelAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)> _didCancelLoadingRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetResourceLoaderDelegate.DidCancelAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)> DidCancelAuthenticationChallengeObs => _didCancelAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetResourceLoaderDelegate.DidCancelLoadingRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)> DidCancelLoadingRequestObs => _didCancelLoadingRequest;
        /// <inheritdoc/>
        public override void DidCancelAuthenticationChallenge(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge) => _didCancelAuthenticationChallenge.OnNext((resourceLoader, authenticationChallenge));
        /// <inheritdoc/>
        public override void DidCancelLoadingRequest(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest) => _didCancelLoadingRequest.OnNext((resourceLoader, loadingRequest));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioPlayerDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioPlayerDelegateRx : global::AVFoundation.AVAudioPlayerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioPlayer> _beginInterruption = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioPlayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> _decoderError = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> _endInterruption = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)> _finishedPlaying = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.BeginInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVAudioPlayer> BeginInterruptionObs => _beginInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.DecoderError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> DecoderErrorObs => _decoderError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.EndInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> EndInterruptionObs => _endInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.FinishedPlaying"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, bool flag)> FinishedPlayingObs => _finishedPlaying;
        /// <inheritdoc/>
        public override void BeginInterruption(global::AVFoundation.AVAudioPlayer player) => _beginInterruption.OnNext(player);
        /// <inheritdoc/>
        public override void DecoderError(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error) => _decoderError.OnNext((player, error));
        /// <inheritdoc/>
        public override void EndInterruption(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags) => _endInterruption.OnNext((player, flags));
        /// <inheritdoc/>
        public override void FinishedPlaying(global::AVFoundation.AVAudioPlayer player, bool flag) => _finishedPlaying.OnNext((player, flag));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioRecorderDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioRecorderDelegateRx : global::AVFoundation.AVAudioRecorderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioRecorder> _beginInterruption = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioRecorder>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)> _encoderError = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> _endInterruption = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, bool flag)> _finishedRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, bool flag)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorderDelegate.BeginInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVAudioRecorder> BeginInterruptionObs => _beginInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorderDelegate.EncoderError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)> EncoderErrorObs => _encoderError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorderDelegate.EndInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> EndInterruptionObs => _endInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorderDelegate.FinishedRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, bool flag)> FinishedRecordingObs => _finishedRecording;
        /// <inheritdoc/>
        public override void BeginInterruption(global::AVFoundation.AVAudioRecorder recorder) => _beginInterruption.OnNext(recorder);
        /// <inheritdoc/>
        public override void EncoderError(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error) => _encoderError.OnNext((recorder, error));
        /// <inheritdoc/>
        public override void EndInterruption(global::AVFoundation.AVAudioRecorder recorder, global::AVFoundation.AVAudioSessionInterruptionFlags flags) => _endInterruption.OnNext((recorder, flags));
        /// <inheritdoc/>
        public override void FinishedRecording(global::AVFoundation.AVAudioRecorder recorder, bool flag) => _finishedRecording.OnNext((recorder, flag));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioSessionDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioSessionDelegateRx : global::AVFoundation.AVAudioSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _beginInterruption = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioSessionInterruptionFlags> _endInterruption = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioSessionInterruptionFlags>();
        private readonly Pharmacist.Common.SingleAwaitSubject<bool> _inputIsAvailableChanged = new Pharmacist.Common.SingleAwaitSubject<bool>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSessionDelegate.BeginInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> BeginInterruptionObs => _beginInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSessionDelegate.EndInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVAudioSessionInterruptionFlags> EndInterruptionObs => _endInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioSessionDelegate.InputIsAvailableChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<bool> InputIsAvailableChangedObs => _inputIsAvailableChanged;
        /// <inheritdoc/>
        public override void BeginInterruption() => _beginInterruption.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void EndInterruption(global::AVFoundation.AVAudioSessionInterruptionFlags flags) => _endInterruption.OnNext(flags);
        /// <inheritdoc/>
        public override void InputIsAvailableChanged(bool isInputAvailable) => _inputIsAvailableChanged.OnNext(isInputAvailable);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate"/> into Observables.
    /// </summary>
    public partial class AVCaptureAudioDataOutputSampleBufferDelegateRx : global::AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didDropSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didOutputSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidDropSampleBuffer"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("This member only exists for 'AVCaptureVideoDataOutputSampleBufferDelegate'.", false)]
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidDropSampleBufferObs => _didDropSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidOutputSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidOutputSampleBufferObs => _didOutputSampleBuffer;
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("This member only exists for 'AVCaptureVideoDataOutputSampleBufferDelegate'.", false)]
        public override void DidDropSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didDropSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
        /// <inheritdoc/>
        public override void DidOutputSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didOutputSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureDataOutputSynchronizerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVCaptureDataOutputSynchronizerDelegateRx : global::AVFoundation.AVCaptureDataOutputSynchronizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection)> _didOutputSynchronizedDataCollection = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureDataOutputSynchronizerDelegate.DidOutputSynchronizedDataCollection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection)> DidOutputSynchronizedDataCollectionObs => _didOutputSynchronizedDataCollection;
        /// <inheritdoc/>
        public override void DidOutputSynchronizedDataCollection(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection) => _didOutputSynchronizedDataCollection.OnNext((synchronizer, synchronizedDataCollection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureDepthDataOutputDelegate"/> into Observables.
    /// </summary>
    public partial class AVCaptureDepthDataOutputDelegateRx : global::AVFoundation.AVCaptureDepthDataOutputDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection, global::AVFoundation.AVCaptureOutputDataDroppedReason reason)> _didDropDepthData = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection, global::AVFoundation.AVCaptureOutputDataDroppedReason reason)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection)> _didOutputDepthData = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureDepthDataOutputDelegate.DidDropDepthData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection, global::AVFoundation.AVCaptureOutputDataDroppedReason reason)> DidDropDepthDataObs => _didDropDepthData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureDepthDataOutputDelegate.DidOutputDepthData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection)> DidOutputDepthDataObs => _didOutputDepthData;
        /// <inheritdoc/>
        public override void DidDropDepthData(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection, global::AVFoundation.AVCaptureOutputDataDroppedReason reason) => _didDropDepthData.OnNext((output, depthData, timestamp, connection, reason));
        /// <inheritdoc/>
        public override void DidOutputDepthData(global::AVFoundation.AVCaptureDepthDataOutput output, global::AVFoundation.AVDepthData depthData, global::CoreMedia.CMTime timestamp, global::AVFoundation.AVCaptureConnection connection) => _didOutputDepthData.OnNext((output, depthData, timestamp, connection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureFileOutputRecordingDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVCaptureFileOutputRecordingDelegateRx : global::AVFoundation.AVCaptureFileOutputRecordingDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections)> _didStartRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error)> _finishedRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputRecordingDelegate.DidStartRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections)> DidStartRecordingObs => _didStartRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputRecordingDelegate.FinishedRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error)> FinishedRecordingObs => _finishedRecording;
        /// <inheritdoc/>
        public override void DidStartRecording(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections) => _didStartRecording.OnNext((captureOutput, outputFileUrl, connections));
        /// <inheritdoc/>
        public override void FinishedRecording(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error) => _finishedRecording.OnNext((captureOutput, outputFileUrl, connections, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureMetadataOutputObjectsDelegate"/> into Observables.
    /// </summary>
    public partial class AVCaptureMetadataOutputObjectsDelegateRx : global::AVFoundation.AVCaptureMetadataOutputObjectsDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureMetadataOutput captureOutput, global::AVFoundation.AVMetadataObject[] metadataObjects, global::AVFoundation.AVCaptureConnection connection)> _didOutputMetadataObjects = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureMetadataOutput captureOutput, global::AVFoundation.AVMetadataObject[] metadataObjects, global::AVFoundation.AVCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureMetadataOutputObjectsDelegate.DidOutputMetadataObjects"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureMetadataOutput captureOutput, global::AVFoundation.AVMetadataObject[] metadataObjects, global::AVFoundation.AVCaptureConnection connection)> DidOutputMetadataObjectsObs => _didOutputMetadataObjects;
        /// <inheritdoc/>
        public override void DidOutputMetadataObjects(global::AVFoundation.AVCaptureMetadataOutput captureOutput, global::AVFoundation.AVMetadataObject[] metadataObjects, global::AVFoundation.AVCaptureConnection connection) => _didOutputMetadataObjects.OnNext((captureOutput, metadataObjects, connection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCapturePhotoCaptureDelegate"/> into Observables.
    /// </summary>
    public partial class AVCapturePhotoCaptureDelegateRx : global::AVFoundation.AVCapturePhotoCaptureDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> _didCapturePhoto = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error)> _didFinishCapture = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::CoreMedia.CMTime duration, global::CoreMedia.CMTime photoDisplayTime, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error)> _didFinishProcessingLivePhotoMovie = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::CoreMedia.CMTime duration, global::CoreMedia.CMTime photoDisplayTime, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer photoSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error)> _didFinishProcessingPhoto = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer photoSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer rawSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error)> _didFinishProcessingRawPhoto = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer rawSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> _didFinishRecordingLivePhotoMovie = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> _willBeginCapture = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> _willCapturePhoto = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.DidCapturePhoto"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> DidCapturePhotoObs => _didCapturePhoto;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishCapture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error)> DidFinishCaptureObs => _didFinishCapture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishProcessingLivePhotoMovie"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::CoreMedia.CMTime duration, global::CoreMedia.CMTime photoDisplayTime, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error)> DidFinishProcessingLivePhotoMovieObs => _didFinishProcessingLivePhotoMovie;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishProcessingPhoto"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer photoSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error)> DidFinishProcessingPhotoObs => _didFinishProcessingPhoto;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishProcessingRawPhoto"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer rawSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error)> DidFinishProcessingRawPhotoObs => _didFinishProcessingRawPhoto;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishRecordingLivePhotoMovie"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> DidFinishRecordingLivePhotoMovieObs => _didFinishRecordingLivePhotoMovie;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.WillBeginCapture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> WillBeginCaptureObs => _willBeginCapture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCapturePhotoCaptureDelegate.WillCapturePhoto"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings)> WillCapturePhotoObs => _willCapturePhoto;
        /// <inheritdoc/>
        public override void DidCapturePhoto(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings) => _didCapturePhoto.OnNext((captureOutput, resolvedSettings));
        /// <inheritdoc/>
        public override void DidFinishCapture(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error) => _didFinishCapture.OnNext((captureOutput, resolvedSettings, error));
        /// <inheritdoc/>
        public override void DidFinishProcessingLivePhotoMovie(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::CoreMedia.CMTime duration, global::CoreMedia.CMTime photoDisplayTime, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::Foundation.NSError error) => _didFinishProcessingLivePhotoMovie.OnNext((captureOutput, outputFileUrl, duration, photoDisplayTime, resolvedSettings, error));
        /// <inheritdoc/>
        public override void DidFinishProcessingPhoto(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer photoSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error) => _didFinishProcessingPhoto.OnNext((captureOutput, photoSampleBuffer, previewPhotoSampleBuffer, resolvedSettings, bracketSettings, error));
        /// <inheritdoc/>
        public override void DidFinishProcessingRawPhoto(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::CoreMedia.CMSampleBuffer rawSampleBuffer, global::CoreMedia.CMSampleBuffer previewPhotoSampleBuffer, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings, global::AVFoundation.AVCaptureBracketedStillImageSettings bracketSettings, global::Foundation.NSError error) => _didFinishProcessingRawPhoto.OnNext((captureOutput, rawSampleBuffer, previewPhotoSampleBuffer, resolvedSettings, bracketSettings, error));
        /// <inheritdoc/>
        public override void DidFinishRecordingLivePhotoMovie(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings) => _didFinishRecordingLivePhotoMovie.OnNext((captureOutput, outputFileUrl, resolvedSettings));
        /// <inheritdoc/>
        public override void WillBeginCapture(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings) => _willBeginCapture.OnNext((captureOutput, resolvedSettings));
        /// <inheritdoc/>
        public override void WillCapturePhoto(global::AVFoundation.AVCapturePhotoOutput captureOutput, global::AVFoundation.AVCaptureResolvedPhotoSettings resolvedSettings) => _willCapturePhoto.OnNext((captureOutput, resolvedSettings));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate"/> into Observables.
    /// </summary>
    public partial class AVCaptureVideoDataOutputSampleBufferDelegateRx : global::AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didDropSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didOutputSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidDropSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidDropSampleBufferObs => _didDropSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidOutputSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidOutputSampleBufferObs => _didOutputSampleBuffer;
        /// <inheritdoc/>
        public override void DidDropSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didDropSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
        /// <inheritdoc/>
        public override void DidOutputSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didOutputSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVContentKeySessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVContentKeySessionDelegateRx : global::AVFoundation.AVContentKeySessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didGenerateExpiredSessionReport = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> _didProvidePersistableContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideRenewingContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didSucceed = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier)> _didUpdate = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidChangeObs => _didChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidGenerateExpiredSessionReport"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidGenerateExpiredSessionReportObs => _didGenerateExpiredSessionReport;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvideContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideContentKeyRequestObs => _didProvideContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvidePersistableContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> DidProvidePersistableContentKeyRequestObs => _didProvidePersistableContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvideRenewingContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideRenewingContentKeyRequestObs => _didProvideRenewingContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidSucceed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidSucceedObs => _didSucceed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier)> DidUpdateObs => _didUpdate;
        /// <inheritdoc/>
        public override void DidChange(global::AVFoundation.AVContentKeySession session) => _didChange.OnNext(session);
        /// <inheritdoc/>
        public override void DidFail(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err) => _didFail.OnNext((session, keyRequest, err));
        /// <inheritdoc/>
        public override void DidGenerateExpiredSessionReport(global::AVFoundation.AVContentKeySession session) => _didGenerateExpiredSessionReport.OnNext(session);
        /// <inheritdoc/>
        public override void DidProvideContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvidePersistableContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest) => _didProvidePersistableContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvideRenewingContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideRenewingContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidSucceed(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didSucceed.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidUpdate(global::AVFoundation.AVContentKeySession session, global::Foundation.NSData persistableContentKey, global::Foundation.NSObject keyIdentifier) => _didUpdate.OnNext((session, persistableContentKey, keyIdentifier));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVPlayerItemMetadataCollectorPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> _didCollectDateRange = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataCollectorPushDelegate.DidCollectDateRange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> DidCollectDateRangeObs => _didCollectDateRange;
        /// <inheritdoc/>
        public override void DidCollectDateRange(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups) => _didCollectDateRange.OnNext((metadataCollector, metadataGroups, indexesOfNewGroups, indexesOfModifiedGroups));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemMetadataOutputPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> _didOutputTimedMetadataGroups = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataOutputPushDelegate.DidOutputTimedMetadataGroups"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> DidOutputTimedMetadataGroupsObs => _didOutputTimedMetadataGroups;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataOutputPushDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void DidOutputTimedMetadataGroups(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track) => _didOutputTimedMetadataGroups.OnNext((output, groups, track));
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPullDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPullDelegateRx : global::AVFoundation.AVPlayerItemOutputPullDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputMediaDataWillChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPullDelegate.OutputMediaDataWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputMediaDataWillChangeObs => _outputMediaDataWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPullDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputMediaDataWillChange(global::AVFoundation.AVPlayerItemOutput sender) => _outputMediaDataWillChange.OnNext(sender);
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPushDelegateRx : global::AVFoundation.AVPlayerItemOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPushDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate"/> into Observables.
    /// </summary>
    public partial class AVSpeechSynthesizerDelegateRx : global::AVFoundation.AVSpeechSynthesizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didCancelSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didContinueSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didFinishSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didPauseSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didStartSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)> _willSpeakRangeOfSpeechString = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidCancelSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidCancelSpeechUtteranceObs => _didCancelSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidContinueSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidContinueSpeechUtteranceObs => _didContinueSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidFinishSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidFinishSpeechUtteranceObs => _didFinishSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidPauseSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidPauseSpeechUtteranceObs => _didPauseSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidStartSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidStartSpeechUtteranceObs => _didStartSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.WillSpeakRangeOfSpeechString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)> WillSpeakRangeOfSpeechStringObs => _willSpeakRangeOfSpeechString;
        /// <inheritdoc/>
        public override void DidCancelSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didCancelSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidContinueSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didContinueSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidFinishSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didFinishSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidPauseSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didPauseSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidStartSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didStartSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void WillSpeakRangeOfSpeechString(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance) => _willSpeakRangeOfSpeechString.OnNext((synthesizer, characterRange, utterance));
    }
}

namespace AVKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVKit.AVPictureInPictureControllerDelegate"/> into Observables.
    /// </summary>
    public partial class AVPictureInPictureControllerDelegateRx : global::AVKit.AVPictureInPictureControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController> _didStartPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController> _didStopPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPictureInPictureController pictureInPictureController, global::Foundation.NSError error)> _failedToStartPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPictureInPictureController pictureInPictureController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPictureInPictureController pictureInPictureController, global::System.Action<bool> completionHandler)> _restoreUserInterfaceForPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPictureInPictureController pictureInPictureController, global::System.Action<bool> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController> _willStartPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController> _willStopPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPictureInPictureController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPictureInPictureControllerDelegate.DidStartPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPictureInPictureController> DidStartPictureInPictureObs => _didStartPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPictureInPictureControllerDelegate.DidStopPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPictureInPictureController> DidStopPictureInPictureObs => _didStopPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPictureInPictureControllerDelegate.FailedToStartPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPictureInPictureController pictureInPictureController, global::Foundation.NSError error)> FailedToStartPictureInPictureObs => _failedToStartPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPictureInPictureControllerDelegate.RestoreUserInterfaceForPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPictureInPictureController pictureInPictureController, global::System.Action<bool> completionHandler)> RestoreUserInterfaceForPictureInPictureObs => _restoreUserInterfaceForPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPictureInPictureControllerDelegate.WillStartPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPictureInPictureController> WillStartPictureInPictureObs => _willStartPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPictureInPictureControllerDelegate.WillStopPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPictureInPictureController> WillStopPictureInPictureObs => _willStopPictureInPicture;
        /// <inheritdoc/>
        public override void DidStartPictureInPicture(global::AVKit.AVPictureInPictureController pictureInPictureController) => _didStartPictureInPicture.OnNext(pictureInPictureController);
        /// <inheritdoc/>
        public override void DidStopPictureInPicture(global::AVKit.AVPictureInPictureController pictureInPictureController) => _didStopPictureInPicture.OnNext(pictureInPictureController);
        /// <inheritdoc/>
        public override void FailedToStartPictureInPicture(global::AVKit.AVPictureInPictureController pictureInPictureController, global::Foundation.NSError error) => _failedToStartPictureInPicture.OnNext((pictureInPictureController, error));
        /// <inheritdoc/>
        public override void RestoreUserInterfaceForPictureInPicture(global::AVKit.AVPictureInPictureController pictureInPictureController, global::System.Action<bool> completionHandler) => _restoreUserInterfaceForPictureInPicture.OnNext((pictureInPictureController, completionHandler));
        /// <inheritdoc/>
        public override void WillStartPictureInPicture(global::AVKit.AVPictureInPictureController pictureInPictureController) => _willStartPictureInPicture.OnNext(pictureInPictureController);
        /// <inheritdoc/>
        public override void WillStopPictureInPicture(global::AVKit.AVPictureInPictureController pictureInPictureController) => _willStopPictureInPicture.OnNext(pictureInPictureController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVKit.AVPlayerViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerViewControllerDelegateRx : global::AVKit.AVPlayerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _didStartPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _didStopPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::Foundation.NSError error)> _failedToStartPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::System.Action<bool> completionHandler)> _restoreUserInterfaceForPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::System.Action<bool> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _willStartPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _willStopPictureInPicture = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidStartPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> DidStartPictureInPictureObs => _didStartPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidStopPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> DidStopPictureInPictureObs => _didStopPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.FailedToStartPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::Foundation.NSError error)> FailedToStartPictureInPictureObs => _failedToStartPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.RestoreUserInterfaceForPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::System.Action<bool> completionHandler)> RestoreUserInterfaceForPictureInPictureObs => _restoreUserInterfaceForPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.WillStartPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> WillStartPictureInPictureObs => _willStartPictureInPicture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.WillStopPictureInPicture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> WillStopPictureInPictureObs => _willStopPictureInPicture;
        /// <inheritdoc/>
        public override void DidStartPictureInPicture(global::AVKit.AVPlayerViewController playerViewController) => _didStartPictureInPicture.OnNext(playerViewController);
        /// <inheritdoc/>
        public override void DidStopPictureInPicture(global::AVKit.AVPlayerViewController playerViewController) => _didStopPictureInPicture.OnNext(playerViewController);
        /// <inheritdoc/>
        public override void FailedToStartPictureInPicture(global::AVKit.AVPlayerViewController playerViewController, global::Foundation.NSError error) => _failedToStartPictureInPicture.OnNext((playerViewController, error));
        /// <inheritdoc/>
        public override void RestoreUserInterfaceForPictureInPicture(global::AVKit.AVPlayerViewController playerViewController, global::System.Action<bool> completionHandler) => _restoreUserInterfaceForPictureInPicture.OnNext((playerViewController, completionHandler));
        /// <inheritdoc/>
        public override void WillStartPictureInPicture(global::AVKit.AVPlayerViewController playerViewController) => _willStartPictureInPicture.OnNext(playerViewController);
        /// <inheritdoc/>
        public override void WillStopPictureInPicture(global::AVKit.AVPlayerViewController playerViewController) => _willStopPictureInPicture.OnNext(playerViewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVKit.AVRoutePickerViewDelegate"/> into Observables.
    /// </summary>
    public partial class AVRoutePickerViewDelegateRx : global::AVKit.AVRoutePickerViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView> _didEndPresentingRoutes = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView> _willBeginPresentingRoutes = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVRoutePickerViewDelegate.DidEndPresentingRoutes"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVRoutePickerView> DidEndPresentingRoutesObs => _didEndPresentingRoutes;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVRoutePickerViewDelegate.WillBeginPresentingRoutes"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVRoutePickerView> WillBeginPresentingRoutesObs => _willBeginPresentingRoutes;
        /// <inheritdoc/>
        public override void DidEndPresentingRoutes(global::AVKit.AVRoutePickerView routePickerView) => _didEndPresentingRoutes.OnNext(routePickerView);
        /// <inheritdoc/>
        public override void WillBeginPresentingRoutes(global::AVKit.AVRoutePickerView routePickerView) => _willBeginPresentingRoutes.OnNext(routePickerView);
    }
}

namespace CallKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CallKit.CXCallDirectoryExtensionContextDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CXCallDirectoryExtensionContextDelegateRx : global::CallKit.CXCallDirectoryExtensionContextDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXCallDirectoryExtensionContext extensionContext, global::Foundation.NSError error)> _requestFailed = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXCallDirectoryExtensionContext extensionContext, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXCallDirectoryExtensionContextDelegate.RequestFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXCallDirectoryExtensionContext extensionContext, global::Foundation.NSError error)> RequestFailedObs => _requestFailed;
        /// <inheritdoc/>
        public override void RequestFailed(global::CallKit.CXCallDirectoryExtensionContext extensionContext, global::Foundation.NSError error) => _requestFailed.OnNext((extensionContext, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CallKit.CXCallObserverDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CXCallObserverDelegateRx : global::CallKit.CXCallObserverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXCallObserver callObserver, global::CallKit.CXCall call)> _callChanged = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXCallObserver callObserver, global::CallKit.CXCall call)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXCallObserverDelegate.CallChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXCallObserver callObserver, global::CallKit.CXCall call)> CallChangedObs => _callChanged;
        /// <inheritdoc/>
        public override void CallChanged(global::CallKit.CXCallObserver callObserver, global::CallKit.CXCall call) => _callChanged.OnNext((callObserver, call));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CallKit.CXProviderDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CXProviderDelegateRx : global::CallKit.CXProviderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession)> _didActivateAudioSession = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CallKit.CXProvider> _didBegin = new Pharmacist.Common.SingleAwaitSubject<global::CallKit.CXProvider>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession)> _didDeactivateAudioSession = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CallKit.CXProvider> _didReset = new Pharmacist.Common.SingleAwaitSubject<global::CallKit.CXProvider>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXAnswerCallAction action)> _performAnswerCallAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXAnswerCallAction action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXEndCallAction action)> _performEndCallAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXEndCallAction action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXPlayDtmfCallAction action)> _performPlayDtmfCallAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXPlayDtmfCallAction action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXSetGroupCallAction action)> _performSetGroupCallAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXSetGroupCallAction action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXSetHeldCallAction action)> _performSetHeldCallAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXSetHeldCallAction action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXSetMutedCallAction action)> _performSetMutedCallAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXSetMutedCallAction action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXStartCallAction action)> _performStartCallAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXStartCallAction action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXAction action)> _timedOutPerformingAction = new Pharmacist.Common.SingleAwaitSubject<(global::CallKit.CXProvider provider, global::CallKit.CXAction action)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.DidActivateAudioSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession)> DidActivateAudioSessionObs => _didActivateAudioSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.DidBegin"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CallKit.CXProvider> DidBeginObs => _didBegin;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.DidDeactivateAudioSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession)> DidDeactivateAudioSessionObs => _didDeactivateAudioSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.DidReset"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CallKit.CXProvider> DidResetObs => _didReset;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.PerformAnswerCallAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXAnswerCallAction action)> PerformAnswerCallActionObs => _performAnswerCallAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.PerformEndCallAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXEndCallAction action)> PerformEndCallActionObs => _performEndCallAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.PerformPlayDtmfCallAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXPlayDtmfCallAction action)> PerformPlayDtmfCallActionObs => _performPlayDtmfCallAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.PerformSetGroupCallAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXSetGroupCallAction action)> PerformSetGroupCallActionObs => _performSetGroupCallAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.PerformSetHeldCallAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXSetHeldCallAction action)> PerformSetHeldCallActionObs => _performSetHeldCallAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.PerformSetMutedCallAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXSetMutedCallAction action)> PerformSetMutedCallActionObs => _performSetMutedCallAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.PerformStartCallAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXStartCallAction action)> PerformStartCallActionObs => _performStartCallAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CallKit.CXProviderDelegate.TimedOutPerformingAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CallKit.CXProvider provider, global::CallKit.CXAction action)> TimedOutPerformingActionObs => _timedOutPerformingAction;
        /// <inheritdoc/>
        public override void DidActivateAudioSession(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession) => _didActivateAudioSession.OnNext((provider, audioSession));
        /// <inheritdoc/>
        public override void DidBegin(global::CallKit.CXProvider provider) => _didBegin.OnNext(provider);
        /// <inheritdoc/>
        public override void DidDeactivateAudioSession(global::CallKit.CXProvider provider, global::AVFoundation.AVAudioSession audioSession) => _didDeactivateAudioSession.OnNext((provider, audioSession));
        /// <inheritdoc/>
        public override void DidReset(global::CallKit.CXProvider provider) => _didReset.OnNext(provider);
        /// <inheritdoc/>
        public override void PerformAnswerCallAction(global::CallKit.CXProvider provider, global::CallKit.CXAnswerCallAction action) => _performAnswerCallAction.OnNext((provider, action));
        /// <inheritdoc/>
        public override void PerformEndCallAction(global::CallKit.CXProvider provider, global::CallKit.CXEndCallAction action) => _performEndCallAction.OnNext((provider, action));
        /// <inheritdoc/>
        public override void PerformPlayDtmfCallAction(global::CallKit.CXProvider provider, global::CallKit.CXPlayDtmfCallAction action) => _performPlayDtmfCallAction.OnNext((provider, action));
        /// <inheritdoc/>
        public override void PerformSetGroupCallAction(global::CallKit.CXProvider provider, global::CallKit.CXSetGroupCallAction action) => _performSetGroupCallAction.OnNext((provider, action));
        /// <inheritdoc/>
        public override void PerformSetHeldCallAction(global::CallKit.CXProvider provider, global::CallKit.CXSetHeldCallAction action) => _performSetHeldCallAction.OnNext((provider, action));
        /// <inheritdoc/>
        public override void PerformSetMutedCallAction(global::CallKit.CXProvider provider, global::CallKit.CXSetMutedCallAction action) => _performSetMutedCallAction.OnNext((provider, action));
        /// <inheritdoc/>
        public override void PerformStartCallAction(global::CallKit.CXProvider provider, global::CallKit.CXStartCallAction action) => _performStartCallAction.OnNext((provider, action));
        /// <inheritdoc/>
        public override void TimedOutPerformingAction(global::CallKit.CXProvider provider, global::CallKit.CXAction action) => _timedOutPerformingAction.OnNext((provider, action));
    }
}

namespace CarPlay
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CarPlay.CPApplicationDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CPApplicationDelegateRx : global::CarPlay.CPApplicationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _applicationSignificantTimeChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame)> _changedStatusBarFrame = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation)> _didChangeStatusBarOrientation = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window)> _didConnectCarInterfaceController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> _didDecodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window)> _didDisconnectCarInterfaceController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _didEnterBackground = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)> _didFailToContinueUserActivitiy = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> _didReceiveRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings)> _didRegisterUserNotificationSettings = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPManeuver maneuver)> _didSelectManeuver = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPManeuver maneuver)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPNavigationAlert navigationAlert)> _didSelectNavigationAlert = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CarPlay.CPNavigationAlert navigationAlert)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSError error)> _failedToRegisterForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _finishedLaunching = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler)> _handleAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)> _handleEventsForBackgroundUrl = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)> _handleIntent = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)> _handleWatchKitExtensionRequest = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _onActivated = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _onResignActivation = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler)> _performActionForShortcutItem = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> _performFetch = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _protectedDataDidBecomeAvailable = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _protectedDataWillBecomeUnavailable = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification)> _receivedLocalNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)> _receivedRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _receiveMemoryWarning = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)> _registeredForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _shouldRequestHealthAuthorization = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)> _userActivityUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)> _userDidAcceptCloudKitShare = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame)> _willChangeStatusBarFrame = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration)> _willChangeStatusBarOrientation = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> _willEncodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _willEnterForeground = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _willTerminate = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ApplicationSignificantTimeChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ApplicationSignificantTimeChangeObs => _applicationSignificantTimeChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ChangedStatusBarFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame)> ChangedStatusBarFrameObs => _changedStatusBarFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidChangeStatusBarOrientation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation)> DidChangeStatusBarOrientationObs => _didChangeStatusBarOrientation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidConnectCarInterfaceController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window)> DidConnectCarInterfaceControllerObs => _didConnectCarInterfaceController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidDecodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> DidDecodeRestorableStateObs => _didDecodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidDisconnectCarInterfaceController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window)> DidDisconnectCarInterfaceControllerObs => _didDisconnectCarInterfaceController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidEnterBackground"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> DidEnterBackgroundObs => _didEnterBackground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidFailToContinueUserActivitiy"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)> DidFailToContinueUserActivitiyObs => _didFailToContinueUserActivitiy;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidReceiveRemoteNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> DidReceiveRemoteNotificationObs => _didReceiveRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidRegisterUserNotificationSettings"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings)> DidRegisterUserNotificationSettingsObs => _didRegisterUserNotificationSettings;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidSelectManeuver"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CarPlay.CPManeuver maneuver)> DidSelectManeuverObs => _didSelectManeuver;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.DidSelectNavigationAlert"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CarPlay.CPNavigationAlert navigationAlert)> DidSelectNavigationAlertObs => _didSelectNavigationAlert;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.FailedToRegisterForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSError error)> FailedToRegisterForRemoteNotificationsObs => _failedToRegisterForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.FinishedLaunching"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> FinishedLaunchingObs => _finishedLaunching;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.HandleAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler)> HandleActionObs => _handleAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.HandleEventsForBackgroundUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)> HandleEventsForBackgroundUrlObs => _handleEventsForBackgroundUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.HandleIntent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)> HandleIntentObs => _handleIntent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.HandleWatchKitExtensionRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)> HandleWatchKitExtensionRequestObs => _handleWatchKitExtensionRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.OnActivated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> OnActivatedObs => _onActivated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.OnResignActivation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> OnResignActivationObs => _onResignActivation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.PerformActionForShortcutItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler)> PerformActionForShortcutItemObs => _performActionForShortcutItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.PerformFetch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> PerformFetchObs => _performFetch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ProtectedDataDidBecomeAvailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ProtectedDataDidBecomeAvailableObs => _protectedDataDidBecomeAvailable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ProtectedDataWillBecomeUnavailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ProtectedDataWillBecomeUnavailableObs => _protectedDataWillBecomeUnavailable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ReceivedLocalNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification)> ReceivedLocalNotificationObs => _receivedLocalNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ReceivedRemoteNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)> ReceivedRemoteNotificationObs => _receivedRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ReceiveMemoryWarning"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ReceiveMemoryWarningObs => _receiveMemoryWarning;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.RegisteredForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)> RegisteredForRemoteNotificationsObs => _registeredForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.ShouldRequestHealthAuthorization"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ShouldRequestHealthAuthorizationObs => _shouldRequestHealthAuthorization;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.UserActivityUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)> UserActivityUpdatedObs => _userActivityUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.UserDidAcceptCloudKitShare"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)> UserDidAcceptCloudKitShareObs => _userDidAcceptCloudKitShare;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.WillChangeStatusBarFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame)> WillChangeStatusBarFrameObs => _willChangeStatusBarFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.WillChangeStatusBarOrientation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration)> WillChangeStatusBarOrientationObs => _willChangeStatusBarOrientation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.WillEncodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> WillEncodeRestorableStateObs => _willEncodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.WillEnterForeground"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> WillEnterForegroundObs => _willEnterForeground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPApplicationDelegate.WillTerminate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> WillTerminateObs => _willTerminate;
        /// <inheritdoc/>
        public override void ApplicationSignificantTimeChange(global::UIKit.UIApplication application) => _applicationSignificantTimeChange.OnNext(application);
        /// <inheritdoc/>
        public override void ChangedStatusBarFrame(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame) => _changedStatusBarFrame.OnNext((application, oldStatusBarFrame));
        /// <inheritdoc/>
        public override void DidChangeStatusBarOrientation(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation) => _didChangeStatusBarOrientation.OnNext((application, oldStatusBarOrientation));
        /// <inheritdoc/>
        public override void DidConnectCarInterfaceController(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window) => _didConnectCarInterfaceController.OnNext((application, interfaceController, window));
        /// <inheritdoc/>
        public override void DidDecodeRestorableState(global::UIKit.UIApplication application, global::Foundation.NSCoder coder) => _didDecodeRestorableState.OnNext((application, coder));
        /// <inheritdoc/>
        public override void DidDisconnectCarInterfaceController(global::UIKit.UIApplication application, global::CarPlay.CPInterfaceController interfaceController, global::CarPlay.CPWindow window) => _didDisconnectCarInterfaceController.OnNext((application, interfaceController, window));
        /// <inheritdoc/>
        public override void DidEnterBackground(global::UIKit.UIApplication application) => _didEnterBackground.OnNext(application);
        /// <inheritdoc/>
        public override void DidFailToContinueUserActivitiy(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error) => _didFailToContinueUserActivitiy.OnNext((application, userActivityType, error));
        /// <inheritdoc/>
        public override void DidReceiveRemoteNotification(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler) => _didReceiveRemoteNotification.OnNext((application, userInfo, completionHandler));
        /// <inheritdoc/>
        public override void DidRegisterUserNotificationSettings(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings) => _didRegisterUserNotificationSettings.OnNext((application, notificationSettings));
        /// <inheritdoc/>
        public override void DidSelectManeuver(global::UIKit.UIApplication application, global::CarPlay.CPManeuver maneuver) => _didSelectManeuver.OnNext((application, maneuver));
        /// <inheritdoc/>
        public override void DidSelectNavigationAlert(global::UIKit.UIApplication application, global::CarPlay.CPNavigationAlert navigationAlert) => _didSelectNavigationAlert.OnNext((application, navigationAlert));
        /// <inheritdoc/>
        public override void FailedToRegisterForRemoteNotifications(global::UIKit.UIApplication application, global::Foundation.NSError error) => _failedToRegisterForRemoteNotifications.OnNext((application, error));
        /// <inheritdoc/>
        public override void FinishedLaunching(global::UIKit.UIApplication application) => _finishedLaunching.OnNext(application);
        /// <inheritdoc/>
        public override void HandleAction(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler) => _handleAction.OnNext((application, actionIdentifier, localNotification, responseInfo, completionHandler));
        /// <inheritdoc/>
        public override void HandleEventsForBackgroundUrl(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler) => _handleEventsForBackgroundUrl.OnNext((application, sessionIdentifier, completionHandler));
        /// <inheritdoc/>
        public override void HandleIntent(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler) => _handleIntent.OnNext((application, intent, completionHandler));
        /// <inheritdoc/>
        public override void HandleWatchKitExtensionRequest(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply) => _handleWatchKitExtensionRequest.OnNext((application, userInfo, reply));
        /// <inheritdoc/>
        public override void OnActivated(global::UIKit.UIApplication application) => _onActivated.OnNext(application);
        /// <inheritdoc/>
        public override void OnResignActivation(global::UIKit.UIApplication application) => _onResignActivation.OnNext(application);
        /// <inheritdoc/>
        public override void PerformActionForShortcutItem(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler) => _performActionForShortcutItem.OnNext((application, shortcutItem, completionHandler));
        /// <inheritdoc/>
        public override void PerformFetch(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler) => _performFetch.OnNext((application, completionHandler));
        /// <inheritdoc/>
        public override void ProtectedDataDidBecomeAvailable(global::UIKit.UIApplication application) => _protectedDataDidBecomeAvailable.OnNext(application);
        /// <inheritdoc/>
        public override void ProtectedDataWillBecomeUnavailable(global::UIKit.UIApplication application) => _protectedDataWillBecomeUnavailable.OnNext(application);
        /// <inheritdoc/>
        public override void ReceivedLocalNotification(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification) => _receivedLocalNotification.OnNext((application, notification));
        /// <inheritdoc/>
        public override void ReceivedRemoteNotification(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo) => _receivedRemoteNotification.OnNext((application, userInfo));
        /// <inheritdoc/>
        public override void ReceiveMemoryWarning(global::UIKit.UIApplication application) => _receiveMemoryWarning.OnNext(application);
        /// <inheritdoc/>
        public override void RegisteredForRemoteNotifications(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken) => _registeredForRemoteNotifications.OnNext((application, deviceToken));
        /// <inheritdoc/>
        public override void ShouldRequestHealthAuthorization(global::UIKit.UIApplication application) => _shouldRequestHealthAuthorization.OnNext(application);
        /// <inheritdoc/>
        public override void UserActivityUpdated(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity) => _userActivityUpdated.OnNext((application, userActivity));
        /// <inheritdoc/>
        public override void UserDidAcceptCloudKitShare(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata) => _userDidAcceptCloudKitShare.OnNext((application, cloudKitShareMetadata));
        /// <inheritdoc/>
        public override void WillChangeStatusBarFrame(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame) => _willChangeStatusBarFrame.OnNext((application, newStatusBarFrame));
        /// <inheritdoc/>
        public override void WillChangeStatusBarOrientation(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration) => _willChangeStatusBarOrientation.OnNext((application, newStatusBarOrientation, duration));
        /// <inheritdoc/>
        public override void WillEncodeRestorableState(global::UIKit.UIApplication application, global::Foundation.NSCoder coder) => _willEncodeRestorableState.OnNext((application, coder));
        /// <inheritdoc/>
        public override void WillEnterForeground(global::UIKit.UIApplication application) => _willEnterForeground.OnNext(application);
        /// <inheritdoc/>
        public override void WillTerminate(global::UIKit.UIApplication application) => _willTerminate.OnNext(application);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CarPlay.CPInterfaceControllerDelegate"/> into Observables.
    /// </summary>
    public partial class CPInterfaceControllerDelegateRx : global::CarPlay.CPInterfaceControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)> _templateDidAppear = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)> _templateDidDisappear = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)> _templateWillAppear = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)> _templateWillDisappear = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPTemplate aTemplate, bool animated)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPInterfaceControllerDelegate.TemplateDidAppear"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPTemplate aTemplate, bool animated)> TemplateDidAppearObs => _templateDidAppear;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPInterfaceControllerDelegate.TemplateDidDisappear"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPTemplate aTemplate, bool animated)> TemplateDidDisappearObs => _templateDidDisappear;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPInterfaceControllerDelegate.TemplateWillAppear"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPTemplate aTemplate, bool animated)> TemplateWillAppearObs => _templateWillAppear;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPInterfaceControllerDelegate.TemplateWillDisappear"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPTemplate aTemplate, bool animated)> TemplateWillDisappearObs => _templateWillDisappear;
        /// <inheritdoc/>
        public override void TemplateDidAppear(global::CarPlay.CPTemplate aTemplate, bool animated) => _templateDidAppear.OnNext((aTemplate, animated));
        /// <inheritdoc/>
        public override void TemplateDidDisappear(global::CarPlay.CPTemplate aTemplate, bool animated) => _templateDidDisappear.OnNext((aTemplate, animated));
        /// <inheritdoc/>
        public override void TemplateWillAppear(global::CarPlay.CPTemplate aTemplate, bool animated) => _templateWillAppear.OnNext((aTemplate, animated));
        /// <inheritdoc/>
        public override void TemplateWillDisappear(global::CarPlay.CPTemplate aTemplate, bool animated) => _templateWillDisappear.OnNext((aTemplate, animated));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CarPlay.CPListTemplateDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CPListTemplateDelegateRx : global::CarPlay.CPListTemplateDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPListTemplate listTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler)> _didSelectListItem = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPListTemplate listTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPListTemplateDelegate.DidSelectListItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPListTemplate listTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler)> DidSelectListItemObs => _didSelectListItem;
        /// <inheritdoc/>
        public override void DidSelectListItem(global::CarPlay.CPListTemplate listTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler) => _didSelectListItem.OnNext((listTemplate, item, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CarPlay.CPMapTemplateDelegate"/> into Observables.
    /// </summary>
    public partial class CPMapTemplateDelegateRx : global::CarPlay.CPMapTemplateDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate> _didBeginPanGesture = new Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate> _didCancelNavigation = new Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext)> _didDismissNavigationAlert = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate> _didDismissPanningInterface = new Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint velocity)> _didEndPanGesture = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint velocity)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert)> _didShowNavigationAlert = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate> _didShowPanningInterface = new Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint translation, global::CoreGraphics.CGPoint velocity)> _didUpdatePanGesture = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint translation, global::CoreGraphics.CGPoint velocity)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)> _pan = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)> _panBegan = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)> _panEnded = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice)> _selectedPreview = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice)> _startedTrip = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext)> _willDismissNavigationAlert = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate> _willDismissPanningInterface = new Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPMapTemplate>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert)> _willShowNavigationAlert = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidBeginPanGesture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CarPlay.CPMapTemplate> DidBeginPanGestureObs => _didBeginPanGesture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidCancelNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CarPlay.CPMapTemplate> DidCancelNavigationObs => _didCancelNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidDismissNavigationAlert"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext)> DidDismissNavigationAlertObs => _didDismissNavigationAlert;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidDismissPanningInterface"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CarPlay.CPMapTemplate> DidDismissPanningInterfaceObs => _didDismissPanningInterface;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidEndPanGesture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint velocity)> DidEndPanGestureObs => _didEndPanGesture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidShowNavigationAlert"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert)> DidShowNavigationAlertObs => _didShowNavigationAlert;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidShowPanningInterface"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CarPlay.CPMapTemplate> DidShowPanningInterfaceObs => _didShowPanningInterface;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.DidUpdatePanGesture"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint translation, global::CoreGraphics.CGPoint velocity)> DidUpdatePanGestureObs => _didUpdatePanGesture;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.Pan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)> PanObs => _pan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.PanBegan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)> PanBeganObs => _panBegan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.PanEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction)> PanEndedObs => _panEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.SelectedPreview"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice)> SelectedPreviewObs => _selectedPreview;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.StartedTrip"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice)> StartedTripObs => _startedTrip;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.WillDismissNavigationAlert"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext)> WillDismissNavigationAlertObs => _willDismissNavigationAlert;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.WillDismissPanningInterface"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CarPlay.CPMapTemplate> WillDismissPanningInterfaceObs => _willDismissPanningInterface;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPMapTemplateDelegate.WillShowNavigationAlert"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert)> WillShowNavigationAlertObs => _willShowNavigationAlert;
        /// <inheritdoc/>
        public override void DidBeginPanGesture(global::CarPlay.CPMapTemplate mapTemplate) => _didBeginPanGesture.OnNext(mapTemplate);
        /// <inheritdoc/>
        public override void DidCancelNavigation(global::CarPlay.CPMapTemplate mapTemplate) => _didCancelNavigation.OnNext(mapTemplate);
        /// <inheritdoc/>
        public override void DidDismissNavigationAlert(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext) => _didDismissNavigationAlert.OnNext((mapTemplate, navigationAlert, dismissalContext));
        /// <inheritdoc/>
        public override void DidDismissPanningInterface(global::CarPlay.CPMapTemplate mapTemplate) => _didDismissPanningInterface.OnNext(mapTemplate);
        /// <inheritdoc/>
        public override void DidEndPanGesture(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint velocity) => _didEndPanGesture.OnNext((mapTemplate, velocity));
        /// <inheritdoc/>
        public override void DidShowNavigationAlert(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert) => _didShowNavigationAlert.OnNext((mapTemplate, navigationAlert));
        /// <inheritdoc/>
        public override void DidShowPanningInterface(global::CarPlay.CPMapTemplate mapTemplate) => _didShowPanningInterface.OnNext(mapTemplate);
        /// <inheritdoc/>
        public override void DidUpdatePanGesture(global::CarPlay.CPMapTemplate mapTemplate, global::CoreGraphics.CGPoint translation, global::CoreGraphics.CGPoint velocity) => _didUpdatePanGesture.OnNext((mapTemplate, translation, velocity));
        /// <inheritdoc/>
        public override void Pan(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction) => _pan.OnNext((mapTemplate, direction));
        /// <inheritdoc/>
        public override void PanBegan(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction) => _panBegan.OnNext((mapTemplate, direction));
        /// <inheritdoc/>
        public override void PanEnded(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPPanDirection direction) => _panEnded.OnNext((mapTemplate, direction));
        /// <inheritdoc/>
        public override void SelectedPreview(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice) => _selectedPreview.OnNext((mapTemplate, trip, routeChoice));
        /// <inheritdoc/>
        public override void StartedTrip(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPTrip trip, global::CarPlay.CPRouteChoice routeChoice) => _startedTrip.OnNext((mapTemplate, trip, routeChoice));
        /// <inheritdoc/>
        public override void WillDismissNavigationAlert(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert, global::CarPlay.CPNavigationAlertDismissalContext dismissalContext) => _willDismissNavigationAlert.OnNext((mapTemplate, navigationAlert, dismissalContext));
        /// <inheritdoc/>
        public override void WillDismissPanningInterface(global::CarPlay.CPMapTemplate mapTemplate) => _willDismissPanningInterface.OnNext(mapTemplate);
        /// <inheritdoc/>
        public override void WillShowNavigationAlert(global::CarPlay.CPMapTemplate mapTemplate, global::CarPlay.CPNavigationAlert navigationAlert) => _willShowNavigationAlert.OnNext((mapTemplate, navigationAlert));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CarPlay.CPSearchTemplateDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CPSearchTemplateDelegateRx : global::CarPlay.CPSearchTemplateDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPSearchTemplate> _searchButtonPressed = new Pharmacist.Common.SingleAwaitSubject<global::CarPlay.CPSearchTemplate>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPSearchTemplate searchTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler)> _selectedResult = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPSearchTemplate searchTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPSearchTemplate searchTemplate, string searchText, global::CarPlay.CPSearchTemplateDelegateUpdateHandler completionHandler)> _updatedSearchText = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPSearchTemplate searchTemplate, string searchText, global::CarPlay.CPSearchTemplateDelegateUpdateHandler completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPSearchTemplateDelegate.SearchButtonPressed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CarPlay.CPSearchTemplate> SearchButtonPressedObs => _searchButtonPressed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPSearchTemplateDelegate.SelectedResult"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPSearchTemplate searchTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler)> SelectedResultObs => _selectedResult;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPSearchTemplateDelegate.UpdatedSearchText"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPSearchTemplate searchTemplate, string searchText, global::CarPlay.CPSearchTemplateDelegateUpdateHandler completionHandler)> UpdatedSearchTextObs => _updatedSearchText;
        /// <inheritdoc/>
        public override void SearchButtonPressed(global::CarPlay.CPSearchTemplate searchTemplate) => _searchButtonPressed.OnNext(searchTemplate);
        /// <inheritdoc/>
        public override void SelectedResult(global::CarPlay.CPSearchTemplate searchTemplate, global::CarPlay.CPListItem item, global::System.Action completionHandler) => _selectedResult.OnNext((searchTemplate, item, completionHandler));
        /// <inheritdoc/>
        public override void UpdatedSearchText(global::CarPlay.CPSearchTemplate searchTemplate, string searchText, global::CarPlay.CPSearchTemplateDelegateUpdateHandler completionHandler) => _updatedSearchText.OnNext((searchTemplate, searchText, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CarPlay.CPSessionConfigurationDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CPSessionConfigurationDelegateRx : global::CarPlay.CPSessionConfigurationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPSessionConfiguration sessionConfiguration, global::CarPlay.CPLimitableUserInterface limitedUserInterfaces)> _limitedUserInterfacesChanged = new Pharmacist.Common.SingleAwaitSubject<(global::CarPlay.CPSessionConfiguration sessionConfiguration, global::CarPlay.CPLimitableUserInterface limitedUserInterfaces)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CarPlay.CPSessionConfigurationDelegate.LimitedUserInterfacesChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CarPlay.CPSessionConfiguration sessionConfiguration, global::CarPlay.CPLimitableUserInterface limitedUserInterfaces)> LimitedUserInterfacesChangedObs => _limitedUserInterfacesChanged;
        /// <inheritdoc/>
        public override void LimitedUserInterfacesChanged(global::CarPlay.CPSessionConfiguration sessionConfiguration, global::CarPlay.CPLimitableUserInterface limitedUserInterfaces) => _limitedUserInterfacesChanged.OnNext((sessionConfiguration, limitedUserInterfaces));
    }
}

namespace ContactsUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ContactsUI.CNContactPickerDelegate"/> into Observables.
    /// </summary>
    public partial class CNContactPickerDelegateRx : global::ContactsUI.CNContactPickerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ContactsUI.CNContactPickerViewController> _contactPickerDidCancel = new Pharmacist.Common.SingleAwaitSubject<global::ContactsUI.CNContactPickerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact contact)> _didSelectContact = new Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty[] contactProperties)> _didSelectContactProperties = new Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty[] contactProperties)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty contactProperty)> _didSelectContactProperty = new Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty contactProperty)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact[] contacts)> _didSelectContacts = new Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact[] contacts)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.ContactPickerDidCancel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ContactsUI.CNContactPickerViewController> ContactPickerDidCancelObs => _contactPickerDidCancel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.DidSelectContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact contact)> DidSelectContactObs => _didSelectContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.DidSelectContactProperties"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty[] contactProperties)> DidSelectContactPropertiesObs => _didSelectContactProperties;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.DidSelectContactProperty"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty contactProperty)> DidSelectContactPropertyObs => _didSelectContactProperty;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.DidSelectContacts"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact[] contacts)> DidSelectContactsObs => _didSelectContacts;
        /// <inheritdoc/>
        public override void ContactPickerDidCancel(global::ContactsUI.CNContactPickerViewController picker) => _contactPickerDidCancel.OnNext(picker);
        /// <inheritdoc/>
        public override void DidSelectContact(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact contact) => _didSelectContact.OnNext((picker, contact));
        /// <inheritdoc/>
        public override void DidSelectContactProperties(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty[] contactProperties) => _didSelectContactProperties.OnNext((picker, contactProperties));
        /// <inheritdoc/>
        public override void DidSelectContactProperty(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContactProperty contactProperty) => _didSelectContactProperty.OnNext((picker, contactProperty));
        /// <inheritdoc/>
        public override void DidSelectContacts(global::ContactsUI.CNContactPickerViewController picker, global::Contacts.CNContact[] contacts) => _didSelectContacts.OnNext((picker, contacts));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ContactsUI.CNContactViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class CNContactViewControllerDelegateRx : global::ContactsUI.CNContactViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactViewController viewController, global::Contacts.CNContact contact)> _didComplete = new Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactViewController viewController, global::Contacts.CNContact contact)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactViewControllerDelegate.DidComplete"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ContactsUI.CNContactViewController viewController, global::Contacts.CNContact contact)> DidCompleteObs => _didComplete;
        /// <inheritdoc/>
        public override void DidComplete(global::ContactsUI.CNContactViewController viewController, global::Contacts.CNContact contact) => _didComplete.OnNext((viewController, contact));
    }
}

namespace CoreAnimation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreAnimation.CAAnimationDelegate"/> into Observables.
    /// </summary>
    public partial class CAAnimationDelegateRx : global::CoreAnimation.CAAnimationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CAAnimation> _animationStarted = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CAAnimation>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CAAnimation anim, bool finished)> _animationStopped = new Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CAAnimation anim, bool finished)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimationDelegate.AnimationStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CAAnimation> AnimationStartedObs => _animationStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimationDelegate.AnimationStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreAnimation.CAAnimation anim, bool finished)> AnimationStoppedObs => _animationStopped;
        /// <inheritdoc/>
        public override void AnimationStarted(global::CoreAnimation.CAAnimation anim) => _animationStarted.OnNext(anim);
        /// <inheritdoc/>
        public override void AnimationStopped(global::CoreAnimation.CAAnimation anim, bool finished) => _animationStopped.OnNext((anim, finished));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreAnimation.CALayerDelegate"/> into Observables.
    /// </summary>
    public partial class CALayerDelegateRx : global::CoreAnimation.CALayerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _displayLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)> _drawLayer = new Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _layoutSublayersOfLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _willDrawLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.DisplayLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> DisplayLayerObs => _displayLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.DrawLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)> DrawLayerObs => _drawLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.LayoutSublayersOfLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> LayoutSublayersOfLayerObs => _layoutSublayersOfLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.WillDrawLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> WillDrawLayerObs => _willDrawLayer;
        /// <inheritdoc/>
        public override void DisplayLayer(global::CoreAnimation.CALayer layer) => _displayLayer.OnNext(layer);
        /// <inheritdoc/>
        public override void DrawLayer(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context) => _drawLayer.OnNext((layer, context));
        /// <inheritdoc/>
        public override void LayoutSublayersOfLayer(global::CoreAnimation.CALayer layer) => _layoutSublayersOfLayer.OnNext(layer);
        /// <inheritdoc/>
        public override void WillDrawLayer(global::CoreAnimation.CALayer layer) => _willDrawLayer.OnNext(layer);
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBCentralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBCentralManagerDelegateRx : global::CoreBluetooth.CBCentralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> _connectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _disconnectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> _discoveredPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _failedToConnectPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> _retrievedConnectedPeripherals = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> _retrievedPeripherals = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager> _updatedState = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.ConnectedPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> ConnectedPeripheralObs => _connectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.DisconnectedPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DisconnectedPeripheralObs => _disconnectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.DiscoveredPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> DiscoveredPeripheralObs => _discoveredPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.FailedToConnectPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> FailedToConnectPeripheralObs => _failedToConnectPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.RetrievedConnectedPeripherals"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> RetrievedConnectedPeripheralsObs => _retrievedConnectedPeripherals;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.RetrievedPeripherals"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> RetrievedPeripheralsObs => _retrievedPeripherals;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.UpdatedState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCentralManager> UpdatedStateObs => _updatedState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.WillRestoreState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <inheritdoc/>
        public override void ConnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral) => _connectedPeripheral.OnNext((central, peripheral));
        /// <inheritdoc/>
        public override void DisconnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _disconnectedPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void DiscoveredPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI) => _discoveredPeripheral.OnNext((central, peripheral, advertisementData, RSSI));
        /// <inheritdoc/>
        public override void FailedToConnectPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _failedToConnectPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void RetrievedConnectedPeripherals(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals) => _retrievedConnectedPeripherals.OnNext((central, peripherals));
        /// <inheritdoc/>
        public override void RetrievedPeripherals(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals) => _retrievedPeripherals.OnNext((central, peripherals));
        /// <inheritdoc/>
        public override void UpdatedState(global::CoreBluetooth.CBCentralManager central) => _updatedState.OnNext(central);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((central, dict));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralDelegate"/> into Observables.
    /// </summary>
    public partial class CBPeripheralDelegateRx : global::CoreBluetooth.CBPeripheralDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredCharacteristic = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _discoveredDescriptor = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredIncludedService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _discoveredService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _invalidatedService = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _isReadyToSendWriteWithoutResponse = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> _modifiedServices = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> _rssiRead = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _rssiUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedCharacterteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _updatedName = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedNotificationState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _updatedValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _wroteCharacteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _wroteDescriptorValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DidOpenL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredCharacteristic"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredCharacteristicObs => _discoveredCharacteristic;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredDescriptor"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> DiscoveredDescriptorObs => _discoveredDescriptor;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredIncludedService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredIncludedServiceObs => _discoveredIncludedService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DiscoveredServiceObs => _discoveredService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.InvalidatedService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> InvalidatedServiceObs => _invalidatedService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.IsReadyToSendWriteWithoutResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> IsReadyToSendWriteWithoutResponseObs => _isReadyToSendWriteWithoutResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.ModifiedServices"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> ModifiedServicesObs => _modifiedServices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.RssiRead"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> RssiReadObs => _rssiRead;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.RssiUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> RssiUpdatedObs => _rssiUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedCharacterteristicValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedCharacterteristicValueObs => _updatedCharacterteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> UpdatedNameObs => _updatedName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedNotificationState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedNotificationStateObs => _updatedNotificationState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> UpdatedValueObs => _updatedValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.WroteCharacteristicValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> WroteCharacteristicValueObs => _wroteCharacteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.WroteDescriptorValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> WroteDescriptorValueObs => _wroteDescriptorValue;
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DiscoveredCharacteristic(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredCharacteristic.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredDescriptor(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _discoveredDescriptor.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void DiscoveredIncludedService(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredIncludedService.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredService(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _discoveredService.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void InvalidatedService(global::CoreBluetooth.CBPeripheral peripheral) => _invalidatedService.OnNext(peripheral);
        /// <inheritdoc/>
        public override void IsReadyToSendWriteWithoutResponse(global::CoreBluetooth.CBPeripheral peripheral) => _isReadyToSendWriteWithoutResponse.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ModifiedServices(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services) => _modifiedServices.OnNext((peripheral, services));
        /// <inheritdoc/>
        public override void RssiRead(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error) => _rssiRead.OnNext((peripheral, rssi, error));
        /// <inheritdoc/>
        public override void RssiUpdated(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _rssiUpdated.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void UpdatedCharacterteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedCharacterteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedName(global::CoreBluetooth.CBPeripheral peripheral) => _updatedName.OnNext(peripheral);
        /// <inheritdoc/>
        public override void UpdatedNotificationState(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedNotificationState.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _updatedValue.OnNext((peripheral, descriptor, error));
        /// <inheritdoc/>
        public override void WroteCharacteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _wroteCharacteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void WroteDescriptorValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _wroteDescriptorValue.OnNext((peripheral, descriptor, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBPeripheralManagerDelegateRx : global::CoreBluetooth.CBPeripheralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> _advertisingStarted = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicSubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicUnsubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didPublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didUnpublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> _readRequestReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _readyToUpdateSubscribers = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _serviceAdded = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _stateUpdated = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> _writeRequestsReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.AdvertisingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> AdvertisingStartedObs => _advertisingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicSubscribed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicSubscribedObs => _characteristicSubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicUnsubscribed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicUnsubscribedObs => _characteristicUnsubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidOpenL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidPublishL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidPublishL2CapChannelObs => _didPublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidUnpublishL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidUnpublishL2CapChannelObs => _didUnpublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ReadRequestReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> ReadRequestReceivedObs => _readRequestReceived;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ReadyToUpdateSubscribers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> ReadyToUpdateSubscribersObs => _readyToUpdateSubscribers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ServiceAdded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> ServiceAddedObs => _serviceAdded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.StateUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> StateUpdatedObs => _stateUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.WriteRequestsReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> WriteRequestsReceivedObs => _writeRequestsReceived;
        /// <inheritdoc/>
        public override void AdvertisingStarted(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error) => _advertisingStarted.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void CharacteristicSubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicSubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void CharacteristicUnsubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicUnsubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DidPublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didPublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void DidUnpublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didUnpublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void ReadRequestReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request) => _readRequestReceived.OnNext((peripheral, request));
        /// <inheritdoc/>
        public override void ReadyToUpdateSubscribers(global::CoreBluetooth.CBPeripheralManager peripheral) => _readyToUpdateSubscribers.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ServiceAdded(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _serviceAdded.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void StateUpdated(global::CoreBluetooth.CBPeripheralManager peripheral) => _stateUpdated.OnNext(peripheral);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((peripheral, dict));
        /// <inheritdoc/>
        public override void WriteRequestsReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests) => _writeRequestsReceived.OnNext((peripheral, requests));
    }
}

namespace CoreData
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreData.NSCoreDataCoreSpotlightDelegate"/> into Observables.
    /// </summary>
    public partial class NSCoreDataCoreSpotlightDelegateRx : global::CoreData.NSCoreDataCoreSpotlightDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> _reindexAllSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> _reindexSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSCoreDataCoreSpotlightDelegate.ReindexAllSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> ReindexAllSearchableItemsObs => _reindexAllSearchableItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSCoreDataCoreSpotlightDelegate.ReindexSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> ReindexSearchableItemsObs => _reindexSearchableItems;
        /// <inheritdoc/>
        public override void ReindexAllSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler) => _reindexAllSearchableItems.OnNext((searchableIndex, acknowledgementHandler));
        /// <inheritdoc/>
        public override void ReindexSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler) => _reindexSearchableItems.OnNext((searchableIndex, identifiers, acknowledgementHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreData.NSFetchedResultsControllerDelegate"/> into Observables.
    /// </summary>
    public partial class NSFetchedResultsControllerDelegateRx : global::CoreData.NSFetchedResultsControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController> _didChangeContent = new Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)> _didChangeObject = new Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)> _didChangeSection = new Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController> _willChangeContent = new Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.DidChangeContent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreData.NSFetchedResultsController> DidChangeContentObs => _didChangeContent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.DidChangeObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)> DidChangeObjectObs => _didChangeObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.DidChangeSection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)> DidChangeSectionObs => _didChangeSection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.WillChangeContent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreData.NSFetchedResultsController> WillChangeContentObs => _willChangeContent;
        /// <inheritdoc/>
        public override void DidChangeContent(global::CoreData.NSFetchedResultsController controller) => _didChangeContent.OnNext(controller);
        /// <inheritdoc/>
        public override void DidChangeObject(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath) => _didChangeObject.OnNext((controller, anObject, indexPath, type, newIndexPath));
        /// <inheritdoc/>
        public override void DidChangeSection(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type) => _didChangeSection.OnNext((controller, sectionInfo, sectionIndex, type));
        /// <inheritdoc/>
        public override void WillChangeContent(global::CoreData.NSFetchedResultsController controller) => _willChangeContent.OnNext(controller);
    }
}

namespace CoreLocation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreLocation.CLLocationManagerDelegate"/> into Observables.
    /// </summary>
    public partial class CLLocationManagerDelegateRx : global::CoreLocation.CLLocationManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> _authorizationChanged = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> _deferredUpdatesFinished = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region)> _didDetermineState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeacon[] beacons, global::CoreLocation.CLBeaconRegion region)> _didRangeBeacons = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeacon[] beacons, global::CoreLocation.CLBeaconRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> _didStartMonitoringForRegion = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLVisit visit)> _didVisit = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLVisit visit)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> _locationsUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager> _locationUpdatesPaused = new Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager> _locationUpdatesResumed = new Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error)> _monitoringFailed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeaconRegion region, global::Foundation.NSError error)> _rangingBeaconsDidFailForRegion = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeaconRegion region, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> _regionEntered = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> _regionLeft = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading)> _updatedHeading = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation)> _updatedLocation = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.AuthorizationChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> AuthorizationChangedObs => _authorizationChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DeferredUpdatesFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> DeferredUpdatesFinishedObs => _deferredUpdatesFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DidDetermineState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region)> DidDetermineStateObs => _didDetermineState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DidRangeBeacons"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeacon[] beacons, global::CoreLocation.CLBeaconRegion region)> DidRangeBeaconsObs => _didRangeBeacons;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DidStartMonitoringForRegion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> DidStartMonitoringForRegionObs => _didStartMonitoringForRegion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DidVisit"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLVisit visit)> DidVisitObs => _didVisit;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.Failed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.LocationsUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> LocationsUpdatedObs => _locationsUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.LocationUpdatesPaused"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationManager> LocationUpdatesPausedObs => _locationUpdatesPaused;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.LocationUpdatesResumed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationManager> LocationUpdatesResumedObs => _locationUpdatesResumed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.MonitoringFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error)> MonitoringFailedObs => _monitoringFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.RangingBeaconsDidFailForRegion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeaconRegion region, global::Foundation.NSError error)> RangingBeaconsDidFailForRegionObs => _rangingBeaconsDidFailForRegion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.RegionEntered"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> RegionEnteredObs => _regionEntered;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.RegionLeft"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> RegionLeftObs => _regionLeft;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.UpdatedHeading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading)> UpdatedHeadingObs => _updatedHeading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.UpdatedLocation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation)> UpdatedLocationObs => _updatedLocation;
        /// <inheritdoc/>
        public override void AuthorizationChanged(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status) => _authorizationChanged.OnNext((manager, status));
        /// <inheritdoc/>
        public override void DeferredUpdatesFinished(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error) => _deferredUpdatesFinished.OnNext((manager, error));
        /// <inheritdoc/>
        public override void DidDetermineState(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region) => _didDetermineState.OnNext((manager, state, region));
        /// <inheritdoc/>
        public override void DidRangeBeacons(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeacon[] beacons, global::CoreLocation.CLBeaconRegion region) => _didRangeBeacons.OnNext((manager, beacons, region));
        /// <inheritdoc/>
        public override void DidStartMonitoringForRegion(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region) => _didStartMonitoringForRegion.OnNext((manager, region));
        /// <inheritdoc/>
        public override void DidVisit(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLVisit visit) => _didVisit.OnNext((manager, visit));
        /// <inheritdoc/>
        public override void Failed(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error) => _failed.OnNext((manager, error));
        /// <inheritdoc/>
        public override void LocationsUpdated(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations) => _locationsUpdated.OnNext((manager, locations));
        /// <inheritdoc/>
        public override void LocationUpdatesPaused(global::CoreLocation.CLLocationManager manager) => _locationUpdatesPaused.OnNext(manager);
        /// <inheritdoc/>
        public override void LocationUpdatesResumed(global::CoreLocation.CLLocationManager manager) => _locationUpdatesResumed.OnNext(manager);
        /// <inheritdoc/>
        public override void MonitoringFailed(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error) => _monitoringFailed.OnNext((manager, region, error));
        /// <inheritdoc/>
        public override void RangingBeaconsDidFailForRegion(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLBeaconRegion region, global::Foundation.NSError error) => _rangingBeaconsDidFailForRegion.OnNext((manager, region, error));
        /// <inheritdoc/>
        public override void RegionEntered(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region) => _regionEntered.OnNext((manager, region));
        /// <inheritdoc/>
        public override void RegionLeft(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region) => _regionLeft.OnNext((manager, region));
        /// <inheritdoc/>
        public override void UpdatedHeading(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLHeading newHeading) => _updatedHeading.OnNext((manager, newHeading));
        /// <inheritdoc/>
        public override void UpdatedLocation(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation) => _updatedLocation.OnNext((manager, newLocation, oldLocation));
    }
}

namespace CoreNFC
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreNFC.NFCNdefReaderSessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NFCNdefReaderSessionDelegateRx : global::CoreNFC.NFCNdefReaderSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCNdefReaderSession session, global::CoreNFC.NFCNdefMessage[] messages)> _didDetect = new Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCNdefReaderSession session, global::CoreNFC.NFCNdefMessage[] messages)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCNdefReaderSession session, global::Foundation.NSError error)> _didInvalidate = new Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCNdefReaderSession session, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreNFC.NFCNdefReaderSessionDelegate.DidDetect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreNFC.NFCNdefReaderSession session, global::CoreNFC.NFCNdefMessage[] messages)> DidDetectObs => _didDetect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreNFC.NFCNdefReaderSessionDelegate.DidInvalidate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreNFC.NFCNdefReaderSession session, global::Foundation.NSError error)> DidInvalidateObs => _didInvalidate;
        /// <inheritdoc/>
        public override void DidDetect(global::CoreNFC.NFCNdefReaderSession session, global::CoreNFC.NFCNdefMessage[] messages) => _didDetect.OnNext((session, messages));
        /// <inheritdoc/>
        public override void DidInvalidate(global::CoreNFC.NFCNdefReaderSession session, global::Foundation.NSError error) => _didInvalidate.OnNext((session, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreNFC.NFCReaderSessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NFCReaderSessionDelegateRx : global::CoreNFC.NFCReaderSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreNFC.NFCReaderSession> _didBecomeActive = new Pharmacist.Common.SingleAwaitSubject<global::CoreNFC.NFCReaderSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCReaderSession session, global::CoreNFC.INFCTag[] tags)> _didDetectTags = new Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCReaderSession session, global::CoreNFC.INFCTag[] tags)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCReaderSession session, global::Foundation.NSError error)> _didInvalidate = new Pharmacist.Common.SingleAwaitSubject<(global::CoreNFC.NFCReaderSession session, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreNFC.NFCReaderSessionDelegate.DidBecomeActive"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreNFC.NFCReaderSession> DidBecomeActiveObs => _didBecomeActive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreNFC.NFCReaderSessionDelegate.DidDetectTags"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreNFC.NFCReaderSession session, global::CoreNFC.INFCTag[] tags)> DidDetectTagsObs => _didDetectTags;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreNFC.NFCReaderSessionDelegate.DidInvalidate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreNFC.NFCReaderSession session, global::Foundation.NSError error)> DidInvalidateObs => _didInvalidate;
        /// <inheritdoc/>
        public override void DidBecomeActive(global::CoreNFC.NFCReaderSession session) => _didBecomeActive.OnNext(session);
        /// <inheritdoc/>
        public override void DidDetectTags(global::CoreNFC.NFCReaderSession session, global::CoreNFC.INFCTag[] tags) => _didDetectTags.OnNext((session, tags));
        /// <inheritdoc/>
        public override void DidInvalidate(global::CoreNFC.NFCReaderSession session, global::Foundation.NSError error) => _didInvalidate.OnNext((session, error));
    }
}

namespace CoreSpotlight
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreSpotlight.CSSearchableIndexDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CSSearchableIndexDelegateRx : global::CoreSpotlight.CSSearchableIndexDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex> _didFinishThrottle = new Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex> _didThrottle = new Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> _reindexAllSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> _reindexSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.DidFinishThrottle"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreSpotlight.CSSearchableIndex> DidFinishThrottleObs => _didFinishThrottle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.DidThrottle"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreSpotlight.CSSearchableIndex> DidThrottleObs => _didThrottle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.ReindexAllSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> ReindexAllSearchableItemsObs => _reindexAllSearchableItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.ReindexSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> ReindexSearchableItemsObs => _reindexSearchableItems;
        /// <inheritdoc/>
        public override void DidFinishThrottle(global::CoreSpotlight.CSSearchableIndex searchableIndex) => _didFinishThrottle.OnNext(searchableIndex);
        /// <inheritdoc/>
        public override void DidThrottle(global::CoreSpotlight.CSSearchableIndex searchableIndex) => _didThrottle.OnNext(searchableIndex);
        /// <inheritdoc/>
        public override void ReindexAllSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler) => _reindexAllSearchableItems.OnNext((searchableIndex, acknowledgementHandler));
        /// <inheritdoc/>
        public override void ReindexSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler) => _reindexSearchableItems.OnNext((searchableIndex, identifiers, acknowledgementHandler));
    }
}

namespace EventKitUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::EventKitUI.EKCalendarChooserDelegate"/> into Observables.
    /// </summary>
    public partial class EKCalendarChooserDelegateRx : global::EventKitUI.EKCalendarChooserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::EventKitUI.EKCalendarChooser> _cancelled = new Pharmacist.Common.SingleAwaitSubject<global::EventKitUI.EKCalendarChooser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::EventKitUI.EKCalendarChooser> _finished = new Pharmacist.Common.SingleAwaitSubject<global::EventKitUI.EKCalendarChooser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::EventKitUI.EKCalendarChooser> _selectionChanged = new Pharmacist.Common.SingleAwaitSubject<global::EventKitUI.EKCalendarChooser>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKCalendarChooserDelegate.Cancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::EventKitUI.EKCalendarChooser> CancelledObs => _cancelled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKCalendarChooserDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::EventKitUI.EKCalendarChooser> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKCalendarChooserDelegate.SelectionChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::EventKitUI.EKCalendarChooser> SelectionChangedObs => _selectionChanged;
        /// <inheritdoc/>
        public override void Cancelled(global::EventKitUI.EKCalendarChooser calendarChooser) => _cancelled.OnNext(calendarChooser);
        /// <inheritdoc/>
        public override void Finished(global::EventKitUI.EKCalendarChooser calendarChooser) => _finished.OnNext(calendarChooser);
        /// <inheritdoc/>
        public override void SelectionChanged(global::EventKitUI.EKCalendarChooser calendarChooser) => _selectionChanged.OnNext(calendarChooser);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::EventKitUI.EKEventEditViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class EKEventEditViewDelegateRx : global::EventKitUI.EKEventEditViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::EventKitUI.EKEventEditViewController controller, global::EventKitUI.EKEventEditViewAction action)> _completed = new Pharmacist.Common.SingleAwaitSubject<(global::EventKitUI.EKEventEditViewController controller, global::EventKitUI.EKEventEditViewAction action)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKEventEditViewDelegate.Completed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::EventKitUI.EKEventEditViewController controller, global::EventKitUI.EKEventEditViewAction action)> CompletedObs => _completed;
        /// <inheritdoc/>
        public override void Completed(global::EventKitUI.EKEventEditViewController controller, global::EventKitUI.EKEventEditViewAction action) => _completed.OnNext((controller, action));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::EventKitUI.EKEventViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class EKEventViewDelegateRx : global::EventKitUI.EKEventViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::EventKitUI.EKEventViewController controller, global::EventKitUI.EKEventViewAction action)> _completed = new Pharmacist.Common.SingleAwaitSubject<(global::EventKitUI.EKEventViewController controller, global::EventKitUI.EKEventViewAction action)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "EventKitUI.EKEventViewDelegate.Completed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::EventKitUI.EKEventViewController controller, global::EventKitUI.EKEventViewAction action)> CompletedObs => _completed;
        /// <inheritdoc/>
        public override void Completed(global::EventKitUI.EKEventViewController controller, global::EventKitUI.EKEventViewAction action) => _completed.OnNext((controller, action));
    }
}

namespace ExternalAccessory
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ExternalAccessory.EAAccessoryDelegate"/> into Observables.
    /// </summary>
    public partial class EAAccessoryDelegateRx : global::ExternalAccessory.EAAccessoryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ExternalAccessory.EAAccessory> _disconnected = new Pharmacist.Common.SingleAwaitSubject<global::ExternalAccessory.EAAccessory>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAAccessoryDelegate.Disconnected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ExternalAccessory.EAAccessory> DisconnectedObs => _disconnected;
        /// <inheritdoc/>
        public override void Disconnected(global::ExternalAccessory.EAAccessory accessory) => _disconnected.OnNext(accessory);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class EAWiFiUnconfiguredAccessoryBrowserDelegateRx : global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories)> _didFindUnconfiguredAccessories = new Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessory accessory, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryConfigurationStatus status)> _didFinishConfiguringAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessory accessory, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryConfigurationStatus status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories)> _didRemoveUnconfiguredAccessories = new Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserState state)> _didUpdateState = new Pharmacist.Common.SingleAwaitSubject<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserState state)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidFindUnconfiguredAccessories"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories)> DidFindUnconfiguredAccessoriesObs => _didFindUnconfiguredAccessories;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidFinishConfiguringAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessory accessory, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryConfigurationStatus status)> DidFinishConfiguringAccessoryObs => _didFinishConfiguringAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidRemoveUnconfiguredAccessories"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories)> DidRemoveUnconfiguredAccessoriesObs => _didRemoveUnconfiguredAccessories;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidUpdateState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserState state)> DidUpdateStateObs => _didUpdateState;
        /// <inheritdoc/>
        public override void DidFindUnconfiguredAccessories(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories) => _didFindUnconfiguredAccessories.OnNext((browser, accessories));
        /// <inheritdoc/>
        public override void DidFinishConfiguringAccessory(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessory accessory, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryConfigurationStatus status) => _didFinishConfiguringAccessory.OnNext((browser, accessory, status));
        /// <inheritdoc/>
        public override void DidRemoveUnconfiguredAccessories(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::Foundation.NSSet accessories) => _didRemoveUnconfiguredAccessories.OnNext((browser, accessories));
        /// <inheritdoc/>
        public override void DidUpdateState(global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser browser, global::ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserState state) => _didUpdateState.OnNext((browser, state));
    }
}

namespace Foundation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSCacheDelegate"/> into Observables.
    /// </summary>
    public partial class NSCacheDelegateRx : global::Foundation.NSCacheDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> _willEvictObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSCacheDelegate.WillEvictObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> WillEvictObjectObs => _willEvictObject;
        /// <inheritdoc/>
        public override void WillEvictObject(global::Foundation.NSCache cache, global::Foundation.NSObject obj) => _willEvictObject.OnNext((cache, obj));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedArchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedArchiverDelegateRx : global::Foundation.NSKeyedArchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> _encodedObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.EncodedObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> EncodedObjectObs => _encodedObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.Finishing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.ReplacingObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void EncodedObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj) => _encodedObject.OnNext((archiver, obj));
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedArchiver archiver) => _finished.OnNext(archiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedArchiver archiver) => _finishing.OnNext(archiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((archiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedUnarchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedUnarchiverDelegateRx : global::Foundation.NSKeyedUnarchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.Finishing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.ReplacingObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedUnarchiver unarchiver) => _finished.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedUnarchiver unarchiver) => _finishing.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((unarchiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSMachPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSMachPortDelegateRx : global::Foundation.NSMachPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr> _machMessageReceived = new Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSMachPortDelegate.MachMessageReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.IntPtr> MachMessageReceivedObs => _machMessageReceived;
        /// <inheritdoc/>
        public override void MachMessageReceived(global::System.IntPtr msgHeader) => _machMessageReceived.OnNext(msgHeader);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSNetServiceBrowserDelegate"/> into Observables.
    /// </summary>
    public partial class NSNetServiceBrowserDelegateRx : global::Foundation.NSNetServiceBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> _domainRemoved = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> _foundDomain = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> _foundService = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)> _notSearched = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser> _searchStarted = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser> _searchStopped = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> _serviceRemoved = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.DomainRemoved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> DomainRemovedObs => _domainRemoved;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.FoundDomain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> FoundDomainObs => _foundDomain;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.FoundService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> FoundServiceObs => _foundService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.NotSearched"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)> NotSearchedObs => _notSearched;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.SearchStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceBrowser> SearchStartedObs => _searchStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.SearchStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceBrowser> SearchStoppedObs => _searchStopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.ServiceRemoved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> ServiceRemovedObs => _serviceRemoved;
        /// <inheritdoc/>
        public override void DomainRemoved(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing) => _domainRemoved.OnNext((sender, domain, moreComing));
        /// <inheritdoc/>
        public override void FoundDomain(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing) => _foundDomain.OnNext((sender, domain, moreComing));
        /// <inheritdoc/>
        public override void FoundService(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing) => _foundService.OnNext((sender, service, moreComing));
        /// <inheritdoc/>
        public override void NotSearched(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors) => _notSearched.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void SearchStarted(global::Foundation.NSNetServiceBrowser sender) => _searchStarted.OnNext(sender);
        /// <inheritdoc/>
        public override void SearchStopped(global::Foundation.NSNetServiceBrowser sender) => _searchStopped.OnNext(sender);
        /// <inheritdoc/>
        public override void ServiceRemoved(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing) => _serviceRemoved.OnNext((sender, service, moreComing));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSNetServiceDelegate"/> into Observables.
    /// </summary>
    public partial class NSNetServiceDelegateRx : global::Foundation.NSNetServiceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _addressResolved = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _didAcceptConnection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _published = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> _publishFailure = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> _resolveFailure = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _stopped = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSData data)> _updatedTxtRecordData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _willPublish = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _willResolve = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.AddressResolved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> AddressResolvedObs => _addressResolved;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.DidAcceptConnection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> DidAcceptConnectionObs => _didAcceptConnection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.Published"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> PublishedObs => _published;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.PublishFailure"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> PublishFailureObs => _publishFailure;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.ResolveFailure"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> ResolveFailureObs => _resolveFailure;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.Stopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> StoppedObs => _stopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.UpdatedTxtRecordData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSData data)> UpdatedTxtRecordDataObs => _updatedTxtRecordData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.WillPublish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> WillPublishObs => _willPublish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.WillResolve"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> WillResolveObs => _willResolve;
        /// <inheritdoc/>
        public override void AddressResolved(global::Foundation.NSNetService sender) => _addressResolved.OnNext(sender);
        /// <inheritdoc/>
        public override void DidAcceptConnection(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _didAcceptConnection.OnNext((sender, inputStream, outputStream));
        /// <inheritdoc/>
        public override void Published(global::Foundation.NSNetService sender) => _published.OnNext(sender);
        /// <inheritdoc/>
        public override void PublishFailure(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors) => _publishFailure.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void ResolveFailure(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors) => _resolveFailure.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void Stopped(global::Foundation.NSNetService sender) => _stopped.OnNext(sender);
        /// <inheritdoc/>
        public override void UpdatedTxtRecordData(global::Foundation.NSNetService sender, global::Foundation.NSData data) => _updatedTxtRecordData.OnNext((sender, data));
        /// <inheritdoc/>
        public override void WillPublish(global::Foundation.NSNetService sender) => _willPublish.OnNext(sender);
        /// <inheritdoc/>
        public override void WillResolve(global::Foundation.NSNetService sender) => _willResolve.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSPortDelegateRx : global::Foundation.NSPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage> _messageReceived = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSPortDelegate.MessageReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSPortMessage> MessageReceivedObs => _messageReceived;
        /// <inheritdoc/>
        public override void MessageReceived(global::Foundation.NSPortMessage message) => _messageReceived.OnNext(message);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSStreamDelegateRx : global::Foundation.NSStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> _handleEvent = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSStreamDelegate.HandleEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> HandleEventObs => _handleEvent;
        /// <inheritdoc/>
        public override void HandleEvent(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent) => _handleEvent.OnNext((theStream, streamEvent));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDataDelegateRx : global::Foundation.NSUrlConnectionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection> _finishedLoading = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> _receivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> _sentBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.FinishedLoading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlConnection> FinishedLoadingObs => _finishedLoading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.ReceivedData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> ReceivedDataObs => _receivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.ReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.SentBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> SentBodyDataObs => _sentBodyData;
        /// <inheritdoc/>
        public override void FinishedLoading(global::Foundation.NSUrlConnection connection) => _finishedLoading.OnNext(connection);
        /// <inheritdoc/>
        public override void ReceivedData(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data) => _receivedData.OnNext((connection, data));
        /// <inheritdoc/>
        public override void ReceivedResponse(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response) => _receivedResponse.OnNext((connection, response));
        /// <inheritdoc/>
        public override void SentBodyData(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite) => _sentBodyData.OnNext((connection, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDelegateRx : global::Foundation.NSUrlConnectionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _canceledAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _receivedAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _willSendRequestForAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.CanceledAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> CanceledAuthenticationChallengeObs => _canceledAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.ReceivedAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> ReceivedAuthenticationChallengeObs => _receivedAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.WillSendRequestForAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> WillSendRequestForAuthenticationChallengeObs => _willSendRequestForAuthenticationChallenge;
        /// <inheritdoc/>
        public override void CanceledAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _canceledAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void FailedWithError(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error) => _failedWithError.OnNext((connection, error));
        /// <inheritdoc/>
        public override void ReceivedAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _receivedAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void WillSendRequestForAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _willSendRequestForAuthenticationChallenge.OnNext((connection, challenge));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlConnectionDownloadDelegateRx : global::Foundation.NSUrlConnectionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> _finishedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> _resumedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> _wroteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.FinishedDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> FinishedDownloadingObs => _finishedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.ResumedDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> ResumedDownloadingObs => _resumedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.WroteData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> WroteDataObs => _wroteData;
        /// <inheritdoc/>
        public override void FinishedDownloading(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl) => _finishedDownloading.OnNext((connection, destinationUrl));
        /// <inheritdoc/>
        public override void ResumedDownloading(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes) => _resumedDownloading.OnNext((connection, totalBytesWritten, expectedTotalBytes));
        /// <inheritdoc/>
        public override void WroteData(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes) => _wroteData.OnNext((connection, bytesWritten, totalBytesWritten, expectedTotalBytes));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDataDelegateRx : global::Foundation.NSUrlSessionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> _didBecomeDownloadTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> _didBecomeStreamTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> _didReceiveData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> _didReceiveResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> _willCacheResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidBecomeDownloadTask"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> DidBecomeDownloadTaskObs => _didBecomeDownloadTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidBecomeStreamTask"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> DidBecomeStreamTaskObs => _didBecomeStreamTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidReceiveData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> DidReceiveDataObs => _didReceiveData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidReceiveResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> DidReceiveResponseObs => _didReceiveResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.WillCacheResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> WillCacheResponseObs => _willCacheResponse;
        /// <inheritdoc/>
        public override void DidBecomeDownloadTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask) => _didBecomeDownloadTask.OnNext((session, dataTask, downloadTask));
        /// <inheritdoc/>
        public override void DidBecomeStreamTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask) => _didBecomeStreamTask.OnNext((session, dataTask, streamTask));
        /// <inheritdoc/>
        public override void DidReceiveData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data) => _didReceiveData.OnNext((session, dataTask, data));
        /// <inheritdoc/>
        public override void DidReceiveResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler) => _didReceiveResponse.OnNext((session, dataTask, response, completionHandler));
        /// <inheritdoc/>
        public override void WillCacheResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler) => _willCacheResponse.OnNext((session, dataTask, proposedResponse, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDelegateRx : global::Foundation.NSUrlSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> _didBecomeInvalid = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession> _didFinishEventsForBackgroundSession = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidBecomeInvalid"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> DidBecomeInvalidObs => _didBecomeInvalid;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidFinishEventsForBackgroundSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlSession> DidFinishEventsForBackgroundSessionObs => _didFinishEventsForBackgroundSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <inheritdoc/>
        public override void DidBecomeInvalid(global::Foundation.NSUrlSession session, global::Foundation.NSError error) => _didBecomeInvalid.OnNext((session, error));
        /// <inheritdoc/>
        public override void DidFinishEventsForBackgroundSession(global::Foundation.NSUrlSession session) => _didFinishEventsForBackgroundSession.OnNext(session);
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, challenge, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlSessionDownloadDelegateRx : global::Foundation.NSUrlSessionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> _didFinishDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> _didResume = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> _didWriteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidFinishDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> DidFinishDownloadingObs => _didFinishDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidResume"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> DidResumeObs => _didResume;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidWriteData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> DidWriteDataObs => _didWriteData;
        /// <inheritdoc/>
        public override void DidFinishDownloading(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location) => _didFinishDownloading.OnNext((session, downloadTask, location));
        /// <inheritdoc/>
        public override void DidResume(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes) => _didResume.OnNext((session, downloadTask, resumeFileOffset, expectedTotalBytes));
        /// <inheritdoc/>
        public override void DidWriteData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite) => _didWriteData.OnNext((session, downloadTask, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionStreamDelegateRx : global::Foundation.NSUrlSessionStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _betterRouteDiscovered = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _completedTaskCaptureStreams = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _readClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _writeClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.BetterRouteDiscovered"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> BetterRouteDiscoveredObs => _betterRouteDiscovered;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.CompletedTaskCaptureStreams"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> CompletedTaskCaptureStreamsObs => _completedTaskCaptureStreams;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.ReadClosed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> ReadClosedObs => _readClosed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.WriteClosed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> WriteClosedObs => _writeClosed;
        /// <inheritdoc/>
        public override void BetterRouteDiscovered(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _betterRouteDiscovered.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void CompletedTaskCaptureStreams(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _completedTaskCaptureStreams.OnNext((session, streamTask, inputStream, outputStream));
        /// <inheritdoc/>
        public override void ReadClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _readClosed.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void WriteClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _writeClosed.OnNext((session, streamTask));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionTaskDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionTaskDelegateRx : global::Foundation.NSUrlSessionTaskDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> _didCompleteWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> _didFinishCollectingMetrics = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> _didSendBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> _needNewBodyStream = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> _taskIsWaitingForConnectivity = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> _willBeginDelayedRequest = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> _willPerformHttpRedirection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidCompleteWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> DidCompleteWithErrorObs => _didCompleteWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidFinishCollectingMetrics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> DidFinishCollectingMetricsObs => _didFinishCollectingMetrics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidSendBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> DidSendBodyDataObs => _didSendBodyData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.NeedNewBodyStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> NeedNewBodyStreamObs => _needNewBodyStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.TaskIsWaitingForConnectivity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> TaskIsWaitingForConnectivityObs => _taskIsWaitingForConnectivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.WillBeginDelayedRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> WillBeginDelayedRequestObs => _willBeginDelayedRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.WillPerformHttpRedirection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> WillPerformHttpRedirectionObs => _willPerformHttpRedirection;
        /// <inheritdoc/>
        public override void DidCompleteWithError(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error) => _didCompleteWithError.OnNext((session, task, error));
        /// <inheritdoc/>
        public override void DidFinishCollectingMetrics(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics) => _didFinishCollectingMetrics.OnNext((session, task, metrics));
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, task, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidSendBodyData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend) => _didSendBodyData.OnNext((session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend));
        /// <inheritdoc/>
        public override void NeedNewBodyStream(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler) => _needNewBodyStream.OnNext((session, task, completionHandler));
        /// <inheritdoc/>
        public override void TaskIsWaitingForConnectivity(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task) => _taskIsWaitingForConnectivity.OnNext((session, task));
        /// <inheritdoc/>
        public override void WillBeginDelayedRequest(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler) => _willBeginDelayedRequest.OnNext((session, task, request, completionHandler));
        /// <inheritdoc/>
        public override void WillPerformHttpRedirection(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler) => _willPerformHttpRedirection.OnNext((session, task, response, newRequest, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUserActivityDelegate"/> into Observables.
    /// </summary>
    public partial class NSUserActivityDelegateRx : global::Foundation.NSUserActivityDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _userActivityReceivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWasContinued = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWillSave = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityReceivedData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> UserActivityReceivedDataObs => _userActivityReceivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityWasContinued"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWasContinuedObs => _userActivityWasContinued;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityWillSave"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWillSaveObs => _userActivityWillSave;
        /// <inheritdoc/>
        public override void UserActivityReceivedData(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _userActivityReceivedData.OnNext((userActivity, inputStream, outputStream));
        /// <inheritdoc/>
        public override void UserActivityWasContinued(global::Foundation.NSUserActivity userActivity) => _userActivityWasContinued.OnNext(userActivity);
        /// <inheritdoc/>
        public override void UserActivityWillSave(global::Foundation.NSUserActivity userActivity) => _userActivityWillSave.OnNext(userActivity);
    }
}

namespace GameKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKAchievementViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKAchievementViewControllerDelegateRx : global::GameKit.GKAchievementViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKAchievementViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKAchievementViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKAchievementViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKAchievementViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKAchievementViewController viewController) => _didFinish.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKChallengeEventHandlerDelegate"/> into Observables.
    /// </summary>
    public partial class GKChallengeEventHandlerDelegateRx : global::GameKit.GKChallengeEventHandlerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _localPlayerCompletedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _localPlayerReceivedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _localPlayerSelectedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _remotePlayerCompletedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.LocalPlayerCompletedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> LocalPlayerCompletedChallengeObs => _localPlayerCompletedChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.LocalPlayerReceivedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> LocalPlayerReceivedChallengeObs => _localPlayerReceivedChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.LocalPlayerSelectedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> LocalPlayerSelectedChallengeObs => _localPlayerSelectedChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.RemotePlayerCompletedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> RemotePlayerCompletedChallengeObs => _remotePlayerCompletedChallenge;
        /// <inheritdoc/>
        public override void LocalPlayerCompletedChallenge(global::GameKit.GKChallenge challenge) => _localPlayerCompletedChallenge.OnNext(challenge);
        /// <inheritdoc/>
        public override void LocalPlayerReceivedChallenge(global::GameKit.GKChallenge challenge) => _localPlayerReceivedChallenge.OnNext(challenge);
        /// <inheritdoc/>
        public override void LocalPlayerSelectedChallenge(global::GameKit.GKChallenge challenge) => _localPlayerSelectedChallenge.OnNext(challenge);
        /// <inheritdoc/>
        public override void RemotePlayerCompletedChallenge(global::GameKit.GKChallenge challenge) => _remotePlayerCompletedChallenge.OnNext(challenge);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKFriendRequestComposeViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKFriendRequestComposeViewControllerDelegateRx : global::GameKit.GKFriendRequestComposeViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKFriendRequestComposeViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKFriendRequestComposeViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKFriendRequestComposeViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKFriendRequestComposeViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKFriendRequestComposeViewController viewController) => _didFinish.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKGameCenterControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKGameCenterControllerDelegateRx : global::GameKit.GKGameCenterControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKGameCenterViewController> _finished = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKGameCenterViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKGameCenterControllerDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKGameCenterViewController> FinishedObs => _finished;
        /// <inheritdoc/>
        public override void Finished(global::GameKit.GKGameCenterViewController controller) => _finished.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKLeaderboardViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKLeaderboardViewControllerDelegateRx : global::GameKit.GKLeaderboardViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKLeaderboardViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKLeaderboardViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKLeaderboardViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKLeaderboardViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKLeaderboardViewController viewController) => _didFinish.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKMatchDelegate"/> into Observables.
    /// </summary>
    public partial class GKMatchDelegateRx : global::GameKit.GKMatchDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId)> _dataReceived = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)> _dataReceivedForRecipient = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)> _dataReceivedFromPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state)> _stateChanged = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)> _stateChangedForPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId)> DataReceivedObs => _dataReceived;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceivedForRecipient"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)> DataReceivedForRecipientObs => _dataReceivedForRecipient;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceivedFromPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)> DataReceivedFromPlayerObs => _dataReceivedFromPlayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.Failed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.StateChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state)> StateChangedObs => _stateChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.StateChangedForPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)> StateChangedForPlayerObs => _stateChangedForPlayer;
        /// <inheritdoc/>
        public override void DataReceived(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId) => _dataReceived.OnNext((match, data, playerId));
        /// <inheritdoc/>
        public override void DataReceivedForRecipient(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player) => _dataReceivedForRecipient.OnNext((match, data, recipient, player));
        /// <inheritdoc/>
        public override void DataReceivedFromPlayer(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player) => _dataReceivedFromPlayer.OnNext((match, data, player));
        /// <inheritdoc/>
        public override void Failed(global::GameKit.GKMatch match, global::Foundation.NSError error) => _failed.OnNext((match, error));
        /// <inheritdoc/>
        public override void StateChanged(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state) => _stateChanged.OnNext((match, playerId, state));
        /// <inheritdoc/>
        public override void StateChangedForPlayer(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state) => _stateChangedForPlayer.OnNext((match, player, state));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKMatchmakerViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKMatchmakerViewControllerDelegateRx : global::GameKit.GKMatchmakerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)> _didFailWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)> _didFindHostedPlayers = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)> _didFindMatch = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs)> _didFindPlayers = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)> _hostedPlayerDidAccept = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, string playerID)> _receivedAcceptFromHostedPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, string playerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKMatchmakerViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKMatchmakerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFailWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)> DidFailWithErrorObs => _didFailWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindHostedPlayers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)> DidFindHostedPlayersObs => _didFindHostedPlayers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)> DidFindMatchObs => _didFindMatch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindPlayers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs)> DidFindPlayersObs => _didFindPlayers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.HostedPlayerDidAccept"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)> HostedPlayerDidAcceptObs => _hostedPlayerDidAccept;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.ReceivedAcceptFromHostedPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, string playerID)> ReceivedAcceptFromHostedPlayerObs => _receivedAcceptFromHostedPlayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakerViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidFailWithError(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error) => _didFailWithError.OnNext((viewController, error));
        /// <inheritdoc/>
        public override void DidFindHostedPlayers(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs) => _didFindHostedPlayers.OnNext((viewController, playerIDs));
        /// <inheritdoc/>
        public override void DidFindMatch(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match) => _didFindMatch.OnNext((viewController, match));
        /// <inheritdoc/>
        public override void DidFindPlayers(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs) => _didFindPlayers.OnNext((viewController, playerIDs));
        /// <inheritdoc/>
        public override void HostedPlayerDidAccept(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID) => _hostedPlayerDidAccept.OnNext((viewController, playerID));
        /// <inheritdoc/>
        public override void ReceivedAcceptFromHostedPlayer(global::GameKit.GKMatchmakerViewController viewController, string playerID) => _receivedAcceptFromHostedPlayer.OnNext((viewController, playerID));
        /// <inheritdoc/>
        public override void WasCancelled(global::GameKit.GKMatchmakerViewController viewController) => _wasCancelled.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKPeerPickerControllerDelegate"/> into Observables.
    /// </summary>
    public partial class GKPeerPickerControllerDelegateRx : global::GameKit.GKPeerPickerControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKPeerPickerController picker, global::GameKit.GKPeerPickerConnectionType type)> _connectionTypeSelected = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKPeerPickerController picker, global::GameKit.GKPeerPickerConnectionType type)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKPeerPickerController> _controllerCancelled = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKPeerPickerController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKPeerPickerController picker, string peerId, global::GameKit.GKSession toSession)> _peerConnected = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKPeerPickerController picker, string peerId, global::GameKit.GKSession toSession)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKPeerPickerControllerDelegate.ConnectionTypeSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKPeerPickerController picker, global::GameKit.GKPeerPickerConnectionType type)> ConnectionTypeSelectedObs => _connectionTypeSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKPeerPickerControllerDelegate.ControllerCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPeerPickerController> ControllerCancelledObs => _controllerCancelled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKPeerPickerControllerDelegate.PeerConnected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKPeerPickerController picker, string peerId, global::GameKit.GKSession toSession)> PeerConnectedObs => _peerConnected;
        /// <inheritdoc/>
        public override void ConnectionTypeSelected(global::GameKit.GKPeerPickerController picker, global::GameKit.GKPeerPickerConnectionType type) => _connectionTypeSelected.OnNext((picker, type));
        /// <inheritdoc/>
        public override void ControllerCancelled(global::GameKit.GKPeerPickerController picker) => _controllerCancelled.OnNext(picker);
        /// <inheritdoc/>
        public override void PeerConnected(global::GameKit.GKPeerPickerController picker, string peerId, global::GameKit.GKSession toSession) => _peerConnected.OnNext((picker, peerId, toSession));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKSessionDelegate"/> into Observables.
    /// </summary>
    public partial class GKSessionDelegateRx : global::GameKit.GKSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state)> _peerChangedState = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error)> _peerConnectionFailed = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID)> _peerConnectionRequest = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.PeerChangedState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state)> PeerChangedStateObs => _peerChangedState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.PeerConnectionFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error)> PeerConnectionFailedObs => _peerConnectionFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.PeerConnectionRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, string peerID)> PeerConnectionRequestObs => _peerConnectionRequest;
        /// <inheritdoc/>
        public override void FailedWithError(global::GameKit.GKSession session, global::Foundation.NSError error) => _failedWithError.OnNext((session, error));
        /// <inheritdoc/>
        public override void PeerChangedState(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state) => _peerChangedState.OnNext((session, peerID, state));
        /// <inheritdoc/>
        public override void PeerConnectionFailed(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error) => _peerConnectionFailed.OnNext((session, peerID, error));
        /// <inheritdoc/>
        public override void PeerConnectionRequest(global::GameKit.GKSession session, string peerID) => _peerConnectionRequest.OnNext((session, peerID));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKTurnBasedEventHandlerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKTurnBasedEventHandlerDelegateRx : global::GameKit.GKTurnBasedEventHandlerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSString[]> _handleInviteFromGameCenter = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSString[]>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch> _handleMatchEnded = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatch match, bool activated)> _handleTurnEvent = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatch match, bool activated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch> _handleTurnEventForMatch = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleInviteFromGameCenter"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSString[]> HandleInviteFromGameCenterObs => _handleInviteFromGameCenter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleMatchEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatch> HandleMatchEndedObs => _handleMatchEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatch match, bool activated)> HandleTurnEventObs => _handleTurnEvent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEventForMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatch> HandleTurnEventForMatchObs => _handleTurnEventForMatch;
        /// <inheritdoc/>
        public override void HandleInviteFromGameCenter(global::Foundation.NSString[] playersToInvite) => _handleInviteFromGameCenter.OnNext(playersToInvite);
        /// <inheritdoc/>
        public override void HandleMatchEnded(global::GameKit.GKTurnBasedMatch match) => _handleMatchEnded.OnNext(match);
        /// <inheritdoc/>
        public override void HandleTurnEvent(global::GameKit.GKTurnBasedMatch match, bool activated) => _handleTurnEvent.OnNext((match, activated));
        /// <inheritdoc/>
        public override void HandleTurnEventForMatch(global::GameKit.GKTurnBasedMatch match) => _handleTurnEventForMatch.OnNext(match);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKTurnBasedMatchmakerViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKTurnBasedMatchmakerViewControllerDelegateRx : global::GameKit.GKTurnBasedMatchmakerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> _foundMatch = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> _playerQuitForMatch = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatchmakerViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatchmakerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FoundMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> FoundMatchObs => _foundMatch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.PlayerQuitForMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> PlayerQuitForMatchObs => _playerQuitForMatch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatchmakerViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void FailedWithError(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error) => _failedWithError.OnNext((viewController, error));
        /// <inheritdoc/>
        public override void FoundMatch(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match) => _foundMatch.OnNext((viewController, match));
        /// <inheritdoc/>
        public override void PlayerQuitForMatch(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match) => _playerQuitForMatch.OnNext((viewController, match));
        /// <inheritdoc/>
        public override void WasCancelled(global::GameKit.GKTurnBasedMatchmakerViewController viewController) => _wasCancelled.OnNext(viewController);
    }
}

namespace GameplayKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameplayKit.GKAgentDelegate"/> into Observables.
    /// </summary>
    public partial class GKAgentDelegateRx : global::GameplayKit.GKAgentDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent> _agentDidUpdate = new Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent> _agentWillUpdate = new Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameplayKit.GKAgentDelegate.AgentDidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameplayKit.GKAgent> AgentDidUpdateObs => _agentDidUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameplayKit.GKAgentDelegate.AgentWillUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameplayKit.GKAgent> AgentWillUpdateObs => _agentWillUpdate;
        /// <inheritdoc/>
        public override void AgentDidUpdate(global::GameplayKit.GKAgent agent) => _agentDidUpdate.OnNext(agent);
        /// <inheritdoc/>
        public override void AgentWillUpdate(global::GameplayKit.GKAgent agent) => _agentWillUpdate.OnNext(agent);
    }
}

namespace GLKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GLKit.GLKViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GLKViewControllerDelegateRx : global::GLKit.GLKViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GLKit.GLKViewController> _update = new Pharmacist.Common.SingleAwaitSubject<global::GLKit.GLKViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKViewController controller, bool pause)> _willPause = new Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKViewController controller, bool pause)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKViewControllerDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GLKit.GLKViewController> UpdateObs => _update;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKViewControllerDelegate.WillPause"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GLKit.GLKViewController controller, bool pause)> WillPauseObs => _willPause;
        /// <inheritdoc/>
        public override void Update(global::GLKit.GLKViewController controller) => _update.OnNext(controller);
        /// <inheritdoc/>
        public override void WillPause(global::GLKit.GLKViewController controller, bool pause) => _willPause.OnNext((controller, pause));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GLKit.GLKViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GLKViewDelegateRx : global::GLKit.GLKViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect)> _drawInRect = new Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKViewDelegate.DrawInRect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect)> DrawInRectObs => _drawInRect;
        /// <inheritdoc/>
        public override void DrawInRect(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect) => _drawInRect.OnNext((view, rect));
    }
}

namespace HomeKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMAccessoryBrowserDelegate"/> into Observables.
    /// </summary>
    public partial class HMAccessoryBrowserDelegateRx : global::HomeKit.HMAccessoryBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory)> _didFindNewAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory)> _didRemoveNewAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryBrowserDelegate.DidFindNewAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory)> DidFindNewAccessoryObs => _didFindNewAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryBrowserDelegate.DidRemoveNewAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory)> DidRemoveNewAccessoryObs => _didRemoveNewAccessory;
        /// <inheritdoc/>
        public override void DidFindNewAccessory(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory) => _didFindNewAccessory.OnNext((browser, accessory));
        /// <inheritdoc/>
        public override void DidRemoveNewAccessory(global::HomeKit.HMAccessoryBrowser browser, global::HomeKit.HMAccessory accessory) => _didRemoveNewAccessory.OnNext((browser, accessory));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMAccessoryDelegate"/> into Observables.
    /// </summary>
    public partial class HMAccessoryDelegateRx : global::HomeKit.HMAccessoryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> _didAddProfile = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> _didRemoveProfile = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> _didUpdateAssociatedServiceType = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, string firmwareVersion)> _didUpdateFirmwareVersion = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, string firmwareVersion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateName = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> _didUpdateNameForService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateReachability = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateServices = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)> _didUpdateValueForCharacteristic = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidAddProfile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> DidAddProfileObs => _didAddProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidRemoveProfile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> DidRemoveProfileObs => _didRemoveProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateAssociatedServiceType"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> DidUpdateAssociatedServiceTypeObs => _didUpdateAssociatedServiceType;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateFirmwareVersion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, string firmwareVersion)> DidUpdateFirmwareVersionObs => _didUpdateFirmwareVersion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateNameObs => _didUpdateName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateNameForService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> DidUpdateNameForServiceObs => _didUpdateNameForService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateReachability"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateReachabilityObs => _didUpdateReachability;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateServices"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateServicesObs => _didUpdateServices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateValueForCharacteristic"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)> DidUpdateValueForCharacteristicObs => _didUpdateValueForCharacteristic;
        /// <inheritdoc/>
        public override void DidAddProfile(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile) => _didAddProfile.OnNext((accessory, profile));
        /// <inheritdoc/>
        public override void DidRemoveProfile(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile) => _didRemoveProfile.OnNext((accessory, profile));
        /// <inheritdoc/>
        public override void DidUpdateAssociatedServiceType(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service) => _didUpdateAssociatedServiceType.OnNext((accessory, service));
        /// <inheritdoc/>
        public override void DidUpdateFirmwareVersion(global::HomeKit.HMAccessory accessory, string firmwareVersion) => _didUpdateFirmwareVersion.OnNext((accessory, firmwareVersion));
        /// <inheritdoc/>
        public override void DidUpdateName(global::HomeKit.HMAccessory accessory) => _didUpdateName.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateNameForService(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service) => _didUpdateNameForService.OnNext((accessory, service));
        /// <inheritdoc/>
        public override void DidUpdateReachability(global::HomeKit.HMAccessory accessory) => _didUpdateReachability.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateServices(global::HomeKit.HMAccessory accessory) => _didUpdateServices.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateValueForCharacteristic(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic) => _didUpdateValueForCharacteristic.OnNext((accessory, service, characteristic));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMCameraSnapshotControlDelegate"/> into Observables.
    /// </summary>
    public partial class HMCameraSnapshotControlDelegateRx : global::HomeKit.HMCameraSnapshotControlDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)> _didTakeSnapshot = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraSnapshotControl> _didUpdateMostRecentSnapshot = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraSnapshotControl>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraSnapshotControlDelegate.DidTakeSnapshot"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)> DidTakeSnapshotObs => _didTakeSnapshot;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraSnapshotControlDelegate.DidUpdateMostRecentSnapshot"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMCameraSnapshotControl> DidUpdateMostRecentSnapshotObs => _didUpdateMostRecentSnapshot;
        /// <inheritdoc/>
        public override void DidTakeSnapshot(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error) => _didTakeSnapshot.OnNext((cameraSnapshotControl, snapshot, error));
        /// <inheritdoc/>
        public override void DidUpdateMostRecentSnapshot(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl) => _didUpdateMostRecentSnapshot.OnNext(cameraSnapshotControl);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMCameraStreamControlDelegate"/> into Observables.
    /// </summary>
    public partial class HMCameraStreamControlDelegateRx : global::HomeKit.HMCameraStreamControlDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraStreamControl> _didStartStream = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraStreamControl>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)> _didStopStream = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraStreamControlDelegate.DidStartStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMCameraStreamControl> DidStartStreamObs => _didStartStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraStreamControlDelegate.DidStopStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)> DidStopStreamObs => _didStopStream;
        /// <inheritdoc/>
        public override void DidStartStream(global::HomeKit.HMCameraStreamControl cameraStreamControl) => _didStartStream.OnNext(cameraStreamControl);
        /// <inheritdoc/>
        public override void DidStopStream(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error) => _didStopStream.OnNext((cameraStreamControl, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMHomeDelegate"/> into Observables.
    /// </summary>
    public partial class HMHomeDelegateRx : global::HomeKit.HMHomeDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didAddAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didAddActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didAddRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> _didAddRoomToZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> _didAddService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didAddServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didAddTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> _didAddUser = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didAddZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didRemoveAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didRemoveActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didRemoveRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> _didRemoveRoomFromZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> _didRemoveService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didRemoveServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didRemoveTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> _didRemoveUser = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didRemoveZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didUnblockAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome> _didUpdateAccessControlForCurrentUser = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didUpdateActionsForActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)> _didUpdateHomeHubState = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didUpdateNameForActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome> _didUpdateNameForHome = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didUpdateNameForRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didUpdateNameForServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didUpdateNameForTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didUpdateNameForZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)> _didUpdateRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didUpdateTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidAddAccessoryObs => _didAddAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidAddActionSetObs => _didAddActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidAddRoomObs => _didAddRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddRoomToZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> DidAddRoomToZoneObs => _didAddRoomToZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> DidAddServiceObs => _didAddService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddServiceGroup"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidAddServiceGroupObs => _didAddServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidAddTriggerObs => _didAddTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> DidAddUserObs => _didAddUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidAddZoneObs => _didAddZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidRemoveAccessoryObs => _didRemoveAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidRemoveActionSetObs => _didRemoveActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidRemoveRoomObs => _didRemoveRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveRoomFromZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> DidRemoveRoomFromZoneObs => _didRemoveRoomFromZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> DidRemoveServiceObs => _didRemoveService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveServiceGroup"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidRemoveServiceGroupObs => _didRemoveServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidRemoveTriggerObs => _didRemoveTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> DidRemoveUserObs => _didRemoveUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidRemoveZoneObs => _didRemoveZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUnblockAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidUnblockAccessoryObs => _didUnblockAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateAccessControlForCurrentUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHome> DidUpdateAccessControlForCurrentUserObs => _didUpdateAccessControlForCurrentUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateActionsForActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidUpdateActionsForActionSetObs => _didUpdateActionsForActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateHomeHubState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)> DidUpdateHomeHubStateObs => _didUpdateHomeHubState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidUpdateNameForActionSetObs => _didUpdateNameForActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHome> DidUpdateNameForHomeObs => _didUpdateNameForHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidUpdateNameForRoomObs => _didUpdateNameForRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForServiceGroup"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidUpdateNameForServiceGroupObs => _didUpdateNameForServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidUpdateNameForTriggerObs => _didUpdateNameForTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidUpdateNameForZoneObs => _didUpdateNameForZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)> DidUpdateRoomObs => _didUpdateRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidUpdateTriggerObs => _didUpdateTrigger;
        /// <inheritdoc/>
        public override void DidAddAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didAddAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidAddActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didAddActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidAddRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didAddRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidAddRoomToZone(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone) => _didAddRoomToZone.OnNext((home, room, zone));
        /// <inheritdoc/>
        public override void DidAddService(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group) => _didAddService.OnNext((home, service, group));
        /// <inheritdoc/>
        public override void DidAddServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didAddServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidAddTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didAddTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidAddUser(global::HomeKit.HMHome home, global::HomeKit.HMUser user) => _didAddUser.OnNext((home, user));
        /// <inheritdoc/>
        public override void DidAddZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didAddZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidEncounterError(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory) => _didEncounterError.OnNext((home, error, accessory));
        /// <inheritdoc/>
        public override void DidRemoveAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didRemoveAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidRemoveActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didRemoveActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidRemoveRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didRemoveRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidRemoveRoomFromZone(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone) => _didRemoveRoomFromZone.OnNext((home, room, zone));
        /// <inheritdoc/>
        public override void DidRemoveService(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group) => _didRemoveService.OnNext((home, service, group));
        /// <inheritdoc/>
        public override void DidRemoveServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didRemoveServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidRemoveTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didRemoveTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidRemoveUser(global::HomeKit.HMHome home, global::HomeKit.HMUser user) => _didRemoveUser.OnNext((home, user));
        /// <inheritdoc/>
        public override void DidRemoveZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didRemoveZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidUnblockAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didUnblockAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidUpdateAccessControlForCurrentUser(global::HomeKit.HMHome home) => _didUpdateAccessControlForCurrentUser.OnNext(home);
        /// <inheritdoc/>
        public override void DidUpdateActionsForActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didUpdateActionsForActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidUpdateHomeHubState(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState) => _didUpdateHomeHubState.OnNext((home, homeHubState));
        /// <inheritdoc/>
        public override void DidUpdateNameForActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didUpdateNameForActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidUpdateNameForHome(global::HomeKit.HMHome home) => _didUpdateNameForHome.OnNext(home);
        /// <inheritdoc/>
        public override void DidUpdateNameForRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didUpdateNameForRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidUpdateNameForServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didUpdateNameForServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidUpdateNameForTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didUpdateNameForTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidUpdateNameForZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didUpdateNameForZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidUpdateRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory) => _didUpdateRoom.OnNext((home, room, accessory));
        /// <inheritdoc/>
        public override void DidUpdateTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didUpdateTrigger.OnNext((home, trigger));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMHomeManagerDelegate"/> into Observables.
    /// </summary>
    public partial class HMHomeManagerDelegateRx : global::HomeKit.HMHomeManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> _didAddHome = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> _didRemoveHome = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager> _didUpdateHomes = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager> _didUpdatePrimaryHome = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidAddHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> DidAddHomeObs => _didAddHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidRemoveHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> DidRemoveHomeObs => _didRemoveHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidUpdateHomes"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManager> DidUpdateHomesObs => _didUpdateHomes;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidUpdatePrimaryHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManager> DidUpdatePrimaryHomeObs => _didUpdatePrimaryHome;
        /// <inheritdoc/>
        public override void DidAddHome(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home) => _didAddHome.OnNext((manager, home));
        /// <inheritdoc/>
        public override void DidRemoveHome(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home) => _didRemoveHome.OnNext((manager, home));
        /// <inheritdoc/>
        public override void DidUpdateHomes(global::HomeKit.HMHomeManager manager) => _didUpdateHomes.OnNext(manager);
        /// <inheritdoc/>
        public override void DidUpdatePrimaryHome(global::HomeKit.HMHomeManager manager) => _didUpdatePrimaryHome.OnNext(manager);
    }
}

namespace iAd
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::iAd.ADBannerViewDelegate"/> into Observables.
    /// </summary>
    public partial class ADBannerViewDelegateRx : global::iAd.ADBannerViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::iAd.ADBannerView> _actionFinished = new Pharmacist.Common.SingleAwaitSubject<global::iAd.ADBannerView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::iAd.ADBannerView> _adLoaded = new Pharmacist.Common.SingleAwaitSubject<global::iAd.ADBannerView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::iAd.ADBannerView banner, global::Foundation.NSError error)> _failedToReceiveAd = new Pharmacist.Common.SingleAwaitSubject<(global::iAd.ADBannerView banner, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::iAd.ADBannerView> _willLoad = new Pharmacist.Common.SingleAwaitSubject<global::iAd.ADBannerView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerViewDelegate.ActionFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::iAd.ADBannerView> ActionFinishedObs => _actionFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerViewDelegate.AdLoaded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::iAd.ADBannerView> AdLoadedObs => _adLoaded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerViewDelegate.FailedToReceiveAd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::iAd.ADBannerView banner, global::Foundation.NSError error)> FailedToReceiveAdObs => _failedToReceiveAd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADBannerViewDelegate.WillLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::iAd.ADBannerView> WillLoadObs => _willLoad;
        /// <inheritdoc/>
        public override void ActionFinished(global::iAd.ADBannerView banner) => _actionFinished.OnNext(banner);
        /// <inheritdoc/>
        public override void AdLoaded(global::iAd.ADBannerView banner) => _adLoaded.OnNext(banner);
        /// <inheritdoc/>
        public override void FailedToReceiveAd(global::iAd.ADBannerView banner, global::Foundation.NSError error) => _failedToReceiveAd.OnNext((banner, error));
        /// <inheritdoc/>
        public override void WillLoad(global::iAd.ADBannerView bannerView) => _willLoad.OnNext(bannerView);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::iAd.ADInterstitialAdDelegate"/> into Observables.
    /// </summary>
    public abstract partial class ADInterstitialAdDelegateRx : global::iAd.ADInterstitialAdDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd> _actionFinished = new Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd> _adLoaded = new Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd> _adUnloaded = new Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::iAd.ADInterstitialAd interstitialAd, global::Foundation.NSError error)> _failedToReceiveAd = new Pharmacist.Common.SingleAwaitSubject<(global::iAd.ADInterstitialAd interstitialAd, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd> _willLoad = new Pharmacist.Common.SingleAwaitSubject<global::iAd.ADInterstitialAd>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAdDelegate.ActionFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::iAd.ADInterstitialAd> ActionFinishedObs => _actionFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAdDelegate.AdLoaded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::iAd.ADInterstitialAd> AdLoadedObs => _adLoaded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAdDelegate.AdUnloaded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::iAd.ADInterstitialAd> AdUnloadedObs => _adUnloaded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAdDelegate.FailedToReceiveAd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::iAd.ADInterstitialAd interstitialAd, global::Foundation.NSError error)> FailedToReceiveAdObs => _failedToReceiveAd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "iAd.ADInterstitialAdDelegate.WillLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::iAd.ADInterstitialAd> WillLoadObs => _willLoad;
        /// <inheritdoc/>
        public override void ActionFinished(global::iAd.ADInterstitialAd interstitialAd) => _actionFinished.OnNext(interstitialAd);
        /// <inheritdoc/>
        public override void AdLoaded(global::iAd.ADInterstitialAd interstitialAd) => _adLoaded.OnNext(interstitialAd);
        /// <inheritdoc/>
        public override void AdUnloaded(global::iAd.ADInterstitialAd interstitialAd) => _adUnloaded.OnNext(interstitialAd);
        /// <inheritdoc/>
        public override void FailedToReceiveAd(global::iAd.ADInterstitialAd interstitialAd, global::Foundation.NSError error) => _failedToReceiveAd.OnNext((interstitialAd, error));
        /// <inheritdoc/>
        public override void WillLoad(global::iAd.ADInterstitialAd interstitialAd) => _willLoad.OnNext(interstitialAd);
    }
}

namespace IntentsUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::IntentsUI.INUIAddVoiceShortcutButtonDelegate"/> into Observables.
    /// </summary>
    public abstract partial class INUIAddVoiceShortcutButtonDelegateRx : global::IntentsUI.INUIAddVoiceShortcutButtonDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIAddVoiceShortcutViewController addVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton)> _presentAddVoiceShortcut = new Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIAddVoiceShortcutViewController addVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIEditVoiceShortcutViewController editVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton)> _presentEditVoiceShortcut = new Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIEditVoiceShortcutViewController editVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "IntentsUI.INUIAddVoiceShortcutButtonDelegate.PresentAddVoiceShortcut"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::IntentsUI.INUIAddVoiceShortcutViewController addVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton)> PresentAddVoiceShortcutObs => _presentAddVoiceShortcut;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "IntentsUI.INUIAddVoiceShortcutButtonDelegate.PresentEditVoiceShortcut"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::IntentsUI.INUIEditVoiceShortcutViewController editVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton)> PresentEditVoiceShortcutObs => _presentEditVoiceShortcut;
        /// <inheritdoc/>
        public override void PresentAddVoiceShortcut(global::IntentsUI.INUIAddVoiceShortcutViewController addVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton) => _presentAddVoiceShortcut.OnNext((addVoiceShortcutViewController, addVoiceShortcutButton));
        /// <inheritdoc/>
        public override void PresentEditVoiceShortcut(global::IntentsUI.INUIEditVoiceShortcutViewController editVoiceShortcutViewController, global::IntentsUI.INUIAddVoiceShortcutButton addVoiceShortcutButton) => _presentEditVoiceShortcut.OnNext((editVoiceShortcutViewController, addVoiceShortcutButton));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::IntentsUI.INUIAddVoiceShortcutViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class INUIAddVoiceShortcutViewControllerDelegateRx : global::IntentsUI.INUIAddVoiceShortcutViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::IntentsUI.INUIAddVoiceShortcutViewController> _didCancel = new Pharmacist.Common.SingleAwaitSubject<global::IntentsUI.INUIAddVoiceShortcutViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIAddVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error)> _didFinish = new Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIAddVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "IntentsUI.INUIAddVoiceShortcutViewControllerDelegate.DidCancel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::IntentsUI.INUIAddVoiceShortcutViewController> DidCancelObs => _didCancel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "IntentsUI.INUIAddVoiceShortcutViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::IntentsUI.INUIAddVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error)> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidCancel(global::IntentsUI.INUIAddVoiceShortcutViewController controller) => _didCancel.OnNext(controller);
        /// <inheritdoc/>
        public override void DidFinish(global::IntentsUI.INUIAddVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error) => _didFinish.OnNext((controller, voiceShortcut, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::IntentsUI.INUIEditVoiceShortcutViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class INUIEditVoiceShortcutViewControllerDelegateRx : global::IntentsUI.INUIEditVoiceShortcutViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::IntentsUI.INUIEditVoiceShortcutViewController> _didCancel = new Pharmacist.Common.SingleAwaitSubject<global::IntentsUI.INUIEditVoiceShortcutViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Foundation.NSUuid deletedVoiceShortcutIdentifier)> _didDelete = new Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Foundation.NSUuid deletedVoiceShortcutIdentifier)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error)> _didUpdate = new Pharmacist.Common.SingleAwaitSubject<(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "IntentsUI.INUIEditVoiceShortcutViewControllerDelegate.DidCancel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::IntentsUI.INUIEditVoiceShortcutViewController> DidCancelObs => _didCancel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "IntentsUI.INUIEditVoiceShortcutViewControllerDelegate.DidDelete"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Foundation.NSUuid deletedVoiceShortcutIdentifier)> DidDeleteObs => _didDelete;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "IntentsUI.INUIEditVoiceShortcutViewControllerDelegate.DidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error)> DidUpdateObs => _didUpdate;
        /// <inheritdoc/>
        public override void DidCancel(global::IntentsUI.INUIEditVoiceShortcutViewController controller) => _didCancel.OnNext(controller);
        /// <inheritdoc/>
        public override void DidDelete(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Foundation.NSUuid deletedVoiceShortcutIdentifier) => _didDelete.OnNext((controller, deletedVoiceShortcutIdentifier));
        /// <inheritdoc/>
        public override void DidUpdate(global::IntentsUI.INUIEditVoiceShortcutViewController controller, global::Intents.INVoiceShortcut voiceShortcut, global::Foundation.NSError error) => _didUpdate.OnNext((controller, voiceShortcut, error));
    }
}

namespace MapKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MapKit.MKLocalSearchCompleterDelegate"/> into Observables.
    /// </summary>
    public partial class MKLocalSearchCompleterDelegateRx : global::MapKit.MKLocalSearchCompleterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKLocalSearchCompleter> _didUpdateResults = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKLocalSearchCompleter>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKLocalSearchCompleterDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKLocalSearchCompleterDelegate.DidUpdateResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKLocalSearchCompleter> DidUpdateResultsObs => _didUpdateResults;
        /// <inheritdoc/>
        public override void DidFail(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error) => _didFail.OnNext((completer, error));
        /// <inheritdoc/>
        public override void DidUpdateResults(global::MapKit.MKLocalSearchCompleter completer) => _didUpdateResults.OnNext(completer);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MapKit.MKMapViewDelegate"/> into Observables.
    /// </summary>
    public partial class MKMapViewDelegateRx : global::MapKit.MKMapViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view, global::UIKit.UIControl control)> _calloutAccessoryControlTapped = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view, global::UIKit.UIControl control)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState)> _changedDragState = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)> _didAddAnnotationViews = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)> _didAddOverlayRenderers = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayView overlayViews)> _didAddOverlayViews = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayView overlayViews)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated)> _didChangeUserTrackingMode = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _didChangeVisibleRegion = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> _didDeselectAnnotationView = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> _didFailToLocateUser = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool fullyRendered)> _didFinishRenderingMap = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool fullyRendered)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> _didSelectAnnotationView = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _didStopLocatingUser = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)> _didUpdateUserLocation = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> _loadingMapFailed = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _mapLoaded = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)> _regionChanged = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)> _regionWillChange = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartLoadingMap = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartLocatingUser = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartRenderingMap = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.CalloutAccessoryControlTapped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view, global::UIKit.UIControl control)> CalloutAccessoryControlTappedObs => _calloutAccessoryControlTapped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.ChangedDragState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState)> ChangedDragStateObs => _changedDragState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidAddAnnotationViews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)> DidAddAnnotationViewsObs => _didAddAnnotationViews;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidAddOverlayRenderers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)> DidAddOverlayRenderersObs => _didAddOverlayRenderers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidAddOverlayViews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayView overlayViews)> DidAddOverlayViewsObs => _didAddOverlayViews;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidChangeUserTrackingMode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated)> DidChangeUserTrackingModeObs => _didChangeUserTrackingMode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidChangeVisibleRegion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> DidChangeVisibleRegionObs => _didChangeVisibleRegion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidDeselectAnnotationView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> DidDeselectAnnotationViewObs => _didDeselectAnnotationView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidFailToLocateUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> DidFailToLocateUserObs => _didFailToLocateUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidFinishRenderingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool fullyRendered)> DidFinishRenderingMapObs => _didFinishRenderingMap;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidSelectAnnotationView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> DidSelectAnnotationViewObs => _didSelectAnnotationView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidStopLocatingUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> DidStopLocatingUserObs => _didStopLocatingUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidUpdateUserLocation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)> DidUpdateUserLocationObs => _didUpdateUserLocation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.LoadingMapFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> LoadingMapFailedObs => _loadingMapFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.MapLoaded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> MapLoadedObs => _mapLoaded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.RegionChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool animated)> RegionChangedObs => _regionChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.RegionWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool animated)> RegionWillChangeObs => _regionWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartLoadingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartLoadingMapObs => _willStartLoadingMap;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartLocatingUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartLocatingUserObs => _willStartLocatingUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartRenderingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartRenderingMapObs => _willStartRenderingMap;
        /// <inheritdoc/>
        public override void CalloutAccessoryControlTapped(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view, global::UIKit.UIControl control) => _calloutAccessoryControlTapped.OnNext((mapView, view, control));
        /// <inheritdoc/>
        public override void ChangedDragState(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState) => _changedDragState.OnNext((mapView, annotationView, newState, oldState));
        /// <inheritdoc/>
        public override void DidAddAnnotationViews(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views) => _didAddAnnotationViews.OnNext((mapView, views));
        /// <inheritdoc/>
        public override void DidAddOverlayRenderers(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers) => _didAddOverlayRenderers.OnNext((mapView, renderers));
        /// <inheritdoc/>
        public override void DidAddOverlayViews(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayView overlayViews) => _didAddOverlayViews.OnNext((mapView, overlayViews));
        /// <inheritdoc/>
        public override void DidChangeUserTrackingMode(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated) => _didChangeUserTrackingMode.OnNext((mapView, mode, animated));
        /// <inheritdoc/>
        public override void DidChangeVisibleRegion(global::MapKit.MKMapView mapView) => _didChangeVisibleRegion.OnNext(mapView);
        /// <inheritdoc/>
        public override void DidDeselectAnnotationView(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view) => _didDeselectAnnotationView.OnNext((mapView, view));
        /// <inheritdoc/>
        public override void DidFailToLocateUser(global::MapKit.MKMapView mapView, global::Foundation.NSError error) => _didFailToLocateUser.OnNext((mapView, error));
        /// <inheritdoc/>
        public override void DidFinishRenderingMap(global::MapKit.MKMapView mapView, bool fullyRendered) => _didFinishRenderingMap.OnNext((mapView, fullyRendered));
        /// <inheritdoc/>
        public override void DidSelectAnnotationView(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view) => _didSelectAnnotationView.OnNext((mapView, view));
        /// <inheritdoc/>
        public override void DidStopLocatingUser(global::MapKit.MKMapView mapView) => _didStopLocatingUser.OnNext(mapView);
        /// <inheritdoc/>
        public override void DidUpdateUserLocation(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation) => _didUpdateUserLocation.OnNext((mapView, userLocation));
        /// <inheritdoc/>
        public override void LoadingMapFailed(global::MapKit.MKMapView mapView, global::Foundation.NSError error) => _loadingMapFailed.OnNext((mapView, error));
        /// <inheritdoc/>
        public override void MapLoaded(global::MapKit.MKMapView mapView) => _mapLoaded.OnNext(mapView);
        /// <inheritdoc/>
        public override void RegionChanged(global::MapKit.MKMapView mapView, bool animated) => _regionChanged.OnNext((mapView, animated));
        /// <inheritdoc/>
        public override void RegionWillChange(global::MapKit.MKMapView mapView, bool animated) => _regionWillChange.OnNext((mapView, animated));
        /// <inheritdoc/>
        public override void WillStartLoadingMap(global::MapKit.MKMapView mapView) => _willStartLoadingMap.OnNext(mapView);
        /// <inheritdoc/>
        public override void WillStartLocatingUser(global::MapKit.MKMapView mapView) => _willStartLocatingUser.OnNext(mapView);
        /// <inheritdoc/>
        public override void WillStartRenderingMap(global::MapKit.MKMapView mapView) => _willStartRenderingMap.OnNext(mapView);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MapKit.MKReverseGeocoderDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MKReverseGeocoderDelegateRx : global::MapKit.MKReverseGeocoderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKReverseGeocoder geocoder, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKReverseGeocoder geocoder, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKReverseGeocoder geocoder, global::MapKit.MKPlacemark placemark)> _foundWithPlacemark = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKReverseGeocoder geocoder, global::MapKit.MKPlacemark placemark)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKReverseGeocoderDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKReverseGeocoder geocoder, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKReverseGeocoderDelegate.FoundWithPlacemark"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKReverseGeocoder geocoder, global::MapKit.MKPlacemark placemark)> FoundWithPlacemarkObs => _foundWithPlacemark;
        /// <inheritdoc/>
        public override void FailedWithError(global::MapKit.MKReverseGeocoder geocoder, global::Foundation.NSError error) => _failedWithError.OnNext((geocoder, error));
        /// <inheritdoc/>
        public override void FoundWithPlacemark(global::MapKit.MKReverseGeocoder geocoder, global::MapKit.MKPlacemark placemark) => _foundWithPlacemark.OnNext((geocoder, placemark));
    }
}

namespace MediaPlayer
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MediaPlayer.MPMediaPickerControllerDelegate"/> into Observables.
    /// </summary>
    public partial class MPMediaPickerControllerDelegateRx : global::MediaPlayer.MPMediaPickerControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPMediaPickerController sender, global::MediaPlayer.MPMediaItemCollection mediaItemCollection)> _mediaItemsPicked = new Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPMediaPickerController sender, global::MediaPlayer.MPMediaItemCollection mediaItemCollection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MediaPlayer.MPMediaPickerController> _mediaPickerDidCancel = new Pharmacist.Common.SingleAwaitSubject<global::MediaPlayer.MPMediaPickerController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPMediaPickerControllerDelegate.MediaItemsPicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MediaPlayer.MPMediaPickerController sender, global::MediaPlayer.MPMediaItemCollection mediaItemCollection)> MediaItemsPickedObs => _mediaItemsPicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPMediaPickerControllerDelegate.MediaPickerDidCancel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MediaPlayer.MPMediaPickerController> MediaPickerDidCancelObs => _mediaPickerDidCancel;
        /// <inheritdoc/>
        public override void MediaItemsPicked(global::MediaPlayer.MPMediaPickerController sender, global::MediaPlayer.MPMediaItemCollection mediaItemCollection) => _mediaItemsPicked.OnNext((sender, mediaItemCollection));
        /// <inheritdoc/>
        public override void MediaPickerDidCancel(global::MediaPlayer.MPMediaPickerController sender) => _mediaPickerDidCancel.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MediaPlayer.MPPlayableContentDelegate"/> into Observables.
    /// </summary>
    public partial class MPPlayableContentDelegateRx : global::MediaPlayer.MPPlayableContentDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPPlayableContentManagerContext context)> _contextUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPPlayableContentManagerContext context)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPContentItem[] contentItems, global::System.Action<global::Foundation.NSError> completionHandler)> _initializePlaybackQueue = new Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPContentItem[] contentItems, global::System.Action<global::Foundation.NSError> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler)> _initiatePlaybackOfContentItem = new Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler)> _playableContentManager = new Pharmacist.Common.SingleAwaitSubject<(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPPlayableContentDelegate.ContextUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPPlayableContentManagerContext context)> ContextUpdatedObs => _contextUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPPlayableContentDelegate.InitializePlaybackQueue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPContentItem[] contentItems, global::System.Action<global::Foundation.NSError> completionHandler)> InitializePlaybackQueueObs => _initializePlaybackQueue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPPlayableContentDelegate.InitiatePlaybackOfContentItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler)> InitiatePlaybackOfContentItemObs => _initiatePlaybackOfContentItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MediaPlayer.MPPlayableContentDelegate.PlayableContentManager"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("Use 'InitiatePlaybackOfContentItem' instead.", false)]
        public global::System.IObservable<(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler)> PlayableContentManagerObs => _playableContentManager;
        /// <inheritdoc/>
        public override void ContextUpdated(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPPlayableContentManagerContext context) => _contextUpdated.OnNext((contentManager, context));
        /// <inheritdoc/>
        public override void InitializePlaybackQueue(global::MediaPlayer.MPPlayableContentManager contentManager, global::MediaPlayer.MPContentItem[] contentItems, global::System.Action<global::Foundation.NSError> completionHandler) => _initializePlaybackQueue.OnNext((contentManager, contentItems, completionHandler));
        /// <inheritdoc/>
        public override void InitiatePlaybackOfContentItem(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler) => _initiatePlaybackOfContentItem.OnNext((contentManager, indexPath, completionHandler));
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("Use 'InitiatePlaybackOfContentItem' instead.", false)]
        public override void PlayableContentManager(global::MediaPlayer.MPPlayableContentManager contentManager, global::Foundation.NSIndexPath indexPath, global::System.Action<global::Foundation.NSError> completionHandler) => _playableContentManager.OnNext((contentManager, indexPath, completionHandler));
    }
}

namespace MessageUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MessageUI.MFMailComposeViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class MFMailComposeViewControllerDelegateRx : global::MessageUI.MFMailComposeViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MessageUI.MFMailComposeViewController controller, global::MessageUI.MFMailComposeResult result, global::Foundation.NSError error)> _finished = new Pharmacist.Common.SingleAwaitSubject<(global::MessageUI.MFMailComposeViewController controller, global::MessageUI.MFMailComposeResult result, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MessageUI.MFMailComposeViewControllerDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MessageUI.MFMailComposeViewController controller, global::MessageUI.MFMailComposeResult result, global::Foundation.NSError error)> FinishedObs => _finished;
        /// <inheritdoc/>
        public override void Finished(global::MessageUI.MFMailComposeViewController controller, global::MessageUI.MFMailComposeResult result, global::Foundation.NSError error) => _finished.OnNext((controller, result, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MessageUI.MFMessageComposeViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MFMessageComposeViewControllerDelegateRx : global::MessageUI.MFMessageComposeViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MessageUI.MFMessageComposeViewController controller, global::MessageUI.MessageComposeResult result)> _finished = new Pharmacist.Common.SingleAwaitSubject<(global::MessageUI.MFMessageComposeViewController controller, global::MessageUI.MessageComposeResult result)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MessageUI.MFMessageComposeViewControllerDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MessageUI.MFMessageComposeViewController controller, global::MessageUI.MessageComposeResult result)> FinishedObs => _finished;
        /// <inheritdoc/>
        public override void Finished(global::MessageUI.MFMessageComposeViewController controller, global::MessageUI.MessageComposeResult result) => _finished.OnNext((controller, result));
    }
}

namespace MetalKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MetalKit.MTKViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MTKViewDelegateRx : global::MetalKit.MTKViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MetalKit.MTKView> _draw = new Pharmacist.Common.SingleAwaitSubject<global::MetalKit.MTKView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)> _drawableSizeWillChange = new Pharmacist.Common.SingleAwaitSubject<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MetalKit.MTKViewDelegate.Draw"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MetalKit.MTKView> DrawObs => _draw;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MetalKit.MTKViewDelegate.DrawableSizeWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)> DrawableSizeWillChangeObs => _drawableSizeWillChange;
        /// <inheritdoc/>
        public override void Draw(global::MetalKit.MTKView view) => _draw.OnNext(view);
        /// <inheritdoc/>
        public override void DrawableSizeWillChange(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size) => _drawableSizeWillChange.OnNext((view, size));
    }
}

namespace MultipeerConnectivity
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCAdvertiserAssistantDelegate"/> into Observables.
    /// </summary>
    public partial class MCAdvertiserAssistantDelegateRx : global::MultipeerConnectivity.MCAdvertiserAssistantDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant> _didDismissInvitation = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant> _willPresentInvitation = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCAdvertiserAssistantDelegate.DidDismissInvitation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCAdvertiserAssistant> DidDismissInvitationObs => _didDismissInvitation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCAdvertiserAssistantDelegate.WillPresentInvitation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCAdvertiserAssistant> WillPresentInvitationObs => _willPresentInvitation;
        /// <inheritdoc/>
        public override void DidDismissInvitation(global::MultipeerConnectivity.MCAdvertiserAssistant advertiserAssistant) => _didDismissInvitation.OnNext(advertiserAssistant);
        /// <inheritdoc/>
        public override void WillPresentInvitation(global::MultipeerConnectivity.MCAdvertiserAssistant advertiserAssistant) => _willPresentInvitation.OnNext(advertiserAssistant);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCBrowserViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCBrowserViewControllerDelegateRx : global::MultipeerConnectivity.MCBrowserViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCBrowserViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCBrowserViewController> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCBrowserViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCBrowserViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidFinish(global::MultipeerConnectivity.MCBrowserViewController browserViewController) => _didFinish.OnNext(browserViewController);
        /// <inheritdoc/>
        public override void WasCancelled(global::MultipeerConnectivity.MCBrowserViewController browserViewController) => _wasCancelled.OnNext(browserViewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCNearbyServiceAdvertiserDelegateRx : global::MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)> _didNotStartAdvertisingPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)> _didReceiveInvitationFromPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidNotStartAdvertisingPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)> DidNotStartAdvertisingPeerObs => _didNotStartAdvertisingPeer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)> DidReceiveInvitationFromPeerObs => _didReceiveInvitationFromPeer;
        /// <inheritdoc/>
        public override void DidNotStartAdvertisingPeer(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error) => _didNotStartAdvertisingPeer.OnNext((advertiser, error));
        /// <inheritdoc/>
        public override void DidReceiveInvitationFromPeer(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler) => _didReceiveInvitationFromPeer.OnNext((advertiser, peerID, context, invitationHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCNearbyServiceBrowserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCNearbyServiceBrowserDelegateRx : global::MultipeerConnectivity.MCNearbyServiceBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)> _didNotStartBrowsingForPeers = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)> _foundPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)> _lostPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.DidNotStartBrowsingForPeers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)> DidNotStartBrowsingForPeersObs => _didNotStartBrowsingForPeers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)> FoundPeerObs => _foundPeer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.LostPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)> LostPeerObs => _lostPeer;
        /// <inheritdoc/>
        public override void DidNotStartBrowsingForPeers(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error) => _didNotStartBrowsingForPeers.OnNext((browser, error));
        /// <inheritdoc/>
        public override void FoundPeer(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info) => _foundPeer.OnNext((browser, peerID, info));
        /// <inheritdoc/>
        public override void LostPeer(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID) => _lostPeer.OnNext((browser, peerID));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCSessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCSessionDelegateRx : global::MultipeerConnectivity.MCSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)> _didChangeState = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)> _didFinishReceivingResource = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)> _didReceiveData = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)> _didReceiveStream = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)> _didStartReceivingResource = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidChangeState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)> DidChangeStateObs => _didChangeState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidFinishReceivingResource"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)> DidFinishReceivingResourceObs => _didFinishReceivingResource;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidReceiveData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)> DidReceiveDataObs => _didReceiveData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidReceiveStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)> DidReceiveStreamObs => _didReceiveStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidStartReceivingResource"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)> DidStartReceivingResourceObs => _didStartReceivingResource;
        /// <inheritdoc/>
        public override void DidChangeState(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state) => _didChangeState.OnNext((session, peerID, state));
        /// <inheritdoc/>
        public override void DidFinishReceivingResource(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error) => _didFinishReceivingResource.OnNext((session, resourceName, fromPeer, localUrl, error));
        /// <inheritdoc/>
        public override void DidReceiveData(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID) => _didReceiveData.OnNext((session, data, peerID));
        /// <inheritdoc/>
        public override void DidReceiveStream(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID) => _didReceiveStream.OnNext((session, stream, streamName, peerID));
        /// <inheritdoc/>
        public override void DidStartReceivingResource(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress) => _didStartReceivingResource.OnNext((session, resourceName, fromPeer, progress));
    }
}

namespace NetworkExtension
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::NetworkExtension.NWTcpConnectionAuthenticationDelegate"/> into Observables.
    /// </summary>
    public partial class NWTcpConnectionAuthenticationDelegateRx : global::NetworkExtension.NWTcpConnectionAuthenticationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion)> _evaluateTrust = new Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion)> _provideIdentity = new Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NetworkExtension.NWTcpConnectionAuthenticationDelegate.EvaluateTrust"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion)> EvaluateTrustObs => _evaluateTrust;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NetworkExtension.NWTcpConnectionAuthenticationDelegate.ProvideIdentity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion)> ProvideIdentityObs => _provideIdentity;
        /// <inheritdoc/>
        public override void EvaluateTrust(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion) => _evaluateTrust.OnNext((connection, peerCertificateChain, completion));
        /// <inheritdoc/>
        public override void ProvideIdentity(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion) => _provideIdentity.OnNext((connection, completion));
    }
}

namespace PassKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PassKit.PKAddPassesViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class PKAddPassesViewControllerDelegateRx : global::PassKit.PKAddPassesViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKAddPassesViewController> _finished = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKAddPassesViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKAddPassesViewControllerDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKAddPassesViewController> FinishedObs => _finished;
        /// <inheritdoc/>
        public override void Finished(global::PassKit.PKAddPassesViewController controller) => _finished.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::PassKit.PKAddPaymentPassViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class PKAddPaymentPassViewControllerDelegateRx : global::PassKit.PKAddPaymentPassViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKAddPaymentPassViewController controller, global::PassKit.PKPaymentPass pass, global::Foundation.NSError error)> _didFinishAddingPaymentPass = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKAddPaymentPassViewController controller, global::PassKit.PKPaymentPass pass, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKAddPaymentPassViewController controller, global::Foundation.NSData[] certificates, global::Foundation.NSData nonce, global::Foundation.NSData nonceSignature, global::System.Action<global::PassKit.PKAddPaymentPassRequest> handler)> _generateRequestWithCertificateChain = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKAddPaymentPassViewController controller, global::Foundation.NSData[] certificates, global::Foundation.NSData nonce, global::Foundation.NSData nonceSignature, global::System.Action<global::PassKit.PKAddPaymentPassRequest> handler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKAddPaymentPassViewControllerDelegate.DidFinishAddingPaymentPass"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKAddPaymentPassViewController controller, global::PassKit.PKPaymentPass pass, global::Foundation.NSError error)> DidFinishAddingPaymentPassObs => _didFinishAddingPaymentPass;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKAddPaymentPassViewControllerDelegate.GenerateRequestWithCertificateChain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKAddPaymentPassViewController controller, global::Foundation.NSData[] certificates, global::Foundation.NSData nonce, global::Foundation.NSData nonceSignature, global::System.Action<global::PassKit.PKAddPaymentPassRequest> handler)> GenerateRequestWithCertificateChainObs => _generateRequestWithCertificateChain;
        /// <inheritdoc/>
        public override void DidFinishAddingPaymentPass(global::PassKit.PKAddPaymentPassViewController controller, global::PassKit.PKPaymentPass pass, global::Foundation.NSError error) => _didFinishAddingPaymentPass.OnNext((controller, pass, error));
        /// <inheritdoc/>
        public override void GenerateRequestWithCertificateChain(global::PassKit.PKAddPaymentPassViewController controller, global::Foundation.NSData[] certificates, global::Foundation.NSData nonce, global::Foundation.NSData nonceSignature, global::System.Action<global::PassKit.PKAddPaymentPassRequest> handler) => _generateRequestWithCertificateChain.OnNext((controller, certificates, nonce, nonceSignature, handler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::PassKit.PKDisbursementAuthorizationControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class PKDisbursementAuthorizationControllerDelegateRx : global::PassKit.PKDisbursementAuthorizationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKDisbursementAuthorizationController controller, global::PassKit.PKDisbursementVoucher disbursementVoucher)> _didAuthorize = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKDisbursementAuthorizationController controller, global::PassKit.PKDisbursementVoucher disbursementVoucher)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKDisbursementAuthorizationController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKDisbursementAuthorizationController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKDisbursementAuthorizationControllerDelegate.DidAuthorize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKDisbursementAuthorizationController controller, global::PassKit.PKDisbursementVoucher disbursementVoucher)> DidAuthorizeObs => _didAuthorize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKDisbursementAuthorizationControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKDisbursementAuthorizationController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidAuthorize(global::PassKit.PKDisbursementAuthorizationController controller, global::PassKit.PKDisbursementVoucher disbursementVoucher) => _didAuthorize.OnNext((controller, disbursementVoucher));
        /// <inheritdoc/>
        public override void DidFinish(global::PassKit.PKDisbursementAuthorizationController controller) => _didFinish.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::PassKit.PKPaymentAuthorizationControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class PKPaymentAuthorizationControllerDelegateRx : global::PassKit.PKPaymentAuthorizationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)> _didAuthorizePayment = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)> _didSelectPaymentMethod = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion)> _didSelectShippingContact = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion)> _didSelectShippingMethod = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController> _willAuthorizePayment = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationControllerDelegate.DidAuthorizePayment"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)> DidAuthorizePaymentObs => _didAuthorizePayment;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationController> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectPaymentMethod"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)> DidSelectPaymentMethodObs => _didSelectPaymentMethod;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectShippingContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion)> DidSelectShippingContactObs => _didSelectShippingContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectShippingMethod"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion)> DidSelectShippingMethodObs => _didSelectShippingMethod;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationControllerDelegate.WillAuthorizePayment"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationController> WillAuthorizePaymentObs => _willAuthorizePayment;
        /// <inheritdoc/>
        public override void DidAuthorizePayment(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion) => _didAuthorizePayment.OnNext((controller, payment, completion));
        /// <inheritdoc/>
        public override void DidFinish(global::PassKit.PKPaymentAuthorizationController controller) => _didFinish.OnNext(controller);
        /// <inheritdoc/>
        public override void DidSelectPaymentMethod(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion) => _didSelectPaymentMethod.OnNext((controller, paymentMethod, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingContact(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKShippingMethod[], global::PassKit.PKPaymentSummaryItem[]> completion) => _didSelectShippingContact.OnNext((controller, contact, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingMethod(global::PassKit.PKPaymentAuthorizationController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus, global::PassKit.PKPaymentSummaryItem[]> completion) => _didSelectShippingMethod.OnNext((controller, shippingMethod, completion));
        /// <inheritdoc/>
        public override void WillAuthorizePayment(global::PassKit.PKPaymentAuthorizationController controller) => _willAuthorizePayment.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::PassKit.PKPaymentAuthorizationViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class PKPaymentAuthorizationViewControllerDelegateRx : global::PassKit.PKPaymentAuthorizationViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)> _didAuthorizePayment = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationResult> completion)> _didAuthorizePayment2 = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationResult> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)> _didSelectPaymentMethod = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentRequestPaymentMethodUpdate> completion)> _didSelectPaymentMethod2 = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentRequestPaymentMethodUpdate> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::AddressBook.ABRecord address, global::PassKit.PKPaymentShippingAddressSelected completion)> _didSelectShippingAddress = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::AddressBook.ABRecord address, global::PassKit.PKPaymentShippingAddressSelected completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::PassKit.PKPaymentShippingAddressSelected completion)> _didSelectShippingContact = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::PassKit.PKPaymentShippingAddressSelected completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentRequestShippingContactUpdate> completion)> _didSelectShippingContact2 = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentRequestShippingContactUpdate> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::PassKit.PKPaymentShippingMethodSelected completion)> _didSelectShippingMethod = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::PassKit.PKPaymentShippingMethodSelected completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentRequestShippingMethodUpdate> completion)> _didSelectShippingMethod2 = new Pharmacist.Common.SingleAwaitSubject<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentRequestShippingMethodUpdate> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationViewController> _paymentAuthorizationViewControllerDidFinish = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationViewController> _willAuthorizePayment = new Pharmacist.Common.SingleAwaitSubject<global::PassKit.PKPaymentAuthorizationViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidAuthorizePayment"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion)> DidAuthorizePaymentObs => _didAuthorizePayment;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidAuthorizePayment2"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationResult> completion)> DidAuthorizePayment2Obs => _didAuthorizePayment2;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectPaymentMethod"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion)> DidSelectPaymentMethodObs => _didSelectPaymentMethod;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectPaymentMethod2"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentRequestPaymentMethodUpdate> completion)> DidSelectPaymentMethod2Obs => _didSelectPaymentMethod2;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingAddress"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::AddressBook.ABRecord address, global::PassKit.PKPaymentShippingAddressSelected completion)> DidSelectShippingAddressObs => _didSelectShippingAddress;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::PassKit.PKPaymentShippingAddressSelected completion)> DidSelectShippingContactObs => _didSelectShippingContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingContact2"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentRequestShippingContactUpdate> completion)> DidSelectShippingContact2Obs => _didSelectShippingContact2;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingMethod"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::PassKit.PKPaymentShippingMethodSelected completion)> DidSelectShippingMethodObs => _didSelectShippingMethod;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingMethod2"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentRequestShippingMethodUpdate> completion)> DidSelectShippingMethod2Obs => _didSelectShippingMethod2;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.PaymentAuthorizationViewControllerDidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationViewController> PaymentAuthorizationViewControllerDidFinishObs => _paymentAuthorizationViewControllerDidFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PassKit.PKPaymentAuthorizationViewControllerDelegate.WillAuthorizePayment"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PassKit.PKPaymentAuthorizationViewController> WillAuthorizePaymentObs => _willAuthorizePayment;
        /// <inheritdoc/>
        public override void DidAuthorizePayment(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationStatus> completion) => _didAuthorizePayment.OnNext((controller, payment, completion));
        /// <inheritdoc/>
        public override void DidAuthorizePayment2(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPayment payment, global::System.Action<global::PassKit.PKPaymentAuthorizationResult> completion) => _didAuthorizePayment2.OnNext((controller, payment, completion));
        /// <inheritdoc/>
        public override void DidSelectPaymentMethod(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentSummaryItem[]> completion) => _didSelectPaymentMethod.OnNext((controller, paymentMethod, completion));
        /// <inheritdoc/>
        public override void DidSelectPaymentMethod2(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKPaymentMethod paymentMethod, global::System.Action<global::PassKit.PKPaymentRequestPaymentMethodUpdate> completion) => _didSelectPaymentMethod2.OnNext((controller, paymentMethod, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingAddress(global::PassKit.PKPaymentAuthorizationViewController controller, global::AddressBook.ABRecord address, global::PassKit.PKPaymentShippingAddressSelected completion) => _didSelectShippingAddress.OnNext((controller, address, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingContact(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::PassKit.PKPaymentShippingAddressSelected completion) => _didSelectShippingContact.OnNext((controller, contact, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingContact2(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKContact contact, global::System.Action<global::PassKit.PKPaymentRequestShippingContactUpdate> completion) => _didSelectShippingContact2.OnNext((controller, contact, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingMethod(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::PassKit.PKPaymentShippingMethodSelected completion) => _didSelectShippingMethod.OnNext((controller, shippingMethod, completion));
        /// <inheritdoc/>
        public override void DidSelectShippingMethod2(global::PassKit.PKPaymentAuthorizationViewController controller, global::PassKit.PKShippingMethod shippingMethod, global::System.Action<global::PassKit.PKPaymentRequestShippingMethodUpdate> completion) => _didSelectShippingMethod2.OnNext((controller, shippingMethod, completion));
        /// <inheritdoc/>
        public override void PaymentAuthorizationViewControllerDidFinish(global::PassKit.PKPaymentAuthorizationViewController controller) => _paymentAuthorizationViewControllerDidFinish.OnNext(controller);
        /// <inheritdoc/>
        public override void WillAuthorizePayment(global::PassKit.PKPaymentAuthorizationViewController controller) => _willAuthorizePayment.OnNext(controller);
    }
}

namespace PdfKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PdfKit.PdfDocumentDelegate"/> into Observables.
    /// </summary>
    public partial class PdfDocumentDelegateRx : global::PdfKit.PdfDocumentDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didBeginDocumentFind = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfSelection> _didMatchString = new Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfSelection>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didUnlock = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _findFinished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _matchFound = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _pageFindFinished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _pageFindStarted = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.DidBeginDocumentFind"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidBeginDocumentFindObs => _didBeginDocumentFind;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.DidMatchString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfSelection> DidMatchStringObs => _didMatchString;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.DidUnlock"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidUnlockObs => _didUnlock;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.FindFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> FindFinishedObs => _findFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.MatchFound"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> MatchFoundObs => _matchFound;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.PageFindFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> PageFindFinishedObs => _pageFindFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.PageFindStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> PageFindStartedObs => _pageFindStarted;
        /// <inheritdoc/>
        public override void DidBeginDocumentFind(global::Foundation.NSNotification notification) => _didBeginDocumentFind.OnNext(notification);
        /// <inheritdoc/>
        public override void DidMatchString(global::PdfKit.PdfSelection sender) => _didMatchString.OnNext(sender);
        /// <inheritdoc/>
        public override void DidUnlock(global::Foundation.NSNotification notification) => _didUnlock.OnNext(notification);
        /// <inheritdoc/>
        public override void FindFinished(global::Foundation.NSNotification notification) => _findFinished.OnNext(notification);
        /// <inheritdoc/>
        public override void MatchFound(global::Foundation.NSNotification notification) => _matchFound.OnNext(notification);
        /// <inheritdoc/>
        public override void PageFindFinished(global::Foundation.NSNotification notification) => _pageFindFinished.OnNext(notification);
        /// <inheritdoc/>
        public override void PageFindStarted(global::Foundation.NSNotification notification) => _pageFindStarted.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::PdfKit.PdfViewDelegate"/> into Observables.
    /// </summary>
    public partial class PdfViewDelegateRx : global::PdfKit.PdfViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action)> _openPdf = new Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView> _performFind = new Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView> _performGoToPage = new Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::Foundation.NSUrl url)> _willClickOnLink = new Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::Foundation.NSUrl url)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.OpenPdf"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action)> OpenPdfObs => _openPdf;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.PerformFind"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfView> PerformFindObs => _performFind;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.PerformGoToPage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfView> PerformGoToPageObs => _performGoToPage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.WillClickOnLink"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PdfKit.PdfView sender, global::Foundation.NSUrl url)> WillClickOnLinkObs => _willClickOnLink;
        /// <inheritdoc/>
        public override void OpenPdf(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action) => _openPdf.OnNext((sender, action));
        /// <inheritdoc/>
        public override void PerformFind(global::PdfKit.PdfView sender) => _performFind.OnNext(sender);
        /// <inheritdoc/>
        public override void PerformGoToPage(global::PdfKit.PdfView sender) => _performGoToPage.OnNext(sender);
        /// <inheritdoc/>
        public override void WillClickOnLink(global::PdfKit.PdfView sender, global::Foundation.NSUrl url) => _willClickOnLink.OnNext((sender, url));
    }
}

namespace PhotosUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PhotosUI.PHLivePhotoViewDelegate"/> into Observables.
    /// </summary>
    public partial class PHLivePhotoViewDelegateRx : global::PhotosUI.PHLivePhotoViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> _didEndPlayback = new Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> _willBeginPlayback = new Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PhotosUI.PHLivePhotoViewDelegate.DidEndPlayback"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> DidEndPlaybackObs => _didEndPlayback;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PhotosUI.PHLivePhotoViewDelegate.WillBeginPlayback"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> WillBeginPlaybackObs => _willBeginPlayback;
        /// <inheritdoc/>
        public override void DidEndPlayback(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle) => _didEndPlayback.OnNext((livePhotoView, playbackStyle));
        /// <inheritdoc/>
        public override void WillBeginPlayback(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle) => _willBeginPlayback.OnNext((livePhotoView, playbackStyle));
    }
}

namespace PushKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PushKit.PKPushRegistryDelegate"/> into Observables.
    /// </summary>
    public abstract partial class PKPushRegistryDelegateRx : global::PushKit.PKPushRegistryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, string type)> _didInvalidatePushToken = new Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, string type)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion)> _didReceiveIncomingPush = new Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type)> _didUpdatePushCredentials = new Pharmacist.Common.SingleAwaitSubject<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PushKit.PKPushRegistryDelegate.DidInvalidatePushToken"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PushKit.PKPushRegistry registry, string type)> DidInvalidatePushTokenObs => _didInvalidatePushToken;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PushKit.PKPushRegistryDelegate.DidReceiveIncomingPush"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion)> DidReceiveIncomingPushObs => _didReceiveIncomingPush;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PushKit.PKPushRegistryDelegate.DidUpdatePushCredentials"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type)> DidUpdatePushCredentialsObs => _didUpdatePushCredentials;
        /// <inheritdoc/>
        public override void DidInvalidatePushToken(global::PushKit.PKPushRegistry registry, string type) => _didInvalidatePushToken.OnNext((registry, type));
        /// <inheritdoc/>
        public override void DidReceiveIncomingPush(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushPayload payload, string type, global::System.Action completion) => _didReceiveIncomingPush.OnNext((registry, payload, type, completion));
        /// <inheritdoc/>
        public override void DidUpdatePushCredentials(global::PushKit.PKPushRegistry registry, global::PushKit.PKPushCredentials credentials, string type) => _didUpdatePushCredentials.OnNext((registry, credentials, type));
    }
}

namespace QuickLook
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::QuickLook.QLPreviewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class QLPreviewControllerDelegateRx : global::QuickLook.QLPreviewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::QuickLook.QLPreviewController> _didDismiss = new Pharmacist.Common.SingleAwaitSubject<global::QuickLook.QLPreviewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::QuickLook.QLPreviewController> _willDismiss = new Pharmacist.Common.SingleAwaitSubject<global::QuickLook.QLPreviewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLook.QLPreviewControllerDelegate.DidDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::QuickLook.QLPreviewController> DidDismissObs => _didDismiss;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLook.QLPreviewControllerDelegate.WillDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::QuickLook.QLPreviewController> WillDismissObs => _willDismiss;
        /// <inheritdoc/>
        public override void DidDismiss(global::QuickLook.QLPreviewController controller) => _didDismiss.OnNext(controller);
        /// <inheritdoc/>
        public override void WillDismiss(global::QuickLook.QLPreviewController controller) => _willDismiss.OnNext(controller);
    }
}

namespace ReplayKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPBroadcastActivityViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class RPBroadcastActivityViewControllerDelegateRx : global::ReplayKit.RPBroadcastActivityViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> _didFinish = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastActivityViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error) => _didFinish.OnNext((broadcastActivityViewController, broadcastController, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPBroadcastControllerDelegate"/> into Observables.
    /// </summary>
    public partial class RPBroadcastControllerDelegateRx : global::ReplayKit.RPBroadcastControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> _didFinish = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl)> _didUpdateBroadcastUrl = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo)> _didUpdateServiceInfo = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastControllerDelegate.DidUpdateBroadcastUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl)> DidUpdateBroadcastUrlObs => _didUpdateBroadcastUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastControllerDelegate.DidUpdateServiceInfo"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo)> DidUpdateServiceInfoObs => _didUpdateServiceInfo;
        /// <inheritdoc/>
        public override void DidFinish(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error) => _didFinish.OnNext((broadcastController, error));
        /// <inheritdoc/>
        public override void DidUpdateBroadcastUrl(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl) => _didUpdateBroadcastUrl.OnNext((broadcastController, broadcastUrl));
        /// <inheritdoc/>
        public override void DidUpdateServiceInfo(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo) => _didUpdateServiceInfo.OnNext((broadcastController, serviceInfo));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPPreviewViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class RPPreviewViewControllerDelegateRx : global::ReplayKit.RPPreviewViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPPreviewViewController previewController, global::Foundation.NSSet<global::Foundation.NSString> activityTypes)> _didFinish = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPPreviewViewController previewController, global::Foundation.NSSet<global::Foundation.NSString> activityTypes)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPPreviewViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPPreviewViewController previewController, global::Foundation.NSSet<global::Foundation.NSString> activityTypes)> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::ReplayKit.RPPreviewViewController previewController, global::Foundation.NSSet<global::Foundation.NSString> activityTypes) => _didFinish.OnNext((previewController, activityTypes));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPScreenRecorderDelegate"/> into Observables.
    /// </summary>
    public partial class RPScreenRecorderDelegateRx : global::ReplayKit.RPScreenRecorderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ReplayKit.RPScreenRecorder> _didChangeAvailability = new Pharmacist.Common.SingleAwaitSubject<global::ReplayKit.RPScreenRecorder>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController)> _didStopRecording = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPScreenRecorderDelegate.DidChangeAvailability"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ReplayKit.RPScreenRecorder> DidChangeAvailabilityObs => _didChangeAvailability;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPScreenRecorderDelegate.DidStopRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController)> DidStopRecordingObs => _didStopRecording;
        /// <inheritdoc/>
        public override void DidChangeAvailability(global::ReplayKit.RPScreenRecorder screenRecorder) => _didChangeAvailability.OnNext(screenRecorder);
        /// <inheritdoc/>
        public override void DidStopRecording(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController) => _didStopRecording.OnNext((screenRecorder, error, previewViewController));
    }
}

namespace SafariServices
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SafariServices.SFSafariViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class SFSafariViewControllerDelegateRx : global::SafariServices.SFSafariViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SafariServices.SFSafariViewController controller, bool didLoadSuccessfully)> _didCompleteInitialLoad = new Pharmacist.Common.SingleAwaitSubject<(global::SafariServices.SFSafariViewController controller, bool didLoadSuccessfully)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SafariServices.SFSafariViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::SafariServices.SFSafariViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SafariServices.SFSafariViewController controller, global::Foundation.NSUrl url)> _initialLoadDidRedirectToUrl = new Pharmacist.Common.SingleAwaitSubject<(global::SafariServices.SFSafariViewController controller, global::Foundation.NSUrl url)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SafariServices.SFSafariViewControllerDelegate.DidCompleteInitialLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SafariServices.SFSafariViewController controller, bool didLoadSuccessfully)> DidCompleteInitialLoadObs => _didCompleteInitialLoad;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SafariServices.SFSafariViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SafariServices.SFSafariViewController> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SafariServices.SFSafariViewControllerDelegate.InitialLoadDidRedirectToUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SafariServices.SFSafariViewController controller, global::Foundation.NSUrl url)> InitialLoadDidRedirectToUrlObs => _initialLoadDidRedirectToUrl;
        /// <inheritdoc/>
        public override void DidCompleteInitialLoad(global::SafariServices.SFSafariViewController controller, bool didLoadSuccessfully) => _didCompleteInitialLoad.OnNext((controller, didLoadSuccessfully));
        /// <inheritdoc/>
        public override void DidFinish(global::SafariServices.SFSafariViewController controller) => _didFinish.OnNext(controller);
        /// <inheritdoc/>
        public override void InitialLoadDidRedirectToUrl(global::SafariServices.SFSafariViewController controller, global::Foundation.NSUrl url) => _initialLoadDidRedirectToUrl.OnNext((controller, url));
    }
}

namespace SceneKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNAvoidOccluderConstraintDelegate"/> into Observables.
    /// </summary>
    public partial class SCNAvoidOccluderConstraintDelegateRx : global::SceneKit.SCNAvoidOccluderConstraintDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> _didAvoidOccluder = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNAvoidOccluderConstraintDelegate.DidAvoidOccluder"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> DidAvoidOccluderObs => _didAvoidOccluder;
        /// <inheritdoc/>
        public override void DidAvoidOccluder(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node) => _didAvoidOccluder.OnNext((constraint, occluder, node));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNCameraControllerDelegate"/> into Observables.
    /// </summary>
    public partial class SCNCameraControllerDelegateRx : global::SceneKit.SCNCameraControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaDidEnd = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaWillStart = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNCameraControllerDelegate.CameraInertiaDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaDidEndObs => _cameraInertiaDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNCameraControllerDelegate.CameraInertiaWillStart"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaWillStartObs => _cameraInertiaWillStart;
        /// <inheritdoc/>
        public override void CameraInertiaDidEnd(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaDidEnd.OnNext(cameraController);
        /// <inheritdoc/>
        public override void CameraInertiaWillStart(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaWillStart.OnNext(cameraController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNNodeRendererDelegate"/> into Observables.
    /// </summary>
    public partial class SCNNodeRendererDelegateRx : global::SceneKit.SCNNodeRendererDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)> _render = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNNodeRendererDelegate.Render"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)> RenderObs => _render;
        /// <inheritdoc/>
        public override void Render(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments) => _render.OnNext((node, renderer, arguments));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SCNPhysicsContactDelegateRx : global::SceneKit.SCNPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didUpdateContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidBeginContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidEndContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidEndContactObs => _didEndContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidUpdateContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidUpdateContactObs => _didUpdateContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didBeginContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidEndContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didEndContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidUpdateContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didUpdateContact.OnNext((world, contact));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNProgramDelegate"/> into Observables.
    /// </summary>
    public partial class SCNProgramDelegateRx : global::SceneKit.SCNProgramDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)> _handleError = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNProgramDelegate.HandleError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)> HandleErrorObs => _handleError;
        /// <inheritdoc/>
        public override void HandleError(global::SceneKit.SCNProgram program, global::Foundation.NSError error) => _handleError.OnNext((program, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNSceneRendererDelegate"/> into Observables.
    /// </summary>
    public partial class SCNSceneRendererDelegateRx : global::SceneKit.SCNSceneRendererDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didApplyAnimations = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _didRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _update = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _willRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidApplyAnimations"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidApplyAnimationsObs => _didApplyAnimations;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidApplyConstraints"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> DidRenderSceneObs => _didRenderScene;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidSimulatePhysics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> UpdateObs => _update;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.WillRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> WillRenderSceneObs => _willRenderScene;
        /// <inheritdoc/>
        public override void DidApplyAnimations(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didApplyAnimations.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SceneKit.ISCNSceneRenderer renderer, double atTime) => _didApplyConstraints.OnNext((renderer, atTime));
        /// <inheritdoc/>
        public override void DidRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _didRenderScene.OnNext((renderer, scene, timeInSeconds));
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didSimulatePhysics.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void Update(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _update.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void WillRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _willRenderScene.OnNext((renderer, scene, timeInSeconds));
    }
}

namespace Speech
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::Speech.SFSpeechRecognitionTaskDelegate"/> into Observables.
    /// </summary>
    public partial class SFSpeechRecognitionTaskDelegateRx : global::Speech.SFSpeechRecognitionTaskDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Speech.SFSpeechRecognitionTask> _didDetectSpeech = new Pharmacist.Common.SingleAwaitSubject<global::Speech.SFSpeechRecognitionTask>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFSpeechRecognitionResult recognitionResult)> _didFinishRecognition = new Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFSpeechRecognitionResult recognitionResult)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognitionTask task, bool successfully)> _didFinishSuccessfully = new Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognitionTask task, bool successfully)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFTranscription transcription)> _didHypothesizeTranscription = new Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFTranscription transcription)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Speech.SFSpeechRecognitionTask> _finishedReadingAudio = new Pharmacist.Common.SingleAwaitSubject<global::Speech.SFSpeechRecognitionTask>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Speech.SFSpeechRecognitionTask> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::Speech.SFSpeechRecognitionTask>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Speech.SFSpeechRecognitionTaskDelegate.DidDetectSpeech"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Speech.SFSpeechRecognitionTask> DidDetectSpeechObs => _didDetectSpeech;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Speech.SFSpeechRecognitionTaskDelegate.DidFinishRecognition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFSpeechRecognitionResult recognitionResult)> DidFinishRecognitionObs => _didFinishRecognition;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Speech.SFSpeechRecognitionTaskDelegate.DidFinishSuccessfully"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Speech.SFSpeechRecognitionTask task, bool successfully)> DidFinishSuccessfullyObs => _didFinishSuccessfully;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Speech.SFSpeechRecognitionTaskDelegate.DidHypothesizeTranscription"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFTranscription transcription)> DidHypothesizeTranscriptionObs => _didHypothesizeTranscription;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Speech.SFSpeechRecognitionTaskDelegate.FinishedReadingAudio"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Speech.SFSpeechRecognitionTask> FinishedReadingAudioObs => _finishedReadingAudio;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Speech.SFSpeechRecognitionTaskDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Speech.SFSpeechRecognitionTask> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidDetectSpeech(global::Speech.SFSpeechRecognitionTask task) => _didDetectSpeech.OnNext(task);
        /// <inheritdoc/>
        public override void DidFinishRecognition(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFSpeechRecognitionResult recognitionResult) => _didFinishRecognition.OnNext((task, recognitionResult));
        /// <inheritdoc/>
        public override void DidFinishSuccessfully(global::Speech.SFSpeechRecognitionTask task, bool successfully) => _didFinishSuccessfully.OnNext((task, successfully));
        /// <inheritdoc/>
        public override void DidHypothesizeTranscription(global::Speech.SFSpeechRecognitionTask task, global::Speech.SFTranscription transcription) => _didHypothesizeTranscription.OnNext((task, transcription));
        /// <inheritdoc/>
        public override void FinishedReadingAudio(global::Speech.SFSpeechRecognitionTask task) => _finishedReadingAudio.OnNext(task);
        /// <inheritdoc/>
        public override void WasCancelled(global::Speech.SFSpeechRecognitionTask task) => _wasCancelled.OnNext(task);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Speech.SFSpeechRecognizerDelegate"/> into Observables.
    /// </summary>
    public partial class SFSpeechRecognizerDelegateRx : global::Speech.SFSpeechRecognizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognizer speechRecognizer, bool available)> _availabilityDidChange = new Pharmacist.Common.SingleAwaitSubject<(global::Speech.SFSpeechRecognizer speechRecognizer, bool available)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Speech.SFSpeechRecognizerDelegate.AvailabilityDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Speech.SFSpeechRecognizer speechRecognizer, bool available)> AvailabilityDidChangeObs => _availabilityDidChange;
        /// <inheritdoc/>
        public override void AvailabilityDidChange(global::Speech.SFSpeechRecognizer speechRecognizer, bool available) => _availabilityDidChange.OnNext((speechRecognizer, available));
    }
}

namespace SpriteKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SKPhysicsContactDelegateRx : global::SpriteKit.SKPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsContactDelegate.DidBeginContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsContactDelegate.DidEndContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidEndContactObs => _didEndContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SpriteKit.SKPhysicsContact contact) => _didBeginContact.OnNext(contact);
        /// <inheritdoc/>
        public override void DidEndContact(global::SpriteKit.SKPhysicsContact contact) => _didEndContact.OnNext(contact);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKSceneDelegate"/> into Observables.
    /// </summary>
    public partial class SKSceneDelegateRx : global::SpriteKit.SKSceneDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didEvaluateActions = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didFinishUpdate = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)> _update = new Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidApplyConstraints"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidEvaluateActions"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidEvaluateActionsObs => _didEvaluateActions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidFinishUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidFinishUpdateObs => _didFinishUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidSimulatePhysics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(double currentTime, global::SpriteKit.SKScene scene)> UpdateObs => _update;
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SpriteKit.SKScene scene) => _didApplyConstraints.OnNext(scene);
        /// <inheritdoc/>
        public override void DidEvaluateActions(global::SpriteKit.SKScene scene) => _didEvaluateActions.OnNext(scene);
        /// <inheritdoc/>
        public override void DidFinishUpdate(global::SpriteKit.SKScene scene) => _didFinishUpdate.OnNext(scene);
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SpriteKit.SKScene scene) => _didSimulatePhysics.OnNext(scene);
        /// <inheritdoc/>
        public override void Update(double currentTime, global::SpriteKit.SKScene scene) => _update.OnNext((currentTime, scene));
    }
}

namespace StoreKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKCloudServiceSetupViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class SKCloudServiceSetupViewControllerDelegateRx : global::StoreKit.SKCloudServiceSetupViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKCloudServiceSetupViewController> _didDismiss = new Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKCloudServiceSetupViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKCloudServiceSetupViewControllerDelegate.DidDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKCloudServiceSetupViewController> DidDismissObs => _didDismiss;
        /// <inheritdoc/>
        public override void DidDismiss(global::StoreKit.SKCloudServiceSetupViewController cloudServiceSetupViewController) => _didDismiss.OnNext(cloudServiceSetupViewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKProductsRequestDelegate"/> into Observables.
    /// </summary>
    public abstract partial class SKProductsRequestDelegateRx : global::StoreKit.SKProductsRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKProductsRequestDelegate.ReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <inheritdoc/>
        public override void ReceivedResponse(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response) => _receivedResponse.OnNext((request, response));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKRequestDelegate"/> into Observables.
    /// </summary>
    public partial class SKRequestDelegateRx : global::StoreKit.SKRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> _requestFailed = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest> _requestFinished = new Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequestDelegate.RequestFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> RequestFailedObs => _requestFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequestDelegate.RequestFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequest> RequestFinishedObs => _requestFinished;
        /// <inheritdoc/>
        public override void RequestFailed(global::StoreKit.SKRequest request, global::Foundation.NSError error) => _requestFailed.OnNext((request, error));
        /// <inheritdoc/>
        public override void RequestFinished(global::StoreKit.SKRequest request) => _requestFinished.OnNext(request);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKStoreProductViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class SKStoreProductViewControllerDelegateRx : global::StoreKit.SKStoreProductViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKStoreProductViewController> _finished = new Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKStoreProductViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKStoreProductViewControllerDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKStoreProductViewController> FinishedObs => _finished;
        /// <inheritdoc/>
        public override void Finished(global::StoreKit.SKStoreProductViewController controller) => _finished.OnNext(controller);
    }
}

namespace UIKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.NSLayoutManagerDelegate"/> into Observables.
    /// </summary>
    public partial class NSLayoutManagerDelegateRx : global::UIKit.NSLayoutManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)> _didChangeGeometry = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag)> _didCompleteLayout = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.NSLayoutManager> _didInvalidatedLayout = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.NSLayoutManager>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSLayoutManagerDelegate.DidChangeGeometry"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)> DidChangeGeometryObs => _didChangeGeometry;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSLayoutManagerDelegate.DidCompleteLayout"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag)> DidCompleteLayoutObs => _didCompleteLayout;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSLayoutManagerDelegate.DidInvalidatedLayout"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSLayoutManager> DidInvalidatedLayoutObs => _didInvalidatedLayout;
        /// <inheritdoc/>
        public override void DidChangeGeometry(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize) => _didChangeGeometry.OnNext((layoutManager, textContainer, oldSize));
        /// <inheritdoc/>
        public override void DidCompleteLayout(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag) => _didCompleteLayout.OnNext((layoutManager, textContainer, layoutFinishedFlag));
        /// <inheritdoc/>
        public override void DidInvalidatedLayout(global::UIKit.NSLayoutManager sender) => _didInvalidatedLayout.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.NSTextStorageDelegate"/> into Observables.
    /// </summary>
    public partial class NSTextStorageDelegateRx : global::UIKit.NSTextStorageDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> _didProcessEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> _willProcessEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorageDelegate.DidProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> DidProcessEditingObs => _didProcessEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorageDelegate.WillProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> WillProcessEditingObs => _willProcessEditing;
        /// <inheritdoc/>
        public override void DidProcessEditing(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta) => _didProcessEditing.OnNext((textStorage, editedMask, editedRange, delta));
        /// <inheritdoc/>
        public override void WillProcessEditing(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta) => _willProcessEditing.OnNext((textStorage, editedMask, editedRange, delta));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIAccelerometerDelegate"/> into Observables.
    /// </summary>
    public partial class UIAccelerometerDelegateRx : global::UIKit.UIAccelerometerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAccelerometer accelerometer, global::UIKit.UIAcceleration acceleration)> _didAccelerate = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAccelerometer accelerometer, global::UIKit.UIAcceleration acceleration)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAccelerometerDelegate.DidAccelerate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIAccelerometer accelerometer, global::UIKit.UIAcceleration acceleration)> DidAccelerateObs => _didAccelerate;
        /// <inheritdoc/>
        public override void DidAccelerate(global::UIKit.UIAccelerometer accelerometer, global::UIKit.UIAcceleration acceleration) => _didAccelerate.OnNext((accelerometer, acceleration));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIActionSheetDelegate"/> into Observables.
    /// </summary>
    public partial class UIActionSheetDelegateRx : global::UIKit.UIActionSheetDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIActionSheet> _canceled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIActionSheet>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)> _clicked = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)> _dismissed = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIActionSheet> _presented = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIActionSheet>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)> _willDismiss = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIActionSheet> _willPresent = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIActionSheet>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheetDelegate.Canceled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIActionSheet> CanceledObs => _canceled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheetDelegate.Clicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)> ClickedObs => _clicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheetDelegate.Dismissed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)> DismissedObs => _dismissed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheetDelegate.Presented"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIActionSheet> PresentedObs => _presented;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheetDelegate.WillDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex)> WillDismissObs => _willDismiss;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIActionSheetDelegate.WillPresent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIActionSheet> WillPresentObs => _willPresent;
        /// <inheritdoc/>
        public override void Canceled(global::UIKit.UIActionSheet actionSheet) => _canceled.OnNext(actionSheet);
        /// <inheritdoc/>
        public override void Clicked(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex) => _clicked.OnNext((actionSheet, buttonIndex));
        /// <inheritdoc/>
        public override void Dismissed(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex) => _dismissed.OnNext((actionSheet, buttonIndex));
        /// <inheritdoc/>
        public override void Presented(global::UIKit.UIActionSheet actionSheet) => _presented.OnNext(actionSheet);
        /// <inheritdoc/>
        public override void WillDismiss(global::UIKit.UIActionSheet actionSheet, global::System.nint buttonIndex) => _willDismiss.OnNext((actionSheet, buttonIndex));
        /// <inheritdoc/>
        public override void WillPresent(global::UIKit.UIActionSheet actionSheet) => _willPresent.OnNext(actionSheet);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIAdaptivePresentationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIAdaptivePresentationControllerDelegateRx : global::UIKit.UIAdaptivePresentationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator)> _willPresent = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAdaptivePresentationControllerDelegate.WillPresent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator)> WillPresentObs => _willPresent;
        /// <inheritdoc/>
        public override void WillPresent(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator) => _willPresent.OnNext((presentationController, style, transitionCoordinator));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIAlertViewDelegate"/> into Observables.
    /// </summary>
    public partial class UIAlertViewDelegateRx : global::UIKit.UIAlertViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIAlertView> _canceled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIAlertView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAlertView alertview, global::System.nint buttonIndex)> _clicked = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAlertView alertview, global::System.nint buttonIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex)> _dismissed = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIAlertView> _presented = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIAlertView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex)> _willDismiss = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIAlertView> _willPresent = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIAlertView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertViewDelegate.Canceled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIAlertView> CanceledObs => _canceled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertViewDelegate.Clicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIAlertView alertview, global::System.nint buttonIndex)> ClickedObs => _clicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertViewDelegate.Dismissed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex)> DismissedObs => _dismissed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertViewDelegate.Presented"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIAlertView> PresentedObs => _presented;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertViewDelegate.WillDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex)> WillDismissObs => _willDismiss;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAlertViewDelegate.WillPresent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIAlertView> WillPresentObs => _willPresent;
        /// <inheritdoc/>
        public override void Canceled(global::UIKit.UIAlertView alertView) => _canceled.OnNext(alertView);
        /// <inheritdoc/>
        public override void Clicked(global::UIKit.UIAlertView alertview, global::System.nint buttonIndex) => _clicked.OnNext((alertview, buttonIndex));
        /// <inheritdoc/>
        public override void Dismissed(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex) => _dismissed.OnNext((alertView, buttonIndex));
        /// <inheritdoc/>
        public override void Presented(global::UIKit.UIAlertView alertView) => _presented.OnNext(alertView);
        /// <inheritdoc/>
        public override void WillDismiss(global::UIKit.UIAlertView alertView, global::System.nint buttonIndex) => _willDismiss.OnNext((alertView, buttonIndex));
        /// <inheritdoc/>
        public override void WillPresent(global::UIKit.UIAlertView alertView) => _willPresent.OnNext(alertView);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIApplicationDelegate"/> into Observables.
    /// </summary>
    public partial class UIApplicationDelegateRx : global::UIKit.UIApplicationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _applicationSignificantTimeChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame)> _changedStatusBarFrame = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation)> _didChangeStatusBarOrientation = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> _didDecodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _didEnterBackground = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)> _didFailToContinueUserActivitiy = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> _didReceiveRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings)> _didRegisterUserNotificationSettings = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSError error)> _failedToRegisterForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _finishedLaunching = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler)> _handleAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)> _handleEventsForBackgroundUrl = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)> _handleIntent = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)> _handleWatchKitExtensionRequest = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _onActivated = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _onResignActivation = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler)> _performActionForShortcutItem = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> _performFetch = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _protectedDataDidBecomeAvailable = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _protectedDataWillBecomeUnavailable = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification)> _receivedLocalNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)> _receivedRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _receiveMemoryWarning = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)> _registeredForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _shouldRequestHealthAuthorization = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)> _userActivityUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)> _userDidAcceptCloudKitShare = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame)> _willChangeStatusBarFrame = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration)> _willChangeStatusBarOrientation = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> _willEncodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _willEnterForeground = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _willTerminate = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ApplicationSignificantTimeChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ApplicationSignificantTimeChangeObs => _applicationSignificantTimeChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ChangedStatusBarFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame)> ChangedStatusBarFrameObs => _changedStatusBarFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidChangeStatusBarOrientation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation)> DidChangeStatusBarOrientationObs => _didChangeStatusBarOrientation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidDecodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> DidDecodeRestorableStateObs => _didDecodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidEnterBackground"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> DidEnterBackgroundObs => _didEnterBackground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidFailToContinueUserActivitiy"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)> DidFailToContinueUserActivitiyObs => _didFailToContinueUserActivitiy;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidReceiveRemoteNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> DidReceiveRemoteNotificationObs => _didReceiveRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidRegisterUserNotificationSettings"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings)> DidRegisterUserNotificationSettingsObs => _didRegisterUserNotificationSettings;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.FailedToRegisterForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSError error)> FailedToRegisterForRemoteNotificationsObs => _failedToRegisterForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.FinishedLaunching"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> FinishedLaunchingObs => _finishedLaunching;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.HandleAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler)> HandleActionObs => _handleAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.HandleEventsForBackgroundUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)> HandleEventsForBackgroundUrlObs => _handleEventsForBackgroundUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.HandleIntent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler)> HandleIntentObs => _handleIntent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.HandleWatchKitExtensionRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)> HandleWatchKitExtensionRequestObs => _handleWatchKitExtensionRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.OnActivated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> OnActivatedObs => _onActivated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.OnResignActivation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> OnResignActivationObs => _onResignActivation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.PerformActionForShortcutItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler)> PerformActionForShortcutItemObs => _performActionForShortcutItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.PerformFetch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> PerformFetchObs => _performFetch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ProtectedDataDidBecomeAvailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ProtectedDataDidBecomeAvailableObs => _protectedDataDidBecomeAvailable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ProtectedDataWillBecomeUnavailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ProtectedDataWillBecomeUnavailableObs => _protectedDataWillBecomeUnavailable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ReceivedLocalNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification)> ReceivedLocalNotificationObs => _receivedLocalNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ReceivedRemoteNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)> ReceivedRemoteNotificationObs => _receivedRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ReceiveMemoryWarning"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ReceiveMemoryWarningObs => _receiveMemoryWarning;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.RegisteredForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)> RegisteredForRemoteNotificationsObs => _registeredForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ShouldRequestHealthAuthorization"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ShouldRequestHealthAuthorizationObs => _shouldRequestHealthAuthorization;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.UserActivityUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)> UserActivityUpdatedObs => _userActivityUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.UserDidAcceptCloudKitShare"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)> UserDidAcceptCloudKitShareObs => _userDidAcceptCloudKitShare;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillChangeStatusBarFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame)> WillChangeStatusBarFrameObs => _willChangeStatusBarFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillChangeStatusBarOrientation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration)> WillChangeStatusBarOrientationObs => _willChangeStatusBarOrientation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillEncodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> WillEncodeRestorableStateObs => _willEncodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillEnterForeground"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> WillEnterForegroundObs => _willEnterForeground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillTerminate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> WillTerminateObs => _willTerminate;
        /// <inheritdoc/>
        public override void ApplicationSignificantTimeChange(global::UIKit.UIApplication application) => _applicationSignificantTimeChange.OnNext(application);
        /// <inheritdoc/>
        public override void ChangedStatusBarFrame(global::UIKit.UIApplication application, global::CoreGraphics.CGRect oldStatusBarFrame) => _changedStatusBarFrame.OnNext((application, oldStatusBarFrame));
        /// <inheritdoc/>
        public override void DidChangeStatusBarOrientation(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation oldStatusBarOrientation) => _didChangeStatusBarOrientation.OnNext((application, oldStatusBarOrientation));
        /// <inheritdoc/>
        public override void DidDecodeRestorableState(global::UIKit.UIApplication application, global::Foundation.NSCoder coder) => _didDecodeRestorableState.OnNext((application, coder));
        /// <inheritdoc/>
        public override void DidEnterBackground(global::UIKit.UIApplication application) => _didEnterBackground.OnNext(application);
        /// <inheritdoc/>
        public override void DidFailToContinueUserActivitiy(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error) => _didFailToContinueUserActivitiy.OnNext((application, userActivityType, error));
        /// <inheritdoc/>
        public override void DidReceiveRemoteNotification(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler) => _didReceiveRemoteNotification.OnNext((application, userInfo, completionHandler));
        /// <inheritdoc/>
        public override void DidRegisterUserNotificationSettings(global::UIKit.UIApplication application, global::UIKit.UIUserNotificationSettings notificationSettings) => _didRegisterUserNotificationSettings.OnNext((application, notificationSettings));
        /// <inheritdoc/>
        public override void FailedToRegisterForRemoteNotifications(global::UIKit.UIApplication application, global::Foundation.NSError error) => _failedToRegisterForRemoteNotifications.OnNext((application, error));
        /// <inheritdoc/>
        public override void FinishedLaunching(global::UIKit.UIApplication application) => _finishedLaunching.OnNext(application);
        /// <inheritdoc/>
        public override void HandleAction(global::UIKit.UIApplication application, string actionIdentifier, global::UIKit.UILocalNotification localNotification, global::Foundation.NSDictionary responseInfo, global::System.Action completionHandler) => _handleAction.OnNext((application, actionIdentifier, localNotification, responseInfo, completionHandler));
        /// <inheritdoc/>
        public override void HandleEventsForBackgroundUrl(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler) => _handleEventsForBackgroundUrl.OnNext((application, sessionIdentifier, completionHandler));
        /// <inheritdoc/>
        public override void HandleIntent(global::UIKit.UIApplication application, global::Intents.INIntent intent, global::System.Action<global::Intents.INIntentResponse> completionHandler) => _handleIntent.OnNext((application, intent, completionHandler));
        /// <inheritdoc/>
        public override void HandleWatchKitExtensionRequest(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply) => _handleWatchKitExtensionRequest.OnNext((application, userInfo, reply));
        /// <inheritdoc/>
        public override void OnActivated(global::UIKit.UIApplication application) => _onActivated.OnNext(application);
        /// <inheritdoc/>
        public override void OnResignActivation(global::UIKit.UIApplication application) => _onResignActivation.OnNext(application);
        /// <inheritdoc/>
        public override void PerformActionForShortcutItem(global::UIKit.UIApplication application, global::UIKit.UIApplicationShortcutItem shortcutItem, global::UIKit.UIOperationHandler completionHandler) => _performActionForShortcutItem.OnNext((application, shortcutItem, completionHandler));
        /// <inheritdoc/>
        public override void PerformFetch(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler) => _performFetch.OnNext((application, completionHandler));
        /// <inheritdoc/>
        public override void ProtectedDataDidBecomeAvailable(global::UIKit.UIApplication application) => _protectedDataDidBecomeAvailable.OnNext(application);
        /// <inheritdoc/>
        public override void ProtectedDataWillBecomeUnavailable(global::UIKit.UIApplication application) => _protectedDataWillBecomeUnavailable.OnNext(application);
        /// <inheritdoc/>
        public override void ReceivedLocalNotification(global::UIKit.UIApplication application, global::UIKit.UILocalNotification notification) => _receivedLocalNotification.OnNext((application, notification));
        /// <inheritdoc/>
        public override void ReceivedRemoteNotification(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo) => _receivedRemoteNotification.OnNext((application, userInfo));
        /// <inheritdoc/>
        public override void ReceiveMemoryWarning(global::UIKit.UIApplication application) => _receiveMemoryWarning.OnNext(application);
        /// <inheritdoc/>
        public override void RegisteredForRemoteNotifications(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken) => _registeredForRemoteNotifications.OnNext((application, deviceToken));
        /// <inheritdoc/>
        public override void ShouldRequestHealthAuthorization(global::UIKit.UIApplication application) => _shouldRequestHealthAuthorization.OnNext(application);
        /// <inheritdoc/>
        public override void UserActivityUpdated(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity) => _userActivityUpdated.OnNext((application, userActivity));
        /// <inheritdoc/>
        public override void UserDidAcceptCloudKitShare(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata) => _userDidAcceptCloudKitShare.OnNext((application, cloudKitShareMetadata));
        /// <inheritdoc/>
        public override void WillChangeStatusBarFrame(global::UIKit.UIApplication application, global::CoreGraphics.CGRect newStatusBarFrame) => _willChangeStatusBarFrame.OnNext((application, newStatusBarFrame));
        /// <inheritdoc/>
        public override void WillChangeStatusBarOrientation(global::UIKit.UIApplication application, global::UIKit.UIInterfaceOrientation newStatusBarOrientation, double duration) => _willChangeStatusBarOrientation.OnNext((application, newStatusBarOrientation, duration));
        /// <inheritdoc/>
        public override void WillEncodeRestorableState(global::UIKit.UIApplication application, global::Foundation.NSCoder coder) => _willEncodeRestorableState.OnNext((application, coder));
        /// <inheritdoc/>
        public override void WillEnterForeground(global::UIKit.UIApplication application) => _willEnterForeground.OnNext(application);
        /// <inheritdoc/>
        public override void WillTerminate(global::UIKit.UIApplication application) => _willTerminate.OnNext(application);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UICloudSharingControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UICloudSharingControllerDelegateRx : global::UIKit.UICloudSharingControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UICloudSharingController> _didSaveShare = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UICloudSharingController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UICloudSharingController> _didStopSharing = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UICloudSharingController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICloudSharingController csc, global::Foundation.NSError error)> _failedToSaveShare = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICloudSharingController csc, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICloudSharingControllerDelegate.DidSaveShare"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICloudSharingController> DidSaveShareObs => _didSaveShare;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICloudSharingControllerDelegate.DidStopSharing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICloudSharingController> DidStopSharingObs => _didStopSharing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICloudSharingControllerDelegate.FailedToSaveShare"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICloudSharingController csc, global::Foundation.NSError error)> FailedToSaveShareObs => _failedToSaveShare;
        /// <inheritdoc/>
        public override void DidSaveShare(global::UIKit.UICloudSharingController csc) => _didSaveShare.OnNext(csc);
        /// <inheritdoc/>
        public override void DidStopSharing(global::UIKit.UICloudSharingController csc) => _didStopSharing.OnNext(csc);
        /// <inheritdoc/>
        public override void FailedToSaveShare(global::UIKit.UICloudSharingController csc, global::Foundation.NSError error) => _failedToSaveShare.OnNext((csc, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UICollectionViewDelegate"/> into Observables.
    /// </summary>
    public partial class UICollectionViewDelegateRx : global::UIKit.UICollectionViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> _cellDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _decelerationEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _decelerationStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _didChangeAdjustedContentInset = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> _didUpdateFocus = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _didZoom = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, bool willDecelerate)> _draggingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, bool willDecelerate)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _draggingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemDeselected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemHighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemUnhighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> _performAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrollAnimationEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrolled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrolledToTop = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)> _supplementaryViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> _willDisplayCell = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath)> _willDisplaySupplementaryView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)> _zoomingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)> _zoomingStarted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.CellDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> CellDisplayingEndedObs => _cellDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DecelerationEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DecelerationEndedObs => _decelerationEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DecelerationStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DecelerationStartedObs => _decelerationStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DidChangeAdjustedContentInset"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DidChangeAdjustedContentInsetObs => _didChangeAdjustedContentInset;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DidUpdateFocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> DidUpdateFocusObs => _didUpdateFocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DidZoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DidZoomObs => _didZoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DraggingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, bool willDecelerate)> DraggingEndedObs => _draggingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DraggingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DraggingStartedObs => _draggingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemDeselected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemDeselectedObs => _itemDeselected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemHighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemHighlightedObs => _itemHighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemSelectedObs => _itemSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemUnhighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemUnhighlightedObs => _itemUnhighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.PerformAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> PerformActionObs => _performAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ScrollAnimationEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrollAnimationEndedObs => _scrollAnimationEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.Scrolled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrolledObs => _scrolled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ScrolledToTop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrolledToTopObs => _scrolledToTop;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.SupplementaryViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)> SupplementaryViewDisplayingEndedObs => _supplementaryViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.WillDisplayCell"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> WillDisplayCellObs => _willDisplayCell;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.WillDisplaySupplementaryView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath)> WillDisplaySupplementaryViewObs => _willDisplaySupplementaryView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ZoomingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)> ZoomingEndedObs => _zoomingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ZoomingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)> ZoomingStartedObs => _zoomingStarted;
        /// <inheritdoc/>
        public override void CellDisplayingEnded(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath) => _cellDisplayingEnded.OnNext((collectionView, cell, indexPath));
        /// <inheritdoc/>
        public override void DecelerationEnded(global::UIKit.UIScrollView scrollView) => _decelerationEnded.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DecelerationStarted(global::UIKit.UIScrollView scrollView) => _decelerationStarted.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DidChangeAdjustedContentInset(global::UIKit.UIScrollView scrollView) => _didChangeAdjustedContentInset.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DidUpdateFocus(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator) => _didUpdateFocus.OnNext((collectionView, context, coordinator));
        /// <inheritdoc/>
        public override void DidZoom(global::UIKit.UIScrollView scrollView) => _didZoom.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DraggingEnded(global::UIKit.UIScrollView scrollView, bool willDecelerate) => _draggingEnded.OnNext((scrollView, willDecelerate));
        /// <inheritdoc/>
        public override void DraggingStarted(global::UIKit.UIScrollView scrollView) => _draggingStarted.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ItemDeselected(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemDeselected.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void ItemHighlighted(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemHighlighted.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void ItemSelected(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemSelected.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void ItemUnhighlighted(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemUnhighlighted.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void PerformAction(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender) => _performAction.OnNext((collectionView, action, indexPath, sender));
        /// <inheritdoc/>
        public override void ScrollAnimationEnded(global::UIKit.UIScrollView scrollView) => _scrollAnimationEnded.OnNext(scrollView);
        /// <inheritdoc/>
        public override void Scrolled(global::UIKit.UIScrollView scrollView) => _scrolled.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ScrolledToTop(global::UIKit.UIScrollView scrollView) => _scrolledToTop.OnNext(scrollView);
        /// <inheritdoc/>
        public override void SupplementaryViewDisplayingEnded(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath) => _supplementaryViewDisplayingEnded.OnNext((collectionView, view, elementKind, indexPath));
        /// <inheritdoc/>
        public override void WillDisplayCell(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath) => _willDisplayCell.OnNext((collectionView, cell, indexPath));
        /// <inheritdoc/>
        public override void WillDisplaySupplementaryView(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath) => _willDisplaySupplementaryView.OnNext((collectionView, view, elementKind, indexPath));
        /// <inheritdoc/>
        public override void ZoomingEnded(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale) => _zoomingEnded.OnNext((scrollView, withView, atScale));
        /// <inheritdoc/>
        public override void ZoomingStarted(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view) => _zoomingStarted.OnNext((scrollView, view));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UICollectionViewDragDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UICollectionViewDragDelegateRx : global::UIKit.UICollectionViewDragDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session)> _dragSessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session)> _dragSessionWillBegin = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDragDelegate.DragSessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session)> DragSessionDidEndObs => _dragSessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDragDelegate.DragSessionWillBegin"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session)> DragSessionWillBeginObs => _dragSessionWillBegin;
        /// <inheritdoc/>
        public override void DragSessionDidEnd(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session) => _dragSessionDidEnd.OnNext((collectionView, session));
        /// <inheritdoc/>
        public override void DragSessionWillBegin(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDragSession session) => _dragSessionWillBegin.OnNext((collectionView, session));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UICollectionViewDropDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UICollectionViewDropDelegateRx : global::UIKit.UICollectionViewDropDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)> _dropSessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)> _dropSessionDidEnter = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)> _dropSessionDidExit = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUICollectionViewDropCoordinator coordinator)> _performDrop = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.IUICollectionViewDropCoordinator coordinator)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDropDelegate.DropSessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)> DropSessionDidEndObs => _dropSessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDropDelegate.DropSessionDidEnter"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)> DropSessionDidEnterObs => _dropSessionDidEnter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDropDelegate.DropSessionDidExit"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session)> DropSessionDidExitObs => _dropSessionDidExit;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDropDelegate.PerformDrop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.IUICollectionViewDropCoordinator coordinator)> PerformDropObs => _performDrop;
        /// <inheritdoc/>
        public override void DropSessionDidEnd(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session) => _dropSessionDidEnd.OnNext((collectionView, session));
        /// <inheritdoc/>
        public override void DropSessionDidEnter(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session) => _dropSessionDidEnter.OnNext((collectionView, session));
        /// <inheritdoc/>
        public override void DropSessionDidExit(global::UIKit.UICollectionView collectionView, global::UIKit.IUIDropSession session) => _dropSessionDidExit.OnNext((collectionView, session));
        /// <inheritdoc/>
        public override void PerformDrop(global::UIKit.UICollectionView collectionView, global::UIKit.IUICollectionViewDropCoordinator coordinator) => _performDrop.OnNext((collectionView, coordinator));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UICollisionBehaviorDelegate"/> into Observables.
    /// </summary>
    public partial class UICollisionBehaviorDelegateRx : global::UIKit.UICollisionBehaviorDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint)> _beganBoundaryContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint)> _beganContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier)> _endedBoundaryContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem)> _endedContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.BeganBoundaryContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint)> BeganBoundaryContactObs => _beganBoundaryContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.BeganContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint)> BeganContactObs => _beganContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.EndedBoundaryContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier)> EndedBoundaryContactObs => _endedBoundaryContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.EndedContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem)> EndedContactObs => _endedContact;
        /// <inheritdoc/>
        public override void BeganBoundaryContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint) => _beganBoundaryContact.OnNext((behavior, dynamicItem, boundaryIdentifier, atPoint));
        /// <inheritdoc/>
        public override void BeganContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint) => _beganContact.OnNext((behavior, firstItem, secondItem, atPoint));
        /// <inheritdoc/>
        public override void EndedBoundaryContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier) => _endedBoundaryContact.OnNext((behavior, dynamicItem, boundaryIdentifier));
        /// <inheritdoc/>
        public override void EndedContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem) => _endedContact.OnNext((behavior, firstItem, secondItem));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDocumentBrowserViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIDocumentBrowserViewControllerDelegateRx : global::UIKit.UIDocumentBrowserViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl sourceUrl, global::Foundation.NSUrl destinationUrl)> _didImportDocument = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl sourceUrl, global::Foundation.NSUrl destinationUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls)> _didPickDocumentsAtUrls = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls)> _didPickDocumentUrls = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::System.Action<global::Foundation.NSUrl, global::UIKit.UIDocumentBrowserImportMode> importHandler)> _didRequestDocumentCreation = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::System.Action<global::Foundation.NSUrl, global::UIKit.UIDocumentBrowserImportMode> importHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl documentUrl, global::Foundation.NSError error)> _failedToImportDocument = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl documentUrl, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::UIKit.UIActivityViewController activityViewController)> _willPresent = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentBrowserViewController controller, global::UIKit.UIActivityViewController activityViewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentBrowserViewControllerDelegate.DidImportDocument"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl sourceUrl, global::Foundation.NSUrl destinationUrl)> DidImportDocumentObs => _didImportDocument;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentBrowserViewControllerDelegate.DidPickDocumentsAtUrls"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls)> DidPickDocumentsAtUrlsObs => _didPickDocumentsAtUrls;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentBrowserViewControllerDelegate.DidPickDocumentUrls"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls)> DidPickDocumentUrlsObs => _didPickDocumentUrls;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentBrowserViewControllerDelegate.DidRequestDocumentCreation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentBrowserViewController controller, global::System.Action<global::Foundation.NSUrl, global::UIKit.UIDocumentBrowserImportMode> importHandler)> DidRequestDocumentCreationObs => _didRequestDocumentCreation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentBrowserViewControllerDelegate.FailedToImportDocument"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl documentUrl, global::Foundation.NSError error)> FailedToImportDocumentObs => _failedToImportDocument;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentBrowserViewControllerDelegate.WillPresent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentBrowserViewController controller, global::UIKit.UIActivityViewController activityViewController)> WillPresentObs => _willPresent;
        /// <inheritdoc/>
        public override void DidImportDocument(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl sourceUrl, global::Foundation.NSUrl destinationUrl) => _didImportDocument.OnNext((controller, sourceUrl, destinationUrl));
        /// <inheritdoc/>
        public override void DidPickDocumentsAtUrls(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls) => _didPickDocumentsAtUrls.OnNext((controller, documentUrls));
        /// <inheritdoc/>
        public override void DidPickDocumentUrls(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl[] documentUrls) => _didPickDocumentUrls.OnNext((controller, documentUrls));
        /// <inheritdoc/>
        public override void DidRequestDocumentCreation(global::UIKit.UIDocumentBrowserViewController controller, global::System.Action<global::Foundation.NSUrl, global::UIKit.UIDocumentBrowserImportMode> importHandler) => _didRequestDocumentCreation.OnNext((controller, importHandler));
        /// <inheritdoc/>
        public override void FailedToImportDocument(global::UIKit.UIDocumentBrowserViewController controller, global::Foundation.NSUrl documentUrl, global::Foundation.NSError error) => _failedToImportDocument.OnNext((controller, documentUrl, error));
        /// <inheritdoc/>
        public override void WillPresent(global::UIKit.UIDocumentBrowserViewController controller, global::UIKit.UIActivityViewController activityViewController) => _willPresent.OnNext((controller, activityViewController));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDocumentInteractionControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIDocumentInteractionControllerDelegateRx : global::UIKit.UIDocumentInteractionControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController> _didDismissOpenInMenu = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController> _didDismissOptionsMenu = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController> _didEndPreview = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentInteractionController controller, string application)> _didEndSendingToApplication = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentInteractionController controller, string application)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController> _willBeginPreview = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentInteractionController controller, string application)> _willBeginSendingToApplication = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentInteractionController controller, string application)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController> _willPresentOpenInMenu = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController> _willPresentOptionsMenu = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentInteractionController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.DidDismissOpenInMenu"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentInteractionController> DidDismissOpenInMenuObs => _didDismissOpenInMenu;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.DidDismissOptionsMenu"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentInteractionController> DidDismissOptionsMenuObs => _didDismissOptionsMenu;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.DidEndPreview"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentInteractionController> DidEndPreviewObs => _didEndPreview;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.DidEndSendingToApplication"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentInteractionController controller, string application)> DidEndSendingToApplicationObs => _didEndSendingToApplication;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.WillBeginPreview"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentInteractionController> WillBeginPreviewObs => _willBeginPreview;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.WillBeginSendingToApplication"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentInteractionController controller, string application)> WillBeginSendingToApplicationObs => _willBeginSendingToApplication;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.WillPresentOpenInMenu"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentInteractionController> WillPresentOpenInMenuObs => _willPresentOpenInMenu;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentInteractionControllerDelegate.WillPresentOptionsMenu"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentInteractionController> WillPresentOptionsMenuObs => _willPresentOptionsMenu;
        /// <inheritdoc/>
        public override void DidDismissOpenInMenu(global::UIKit.UIDocumentInteractionController controller) => _didDismissOpenInMenu.OnNext(controller);
        /// <inheritdoc/>
        public override void DidDismissOptionsMenu(global::UIKit.UIDocumentInteractionController controller) => _didDismissOptionsMenu.OnNext(controller);
        /// <inheritdoc/>
        public override void DidEndPreview(global::UIKit.UIDocumentInteractionController controller) => _didEndPreview.OnNext(controller);
        /// <inheritdoc/>
        public override void DidEndSendingToApplication(global::UIKit.UIDocumentInteractionController controller, string application) => _didEndSendingToApplication.OnNext((controller, application));
        /// <inheritdoc/>
        public override void WillBeginPreview(global::UIKit.UIDocumentInteractionController controller) => _willBeginPreview.OnNext(controller);
        /// <inheritdoc/>
        public override void WillBeginSendingToApplication(global::UIKit.UIDocumentInteractionController controller, string application) => _willBeginSendingToApplication.OnNext((controller, application));
        /// <inheritdoc/>
        public override void WillPresentOpenInMenu(global::UIKit.UIDocumentInteractionController controller) => _willPresentOpenInMenu.OnNext(controller);
        /// <inheritdoc/>
        public override void WillPresentOptionsMenu(global::UIKit.UIDocumentInteractionController controller) => _willPresentOptionsMenu.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDocumentMenuDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIDocumentMenuDelegateRx : global::UIKit.UIDocumentMenuDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentMenuViewController documentMenu, global::UIKit.UIDocumentPickerViewController documentPicker)> _didPickDocumentPicker = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentMenuViewController documentMenu, global::UIKit.UIDocumentPickerViewController documentPicker)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentMenuViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentMenuViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentMenuDelegate.DidPickDocumentPicker"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentMenuViewController documentMenu, global::UIKit.UIDocumentPickerViewController documentPicker)> DidPickDocumentPickerObs => _didPickDocumentPicker;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentMenuDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentMenuViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidPickDocumentPicker(global::UIKit.UIDocumentMenuViewController documentMenu, global::UIKit.UIDocumentPickerViewController documentPicker) => _didPickDocumentPicker.OnNext((documentMenu, documentPicker));
        /// <inheritdoc/>
        public override void WasCancelled(global::UIKit.UIDocumentMenuViewController documentMenu) => _wasCancelled.OnNext(documentMenu);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDocumentPickerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIDocumentPickerDelegateRx : global::UIKit.UIDocumentPickerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentPickerViewController controller, global::Foundation.NSUrl url)> _didPickDocument = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDocumentPickerViewController controller, global::Foundation.NSUrl url)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentPickerViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDocumentPickerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentPickerDelegate.DidPickDocument"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDocumentPickerViewController controller, global::Foundation.NSUrl url)> DidPickDocumentObs => _didPickDocument;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDocumentPickerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDocumentPickerViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidPickDocument(global::UIKit.UIDocumentPickerViewController controller, global::Foundation.NSUrl url) => _didPickDocument.OnNext((controller, url));
        /// <inheritdoc/>
        public override void WasCancelled(global::UIKit.UIDocumentPickerViewController controller) => _wasCancelled.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDragInteractionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIDragInteractionDelegateRx : global::UIKit.UIDragInteractionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)> _sessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)> _sessionDidMove = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)> _sessionDidTransferItems = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)> _sessionWillBegin = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)> _sessionWillEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDragItem[] items, global::UIKit.UIDragInteraction addingInteraction)> _willAddItems = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDragItem[] items, global::UIKit.UIDragInteraction addingInteraction)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator)> _willAnimateCancel = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session)> _willAnimateLift = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.SessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)> SessionDidEndObs => _sessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.SessionDidMove"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)> SessionDidMoveObs => _sessionDidMove;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.SessionDidTransferItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)> SessionDidTransferItemsObs => _sessionDidTransferItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.SessionWillBegin"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session)> SessionWillBeginObs => _sessionWillBegin;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.SessionWillEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)> SessionWillEndObs => _sessionWillEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.WillAddItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDragItem[] items, global::UIKit.UIDragInteraction addingInteraction)> WillAddItemsObs => _willAddItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.WillAnimateCancel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator)> WillAnimateCancelObs => _willAnimateCancel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDragInteractionDelegate.WillAnimateLift"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session)> WillAnimateLiftObs => _willAnimateLift;
        /// <inheritdoc/>
        public override void SessionDidEnd(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation) => _sessionDidEnd.OnNext((interaction, session, operation));
        /// <inheritdoc/>
        public override void SessionDidMove(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session) => _sessionDidMove.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void SessionDidTransferItems(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session) => _sessionDidTransferItems.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void SessionWillBegin(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session) => _sessionWillBegin.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void SessionWillEnd(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation) => _sessionWillEnd.OnNext((interaction, session, operation));
        /// <inheritdoc/>
        public override void WillAddItems(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragSession session, global::UIKit.UIDragItem[] items, global::UIKit.UIDragInteraction addingInteraction) => _willAddItems.OnNext((interaction, session, items, addingInteraction));
        /// <inheritdoc/>
        public override void WillAnimateCancel(global::UIKit.UIDragInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator) => _willAnimateCancel.OnNext((interaction, item, animator));
        /// <inheritdoc/>
        public override void WillAnimateLift(global::UIKit.UIDragInteraction interaction, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session) => _willAnimateLift.OnNext((interaction, animator, session));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDropInteractionDelegate"/> into Observables.
    /// </summary>
    public partial class UIDropInteractionDelegateRx : global::UIKit.UIDropInteractionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> _concludeDrop = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> _performDrop = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> _sessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> _sessionDidEnter = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> _sessionDidExit = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator)> _willAnimateDrop = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIDropInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDropInteractionDelegate.ConcludeDrop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> ConcludeDropObs => _concludeDrop;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDropInteractionDelegate.PerformDrop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> PerformDropObs => _performDrop;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDropInteractionDelegate.SessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> SessionDidEndObs => _sessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDropInteractionDelegate.SessionDidEnter"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> SessionDidEnterObs => _sessionDidEnter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDropInteractionDelegate.SessionDidExit"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session)> SessionDidExitObs => _sessionDidExit;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDropInteractionDelegate.WillAnimateDrop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIDropInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator)> WillAnimateDropObs => _willAnimateDrop;
        /// <inheritdoc/>
        public override void ConcludeDrop(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session) => _concludeDrop.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void PerformDrop(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session) => _performDrop.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void SessionDidEnd(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session) => _sessionDidEnd.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void SessionDidEnter(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session) => _sessionDidEnter.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void SessionDidExit(global::UIKit.UIDropInteraction interaction, global::UIKit.IUIDropSession session) => _sessionDidExit.OnNext((interaction, session));
        /// <inheritdoc/>
        public override void WillAnimateDrop(global::UIKit.UIDropInteraction interaction, global::UIKit.UIDragItem item, global::UIKit.IUIDragAnimating animator) => _willAnimateDrop.OnNext((interaction, item, animator));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDynamicAnimatorDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIDynamicAnimatorDelegateRx : global::UIKit.UIDynamicAnimatorDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator> _didPause = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator> _willResume = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDynamicAnimatorDelegate.DidPause"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDynamicAnimator> DidPauseObs => _didPause;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDynamicAnimatorDelegate.WillResume"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDynamicAnimator> WillResumeObs => _willResume;
        /// <inheritdoc/>
        public override void DidPause(global::UIKit.UIDynamicAnimator animator) => _didPause.OnNext(animator);
        /// <inheritdoc/>
        public override void WillResume(global::UIKit.UIDynamicAnimator animator) => _willResume.OnNext(animator);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIImagePickerControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIImagePickerControllerDelegateRx : global::UIKit.UIImagePickerControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIImagePickerController> _canceled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIImagePickerController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIImagePickerController picker, global::UIKit.UIImage image, global::Foundation.NSDictionary editingInfo)> _finishedPickingImage = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIImagePickerController picker, global::UIKit.UIImage image, global::Foundation.NSDictionary editingInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIImagePickerController picker, global::Foundation.NSDictionary info)> _finishedPickingMedia = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIImagePickerController picker, global::Foundation.NSDictionary info)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIImagePickerControllerDelegate.Canceled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIImagePickerController> CanceledObs => _canceled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIImagePickerControllerDelegate.FinishedPickingImage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIImagePickerController picker, global::UIKit.UIImage image, global::Foundation.NSDictionary editingInfo)> FinishedPickingImageObs => _finishedPickingImage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIImagePickerControllerDelegate.FinishedPickingMedia"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIImagePickerController picker, global::Foundation.NSDictionary info)> FinishedPickingMediaObs => _finishedPickingMedia;
        /// <inheritdoc/>
        public override void Canceled(global::UIKit.UIImagePickerController picker) => _canceled.OnNext(picker);
        /// <inheritdoc/>
        public override void FinishedPickingImage(global::UIKit.UIImagePickerController picker, global::UIKit.UIImage image, global::Foundation.NSDictionary editingInfo) => _finishedPickingImage.OnNext((picker, image, editingInfo));
        /// <inheritdoc/>
        public override void FinishedPickingMedia(global::UIKit.UIImagePickerController picker, global::Foundation.NSDictionary info) => _finishedPickingMedia.OnNext((picker, info));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UINavigationBarDelegate"/> into Observables.
    /// </summary>
    public partial class UINavigationBarDelegateRx : global::UIKit.UINavigationBarDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> _didPopItem = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> _didPushItem = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationBarDelegate.DidPopItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> DidPopItemObs => _didPopItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationBarDelegate.DidPushItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> DidPushItemObs => _didPushItem;
        /// <inheritdoc/>
        public override void DidPopItem(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item) => _didPopItem.OnNext((navigationBar, item));
        /// <inheritdoc/>
        public override void DidPushItem(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item) => _didPushItem.OnNext((navigationBar, item));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UINavigationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UINavigationControllerDelegateRx : global::UIKit.UINavigationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> _didShowViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> _willShowViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationControllerDelegate.DidShowViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> DidShowViewControllerObs => _didShowViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationControllerDelegate.WillShowViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> WillShowViewControllerObs => _willShowViewController;
        /// <inheritdoc/>
        public override void DidShowViewController(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated) => _didShowViewController.OnNext((navigationController, viewController, animated));
        /// <inheritdoc/>
        public override void WillShowViewController(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated) => _willShowViewController.OnNext((navigationController, viewController, animated));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPageViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIPageViewControllerDelegateRx : global::UIKit.UIPageViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed)> _didFinishAnimating = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers)> _willTransition = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewControllerDelegate.DidFinishAnimating"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed)> DidFinishAnimatingObs => _didFinishAnimating;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewControllerDelegate.WillTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers)> WillTransitionObs => _willTransition;
        /// <inheritdoc/>
        public override void DidFinishAnimating(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed) => _didFinishAnimating.OnNext((pageViewController, finished, previousViewControllers, completed));
        /// <inheritdoc/>
        public override void WillTransition(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers) => _willTransition.OnNext((pageViewController, pendingViewControllers));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPencilInteractionDelegate"/> into Observables.
    /// </summary>
    public partial class UIPencilInteractionDelegateRx : global::UIKit.UIPencilInteractionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPencilInteraction> _didTap = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPencilInteraction>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPencilInteractionDelegate.DidTap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPencilInteraction> DidTapObs => _didTap;
        /// <inheritdoc/>
        public override void DidTap(global::UIKit.UIPencilInteraction interaction) => _didTap.OnNext(interaction);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPickerViewDelegate"/> into Observables.
    /// </summary>
    public partial class UIPickerViewDelegateRx : global::UIKit.UIPickerViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPickerView pickerView, global::System.nint row, global::System.nint component)> _selected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPickerView pickerView, global::System.nint row, global::System.nint component)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPickerViewDelegate.Selected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPickerView pickerView, global::System.nint row, global::System.nint component)> SelectedObs => _selected;
        /// <inheritdoc/>
        public override void Selected(global::UIKit.UIPickerView pickerView, global::System.nint row, global::System.nint component) => _selected.OnNext((pickerView, row, component));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPopoverControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIPopoverControllerDelegateRx : global::UIKit.UIPopoverControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverController> _didDismiss = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverControllerDelegate.DidDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPopoverController> DidDismissObs => _didDismiss;
        /// <inheritdoc/>
        public override void DidDismiss(global::UIKit.UIPopoverController popoverController) => _didDismiss.OnNext(popoverController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPopoverPresentationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIPopoverPresentationControllerDelegateRx : global::UIKit.UIPopoverPresentationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverPresentationController> _didDismissPopover = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverPresentationController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverPresentationController> _prepareForPopoverPresentation = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverPresentationController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPopoverPresentationController popoverPresentationController, global::CoreGraphics.CGRect targetRect, global::UIKit.UIView inView)> _willRepositionPopover = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPopoverPresentationController popoverPresentationController, global::CoreGraphics.CGRect targetRect, global::UIKit.UIView inView)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverPresentationControllerDelegate.DidDismissPopover"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPopoverPresentationController> DidDismissPopoverObs => _didDismissPopover;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverPresentationControllerDelegate.PrepareForPopoverPresentation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPopoverPresentationController> PrepareForPopoverPresentationObs => _prepareForPopoverPresentation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverPresentationControllerDelegate.WillRepositionPopover"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("Use the overload with 'ref' parameters for 'targetRect' and 'inView'.", false)]
        public global::System.IObservable<(global::UIKit.UIPopoverPresentationController popoverPresentationController, global::CoreGraphics.CGRect targetRect, global::UIKit.UIView inView)> WillRepositionPopoverObs => _willRepositionPopover;
        /// <inheritdoc/>
        public override void DidDismissPopover(global::UIKit.UIPopoverPresentationController popoverPresentationController) => _didDismissPopover.OnNext(popoverPresentationController);
        /// <inheritdoc/>
        public override void PrepareForPopoverPresentation(global::UIKit.UIPopoverPresentationController popoverPresentationController) => _prepareForPopoverPresentation.OnNext(popoverPresentationController);
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("Use the overload with 'ref' parameters for 'targetRect' and 'inView'.", false)]
        public override void WillRepositionPopover(global::UIKit.UIPopoverPresentationController popoverPresentationController, global::CoreGraphics.CGRect targetRect, global::UIKit.UIView inView) => _willRepositionPopover.OnNext((popoverPresentationController, targetRect, inView));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPreviewInteractionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIPreviewInteractionDelegateRx : global::UIKit.UIPreviewInteractionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPreviewInteraction> _didCancel = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPreviewInteraction>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended)> _didUpdateCommit = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended)> _didUpdatePreviewTransition = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPreviewInteractionDelegate.DidCancel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPreviewInteraction> DidCancelObs => _didCancel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPreviewInteractionDelegate.DidUpdateCommit"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended)> DidUpdateCommitObs => _didUpdateCommit;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPreviewInteractionDelegate.DidUpdatePreviewTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended)> DidUpdatePreviewTransitionObs => _didUpdatePreviewTransition;
        /// <inheritdoc/>
        public override void DidCancel(global::UIKit.UIPreviewInteraction previewInteraction) => _didCancel.OnNext(previewInteraction);
        /// <inheritdoc/>
        public override void DidUpdateCommit(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended) => _didUpdateCommit.OnNext((previewInteraction, transitionProgress, ended));
        /// <inheritdoc/>
        public override void DidUpdatePreviewTransition(global::UIKit.UIPreviewInteraction previewInteraction, global::System.nfloat transitionProgress, bool ended) => _didUpdatePreviewTransition.OnNext((previewInteraction, transitionProgress, ended));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPrinterPickerControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIPrinterPickerControllerDelegateRx : global::UIKit.UIPrinterPickerControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController> _didDismiss = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController> _didPresent = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController> _didSelectPrinter = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController> _willDismiss = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController> _willPresent = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrinterPickerController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrinterPickerControllerDelegate.DidDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrinterPickerController> DidDismissObs => _didDismiss;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrinterPickerControllerDelegate.DidPresent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrinterPickerController> DidPresentObs => _didPresent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrinterPickerControllerDelegate.DidSelectPrinter"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrinterPickerController> DidSelectPrinterObs => _didSelectPrinter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrinterPickerControllerDelegate.WillDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrinterPickerController> WillDismissObs => _willDismiss;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrinterPickerControllerDelegate.WillPresent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrinterPickerController> WillPresentObs => _willPresent;
        /// <inheritdoc/>
        public override void DidDismiss(global::UIKit.UIPrinterPickerController printerPickerController) => _didDismiss.OnNext(printerPickerController);
        /// <inheritdoc/>
        public override void DidPresent(global::UIKit.UIPrinterPickerController printerPickerController) => _didPresent.OnNext(printerPickerController);
        /// <inheritdoc/>
        public override void DidSelectPrinter(global::UIKit.UIPrinterPickerController printerPickerController) => _didSelectPrinter.OnNext(printerPickerController);
        /// <inheritdoc/>
        public override void WillDismiss(global::UIKit.UIPrinterPickerController printerPickerController) => _willDismiss.OnNext(printerPickerController);
        /// <inheritdoc/>
        public override void WillPresent(global::UIKit.UIPrinterPickerController printerPickerController) => _willPresent.OnNext(printerPickerController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPrintInteractionControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIPrintInteractionControllerDelegateRx : global::UIKit.UIPrintInteractionControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController> _didDismissPrinterOptions = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController> _didFinishJob = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController> _didPresentPrinterOptions = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController> _willDismissPrinterOptions = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController> _willPresentPrinterOptions = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController> _willStartJob = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPrintInteractionController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionControllerDelegate.DidDismissPrinterOptions"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrintInteractionController> DidDismissPrinterOptionsObs => _didDismissPrinterOptions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionControllerDelegate.DidFinishJob"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrintInteractionController> DidFinishJobObs => _didFinishJob;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionControllerDelegate.DidPresentPrinterOptions"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrintInteractionController> DidPresentPrinterOptionsObs => _didPresentPrinterOptions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionControllerDelegate.WillDismissPrinterOptions"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrintInteractionController> WillDismissPrinterOptionsObs => _willDismissPrinterOptions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionControllerDelegate.WillPresentPrinterOptions"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrintInteractionController> WillPresentPrinterOptionsObs => _willPresentPrinterOptions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPrintInteractionControllerDelegate.WillStartJob"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPrintInteractionController> WillStartJobObs => _willStartJob;
        /// <inheritdoc/>
        public override void DidDismissPrinterOptions(global::UIKit.UIPrintInteractionController printInteractionController) => _didDismissPrinterOptions.OnNext(printInteractionController);
        /// <inheritdoc/>
        public override void DidFinishJob(global::UIKit.UIPrintInteractionController printInteractionController) => _didFinishJob.OnNext(printInteractionController);
        /// <inheritdoc/>
        public override void DidPresentPrinterOptions(global::UIKit.UIPrintInteractionController printInteractionController) => _didPresentPrinterOptions.OnNext(printInteractionController);
        /// <inheritdoc/>
        public override void WillDismissPrinterOptions(global::UIKit.UIPrintInteractionController printInteractionController) => _willDismissPrinterOptions.OnNext(printInteractionController);
        /// <inheritdoc/>
        public override void WillPresentPrinterOptions(global::UIKit.UIPrintInteractionController printInteractionController) => _willPresentPrinterOptions.OnNext(printInteractionController);
        /// <inheritdoc/>
        public override void WillStartJob(global::UIKit.UIPrintInteractionController printInteractionController) => _willStartJob.OnNext(printInteractionController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIScrollViewDelegate"/> into Observables.
    /// </summary>
    public partial class UIScrollViewDelegateRx : global::UIKit.UIScrollViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _decelerationEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _decelerationStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _didChangeAdjustedContentInset = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _didZoom = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, bool willDecelerate)> _draggingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, bool willDecelerate)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _draggingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrollAnimationEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrolled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrolledToTop = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)> _zoomingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)> _zoomingStarted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DecelerationEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DecelerationEndedObs => _decelerationEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DecelerationStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DecelerationStartedObs => _decelerationStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DidChangeAdjustedContentInset"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DidChangeAdjustedContentInsetObs => _didChangeAdjustedContentInset;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DidZoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DidZoomObs => _didZoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DraggingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, bool willDecelerate)> DraggingEndedObs => _draggingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DraggingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DraggingStartedObs => _draggingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ScrollAnimationEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrollAnimationEndedObs => _scrollAnimationEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.Scrolled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrolledObs => _scrolled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ScrolledToTop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrolledToTopObs => _scrolledToTop;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ZoomingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)> ZoomingEndedObs => _zoomingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ZoomingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)> ZoomingStartedObs => _zoomingStarted;
        /// <inheritdoc/>
        public override void DecelerationEnded(global::UIKit.UIScrollView scrollView) => _decelerationEnded.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DecelerationStarted(global::UIKit.UIScrollView scrollView) => _decelerationStarted.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DidChangeAdjustedContentInset(global::UIKit.UIScrollView scrollView) => _didChangeAdjustedContentInset.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DidZoom(global::UIKit.UIScrollView scrollView) => _didZoom.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DraggingEnded(global::UIKit.UIScrollView scrollView, bool willDecelerate) => _draggingEnded.OnNext((scrollView, willDecelerate));
        /// <inheritdoc/>
        public override void DraggingStarted(global::UIKit.UIScrollView scrollView) => _draggingStarted.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ScrollAnimationEnded(global::UIKit.UIScrollView scrollView) => _scrollAnimationEnded.OnNext(scrollView);
        /// <inheritdoc/>
        public override void Scrolled(global::UIKit.UIScrollView scrollView) => _scrolled.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ScrolledToTop(global::UIKit.UIScrollView scrollView) => _scrolledToTop.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ZoomingEnded(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale) => _zoomingEnded.OnNext((scrollView, withView, atScale));
        /// <inheritdoc/>
        public override void ZoomingStarted(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view) => _zoomingStarted.OnNext((scrollView, view));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UISearchBarDelegate"/> into Observables.
    /// </summary>
    public partial class UISearchBarDelegateRx : global::UIKit.UISearchBarDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _bookmarkButtonClicked = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _cancelButtonClicked = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _listButtonClicked = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _onEditingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _onEditingStopped = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _searchButtonClicked = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope)> _selectedScopeButtonIndexChanged = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, string searchText)> _textChanged = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, string searchText)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.BookmarkButtonClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> BookmarkButtonClickedObs => _bookmarkButtonClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.CancelButtonClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> CancelButtonClickedObs => _cancelButtonClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.ListButtonClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> ListButtonClickedObs => _listButtonClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.OnEditingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> OnEditingStartedObs => _onEditingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.OnEditingStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> OnEditingStoppedObs => _onEditingStopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.SearchButtonClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> SearchButtonClickedObs => _searchButtonClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.SelectedScopeButtonIndexChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope)> SelectedScopeButtonIndexChangedObs => _selectedScopeButtonIndexChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.TextChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchBar searchBar, string searchText)> TextChangedObs => _textChanged;
        /// <inheritdoc/>
        public override void BookmarkButtonClicked(global::UIKit.UISearchBar searchBar) => _bookmarkButtonClicked.OnNext(searchBar);
        /// <inheritdoc/>
        public override void CancelButtonClicked(global::UIKit.UISearchBar searchBar) => _cancelButtonClicked.OnNext(searchBar);
        /// <inheritdoc/>
        public override void ListButtonClicked(global::UIKit.UISearchBar searchBar) => _listButtonClicked.OnNext(searchBar);
        /// <inheritdoc/>
        public override void OnEditingStarted(global::UIKit.UISearchBar searchBar) => _onEditingStarted.OnNext(searchBar);
        /// <inheritdoc/>
        public override void OnEditingStopped(global::UIKit.UISearchBar searchBar) => _onEditingStopped.OnNext(searchBar);
        /// <inheritdoc/>
        public override void SearchButtonClicked(global::UIKit.UISearchBar searchBar) => _searchButtonClicked.OnNext(searchBar);
        /// <inheritdoc/>
        public override void SelectedScopeButtonIndexChanged(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope) => _selectedScopeButtonIndexChanged.OnNext((searchBar, selectedScope));
        /// <inheritdoc/>
        public override void TextChanged(global::UIKit.UISearchBar searchBar, string searchText) => _textChanged.OnNext((searchBar, searchText));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UISearchControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UISearchControllerDelegateRx : global::UIKit.UISearchControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _didDismissSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _didPresentSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _presentSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _willDismissSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _willPresentSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.DidDismissSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> DidDismissSearchControllerObs => _didDismissSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.DidPresentSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> DidPresentSearchControllerObs => _didPresentSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.PresentSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> PresentSearchControllerObs => _presentSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.WillDismissSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> WillDismissSearchControllerObs => _willDismissSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.WillPresentSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> WillPresentSearchControllerObs => _willPresentSearchController;
        /// <inheritdoc/>
        public override void DidDismissSearchController(global::UIKit.UISearchController searchController) => _didDismissSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void DidPresentSearchController(global::UIKit.UISearchController searchController) => _didPresentSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void PresentSearchController(global::UIKit.UISearchController searchController) => _presentSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void WillDismissSearchController(global::UIKit.UISearchController searchController) => _willDismissSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void WillPresentSearchController(global::UIKit.UISearchController searchController) => _willPresentSearchController.OnNext(searchController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UISearchDisplayDelegate"/> into Observables.
    /// </summary>
    public partial class UISearchDisplayDelegateRx : global::UIKit.UISearchDisplayDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController> _didBeginSearch = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController> _didEndSearch = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> _didHideSearchResults = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> _didLoadSearchResults = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> _didShowSearchResults = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController> _willBeginSearch = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController> _willEndSearch = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchDisplayController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> _willHideSearchResults = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> _willShowSearchResults = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> _willUnloadSearchResults = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.DidBeginSearch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchDisplayController> DidBeginSearchObs => _didBeginSearch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.DidEndSearch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchDisplayController> DidEndSearchObs => _didEndSearch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.DidHideSearchResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> DidHideSearchResultsObs => _didHideSearchResults;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.DidLoadSearchResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> DidLoadSearchResultsObs => _didLoadSearchResults;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.DidShowSearchResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> DidShowSearchResultsObs => _didShowSearchResults;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.WillBeginSearch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchDisplayController> WillBeginSearchObs => _willBeginSearch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.WillEndSearch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchDisplayController> WillEndSearchObs => _willEndSearch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.WillHideSearchResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> WillHideSearchResultsObs => _willHideSearchResults;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.WillShowSearchResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> WillShowSearchResultsObs => _willShowSearchResults;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchDisplayDelegate.WillUnloadSearchResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView)> WillUnloadSearchResultsObs => _willUnloadSearchResults;
        /// <inheritdoc/>
        public override void DidBeginSearch(global::UIKit.UISearchDisplayController controller) => _didBeginSearch.OnNext(controller);
        /// <inheritdoc/>
        public override void DidEndSearch(global::UIKit.UISearchDisplayController controller) => _didEndSearch.OnNext(controller);
        /// <inheritdoc/>
        public override void DidHideSearchResults(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView) => _didHideSearchResults.OnNext((controller, tableView));
        /// <inheritdoc/>
        public override void DidLoadSearchResults(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView) => _didLoadSearchResults.OnNext((controller, tableView));
        /// <inheritdoc/>
        public override void DidShowSearchResults(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView) => _didShowSearchResults.OnNext((controller, tableView));
        /// <inheritdoc/>
        public override void WillBeginSearch(global::UIKit.UISearchDisplayController controller) => _willBeginSearch.OnNext(controller);
        /// <inheritdoc/>
        public override void WillEndSearch(global::UIKit.UISearchDisplayController controller) => _willEndSearch.OnNext(controller);
        /// <inheritdoc/>
        public override void WillHideSearchResults(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView) => _willHideSearchResults.OnNext((controller, tableView));
        /// <inheritdoc/>
        public override void WillShowSearchResults(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView) => _willShowSearchResults.OnNext((controller, tableView));
        /// <inheritdoc/>
        public override void WillUnloadSearchResults(global::UIKit.UISearchDisplayController controller, global::UIKit.UITableView tableView) => _willUnloadSearchResults.OnNext((controller, tableView));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UISplitViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UISplitViewControllerDelegateRx : global::UIKit.UISplitViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode)> _willChangeDisplayMode = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem barButtonItem, global::UIKit.UIPopoverController pc)> _willHideViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem barButtonItem, global::UIKit.UIPopoverController pc)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UIPopoverController pc, global::UIKit.UIViewController aViewController)> _willPresentViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UIPopoverController pc, global::UIKit.UIViewController aViewController)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem button)> _willShowViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem button)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewControllerDelegate.WillChangeDisplayMode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode)> WillChangeDisplayModeObs => _willChangeDisplayMode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewControllerDelegate.WillHideViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem barButtonItem, global::UIKit.UIPopoverController pc)> WillHideViewControllerObs => _willHideViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewControllerDelegate.WillPresentViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISplitViewController svc, global::UIKit.UIPopoverController pc, global::UIKit.UIViewController aViewController)> WillPresentViewControllerObs => _willPresentViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewControllerDelegate.WillShowViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem button)> WillShowViewControllerObs => _willShowViewController;
        /// <inheritdoc/>
        public override void WillChangeDisplayMode(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode) => _willChangeDisplayMode.OnNext((svc, displayMode));
        /// <inheritdoc/>
        public override void WillHideViewController(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem barButtonItem, global::UIKit.UIPopoverController pc) => _willHideViewController.OnNext((svc, aViewController, barButtonItem, pc));
        /// <inheritdoc/>
        public override void WillPresentViewController(global::UIKit.UISplitViewController svc, global::UIKit.UIPopoverController pc, global::UIKit.UIViewController aViewController) => _willPresentViewController.OnNext((svc, pc, aViewController));
        /// <inheritdoc/>
        public override void WillShowViewController(global::UIKit.UISplitViewController svc, global::UIKit.UIViewController aViewController, global::UIKit.UIBarButtonItem button) => _willShowViewController.OnNext((svc, aViewController, button));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITabBarControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UITabBarControllerDelegateRx : global::UIKit.UITabBarControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed)> _finishedCustomizingViewControllers = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers)> _onCustomizingViewControllers = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed)> _onEndCustomizingViewControllers = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController)> _viewControllerSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarControllerDelegate.FinishedCustomizingViewControllers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed)> FinishedCustomizingViewControllersObs => _finishedCustomizingViewControllers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarControllerDelegate.OnCustomizingViewControllers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers)> OnCustomizingViewControllersObs => _onCustomizingViewControllers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarControllerDelegate.OnEndCustomizingViewControllers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed)> OnEndCustomizingViewControllersObs => _onEndCustomizingViewControllers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarControllerDelegate.ViewControllerSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController)> ViewControllerSelectedObs => _viewControllerSelected;
        /// <inheritdoc/>
        public override void FinishedCustomizingViewControllers(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed) => _finishedCustomizingViewControllers.OnNext((tabBarController, viewControllers, changed));
        /// <inheritdoc/>
        public override void OnCustomizingViewControllers(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers) => _onCustomizingViewControllers.OnNext((tabBarController, viewControllers));
        /// <inheritdoc/>
        public override void OnEndCustomizingViewControllers(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController[] viewControllers, bool changed) => _onEndCustomizingViewControllers.OnNext((tabBarController, viewControllers, changed));
        /// <inheritdoc/>
        public override void ViewControllerSelected(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController) => _viewControllerSelected.OnNext((tabBarController, viewController));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITabBarDelegate"/> into Observables.
    /// </summary>
    public partial class UITabBarDelegateRx : global::UIKit.UITabBarDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items)> _didBeginCustomizingItems = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed)> _didEndCustomizingItems = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item)> _itemSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items)> _willBeginCustomizingItems = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed)> _willEndCustomizingItems = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarDelegate.DidBeginCustomizingItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items)> DidBeginCustomizingItemsObs => _didBeginCustomizingItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarDelegate.DidEndCustomizingItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed)> DidEndCustomizingItemsObs => _didEndCustomizingItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarDelegate.ItemSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item)> ItemSelectedObs => _itemSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarDelegate.WillBeginCustomizingItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items)> WillBeginCustomizingItemsObs => _willBeginCustomizingItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarDelegate.WillEndCustomizingItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed)> WillEndCustomizingItemsObs => _willEndCustomizingItems;
        /// <inheritdoc/>
        public override void DidBeginCustomizingItems(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items) => _didBeginCustomizingItems.OnNext((tabbar, items));
        /// <inheritdoc/>
        public override void DidEndCustomizingItems(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed) => _didEndCustomizingItems.OnNext((tabbar, items, changed));
        /// <inheritdoc/>
        public override void ItemSelected(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item) => _itemSelected.OnNext((tabbar, item));
        /// <inheritdoc/>
        public override void WillBeginCustomizingItems(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items) => _willBeginCustomizingItems.OnNext((tabbar, items));
        /// <inheritdoc/>
        public override void WillEndCustomizingItems(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem[] items, bool changed) => _willEndCustomizingItems.OnNext((tabbar, items, changed));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITableViewDelegate"/> into Observables.
    /// </summary>
    public partial class UITableViewDelegateRx : global::UIKit.UITableViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _accessoryButtonTapped = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _cellDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _didEndEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> _didUpdateFocus = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _footerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _headerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> _performAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowDeselected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowHighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowUnhighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _willBeginEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _willDisplay = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _willDisplayFooterView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _willDisplayHeaderView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.AccessoryButtonTapped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> AccessoryButtonTappedObs => _accessoryButtonTapped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.CellDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> CellDisplayingEndedObs => _cellDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.DidEndEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> DidEndEditingObs => _didEndEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.DidUpdateFocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> DidUpdateFocusObs => _didUpdateFocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.FooterViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> FooterViewDisplayingEndedObs => _footerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.HeaderViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> HeaderViewDisplayingEndedObs => _headerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.PerformAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> PerformActionObs => _performAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowDeselected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowDeselectedObs => _rowDeselected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowHighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowHighlightedObs => _rowHighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowSelectedObs => _rowSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowUnhighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowUnhighlightedObs => _rowUnhighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.WillBeginEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> WillBeginEditingObs => _willBeginEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.WillDisplay"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> WillDisplayObs => _willDisplay;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.WillDisplayFooterView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> WillDisplayFooterViewObs => _willDisplayFooterView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.WillDisplayHeaderView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> WillDisplayHeaderViewObs => _willDisplayHeaderView;
        /// <inheritdoc/>
        public override void AccessoryButtonTapped(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _accessoryButtonTapped.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void CellDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _cellDisplayingEnded.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void DidEndEditing(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _didEndEditing.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void DidUpdateFocus(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator) => _didUpdateFocus.OnNext((tableView, context, coordinator));
        /// <inheritdoc/>
        public override void FooterViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _footerViewDisplayingEnded.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void HeaderViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _headerViewDisplayingEnded.OnNext((tableView, headerView, section));
        /// <inheritdoc/>
        public override void PerformAction(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender) => _performAction.OnNext((tableView, action, indexPath, sender));
        /// <inheritdoc/>
        public override void RowDeselected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowDeselected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowHighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowHighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void RowSelected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowSelected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowUnhighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowUnhighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void WillBeginEditing(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _willBeginEditing.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void WillDisplay(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _willDisplay.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void WillDisplayFooterView(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _willDisplayFooterView.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void WillDisplayHeaderView(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _willDisplayHeaderView.OnNext((tableView, headerView, section));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITableViewDragDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UITableViewDragDelegateRx : global::UIKit.UITableViewDragDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session)> _dragSessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session)> _dragSessionWillBegin = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDragDelegate.DragSessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session)> DragSessionDidEndObs => _dragSessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDragDelegate.DragSessionWillBegin"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session)> DragSessionWillBeginObs => _dragSessionWillBegin;
        /// <inheritdoc/>
        public override void DragSessionDidEnd(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session) => _dragSessionDidEnd.OnNext((tableView, session));
        /// <inheritdoc/>
        public override void DragSessionWillBegin(global::UIKit.UITableView tableView, global::UIKit.IUIDragSession session) => _dragSessionWillBegin.OnNext((tableView, session));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITableViewDropDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UITableViewDropDelegateRx : global::UIKit.UITableViewDropDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)> _dropSessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)> _dropSessionDidEnter = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)> _dropSessionDidExit = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUITableViewDropCoordinator coordinator)> _performDrop = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.IUITableViewDropCoordinator coordinator)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDropDelegate.DropSessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)> DropSessionDidEndObs => _dropSessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDropDelegate.DropSessionDidEnter"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)> DropSessionDidEnterObs => _dropSessionDidEnter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDropDelegate.DropSessionDidExit"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session)> DropSessionDidExitObs => _dropSessionDidExit;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDropDelegate.PerformDrop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.IUITableViewDropCoordinator coordinator)> PerformDropObs => _performDrop;
        /// <inheritdoc/>
        public override void DropSessionDidEnd(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session) => _dropSessionDidEnd.OnNext((tableView, session));
        /// <inheritdoc/>
        public override void DropSessionDidEnter(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session) => _dropSessionDidEnter.OnNext((tableView, session));
        /// <inheritdoc/>
        public override void DropSessionDidExit(global::UIKit.UITableView tableView, global::UIKit.IUIDropSession session) => _dropSessionDidExit.OnNext((tableView, session));
        /// <inheritdoc/>
        public override void PerformDrop(global::UIKit.UITableView tableView, global::UIKit.IUITableViewDropCoordinator coordinator) => _performDrop.OnNext((tableView, coordinator));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITableViewSource"/> into Observables.
    /// </summary>
    public abstract partial class UITableViewSourceRx : global::UIKit.UITableViewSource
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _accessoryButtonTapped = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _cellDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath)> _commitEditingStyle = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _didEndEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> _didUpdateFocus = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _footerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _headerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath)> _moveRow = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> _performAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowDeselected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowHighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowUnhighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _willBeginEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _willDisplay = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _willDisplayFooterView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _willDisplayHeaderView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.AccessoryButtonTapped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> AccessoryButtonTappedObs => _accessoryButtonTapped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.CellDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> CellDisplayingEndedObs => _cellDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.CommitEditingStyle"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath)> CommitEditingStyleObs => _commitEditingStyle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.DidEndEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> DidEndEditingObs => _didEndEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.DidUpdateFocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> DidUpdateFocusObs => _didUpdateFocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.FooterViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> FooterViewDisplayingEndedObs => _footerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.HeaderViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> HeaderViewDisplayingEndedObs => _headerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.MoveRow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath)> MoveRowObs => _moveRow;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.PerformAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> PerformActionObs => _performAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowDeselected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowDeselectedObs => _rowDeselected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowHighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowHighlightedObs => _rowHighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowSelectedObs => _rowSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowUnhighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowUnhighlightedObs => _rowUnhighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.WillBeginEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> WillBeginEditingObs => _willBeginEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.WillDisplay"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> WillDisplayObs => _willDisplay;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.WillDisplayFooterView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> WillDisplayFooterViewObs => _willDisplayFooterView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.WillDisplayHeaderView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> WillDisplayHeaderViewObs => _willDisplayHeaderView;
        /// <inheritdoc/>
        public override void AccessoryButtonTapped(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _accessoryButtonTapped.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void CellDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _cellDisplayingEnded.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void CommitEditingStyle(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath) => _commitEditingStyle.OnNext((tableView, editingStyle, indexPath));
        /// <inheritdoc/>
        public override void DidEndEditing(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _didEndEditing.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void DidUpdateFocus(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator) => _didUpdateFocus.OnNext((tableView, context, coordinator));
        /// <inheritdoc/>
        public override void FooterViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _footerViewDisplayingEnded.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void HeaderViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _headerViewDisplayingEnded.OnNext((tableView, headerView, section));
        /// <inheritdoc/>
        public override void MoveRow(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath) => _moveRow.OnNext((tableView, sourceIndexPath, destinationIndexPath));
        /// <inheritdoc/>
        public override void PerformAction(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender) => _performAction.OnNext((tableView, action, indexPath, sender));
        /// <inheritdoc/>
        public override void RowDeselected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowDeselected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowHighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowHighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void RowSelected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowSelected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowUnhighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowUnhighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void WillBeginEditing(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _willBeginEditing.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void WillDisplay(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _willDisplay.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void WillDisplayFooterView(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _willDisplayFooterView.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void WillDisplayHeaderView(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _willDisplayHeaderView.OnNext((tableView, headerView, section));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextDragDelegate"/> into Observables.
    /// </summary>
    public partial class UITextDragDelegateRx : global::UIKit.UITextDragDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)> _dragSessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session)> _dragSessionWillBegin = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session)> _willAnimateLift = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDragDelegate.DragSessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation)> DragSessionDidEndObs => _dragSessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDragDelegate.DragSessionWillBegin"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session)> DragSessionWillBeginObs => _dragSessionWillBegin;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDragDelegate.WillAnimateLift"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session)> WillAnimateLiftObs => _willAnimateLift;
        /// <inheritdoc/>
        public override void DragSessionDidEnd(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session, global::UIKit.UIDropOperation operation) => _dragSessionDidEnd.OnNext((textDraggableView, session, operation));
        /// <inheritdoc/>
        public override void DragSessionWillBegin(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragSession session) => _dragSessionWillBegin.OnNext((textDraggableView, session));
        /// <inheritdoc/>
        public override void WillAnimateLift(global::UIKit.IUITextDraggable textDraggableView, global::UIKit.IUIDragAnimating animator, global::UIKit.IUIDragSession session) => _willAnimateLift.OnNext((textDraggableView, animator, session));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextDropDelegate"/> into Observables.
    /// </summary>
    public partial class UITextDropDelegateRx : global::UIKit.UITextDropDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> _dropSessionDidEnd = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> _dropSessionDidEnter = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> _dropSessionDidExit = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> _dropSessionDidUpdate = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUITextDropRequest drop)> _willPerformDrop = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUITextDropRequest drop)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDropDelegate.DropSessionDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> DropSessionDidEndObs => _dropSessionDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDropDelegate.DropSessionDidEnter"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> DropSessionDidEnterObs => _dropSessionDidEnter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDropDelegate.DropSessionDidExit"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> DropSessionDidExitObs => _dropSessionDidExit;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDropDelegate.DropSessionDidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session)> DropSessionDidUpdateObs => _dropSessionDidUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextDropDelegate.WillPerformDrop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUITextDropRequest drop)> WillPerformDropObs => _willPerformDrop;
        /// <inheritdoc/>
        public override void DropSessionDidEnd(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session) => _dropSessionDidEnd.OnNext((textDroppableView, session));
        /// <inheritdoc/>
        public override void DropSessionDidEnter(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session) => _dropSessionDidEnter.OnNext((textDroppableView, session));
        /// <inheritdoc/>
        public override void DropSessionDidExit(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session) => _dropSessionDidExit.OnNext((textDroppableView, session));
        /// <inheritdoc/>
        public override void DropSessionDidUpdate(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUIDropSession session) => _dropSessionDidUpdate.OnNext((textDroppableView, session));
        /// <inheritdoc/>
        public override void WillPerformDrop(global::UIKit.IUITextDroppable textDroppableView, global::UIKit.IUITextDropRequest drop) => _willPerformDrop.OnNext((textDroppableView, drop));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextFieldDelegate"/> into Observables.
    /// </summary>
    public partial class UITextFieldDelegateRx : global::UIKit.UITextFieldDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason)> _editingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextField> _editingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextField>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextFieldDelegate.EditingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason)> EditingEndedObs => _editingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextFieldDelegate.EditingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextField> EditingStartedObs => _editingStarted;
        /// <inheritdoc/>
        public override void EditingEnded(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason) => _editingEnded.OnNext((textField, reason));
        /// <inheritdoc/>
        public override void EditingStarted(global::UIKit.UITextField textField) => _editingStarted.OnNext(textField);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextInputDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UITextInputDelegateRx : global::UIKit.UITextInputDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _selectionWillChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _textDidChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _textWillChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> SelectionDidChangeObs => _selectionDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.SelectionWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> SelectionWillChangeObs => _selectionWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.TextDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> TextDidChangeObs => _textDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.TextWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> TextWillChangeObs => _textWillChange;
        /// <inheritdoc/>
        public override void SelectionDidChange(global::UIKit.IUITextInput uiTextInput) => _selectionDidChange.OnNext(uiTextInput);
        /// <inheritdoc/>
        public override void SelectionWillChange(global::UIKit.IUITextInput uiTextInput) => _selectionWillChange.OnNext(uiTextInput);
        /// <inheritdoc/>
        public override void TextDidChange(global::UIKit.IUITextInput textInput) => _textDidChange.OnNext(textInput);
        /// <inheritdoc/>
        public override void TextWillChange(global::UIKit.IUITextInput textInput) => _textWillChange.OnNext(textInput);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextPasteDelegate"/> into Observables.
    /// </summary>
    public partial class UITextPasteDelegateRx : global::UIKit.UITextPasteDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, global::UIKit.IUITextPasteItem item)> _transformPasteItem = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, global::UIKit.IUITextPasteItem item)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextPasteDelegate.TransformPasteItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, global::UIKit.IUITextPasteItem item)> TransformPasteItemObs => _transformPasteItem;
        /// <inheritdoc/>
        public override void TransformPasteItem(global::UIKit.IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, global::UIKit.IUITextPasteItem item) => _transformPasteItem.OnNext((textPasteConfigurationSupporting, item));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextViewDelegate"/> into Observables.
    /// </summary>
    public partial class UITextViewDelegateRx : global::UIKit.UITextViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _changed = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _editingEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _editingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _selectionChanged = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.Changed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> ChangedObs => _changed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.EditingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> EditingEndedObs => _editingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.EditingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> EditingStartedObs => _editingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.SelectionChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> SelectionChangedObs => _selectionChanged;
        /// <inheritdoc/>
        public override void Changed(global::UIKit.UITextView textView) => _changed.OnNext(textView);
        /// <inheritdoc/>
        public override void EditingEnded(global::UIKit.UITextView textView) => _editingEnded.OnNext(textView);
        /// <inheritdoc/>
        public override void EditingStarted(global::UIKit.UITextView textView) => _editingStarted.OnNext(textView);
        /// <inheritdoc/>
        public override void SelectionChanged(global::UIKit.UITextView textView) => _selectionChanged.OnNext(textView);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIVideoEditorControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIVideoEditorControllerDelegateRx : global::UIKit.UIVideoEditorControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIVideoEditorController editor, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIVideoEditorController editor, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIVideoEditorController> _userCancelled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIVideoEditorController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIVideoEditorController editor, string editedVideoPath)> _videoSaved = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIVideoEditorController editor, string editedVideoPath)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIVideoEditorControllerDelegate.Failed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIVideoEditorController editor, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIVideoEditorControllerDelegate.UserCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIVideoEditorController> UserCancelledObs => _userCancelled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIVideoEditorControllerDelegate.VideoSaved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIVideoEditorController editor, string editedVideoPath)> VideoSavedObs => _videoSaved;
        /// <inheritdoc/>
        public override void Failed(global::UIKit.UIVideoEditorController editor, global::Foundation.NSError error) => _failed.OnNext((editor, error));
        /// <inheritdoc/>
        public override void UserCancelled(global::UIKit.UIVideoEditorController editor) => _userCancelled.OnNext(editor);
        /// <inheritdoc/>
        public override void VideoSaved(global::UIKit.UIVideoEditorController editor, string editedVideoPath) => _videoSaved.OnNext((editor, editedVideoPath));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIViewControllerPreviewingDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIViewControllerPreviewingDelegateRx : global::UIKit.UIViewControllerPreviewingDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit)> _commitViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIViewControllerPreviewingDelegate.CommitViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit)> CommitViewControllerObs => _commitViewController;
        /// <inheritdoc/>
        public override void CommitViewController(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit) => _commitViewController.OnNext((previewingContext, viewControllerToCommit));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIWebViewDelegate"/> into Observables.
    /// </summary>
    public partial class UIWebViewDelegateRx : global::UIKit.UIWebViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIWebView webView, global::Foundation.NSError error)> _loadFailed = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIWebView webView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIWebView> _loadingFinished = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIWebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIWebView> _loadStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIWebView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIWebViewDelegate.LoadFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIWebView webView, global::Foundation.NSError error)> LoadFailedObs => _loadFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIWebViewDelegate.LoadingFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIWebView> LoadingFinishedObs => _loadingFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIWebViewDelegate.LoadStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIWebView> LoadStartedObs => _loadStarted;
        /// <inheritdoc/>
        public override void LoadFailed(global::UIKit.UIWebView webView, global::Foundation.NSError error) => _loadFailed.OnNext((webView, error));
        /// <inheritdoc/>
        public override void LoadingFinished(global::UIKit.UIWebView webView) => _loadingFinished.OnNext(webView);
        /// <inheritdoc/>
        public override void LoadStarted(global::UIKit.UIWebView webView) => _loadStarted.OnNext(webView);
    }
}

namespace UserNotifications
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::UserNotifications.UNUserNotificationCenterDelegate"/> into Observables.
    /// </summary>
    public partial class UNUserNotificationCenterDelegateRx : global::UserNotifications.UNUserNotificationCenterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)> _didReceiveNotificationResponse = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification)> _openSettings = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> _willPresentNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UserNotifications.UNUserNotificationCenterDelegate.DidReceiveNotificationResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)> DidReceiveNotificationResponseObs => _didReceiveNotificationResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UserNotifications.UNUserNotificationCenterDelegate.OpenSettings"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification)> OpenSettingsObs => _openSettings;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UserNotifications.UNUserNotificationCenterDelegate.WillPresentNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> WillPresentNotificationObs => _willPresentNotification;
        /// <inheritdoc/>
        public override void DidReceiveNotificationResponse(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler) => _didReceiveNotificationResponse.OnNext((center, response, completionHandler));
        /// <inheritdoc/>
        public override void OpenSettings(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification) => _openSettings.OnNext((center, notification));
        /// <inheritdoc/>
        public override void WillPresentNotification(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler) => _willPresentNotification.OnNext((center, notification, completionHandler));
    }
}

namespace VideoSubscriberAccount
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::VideoSubscriberAccount.VSAccountManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class VSAccountManagerDelegateRx : global::VideoSubscriberAccount.VSAccountManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> _dismissViewController = new Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> _presentViewController = new Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "VideoSubscriberAccount.VSAccountManagerDelegate.DismissViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> DismissViewControllerObs => _dismissViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "VideoSubscriberAccount.VSAccountManagerDelegate.PresentViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> PresentViewControllerObs => _presentViewController;
        /// <inheritdoc/>
        public override void DismissViewController(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController) => _dismissViewController.OnNext((accountManager, viewController));
        /// <inheritdoc/>
        public override void PresentViewController(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController) => _presentViewController.OnNext((accountManager, viewController));
    }
}

namespace WatchConnectivity
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::WatchConnectivity.WCSessionDelegate"/> into Observables.
    /// </summary>
    public partial class WCSessionDelegateRx : global::WatchConnectivity.WCSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error)> _activationDidComplete = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession> _didBecomeInactive = new Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession> _didDeactivate = new Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error)> _didFinishFileTransfer = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error)> _didFinishUserInfoTransfer = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext)> _didReceiveApplicationContext = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file)> _didReceiveFile = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler)> _didReceiveMessage = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler)> _didReceiveMessageData = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo)> _didReceiveUserInfo = new Pharmacist.Common.SingleAwaitSubject<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession> _sessionReachabilityDidChange = new Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession> _sessionWatchStateDidChange = new Pharmacist.Common.SingleAwaitSubject<global::WatchConnectivity.WCSession>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.ActivationDidComplete"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error)> ActivationDidCompleteObs => _activationDidComplete;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidBecomeInactive"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchConnectivity.WCSession> DidBecomeInactiveObs => _didBecomeInactive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidDeactivate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchConnectivity.WCSession> DidDeactivateObs => _didDeactivate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidFinishFileTransfer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error)> DidFinishFileTransferObs => _didFinishFileTransfer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidFinishUserInfoTransfer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error)> DidFinishUserInfoTransferObs => _didFinishUserInfoTransfer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidReceiveApplicationContext"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext)> DidReceiveApplicationContextObs => _didReceiveApplicationContext;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidReceiveFile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file)> DidReceiveFileObs => _didReceiveFile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidReceiveMessage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler)> DidReceiveMessageObs => _didReceiveMessage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidReceiveMessageData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler)> DidReceiveMessageDataObs => _didReceiveMessageData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.DidReceiveUserInfo"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo)> DidReceiveUserInfoObs => _didReceiveUserInfo;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.SessionReachabilityDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchConnectivity.WCSession> SessionReachabilityDidChangeObs => _sessionReachabilityDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WatchConnectivity.WCSessionDelegate.SessionWatchStateDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WatchConnectivity.WCSession> SessionWatchStateDidChangeObs => _sessionWatchStateDidChange;
        /// <inheritdoc/>
        public override void ActivationDidComplete(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionActivationState activationState, global::Foundation.NSError error) => _activationDidComplete.OnNext((session, activationState, error));
        /// <inheritdoc/>
        public override void DidBecomeInactive(global::WatchConnectivity.WCSession session) => _didBecomeInactive.OnNext(session);
        /// <inheritdoc/>
        public override void DidDeactivate(global::WatchConnectivity.WCSession session) => _didDeactivate.OnNext(session);
        /// <inheritdoc/>
        public override void DidFinishFileTransfer(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFileTransfer fileTransfer, global::Foundation.NSError error) => _didFinishFileTransfer.OnNext((session, fileTransfer, error));
        /// <inheritdoc/>
        public override void DidFinishUserInfoTransfer(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionUserInfoTransfer userInfoTransfer, global::Foundation.NSError error) => _didFinishUserInfoTransfer.OnNext((session, userInfoTransfer, error));
        /// <inheritdoc/>
        public override void DidReceiveApplicationContext(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> applicationContext) => _didReceiveApplicationContext.OnNext((session, applicationContext));
        /// <inheritdoc/>
        public override void DidReceiveFile(global::WatchConnectivity.WCSession session, global::WatchConnectivity.WCSessionFile file) => _didReceiveFile.OnNext((session, file));
        /// <inheritdoc/>
        public override void DidReceiveMessage(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> message, global::WatchConnectivity.WCSessionReplyHandler replyHandler) => _didReceiveMessage.OnNext((session, message, replyHandler));
        /// <inheritdoc/>
        public override void DidReceiveMessageData(global::WatchConnectivity.WCSession session, global::Foundation.NSData messageData, global::WatchConnectivity.WCSessionReplyDataHandler replyHandler) => _didReceiveMessageData.OnNext((session, messageData, replyHandler));
        /// <inheritdoc/>
        public override void DidReceiveUserInfo(global::WatchConnectivity.WCSession session, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> userInfo) => _didReceiveUserInfo.OnNext((session, userInfo));
        /// <inheritdoc/>
        public override void SessionReachabilityDidChange(global::WatchConnectivity.WCSession session) => _sessionReachabilityDidChange.OnNext(session);
        /// <inheritdoc/>
        public override void SessionWatchStateDidChange(global::WatchConnectivity.WCSession session) => _sessionWatchStateDidChange.OnNext(session);
    }
}

namespace WebKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WKNavigationDelegate"/> into Observables.
    /// </summary>
    public partial class WKNavigationDelegateRx : global::WebKit.WKNavigationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView> _contentProcessDidTerminate = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler)> _decidePolicy = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didCommitNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> _didFailNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> _didFailProvisionalNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didFinishNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didReceiveServerRedirectForProvisionalNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didStartProvisionalNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.ContentProcessDidTerminate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WKWebView> ContentProcessDidTerminateObs => _contentProcessDidTerminate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DecidePolicy"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler)> DecidePolicyObs => _decidePolicy;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidCommitNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidCommitNavigationObs => _didCommitNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidFailNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> DidFailNavigationObs => _didFailNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidFailProvisionalNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> DidFailProvisionalNavigationObs => _didFailProvisionalNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidFinishNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidFinishNavigationObs => _didFinishNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidReceiveAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveAuthenticationChallengeObs => _didReceiveAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidReceiveServerRedirectForProvisionalNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidReceiveServerRedirectForProvisionalNavigationObs => _didReceiveServerRedirectForProvisionalNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidStartProvisionalNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidStartProvisionalNavigationObs => _didStartProvisionalNavigation;
        /// <inheritdoc/>
        public override void ContentProcessDidTerminate(global::WebKit.WKWebView webView) => _contentProcessDidTerminate.OnNext(webView);
        /// <inheritdoc/>
        public override void DecidePolicy(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler) => _decidePolicy.OnNext((webView, navigationAction, decisionHandler));
        /// <inheritdoc/>
        public override void DidCommitNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didCommitNavigation.OnNext((webView, navigation));
        /// <inheritdoc/>
        public override void DidFailNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error) => _didFailNavigation.OnNext((webView, navigation, error));
        /// <inheritdoc/>
        public override void DidFailProvisionalNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error) => _didFailProvisionalNavigation.OnNext((webView, navigation, error));
        /// <inheritdoc/>
        public override void DidFinishNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didFinishNavigation.OnNext((webView, navigation));
        /// <inheritdoc/>
        public override void DidReceiveAuthenticationChallenge(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveAuthenticationChallenge.OnNext((webView, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidReceiveServerRedirectForProvisionalNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didReceiveServerRedirectForProvisionalNavigation.OnNext((webView, navigation));
        /// <inheritdoc/>
        public override void DidStartProvisionalNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didStartProvisionalNavigation.OnNext((webView, navigation));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WKUIDelegate"/> into Observables.
    /// </summary>
    public partial class WKUIDelegateRx : global::WebKit.WKUIDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::UIKit.UIViewController previewingViewController)> _commitPreviewingViewController = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::UIKit.UIViewController previewingViewController)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView> _didClose = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler)> _runJavaScriptAlertPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler)> _runJavaScriptConfirmPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler)> _runJavaScriptTextInputPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.CommitPreviewingViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::UIKit.UIViewController previewingViewController)> CommitPreviewingViewControllerObs => _commitPreviewingViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.DidClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WKWebView> DidCloseObs => _didClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.RunJavaScriptAlertPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler)> RunJavaScriptAlertPanelObs => _runJavaScriptAlertPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.RunJavaScriptConfirmPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler)> RunJavaScriptConfirmPanelObs => _runJavaScriptConfirmPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.RunJavaScriptTextInputPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler)> RunJavaScriptTextInputPanelObs => _runJavaScriptTextInputPanel;
        /// <inheritdoc/>
        public override void CommitPreviewingViewController(global::WebKit.WKWebView webView, global::UIKit.UIViewController previewingViewController) => _commitPreviewingViewController.OnNext((webView, previewingViewController));
        /// <inheritdoc/>
        public override void DidClose(global::WebKit.WKWebView webView) => _didClose.OnNext(webView);
        /// <inheritdoc/>
        public override void RunJavaScriptAlertPanel(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler) => _runJavaScriptAlertPanel.OnNext((webView, message, frame, completionHandler));
        /// <inheritdoc/>
        public override void RunJavaScriptConfirmPanel(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler) => _runJavaScriptConfirmPanel.OnNext((webView, message, frame, completionHandler));
        /// <inheritdoc/>
        public override void RunJavaScriptTextInputPanel(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler) => _runJavaScriptTextInputPanel.OnNext((webView, prompt, defaultText, frame, completionHandler));
    }
}