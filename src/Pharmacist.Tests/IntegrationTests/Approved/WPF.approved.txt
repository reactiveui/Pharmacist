// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;

using global::Pharmacist.Common;

namespace Microsoft.Win32
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Microsoft.Win32"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Microsoft.Win32.FileDialog"/> class.
        /// </summary>
        public static FileDialogEvents Events(this global::Microsoft.Win32.FileDialog item) => new FileDialogEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Microsoft.Win32.FileDialog"/> class as observables.
    /// </summary>
    public class FileDialogEvents
    {
        private readonly global::Microsoft.Win32.FileDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Microsoft.Win32.FileDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FileDialogEvents(global::Microsoft.Win32.FileDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Microsoft.Win32.FileDialog.FileOk"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> FileOk => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.FileOk += x, x => _data.FileOk -= x).Select(x => x.EventArgs);
    }
}

namespace System.ComponentModel
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.ComponentModel"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.ComponentModel.ICollectionView"/> class.
        /// </summary>
        public static ICollectionViewEvents Events(this global::System.ComponentModel.ICollectionView item) => new ICollectionViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.ComponentModel.ICollectionView"/> class as observables.
    /// </summary>
    public class ICollectionViewEvents
    {
        private readonly global::System.ComponentModel.ICollectionView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.ComponentModel.ICollectionView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ICollectionViewEvents(global::System.ComponentModel.ICollectionView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.ICollectionView.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.ComponentModel.ICollectionView.CurrentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CurrentChangingEventArgs> CurrentChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CurrentChangingEventHandler, global::System.ComponentModel.CurrentChangingEventArgs>(x => _data.CurrentChanging += x, x => _data.CurrentChanging -= x).Select(x => x.EventArgs);
    }
}

namespace System.IO.Packaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.IO.Packaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class.
        /// </summary>
        public static PackageDigitalSignatureManagerEvents Events(this global::System.IO.Packaging.PackageDigitalSignatureManager item) => new PackageDigitalSignatureManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class as observables.
    /// </summary>
    public class PackageDigitalSignatureManagerEvents
    {
        private readonly global::System.IO.Packaging.PackageDigitalSignatureManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.IO.Packaging.PackageDigitalSignatureManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PackageDigitalSignatureManagerEvents(global::System.IO.Packaging.PackageDigitalSignatureManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.IO.Packaging.SignatureVerificationEventArgs> InvalidSignatureEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.IO.Packaging.InvalidSignatureEventHandler, global::System.IO.Packaging.SignatureVerificationEventArgs>(x => _data.InvalidSignatureEvent += x, x => _data.InvalidSignatureEvent -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Application"/> class.
        /// </summary>
        public static ApplicationEvents Events(this global::System.Windows.Application item) => new ApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.ContentElement"/> class.
        /// </summary>
        public static ContentElementEvents Events(this global::System.Windows.ContentElement item) => new ContentElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.FrameworkContentElement"/> class.
        /// </summary>
        public static FrameworkContentElementEvents Events(this global::System.Windows.FrameworkContentElement item) => new FrameworkContentElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.FrameworkElement"/> class.
        /// </summary>
        public static FrameworkElementEvents Events(this global::System.Windows.FrameworkElement item) => new FrameworkElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Freezable"/> class.
        /// </summary>
        public static FreezableEvents Events(this global::System.Windows.Freezable item) => new FreezableEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.IInputElement"/> class.
        /// </summary>
        public static IInputElementEvents Events(this global::System.Windows.IInputElement item) => new IInputElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.PresentationSource"/> class.
        /// </summary>
        public static PresentationSourceEvents Events(this global::System.Windows.PresentationSource item) => new PresentationSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.UIElement"/> class.
        /// </summary>
        public static UIElementEvents Events(this global::System.Windows.UIElement item) => new UIElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.UIElement3D"/> class.
        /// </summary>
        public static UIElement3DEvents Events(this global::System.Windows.UIElement3D item) => new UIElement3DEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.VisualStateGroup"/> class.
        /// </summary>
        public static VisualStateGroupEvents Events(this global::System.Windows.VisualStateGroup item) => new VisualStateGroupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Window"/> class.
        /// </summary>
        public static WindowEvents Events(this global::System.Windows.Window item) => new WindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Application"/> class as observables.
    /// </summary>
    public class ApplicationEvents
    {
        private readonly global::System.Windows.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ApplicationEvents(global::System.Windows.Application data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Deactivated += x, x => _data.Deactivated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.DispatcherUnhandledException"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs> DispatcherUnhandledException => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherUnhandledExceptionEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>(x => _data.DispatcherUnhandledException += x, x => _data.DispatcherUnhandledException -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.Exit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExitEventArgs> Exit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.ExitEventHandler, global::System.Windows.ExitEventArgs>(x => _data.Exit += x, x => _data.Exit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.SessionEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.SessionEndingCancelEventArgs> SessionEnding => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.SessionEndingCancelEventHandler, global::System.Windows.SessionEndingCancelEventArgs>(x => _data.SessionEnding += x, x => _data.SessionEnding -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Application.Startup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.StartupEventArgs> Startup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.StartupEventHandler, global::System.Windows.StartupEventArgs>(x => _data.Startup += x, x => _data.Startup -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.ContentElement"/> class as observables.
    /// </summary>
    public class ContentElementEvents
    {
        private readonly global::System.Windows.ContentElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.ContentElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContentElementEvents(global::System.Windows.ContentElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.Drop += x, x => _data.Drop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.GotFocus += x, x => _data.GotFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.LostFocus += x, x => _data.LostFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.MouseWheel += x, x => _data.MouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(x => _data.QueryCursor += x, x => _data.QueryCursor -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.StylusDown += x, x => _data.StylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusEnter += x, x => _data.StylusEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInRange += x, x => _data.StylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusLeave += x, x => _data.StylusLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusMove += x, x => _data.StylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusUp += x, x => _data.StylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.TextInput += x, x => _data.TextInput -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchDown += x, x => _data.TouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchEnter += x, x => _data.TouchEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchLeave += x, x => _data.TouchLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchMove += x, x => _data.TouchMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.ContentElement.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchUp += x, x => _data.TouchUp -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.FrameworkContentElement"/> class as observables.
    /// </summary>
    public class FrameworkContentElementEvents
    {
        private readonly global::System.Windows.FrameworkContentElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.FrameworkContentElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FrameworkContentElementEvents(global::System.Windows.FrameworkContentElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Initialized += x, x => _data.Initialized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Loaded += x, x => _data.Loaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.SourceUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> SourceUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(x => _data.SourceUpdated += x, x => _data.SourceUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.TargetUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> TargetUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(x => _data.TargetUpdated += x, x => _data.TargetUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.ToolTipClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipClosing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(x => _data.ToolTipClosing += x, x => _data.ToolTipClosing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.ToolTipOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipOpening => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(x => _data.ToolTipOpening += x, x => _data.ToolTipOpening -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkContentElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unloaded += x, x => _data.Unloaded -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.FrameworkElement"/> class as observables.
    /// </summary>
    public class FrameworkElementEvents
    {
        private readonly global::System.Windows.FrameworkElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.FrameworkElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FrameworkElementEvents(global::System.Windows.FrameworkElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ContextMenuEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ContextMenuEventHandler, global::System.Windows.Controls.ContextMenuEventArgs>(x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Initialized += x, x => _data.Initialized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Loaded += x, x => _data.Loaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.RequestBringIntoView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RequestBringIntoViewEventArgs> RequestBringIntoView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RequestBringIntoViewEventHandler, global::System.Windows.RequestBringIntoViewEventArgs>(x => _data.RequestBringIntoView += x, x => _data.RequestBringIntoView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.SizeChangedEventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.SizeChangedEventHandler, global::System.Windows.SizeChangedEventArgs>(x => _data.SizeChanged += x, x => _data.SizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.SourceUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> SourceUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(x => _data.SourceUpdated += x, x => _data.SourceUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.TargetUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.DataTransferEventArgs> TargetUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Data.DataTransferEventArgs>, global::System.Windows.Data.DataTransferEventArgs>(x => _data.TargetUpdated += x, x => _data.TargetUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.ToolTipClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipClosing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(x => _data.ToolTipClosing += x, x => _data.ToolTipClosing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.ToolTipOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ToolTipEventArgs> ToolTipOpening => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ToolTipEventHandler, global::System.Windows.Controls.ToolTipEventArgs>(x => _data.ToolTipOpening += x, x => _data.ToolTipOpening -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.FrameworkElement.Unloaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unloaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unloaded += x, x => _data.Unloaded -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Freezable"/> class as observables.
    /// </summary>
    public class FreezableEvents
    {
        private readonly global::System.Windows.Freezable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Freezable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FreezableEvents(global::System.Windows.Freezable data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Freezable.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Changed += x, x => _data.Changed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.IInputElement"/> class as observables.
    /// </summary>
    public class IInputElementEvents
    {
        private readonly global::System.Windows.IInputElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.IInputElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IInputElementEvents(global::System.Windows.IInputElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.MouseWheel += x, x => _data.MouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.StylusDown += x, x => _data.StylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusEnter += x, x => _data.StylusEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInRange += x, x => _data.StylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusLeave += x, x => _data.StylusLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusMove += x, x => _data.StylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusUp += x, x => _data.StylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.IInputElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.TextInput += x, x => _data.TextInput -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.PresentationSource"/> class as observables.
    /// </summary>
    public class PresentationSourceEvents
    {
        private readonly global::System.Windows.PresentationSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.PresentationSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PresentationSourceEvents(global::System.Windows.PresentationSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.PresentationSource.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContentRendered += x, x => _data.ContentRendered -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.UIElement"/> class as observables.
    /// </summary>
    public class UIElementEvents
    {
        private readonly global::System.Windows.UIElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.UIElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIElementEvents(global::System.Windows.UIElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.Drop += x, x => _data.Drop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.GotFocus += x, x => _data.GotFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsHitTestVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsHitTestVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsHitTestVisibleChanged += x, x => _data.IsHitTestVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.IsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsVisibleChanged += x, x => _data.IsVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.LostFocus += x, x => _data.LostFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.ManipulationBoundaryFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>, global::System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>(x => _data.ManipulationBoundaryFeedback += x, x => _data.ManipulationBoundaryFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.ManipulationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.ManipulationCompletedEventArgs>, global::System.Windows.Input.ManipulationCompletedEventArgs>(x => _data.ManipulationCompleted += x, x => _data.ManipulationCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.ManipulationDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.ManipulationDeltaEventArgs>, global::System.Windows.Input.ManipulationDeltaEventArgs>(x => _data.ManipulationDelta += x, x => _data.ManipulationDelta -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.ManipulationInertiaStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.ManipulationInertiaStartingEventArgs>, global::System.Windows.Input.ManipulationInertiaStartingEventArgs>(x => _data.ManipulationInertiaStarting += x, x => _data.ManipulationInertiaStarting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.ManipulationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.ManipulationStartedEventArgs>, global::System.Windows.Input.ManipulationStartedEventArgs>(x => _data.ManipulationStarted += x, x => _data.ManipulationStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.ManipulationStarting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.ManipulationStartingEventArgs>, global::System.Windows.Input.ManipulationStartingEventArgs>(x => _data.ManipulationStarting += x, x => _data.ManipulationStarting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.MouseWheel += x, x => _data.MouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(x => _data.QueryCursor += x, x => _data.QueryCursor -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.StylusDown += x, x => _data.StylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusEnter += x, x => _data.StylusEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInRange += x, x => _data.StylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusLeave += x, x => _data.StylusLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusMove += x, x => _data.StylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusUp += x, x => _data.StylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.TextInput += x, x => _data.TextInput -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchDown += x, x => _data.TouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchEnter += x, x => _data.TouchEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchLeave += x, x => _data.TouchLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchMove += x, x => _data.TouchMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchUp += x, x => _data.TouchUp -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.UIElement3D"/> class as observables.
    /// </summary>
    public class UIElement3DEvents
    {
        private readonly global::System.Windows.UIElement3D _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.UIElement3D"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIElement3DEvents(global::System.Windows.UIElement3D data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragEnter += x, x => _data.DragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragLeave += x, x => _data.DragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.DragOver += x, x => _data.DragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.Drop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> Drop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.Drop += x, x => _data.Drop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.FocusableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> FocusableChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.FocusableChanged += x, x => _data.FocusableChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.GiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> GiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(x => _data.GiveFeedback += x, x => _data.GiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.GotFocus += x, x => _data.GotFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.GotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> GotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.GotKeyboardFocus += x, x => _data.GotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.GotMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> GotMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.GotMouseCapture += x, x => _data.GotMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.GotStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> GotStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.GotStylusCapture += x, x => _data.GotStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.GotTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> GotTouchCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.GotTouchCapture += x, x => _data.GotTouchCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsEnabledChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsEnabledChanged += x, x => _data.IsEnabledChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsHitTestVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsHitTestVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsHitTestVisibleChanged += x, x => _data.IsHitTestVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsKeyboardFocusedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsKeyboardFocusedChanged += x, x => _data.IsKeyboardFocusedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsKeyboardFocusWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsKeyboardFocusWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsKeyboardFocusWithinChanged += x, x => _data.IsKeyboardFocusWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsMouseCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCapturedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseCapturedChanged += x, x => _data.IsMouseCapturedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsMouseCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseCaptureWithinChanged += x, x => _data.IsMouseCaptureWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsMouseDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsMouseDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsMouseDirectlyOverChanged += x, x => _data.IsMouseDirectlyOverChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsStylusCapturedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCapturedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusCapturedChanged += x, x => _data.IsStylusCapturedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsStylusCaptureWithinChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusCaptureWithinChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusCaptureWithinChanged += x, x => _data.IsStylusCaptureWithinChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsStylusDirectlyOverChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsStylusDirectlyOverChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsStylusDirectlyOverChanged += x, x => _data.IsStylusDirectlyOverChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.IsVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsVisibleChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsVisibleChanged += x, x => _data.IsVisibleChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyDown += x, x => _data.KeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.KeyUp += x, x => _data.KeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.LostFocus += x, x => _data.LostFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.LostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> LostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.LostKeyboardFocus += x, x => _data.LostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.LostMouseCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> LostMouseCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.LostMouseCapture += x, x => _data.LostMouseCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.LostStylusCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> LostStylusCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.LostStylusCapture += x, x => _data.LostStylusCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.LostTouchCapture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> LostTouchCapture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.LostTouchCapture += x, x => _data.LostTouchCapture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseDown += x, x => _data.MouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseEnter += x, x => _data.MouseEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseLeave += x, x => _data.MouseLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonDown += x, x => _data.MouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseLeftButtonUp += x, x => _data.MouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.MouseMove += x, x => _data.MouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonDown += x, x => _data.MouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseRightButtonUp += x, x => _data.MouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseUp += x, x => _data.MouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.MouseWheel += x, x => _data.MouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragEnter += x, x => _data.PreviewDragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewDragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragLeave += x, x => _data.PreviewDragLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewDragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDragOver => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDragOver += x, x => _data.PreviewDragOver -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DragEventArgs> PreviewDrop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DragEventHandler, global::System.Windows.DragEventArgs>(x => _data.PreviewDrop += x, x => _data.PreviewDrop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewGiveFeedback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.GiveFeedbackEventArgs> PreviewGiveFeedback => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.GiveFeedbackEventHandler, global::System.Windows.GiveFeedbackEventArgs>(x => _data.PreviewGiveFeedback += x, x => _data.PreviewGiveFeedback -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewGotKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewGotKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewGotKeyboardFocus += x, x => _data.PreviewGotKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewKeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyEventArgs> PreviewKeyUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyEventHandler, global::System.Windows.Input.KeyEventArgs>(x => _data.PreviewKeyUp += x, x => _data.PreviewKeyUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewLostKeyboardFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.KeyboardFocusChangedEventArgs> PreviewLostKeyboardFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.KeyboardFocusChangedEventHandler, global::System.Windows.Input.KeyboardFocusChangedEventArgs>(x => _data.PreviewLostKeyboardFocus += x, x => _data.PreviewLostKeyboardFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseDown += x, x => _data.PreviewMouseDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseLeftButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonDown += x, x => _data.PreviewMouseLeftButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseLeftButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseLeftButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseLeftButtonUp += x, x => _data.PreviewMouseLeftButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseEventArgs> PreviewMouseMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseEventHandler, global::System.Windows.Input.MouseEventArgs>(x => _data.PreviewMouseMove += x, x => _data.PreviewMouseMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseRightButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonDown += x, x => _data.PreviewMouseRightButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseRightButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseRightButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseRightButtonUp += x, x => _data.PreviewMouseRightButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseUp += x, x => _data.PreviewMouseUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewMouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseWheelEventArgs> PreviewMouseWheel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseWheelEventHandler, global::System.Windows.Input.MouseWheelEventArgs>(x => _data.PreviewMouseWheel += x, x => _data.PreviewMouseWheel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewQueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> PreviewQueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(x => _data.PreviewQueryContinueDrag += x, x => _data.PreviewQueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonDown += x, x => _data.PreviewStylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> PreviewStylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.PreviewStylusButtonUp += x, x => _data.PreviewStylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> PreviewStylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.PreviewStylusDown += x, x => _data.PreviewStylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInAirMove += x, x => _data.PreviewStylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusInRange += x, x => _data.PreviewStylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusMove += x, x => _data.PreviewStylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusOutOfRange += x, x => _data.PreviewStylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> PreviewStylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.PreviewStylusSystemGesture += x, x => _data.PreviewStylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewStylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> PreviewStylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.PreviewStylusUp += x, x => _data.PreviewStylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewTextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> PreviewTextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.PreviewTextInput += x, x => _data.PreviewTextInput -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewTouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchDown += x, x => _data.PreviewTouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewTouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchMove += x, x => _data.PreviewTouchMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.PreviewTouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> PreviewTouchUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.PreviewTouchUp += x, x => _data.PreviewTouchUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.QueryContinueDragEventHandler, global::System.Windows.QueryContinueDragEventArgs>(x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.QueryCursor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.QueryCursorEventArgs> QueryCursor => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.QueryCursorEventHandler, global::System.Windows.Input.QueryCursorEventArgs>(x => _data.QueryCursor += x, x => _data.QueryCursor -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonDown += x, x => _data.StylusButtonDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusButtonEventArgs> StylusButtonUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusButtonEventHandler, global::System.Windows.Input.StylusButtonEventArgs>(x => _data.StylusButtonUp += x, x => _data.StylusButtonUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusDownEventArgs> StylusDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusDownEventHandler, global::System.Windows.Input.StylusDownEventArgs>(x => _data.StylusDown += x, x => _data.StylusDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusEnter += x, x => _data.StylusEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusInAirMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInAirMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInAirMove += x, x => _data.StylusInAirMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusInRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusInRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusInRange += x, x => _data.StylusInRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusLeave += x, x => _data.StylusLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusMove += x, x => _data.StylusMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusOutOfRange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusOutOfRange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusOutOfRange += x, x => _data.StylusOutOfRange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusSystemGesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusSystemGestureEventArgs> StylusSystemGesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusSystemGestureEventHandler, global::System.Windows.Input.StylusSystemGestureEventArgs>(x => _data.StylusSystemGesture += x, x => _data.StylusSystemGesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.StylusUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.StylusEventArgs> StylusUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.StylusEventHandler, global::System.Windows.Input.StylusEventArgs>(x => _data.StylusUp += x, x => _data.StylusUp -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TextCompositionEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.TextCompositionEventHandler, global::System.Windows.Input.TextCompositionEventArgs>(x => _data.TextInput += x, x => _data.TextInput -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchDown += x, x => _data.TouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.TouchEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchEnter += x, x => _data.TouchEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.TouchLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchLeave => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchLeave += x, x => _data.TouchLeave -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchMove += x, x => _data.TouchMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.UIElement3D.TouchUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.TouchEventArgs> TouchUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Input.TouchEventArgs>, global::System.Windows.Input.TouchEventArgs>(x => _data.TouchUp += x, x => _data.TouchUp -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.VisualStateGroup"/> class as observables.
    /// </summary>
    public class VisualStateGroupEvents
    {
        private readonly global::System.Windows.VisualStateGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.VisualStateGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VisualStateGroupEvents(global::System.Windows.VisualStateGroup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.VisualStateGroup.CurrentStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.VisualStateChangedEventArgs> CurrentStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.VisualStateChangedEventArgs>, global::System.Windows.VisualStateChangedEventArgs>(x => _data.CurrentStateChanged += x, x => _data.CurrentStateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.VisualStateGroup.CurrentStateChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.VisualStateChangedEventArgs> CurrentStateChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.VisualStateChangedEventArgs>, global::System.Windows.VisualStateChangedEventArgs>(x => _data.CurrentStateChanging += x, x => _data.CurrentStateChanging -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Window"/> class as observables.
    /// </summary>
    public class WindowEvents
    {
        private readonly global::System.Windows.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WindowEvents(global::System.Windows.Window data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Closed += x, x => _data.Closed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(x => _data.Closing += x, x => _data.Closing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContentRendered += x, x => _data.ContentRendered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Deactivated += x, x => _data.Deactivated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationChanged += x, x => _data.LocationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.SourceInitialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SourceInitialized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SourceInitialized += x, x => _data.SourceInitialized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Window.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StateChanged += x, x => _data.StateChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Annotations
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Annotations"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Annotations.Annotation"/> class.
        /// </summary>
        public static AnnotationEvents Events(this global::System.Windows.Annotations.Annotation item) => new AnnotationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Annotations.Annotation"/> class as observables.
    /// </summary>
    public class AnnotationEvents
    {
        private readonly global::System.Windows.Annotations.Annotation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Annotations.Annotation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AnnotationEvents(global::System.Windows.Annotations.Annotation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Annotations.Annotation.AnchorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> AnchorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(x => _data.AnchorChanged += x, x => _data.AnchorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Annotations.Annotation.AuthorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs> AuthorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Annotations.AnnotationAuthorChangedEventHandler, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs>(x => _data.AuthorChanged += x, x => _data.AuthorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Annotations.Annotation.CargoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> CargoChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(x => _data.CargoChanged += x, x => _data.CargoChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Annotations.Storage
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Annotations.Storage"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class.
        /// </summary>
        public static AnnotationStoreEvents Events(this global::System.Windows.Annotations.Storage.AnnotationStore item) => new AnnotationStoreEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class as observables.
    /// </summary>
    public class AnnotationStoreEvents
    {
        private readonly global::System.Windows.Annotations.Storage.AnnotationStore _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Annotations.Storage.AnnotationStore"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AnnotationStoreEvents(global::System.Windows.Annotations.Storage.AnnotationStore data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Annotations.Storage.AnnotationStore.AnchorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> AnchorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(x => _data.AnchorChanged += x, x => _data.AnchorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Annotations.Storage.AnnotationStore.AuthorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs> AuthorChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Annotations.AnnotationAuthorChangedEventHandler, global::System.Windows.Annotations.AnnotationAuthorChangedEventArgs>(x => _data.AuthorChanged += x, x => _data.AuthorChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Annotations.Storage.AnnotationStore.CargoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.AnnotationResourceChangedEventArgs> CargoChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Annotations.AnnotationResourceChangedEventHandler, global::System.Windows.Annotations.AnnotationResourceChangedEventArgs>(x => _data.CargoChanged += x, x => _data.CargoChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Annotations.Storage.AnnotationStore.StoreContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs> StoreContentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Annotations.Storage.StoreContentChangedEventHandler, global::System.Windows.Annotations.Storage.StoreContentChangedEventArgs>(x => _data.StoreContentChanged += x, x => _data.StoreContentChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Controls
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Controls"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Calendar"/> class.
        /// </summary>
        public static CalendarEvents Events(this global::System.Windows.Controls.Calendar item) => new CalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class.
        /// </summary>
        public static CalendarDateRangeEvents Events(this global::System.Windows.Controls.CalendarDateRange item) => new CalendarDateRangeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ComboBox"/> class.
        /// </summary>
        public static ComboBoxEvents Events(this global::System.Windows.Controls.ComboBox item) => new ComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ContextMenu"/> class.
        /// </summary>
        public static ContextMenuEvents Events(this global::System.Windows.Controls.ContextMenu item) => new ContextMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Control"/> class.
        /// </summary>
        public static ControlEvents Events(this global::System.Windows.Controls.Control item) => new ControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGrid"/> class.
        /// </summary>
        public static DataGridEvents Events(this global::System.Windows.Controls.DataGrid item) => new DataGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridCell"/> class.
        /// </summary>
        public static DataGridCellEvents Events(this global::System.Windows.Controls.DataGridCell item) => new DataGridCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class.
        /// </summary>
        public static DataGridColumnEvents Events(this global::System.Windows.Controls.DataGridColumn item) => new DataGridColumnEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DataGridRow"/> class.
        /// </summary>
        public static DataGridRowEvents Events(this global::System.Windows.Controls.DataGridRow item) => new DataGridRowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.DatePicker"/> class.
        /// </summary>
        public static DatePickerEvents Events(this global::System.Windows.Controls.DatePicker item) => new DatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Expander"/> class.
        /// </summary>
        public static ExpanderEvents Events(this global::System.Windows.Controls.Expander item) => new ExpanderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Frame"/> class.
        /// </summary>
        public static FrameEvents Events(this global::System.Windows.Controls.Frame item) => new FrameEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Image"/> class.
        /// </summary>
        public static ImageEvents Events(this global::System.Windows.Controls.Image item) => new ImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.InkCanvas"/> class.
        /// </summary>
        public static InkCanvasEvents Events(this global::System.Windows.Controls.InkCanvas item) => new InkCanvasEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        public static ItemContainerGeneratorEvents Events(this global::System.Windows.Controls.ItemContainerGenerator item) => new ItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class.
        /// </summary>
        public static ListBoxItemEvents Events(this global::System.Windows.Controls.ListBoxItem item) => new ListBoxItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.MediaElement"/> class.
        /// </summary>
        public static MediaElementEvents Events(this global::System.Windows.Controls.MediaElement item) => new MediaElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.MenuItem"/> class.
        /// </summary>
        public static MenuItemEvents Events(this global::System.Windows.Controls.MenuItem item) => new MenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.PasswordBox"/> class.
        /// </summary>
        public static PasswordBoxEvents Events(this global::System.Windows.Controls.PasswordBox item) => new PasswordBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class.
        /// </summary>
        public static ScrollViewerEvents Events(this global::System.Windows.Controls.ScrollViewer item) => new ScrollViewerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.ToolTip"/> class.
        /// </summary>
        public static ToolTipEvents Events(this global::System.Windows.Controls.ToolTip item) => new ToolTipEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.TreeView"/> class.
        /// </summary>
        public static TreeViewEvents Events(this global::System.Windows.Controls.TreeView item) => new TreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class.
        /// </summary>
        public static TreeViewItemEvents Events(this global::System.Windows.Controls.TreeViewItem item) => new TreeViewItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.WebBrowser"/> class.
        /// </summary>
        public static WebBrowserEvents Events(this global::System.Windows.Controls.WebBrowser item) => new WebBrowserEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Calendar"/> class as observables.
    /// </summary>
    public class CalendarEvents
    {
        private readonly global::System.Windows.Controls.Calendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Calendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CalendarEvents(global::System.Windows.Controls.Calendar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Calendar.DisplayDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.CalendarDateChangedEventArgs> DisplayDateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.CalendarDateChangedEventArgs>, global::System.Windows.Controls.CalendarDateChangedEventArgs>(x => _data.DisplayDateChanged += x, x => _data.DisplayDateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Calendar.DisplayModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.CalendarModeChangedEventArgs> DisplayModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.CalendarModeChangedEventArgs>, global::System.Windows.Controls.CalendarModeChangedEventArgs>(x => _data.DisplayModeChanged += x, x => _data.DisplayModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Calendar.SelectedDatesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectedDatesChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.SelectionChangedEventArgs>, global::System.Windows.Controls.SelectionChangedEventArgs>(x => _data.SelectedDatesChanged += x, x => _data.SelectedDatesChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Calendar.SelectionModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(x => _data.SelectionModeChanged += x, x => _data.SelectionModeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class as observables.
    /// </summary>
    public class CalendarDateRangeEvents
    {
        private readonly global::System.Windows.Controls.CalendarDateRange _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.CalendarDateRange"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CalendarDateRangeEvents(global::System.Windows.Controls.CalendarDateRange data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.CalendarDateRange.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ComboBox"/> class as observables.
    /// </summary>
    public class ComboBoxEvents
    {
        private readonly global::System.Windows.Controls.ComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ComboBoxEvents(global::System.Windows.Controls.ComboBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ComboBox.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ContextMenu"/> class as observables.
    /// </summary>
    public class ContextMenuEvents
    {
        private readonly global::System.Windows.Controls.ContextMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ContextMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContextMenuEvents(global::System.Windows.Controls.ContextMenu data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ContextMenu.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Closed += x, x => _data.Closed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ContextMenu.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Opened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Opened += x, x => _data.Opened -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Control"/> class as observables.
    /// </summary>
    public class ControlEvents
    {
        private readonly global::System.Windows.Controls.Control _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Control"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ControlEvents(global::System.Windows.Controls.Control data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Control.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Control.PreviewMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Input.MouseButtonEventArgs> PreviewMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Input.MouseButtonEventHandler, global::System.Windows.Input.MouseButtonEventArgs>(x => _data.PreviewMouseDoubleClick += x, x => _data.PreviewMouseDoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGrid"/> class as observables.
    /// </summary>
    public class DataGridEvents
    {
        private readonly global::System.Windows.Controls.DataGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridEvents(global::System.Windows.Controls.DataGrid data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.AddingNewItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.AddingNewItemEventArgs> AddingNewItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.AddingNewItemEventArgs>, global::System.Windows.Controls.AddingNewItemEventArgs>(x => _data.AddingNewItem += x, x => _data.AddingNewItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.AutoGeneratedColumns"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoGeneratedColumns => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AutoGeneratedColumns += x, x => _data.AutoGeneratedColumns -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.AutoGeneratingColumn"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs> AutoGeneratingColumn => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs>, global::System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs>(x => _data.AutoGeneratingColumn += x, x => _data.AutoGeneratingColumn -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.BeginningEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridBeginningEditEventArgs> BeginningEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridBeginningEditEventArgs>, global::System.Windows.Controls.DataGridBeginningEditEventArgs>(x => _data.BeginningEdit += x, x => _data.BeginningEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.CellEditEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellEditEndingEventArgs> CellEditEnding => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridCellEditEndingEventArgs>, global::System.Windows.Controls.DataGridCellEditEndingEventArgs>(x => _data.CellEditEnding += x, x => _data.CellEditEnding -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnEventArgs> ColumnDisplayIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnEventArgs>, global::System.Windows.Controls.DataGridColumnEventArgs>(x => _data.ColumnDisplayIndexChanged += x, x => _data.ColumnDisplayIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.ColumnHeaderDragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragCompletedEventArgs> ColumnHeaderDragCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragCompletedEventArgs>, global::System.Windows.Controls.Primitives.DragCompletedEventArgs>(x => _data.ColumnHeaderDragCompleted += x, x => _data.ColumnHeaderDragCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.ColumnHeaderDragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragDeltaEventArgs> ColumnHeaderDragDelta => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragDeltaEventArgs>, global::System.Windows.Controls.Primitives.DragDeltaEventArgs>(x => _data.ColumnHeaderDragDelta += x, x => _data.ColumnHeaderDragDelta -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.ColumnHeaderDragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragStartedEventArgs> ColumnHeaderDragStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.Primitives.DragStartedEventArgs>, global::System.Windows.Controls.Primitives.DragStartedEventArgs>(x => _data.ColumnHeaderDragStarted += x, x => _data.ColumnHeaderDragStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.ColumnReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnEventArgs> ColumnReordered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnEventArgs>, global::System.Windows.Controls.DataGridColumnEventArgs>(x => _data.ColumnReordered += x, x => _data.ColumnReordered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.ColumnReordering"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridColumnReorderingEventArgs> ColumnReordering => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridColumnReorderingEventArgs>, global::System.Windows.Controls.DataGridColumnReorderingEventArgs>(x => _data.ColumnReordering += x, x => _data.ColumnReordering -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.CopyingRowClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowClipboardEventArgs> CopyingRowClipboardContent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridRowClipboardEventArgs>, global::System.Windows.Controls.DataGridRowClipboardEventArgs>(x => _data.CopyingRowClipboardContent += x, x => _data.CopyingRowClipboardContent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.CurrentCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(x => _data.CurrentCellChanged += x, x => _data.CurrentCellChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.InitializingNewItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InitializingNewItemEventArgs> InitializingNewItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InitializingNewItemEventHandler, global::System.Windows.Controls.InitializingNewItemEventArgs>(x => _data.InitializingNewItem += x, x => _data.InitializingNewItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.LoadingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEventArgs> LoadingRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEventArgs>, global::System.Windows.Controls.DataGridRowEventArgs>(x => _data.LoadingRow += x, x => _data.LoadingRow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.LoadingRowDetails"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> LoadingRowDetails => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(x => _data.LoadingRowDetails += x, x => _data.LoadingRowDetails -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.PreparingCellForEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs> PreparingCellForEdit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs>, global::System.Windows.Controls.DataGridPreparingCellForEditEventArgs>(x => _data.PreparingCellForEdit += x, x => _data.PreparingCellForEdit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> RowDetailsVisibilityChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(x => _data.RowDetailsVisibilityChanged += x, x => _data.RowDetailsVisibilityChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.RowEditEnding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEditEndingEventArgs> RowEditEnding => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEditEndingEventArgs>, global::System.Windows.Controls.DataGridRowEditEndingEventArgs>(x => _data.RowEditEnding += x, x => _data.RowEditEnding -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.SelectedCellsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectedCellsChangedEventArgs> SelectedCellsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.SelectedCellsChangedEventHandler, global::System.Windows.Controls.SelectedCellsChangedEventArgs>(x => _data.SelectedCellsChanged += x, x => _data.SelectedCellsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.Sorting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridSortingEventArgs> Sorting => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.DataGridSortingEventHandler, global::System.Windows.Controls.DataGridSortingEventArgs>(x => _data.Sorting += x, x => _data.Sorting -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.UnloadingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowEventArgs> UnloadingRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridRowEventArgs>, global::System.Windows.Controls.DataGridRowEventArgs>(x => _data.UnloadingRow += x, x => _data.UnloadingRow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGrid.UnloadingRowDetails"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridRowDetailsEventArgs> UnloadingRowDetails => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridRowDetailsEventArgs>, global::System.Windows.Controls.DataGridRowDetailsEventArgs>(x => _data.UnloadingRowDetails += x, x => _data.UnloadingRowDetails -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridCell"/> class as observables.
    /// </summary>
    public class DataGridCellEvents
    {
        private readonly global::System.Windows.Controls.DataGridCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridCellEvents(global::System.Windows.Controls.DataGridCell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGridCell.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Selected += x, x => _data.Selected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGridCell.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unselected += x, x => _data.Unselected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class as observables.
    /// </summary>
    public class DataGridColumnEvents
    {
        private readonly global::System.Windows.Controls.DataGridColumn _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridColumn"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridColumnEvents(global::System.Windows.Controls.DataGridColumn data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGridColumn.CopyingCellClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellClipboardEventArgs> CopyingCellClipboardContent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridCellClipboardEventArgs>, global::System.Windows.Controls.DataGridCellClipboardEventArgs>(x => _data.CopyingCellClipboardContent += x, x => _data.CopyingCellClipboardContent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGridColumn.PastingCellClipboardContent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DataGridCellClipboardEventArgs> PastingCellClipboardContent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DataGridCellClipboardEventArgs>, global::System.Windows.Controls.DataGridCellClipboardEventArgs>(x => _data.PastingCellClipboardContent += x, x => _data.PastingCellClipboardContent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DataGridRow"/> class as observables.
    /// </summary>
    public class DataGridRowEvents
    {
        private readonly global::System.Windows.Controls.DataGridRow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DataGridRow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataGridRowEvents(global::System.Windows.Controls.DataGridRow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGridRow.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Selected += x, x => _data.Selected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DataGridRow.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unselected += x, x => _data.Unselected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.DatePicker"/> class as observables.
    /// </summary>
    public class DatePickerEvents
    {
        private readonly global::System.Windows.Controls.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DatePickerEvents(global::System.Windows.Controls.DatePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DatePicker.CalendarClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> CalendarClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.CalendarClosed += x, x => _data.CalendarClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DatePicker.CalendarOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> CalendarOpened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.CalendarOpened += x, x => _data.CalendarOpened -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DatePicker.DateValidationError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs> DateValidationError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs>, global::System.Windows.Controls.DatePickerDateValidationErrorEventArgs>(x => _data.DateValidationError += x, x => _data.DateValidationError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.DatePicker.SelectedDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectedDateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Controls.SelectionChangedEventArgs>, global::System.Windows.Controls.SelectionChangedEventArgs>(x => _data.SelectedDateChanged += x, x => _data.SelectedDateChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Expander"/> class as observables.
    /// </summary>
    public class ExpanderEvents
    {
        private readonly global::System.Windows.Controls.Expander _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Expander"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ExpanderEvents(global::System.Windows.Controls.Expander data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Expander.Collapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Collapsed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Collapsed += x, x => _data.Collapsed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Expander.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Expanded += x, x => _data.Expanded -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Frame"/> class as observables.
    /// </summary>
    public class FrameEvents
    {
        private readonly global::System.Windows.Controls.Frame _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Frame"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FrameEvents(global::System.Windows.Controls.Frame data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.ContentRendered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContentRendered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ContentRendered += x, x => _data.ContentRendered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Frame.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Image"/> class as observables.
    /// </summary>
    public class ImageEvents
    {
        private readonly global::System.Windows.Controls.Image _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Image"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageEvents(global::System.Windows.Controls.Image data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Image.ImageFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExceptionRoutedEventArgs> ImageFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.ExceptionRoutedEventArgs>, global::System.Windows.ExceptionRoutedEventArgs>(x => _data.ImageFailed += x, x => _data.ImageFailed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.InkCanvas"/> class as observables.
    /// </summary>
    public class InkCanvasEvents
    {
        private readonly global::System.Windows.Controls.InkCanvas _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.InkCanvas"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public InkCanvasEvents(global::System.Windows.Controls.InkCanvas data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.ActiveEditingModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> ActiveEditingModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.ActiveEditingModeChanged += x, x => _data.ActiveEditingModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.DrawingAttributesReplacedEventArgs> DefaultDrawingAttributesReplaced => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.DrawingAttributesReplacedEventHandler, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs>(x => _data.DefaultDrawingAttributesReplaced += x, x => _data.DefaultDrawingAttributesReplaced -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.EditingModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> EditingModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.EditingModeChanged += x, x => _data.EditingModeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.EditingModeInvertedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> EditingModeInvertedChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.EditingModeInvertedChanged += x, x => _data.EditingModeInvertedChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.Gesture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasGestureEventArgs> Gesture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InkCanvasGestureEventHandler, global::System.Windows.Controls.InkCanvasGestureEventArgs>(x => _data.Gesture += x, x => _data.Gesture -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.SelectionChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs> SelectionChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InkCanvasSelectionChangingEventHandler, global::System.Windows.Controls.InkCanvasSelectionChangingEventArgs>(x => _data.SelectionChanging += x, x => _data.SelectionChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.SelectionMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionMoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionMoved += x, x => _data.SelectionMoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.SelectionMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs> SelectionMoving => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InkCanvasSelectionEditingEventHandler, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs>(x => _data.SelectionMoving += x, x => _data.SelectionMoving -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.SelectionResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionResized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionResized += x, x => _data.SelectionResized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.SelectionResizing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs> SelectionResizing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InkCanvasSelectionEditingEventHandler, global::System.Windows.Controls.InkCanvasSelectionEditingEventArgs>(x => _data.SelectionResizing += x, x => _data.SelectionResizing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.StrokeCollected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs> StrokeCollected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InkCanvasStrokeCollectedEventHandler, global::System.Windows.Controls.InkCanvasStrokeCollectedEventArgs>(x => _data.StrokeCollected += x, x => _data.StrokeCollected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.StrokeErased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> StrokeErased => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.StrokeErased += x, x => _data.StrokeErased -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.StrokeErasing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs> StrokeErasing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InkCanvasStrokeErasingEventHandler, global::System.Windows.Controls.InkCanvasStrokeErasingEventArgs>(x => _data.StrokeErasing += x, x => _data.StrokeErasing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.InkCanvas.StrokesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs> StrokesReplaced => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.InkCanvasStrokesReplacedEventHandler, global::System.Windows.Controls.InkCanvasStrokesReplacedEventArgs>(x => _data.StrokesReplaced += x, x => _data.StrokesReplaced -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class as observables.
    /// </summary>
    public class ItemContainerGeneratorEvents
    {
        private readonly global::System.Windows.Controls.ItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ItemContainerGeneratorEvents(global::System.Windows.Controls.ItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.ItemsChangedEventArgs> ItemsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.Primitives.ItemsChangedEventHandler, global::System.Windows.Controls.Primitives.ItemsChangedEventArgs>(x => _data.ItemsChanged += x, x => _data.ItemsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ItemContainerGenerator.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StatusChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StatusChanged += x, x => _data.StatusChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class as observables.
    /// </summary>
    public class ListBoxItemEvents
    {
        private readonly global::System.Windows.Controls.ListBoxItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ListBoxItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListBoxItemEvents(global::System.Windows.Controls.ListBoxItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ListBoxItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Selected += x, x => _data.Selected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ListBoxItem.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unselected += x, x => _data.Unselected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.MediaElement"/> class as observables.
    /// </summary>
    public class MediaElementEvents
    {
        private readonly global::System.Windows.Controls.MediaElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.MediaElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaElementEvents(global::System.Windows.Controls.MediaElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MediaElement.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> BufferingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MediaElement.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> BufferingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MediaElement.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> MediaEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.MediaEnded += x, x => _data.MediaEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MediaElement.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.ExceptionRoutedEventArgs> MediaFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.ExceptionRoutedEventArgs>, global::System.Windows.ExceptionRoutedEventArgs>(x => _data.MediaFailed += x, x => _data.MediaFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MediaElement.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> MediaOpened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.MediaOpened += x, x => _data.MediaOpened -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MediaElement.ScriptCommand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.MediaScriptCommandRoutedEventArgs> ScriptCommand => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.MediaScriptCommandRoutedEventArgs>, global::System.Windows.MediaScriptCommandRoutedEventArgs>(x => _data.ScriptCommand += x, x => _data.ScriptCommand -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.MenuItem"/> class as observables.
    /// </summary>
    public class MenuItemEvents
    {
        private readonly global::System.Windows.Controls.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MenuItemEvents(global::System.Windows.Controls.MenuItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MenuItem.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Checked += x, x => _data.Checked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MenuItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MenuItem.SubmenuClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SubmenuClosed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.SubmenuClosed += x, x => _data.SubmenuClosed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MenuItem.SubmenuOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SubmenuOpened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.SubmenuOpened += x, x => _data.SubmenuOpened -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.MenuItem.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unchecked += x, x => _data.Unchecked -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.PasswordBox"/> class as observables.
    /// </summary>
    public class PasswordBoxEvents
    {
        private readonly global::System.Windows.Controls.PasswordBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.PasswordBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PasswordBoxEvents(global::System.Windows.Controls.PasswordBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.PasswordBox.PasswordChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> PasswordChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.PasswordChanged += x, x => _data.PasswordChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class as observables.
    /// </summary>
    public class ScrollViewerEvents
    {
        private readonly global::System.Windows.Controls.ScrollViewer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ScrollViewer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollViewerEvents(global::System.Windows.Controls.ScrollViewer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ScrollViewer.ScrollChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.ScrollChangedEventArgs> ScrollChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.ScrollChangedEventHandler, global::System.Windows.Controls.ScrollChangedEventArgs>(x => _data.ScrollChanged += x, x => _data.ScrollChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.ToolTip"/> class as observables.
    /// </summary>
    public class ToolTipEvents
    {
        private readonly global::System.Windows.Controls.ToolTip _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.ToolTip"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolTipEvents(global::System.Windows.Controls.ToolTip data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ToolTip.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Closed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Closed += x, x => _data.Closed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.ToolTip.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Opened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Opened += x, x => _data.Opened -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.TreeView"/> class as observables.
    /// </summary>
    public class TreeViewEvents
    {
        private readonly global::System.Windows.Controls.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TreeViewEvents(global::System.Windows.Controls.TreeView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.TreeView.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedPropertyChangedEventArgs<object>> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedPropertyChangedEventHandler<object>, global::System.Windows.RoutedPropertyChangedEventArgs<object>>(x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class as observables.
    /// </summary>
    public class TreeViewItemEvents
    {
        private readonly global::System.Windows.Controls.TreeViewItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.TreeViewItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TreeViewItemEvents(global::System.Windows.Controls.TreeViewItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.TreeViewItem.Collapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Collapsed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Collapsed += x, x => _data.Collapsed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.TreeViewItem.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Expanded += x, x => _data.Expanded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.TreeViewItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Selected += x, x => _data.Selected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.TreeViewItem.Unselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unselected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unselected += x, x => _data.Unselected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.WebBrowser"/> class as observables.
    /// </summary>
    public class WebBrowserEvents
    {
        private readonly global::System.Windows.Controls.WebBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.WebBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebBrowserEvents(global::System.Windows.Controls.WebBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.WebBrowser.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.WebBrowser.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.WebBrowser.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Controls.Primitives
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Controls.Primitives"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        public static ButtonBaseEvents Events(this global::System.Windows.Controls.Primitives.ButtonBase item) => new ButtonBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class.
        /// </summary>
        public static DocumentPageViewEvents Events(this global::System.Windows.Controls.Primitives.DocumentPageView item) => new DocumentPageViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class.
        /// </summary>
        public static DocumentViewerBaseEvents Events(this global::System.Windows.Controls.Primitives.DocumentViewerBase item) => new DocumentViewerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class.
        /// </summary>
        public static PopupEvents Events(this global::System.Windows.Controls.Primitives.Popup item) => new PopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        public static RangeBaseEvents Events(this global::System.Windows.Controls.Primitives.RangeBase item) => new RangeBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        public static ScrollBarEvents Events(this global::System.Windows.Controls.Primitives.ScrollBar item) => new ScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class.
        /// </summary>
        public static SelectorEvents Events(this global::System.Windows.Controls.Primitives.Selector item) => new SelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class.
        /// </summary>
        public static TextBoxBaseEvents Events(this global::System.Windows.Controls.Primitives.TextBoxBase item) => new TextBoxBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class.
        /// </summary>
        public static ThumbEvents Events(this global::System.Windows.Controls.Primitives.Thumb item) => new ThumbEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        public static ToggleButtonEvents Events(this global::System.Windows.Controls.Primitives.ToggleButton item) => new ToggleButtonEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class as observables.
    /// </summary>
    public class ButtonBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ButtonBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ButtonBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonBaseEvents(global::System.Windows.Controls.Primitives.ButtonBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.ButtonBase.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class as observables.
    /// </summary>
    public class DocumentPageViewEvents
    {
        private readonly global::System.Windows.Controls.Primitives.DocumentPageView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.DocumentPageView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DocumentPageViewEvents(global::System.Windows.Controls.Primitives.DocumentPageView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.DocumentPageView.PageConnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageConnected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageConnected += x, x => _data.PageConnected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.DocumentPageView.PageDisconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageDisconnected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageDisconnected += x, x => _data.PageDisconnected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class as observables.
    /// </summary>
    public class DocumentViewerBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.DocumentViewerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.DocumentViewerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DocumentViewerBaseEvents(global::System.Windows.Controls.Primitives.DocumentViewerBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.DocumentViewerBase.PageViewsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageViewsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageViewsChanged += x, x => _data.PageViewsChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class as observables.
    /// </summary>
    public class PopupEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PopupEvents(global::System.Windows.Controls.Primitives.Popup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.Popup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Closed += x, x => _data.Closed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.Popup.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Opened += x, x => _data.Opened -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class as observables.
    /// </summary>
    public class RangeBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.RangeBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.RangeBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RangeBaseEvents(global::System.Windows.Controls.Primitives.RangeBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.RangeBase.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedPropertyChangedEventArgs<double>> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedPropertyChangedEventHandler<double>, global::System.Windows.RoutedPropertyChangedEventArgs<double>>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class as observables.
    /// </summary>
    public class ScrollBarEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollBarEvents(global::System.Windows.Controls.Primitives.ScrollBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.Primitives.ScrollEventHandler, global::System.Windows.Controls.Primitives.ScrollEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class as observables.
    /// </summary>
    public class SelectorEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Selector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Selector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SelectorEvents(global::System.Windows.Controls.Primitives.Selector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.Selector.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.SelectionChangedEventHandler, global::System.Windows.Controls.SelectionChangedEventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class as observables.
    /// </summary>
    public class TextBoxBaseEvents
    {
        private readonly global::System.Windows.Controls.Primitives.TextBoxBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.TextBoxBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextBoxBaseEvents(global::System.Windows.Controls.Primitives.TextBoxBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.TextBoxBase.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.TextBoxBase.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.TextChangedEventHandler, global::System.Windows.Controls.TextChangedEventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class as observables.
    /// </summary>
    public class ThumbEvents
    {
        private readonly global::System.Windows.Controls.Primitives.Thumb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.Thumb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ThumbEvents(global::System.Windows.Controls.Primitives.Thumb data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.Thumb.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragCompletedEventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.Primitives.DragCompletedEventHandler, global::System.Windows.Controls.Primitives.DragCompletedEventArgs>(x => _data.DragCompleted += x, x => _data.DragCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.Thumb.DragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragDeltaEventArgs> DragDelta => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.Primitives.DragDeltaEventHandler, global::System.Windows.Controls.Primitives.DragDeltaEventArgs>(x => _data.DragDelta += x, x => _data.DragDelta -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.Thumb.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Controls.Primitives.DragStartedEventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Controls.Primitives.DragStartedEventHandler, global::System.Windows.Controls.Primitives.DragStartedEventArgs>(x => _data.DragStarted += x, x => _data.DragStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class as observables.
    /// </summary>
    public class ToggleButtonEvents
    {
        private readonly global::System.Windows.Controls.Primitives.ToggleButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToggleButtonEvents(global::System.Windows.Controls.Primitives.ToggleButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.ToggleButton.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Checked += x, x => _data.Checked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.ToggleButton.Indeterminate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Indeterminate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Indeterminate += x, x => _data.Indeterminate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Controls.Primitives.ToggleButton.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Unchecked += x, x => _data.Unchecked -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Data"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.CollectionView"/> class.
        /// </summary>
        public static CollectionViewEvents Events(this global::System.Windows.Data.CollectionView item) => new CollectionViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class.
        /// </summary>
        public static CollectionViewSourceEvents Events(this global::System.Windows.Data.CollectionViewSource item) => new CollectionViewSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class.
        /// </summary>
        public static DataSourceProviderEvents Events(this global::System.Windows.Data.DataSourceProvider item) => new DataSourceProviderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.CollectionView"/> class as observables.
    /// </summary>
    public class CollectionViewEvents
    {
        private readonly global::System.Windows.Data.CollectionView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.CollectionView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CollectionViewEvents(global::System.Windows.Data.CollectionView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Data.CollectionView.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Data.CollectionView.CurrentChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CurrentChangingEventArgs> CurrentChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.CurrentChangingEventHandler, global::System.ComponentModel.CurrentChangingEventArgs>(x => _data.CurrentChanging += x, x => _data.CurrentChanging -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class as observables.
    /// </summary>
    public class CollectionViewSourceEvents
    {
        private readonly global::System.Windows.Data.CollectionViewSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.CollectionViewSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CollectionViewSourceEvents(global::System.Windows.Data.CollectionViewSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Data.CollectionViewSource.Filter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Data.FilterEventArgs> Filter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Data.FilterEventHandler, global::System.Windows.Data.FilterEventArgs>(x => _data.Filter += x, x => _data.Filter -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class as observables.
    /// </summary>
    public class DataSourceProviderEvents
    {
        private readonly global::System.Windows.Data.DataSourceProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Data.DataSourceProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DataSourceProviderEvents(global::System.Windows.Data.DataSourceProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Data.DataSourceProvider.DataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DataChanged += x, x => _data.DataChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Documents
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Documents"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentPage"/> class.
        /// </summary>
        public static DocumentPageEvents Events(this global::System.Windows.Documents.DocumentPage item) => new DocumentPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class.
        /// </summary>
        public static DocumentPaginatorEvents Events(this global::System.Windows.Documents.DocumentPaginator item) => new DocumentPaginatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class.
        /// </summary>
        public static DocumentReferenceCollectionEvents Events(this global::System.Windows.Documents.DocumentReferenceCollection item) => new DocumentReferenceCollectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class.
        /// </summary>
        public static DynamicDocumentPaginatorEvents Events(this global::System.Windows.Documents.DynamicDocumentPaginator item) => new DynamicDocumentPaginatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.Hyperlink"/> class.
        /// </summary>
        public static HyperlinkEvents Events(this global::System.Windows.Documents.Hyperlink item) => new HyperlinkEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.PageContent"/> class.
        /// </summary>
        public static PageContentEvents Events(this global::System.Windows.Documents.PageContent item) => new PageContentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.TextRange"/> class.
        /// </summary>
        public static TextRangeEvents Events(this global::System.Windows.Documents.TextRange item) => new TextRangeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentPage"/> class as observables.
    /// </summary>
    public class DocumentPageEvents
    {
        private readonly global::System.Windows.Documents.DocumentPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DocumentPageEvents(global::System.Windows.Documents.DocumentPage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DocumentPage.PageDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageDestroyed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageDestroyed += x, x => _data.PageDestroyed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class as observables.
    /// </summary>
    public class DocumentPaginatorEvents
    {
        private readonly global::System.Windows.Documents.DocumentPaginator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentPaginator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DocumentPaginatorEvents(global::System.Windows.Documents.DocumentPaginator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> ComputePageCountCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(x => _data.ComputePageCountCompleted += x, x => _data.ComputePageCountCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DocumentPaginator.GetPageCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageCompletedEventArgs> GetPageCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.GetPageCompletedEventHandler, global::System.Windows.Documents.GetPageCompletedEventArgs>(x => _data.GetPageCompleted += x, x => _data.GetPageCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DocumentPaginator.PagesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.PagesChangedEventArgs> PagesChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.PagesChangedEventHandler, global::System.Windows.Documents.PagesChangedEventArgs>(x => _data.PagesChanged += x, x => _data.PagesChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class as observables.
    /// </summary>
    public class DocumentReferenceCollectionEvents
    {
        private readonly global::System.Windows.Documents.DocumentReferenceCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DocumentReferenceCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DocumentReferenceCollectionEvents(global::System.Windows.Documents.DocumentReferenceCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DocumentReferenceCollection.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class as observables.
    /// </summary>
    public class DynamicDocumentPaginatorEvents
    {
        private readonly global::System.Windows.Documents.DynamicDocumentPaginator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.DynamicDocumentPaginator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DynamicDocumentPaginatorEvents(global::System.Windows.Documents.DynamicDocumentPaginator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageNumberCompletedEventArgs> GetPageNumberCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.GetPageNumberCompletedEventHandler, global::System.Windows.Documents.GetPageNumberCompletedEventArgs>(x => _data.GetPageNumberCompleted += x, x => _data.GetPageNumberCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaginationCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PaginationCompleted += x, x => _data.PaginationCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.PaginationProgressEventArgs> PaginationProgress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.PaginationProgressEventHandler, global::System.Windows.Documents.PaginationProgressEventArgs>(x => _data.PaginationProgress += x, x => _data.PaginationProgress -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.Hyperlink"/> class as observables.
    /// </summary>
    public class HyperlinkEvents
    {
        private readonly global::System.Windows.Documents.Hyperlink _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.Hyperlink"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HyperlinkEvents(global::System.Windows.Documents.Hyperlink data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.Hyperlink.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.RoutedEventHandler, global::System.Windows.RoutedEventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.Hyperlink.RequestNavigate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.RequestNavigateEventArgs> RequestNavigate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.RequestNavigateEventHandler, global::System.Windows.Navigation.RequestNavigateEventArgs>(x => _data.RequestNavigate += x, x => _data.RequestNavigate -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.PageContent"/> class as observables.
    /// </summary>
    public class PageContentEvents
    {
        private readonly global::System.Windows.Documents.PageContent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.PageContent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PageContentEvents(global::System.Windows.Documents.PageContent data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.PageContent.GetPageRootCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.GetPageRootCompletedEventArgs> GetPageRootCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.GetPageRootCompletedEventHandler, global::System.Windows.Documents.GetPageRootCompletedEventArgs>(x => _data.GetPageRootCompleted += x, x => _data.GetPageRootCompleted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.TextRange"/> class as observables.
    /// </summary>
    public class TextRangeEvents
    {
        private readonly global::System.Windows.Documents.TextRange _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.TextRange"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextRangeEvents(global::System.Windows.Documents.TextRange data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.TextRange.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Changed += x, x => _data.Changed -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Documents.Serialization
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Documents.Serialization"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class.
        /// </summary>
        public static SerializerWriterEvents Events(this global::System.Windows.Documents.Serialization.SerializerWriter item) => new SerializerWriterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class as observables.
    /// </summary>
    public class SerializerWriterEvents
    {
        private readonly global::System.Windows.Documents.Serialization.SerializerWriter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Documents.Serialization.SerializerWriter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SerializerWriterEvents(global::System.Windows.Documents.Serialization.SerializerWriter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.Serialization.SerializerWriter.WritingCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingCancelledEventArgs> WritingCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.Serialization.WritingCancelledEventHandler, global::System.Windows.Documents.Serialization.WritingCancelledEventArgs>(x => _data.WritingCancelled += x, x => _data.WritingCancelled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.Serialization.SerializerWriter.WritingCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingCompletedEventArgs> WritingCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.Serialization.WritingCompletedEventHandler, global::System.Windows.Documents.Serialization.WritingCompletedEventArgs>(x => _data.WritingCompleted += x, x => _data.WritingCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs> WritingPrintTicketRequired => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler, global::System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs>(x => _data.WritingPrintTicketRequired += x, x => _data.WritingPrintTicketRequired -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Documents.Serialization.SerializerWriter.WritingProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs> WritingProgressChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Documents.Serialization.WritingProgressChangedEventHandler, global::System.Windows.Documents.Serialization.WritingProgressChangedEventArgs>(x => _data.WritingProgressChanged += x, x => _data.WritingProgressChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Ink
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Ink"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class.
        /// </summary>
        public static DrawingAttributesEvents Events(this global::System.Windows.Ink.DrawingAttributes item) => new DrawingAttributesEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class.
        /// </summary>
        public static IncrementalLassoHitTesterEvents Events(this global::System.Windows.Ink.IncrementalLassoHitTester item) => new IncrementalLassoHitTesterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class.
        /// </summary>
        public static IncrementalStrokeHitTesterEvents Events(this global::System.Windows.Ink.IncrementalStrokeHitTester item) => new IncrementalStrokeHitTesterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.Stroke"/> class.
        /// </summary>
        public static StrokeEvents Events(this global::System.Windows.Ink.Stroke item) => new StrokeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class.
        /// </summary>
        public static StrokeCollectionEvents Events(this global::System.Windows.Ink.StrokeCollection item) => new StrokeCollectionEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class as observables.
    /// </summary>
    public class DrawingAttributesEvents
    {
        private readonly global::System.Windows.Ink.DrawingAttributes _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.DrawingAttributes"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DrawingAttributesEvents(global::System.Windows.Ink.DrawingAttributes data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.DrawingAttributes.AttributeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> AttributeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(x => _data.AttributeChanged += x, x => _data.AttributeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.DrawingAttributes.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class as observables.
    /// </summary>
    public class IncrementalLassoHitTesterEvents
    {
        private readonly global::System.Windows.Ink.IncrementalLassoHitTester _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.IncrementalLassoHitTester"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IncrementalLassoHitTesterEvents(global::System.Windows.Ink.IncrementalLassoHitTester data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.LassoSelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.LassoSelectionChangedEventHandler, global::System.Windows.Ink.LassoSelectionChangedEventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class as observables.
    /// </summary>
    public class IncrementalStrokeHitTesterEvents
    {
        private readonly global::System.Windows.Ink.IncrementalStrokeHitTester _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.IncrementalStrokeHitTester"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IncrementalStrokeHitTesterEvents(global::System.Windows.Ink.IncrementalStrokeHitTester data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StrokeHitEventArgs> StrokeHit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.StrokeHitEventHandler, global::System.Windows.Ink.StrokeHitEventArgs>(x => _data.StrokeHit += x, x => _data.StrokeHit -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.Stroke"/> class as observables.
    /// </summary>
    public class StrokeEvents
    {
        private readonly global::System.Windows.Ink.Stroke _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.Stroke"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StrokeEvents(global::System.Windows.Ink.Stroke data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.Stroke.DrawingAttributesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> DrawingAttributesChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(x => _data.DrawingAttributesChanged += x, x => _data.DrawingAttributesChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.Stroke.DrawingAttributesReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.DrawingAttributesReplacedEventArgs> DrawingAttributesReplaced => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.DrawingAttributesReplacedEventHandler, global::System.Windows.Ink.DrawingAttributesReplacedEventArgs>(x => _data.DrawingAttributesReplaced += x, x => _data.DrawingAttributesReplaced -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.Stroke.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Invalidated += x, x => _data.Invalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.Stroke.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.Stroke.StylusPointsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StylusPointsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StylusPointsChanged += x, x => _data.StylusPointsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.Stroke.StylusPointsReplaced"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StylusPointsReplacedEventArgs> StylusPointsReplaced => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.StylusPointsReplacedEventHandler, global::System.Windows.Ink.StylusPointsReplacedEventArgs>(x => _data.StylusPointsReplaced += x, x => _data.StylusPointsReplaced -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class as observables.
    /// </summary>
    public class StrokeCollectionEvents
    {
        private readonly global::System.Windows.Ink.StrokeCollection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Ink.StrokeCollection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StrokeCollectionEvents(global::System.Windows.Ink.StrokeCollection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.StrokeCollection.PropertyDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.PropertyDataChangedEventArgs> PropertyDataChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.PropertyDataChangedEventHandler, global::System.Windows.Ink.PropertyDataChangedEventArgs>(x => _data.PropertyDataChanged += x, x => _data.PropertyDataChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Ink.StrokeCollection.StrokesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Ink.StrokeCollectionChangedEventArgs> StrokesChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Ink.StrokeCollectionChangedEventHandler, global::System.Windows.Ink.StrokeCollectionChangedEventArgs>(x => _data.StrokesChanged += x, x => _data.StrokesChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Interop"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.D3DImage"/> class.
        /// </summary>
        public static D3DImageEvents Events(this global::System.Windows.Interop.D3DImage item) => new D3DImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.HwndHost"/> class.
        /// </summary>
        public static HwndHostEvents Events(this global::System.Windows.Interop.HwndHost item) => new HwndHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Interop.HwndSource"/> class.
        /// </summary>
        public static HwndSourceEvents Events(this global::System.Windows.Interop.HwndSource item) => new HwndSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.D3DImage"/> class as observables.
    /// </summary>
    public class D3DImageEvents
    {
        private readonly global::System.Windows.Interop.D3DImage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.D3DImage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public D3DImageEvents(global::System.Windows.Interop.D3DImage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.DependencyPropertyChangedEventArgs> IsFrontBufferAvailableChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.DependencyPropertyChangedEventHandler, global::System.Windows.DependencyPropertyChangedEventArgs>(x => _data.IsFrontBufferAvailableChanged += x, x => _data.IsFrontBufferAvailableChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.HwndHost"/> class as observables.
    /// </summary>
    public class HwndHostEvents
    {
        private readonly global::System.Windows.Interop.HwndHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.HwndHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HwndHostEvents(global::System.Windows.Interop.HwndHost data)
        {
            _data = data;
        }
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Interop.HwndSource"/> class as observables.
    /// </summary>
    public class HwndSourceEvents
    {
        private readonly global::System.Windows.Interop.HwndSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Interop.HwndSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HwndSourceEvents(global::System.Windows.Interop.HwndSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.HwndSource.AutoResized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.AutoResizedEventArgs> AutoResized => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.AutoResizedEventHandler, global::System.Windows.AutoResizedEventArgs>(x => _data.AutoResized += x, x => _data.AutoResized -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.HwndSource.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disposed += x, x => _data.Disposed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.HwndSource.SizeToContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeToContentChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SizeToContentChanged += x, x => _data.SizeToContentChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Markup
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Markup"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Markup.XamlReader"/> class.
        /// </summary>
        public static XamlReaderEvents Events(this global::System.Windows.Markup.XamlReader item) => new XamlReaderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Markup.XamlReader"/> class as observables.
    /// </summary>
    public class XamlReaderEvents
    {
        private readonly global::System.Windows.Markup.XamlReader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Markup.XamlReader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public XamlReaderEvents(global::System.Windows.Markup.XamlReader data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Markup.XamlReader.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.AsyncCompletedEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.AsyncCompletedEventHandler, global::System.ComponentModel.AsyncCompletedEventArgs>(x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Markup.Localizer
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Markup.Localizer"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class.
        /// </summary>
        public static BamlLocalizerEvents Events(this global::System.Windows.Markup.Localizer.BamlLocalizer item) => new BamlLocalizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class as observables.
    /// </summary>
    public class BamlLocalizerEvents
    {
        private readonly global::System.Windows.Markup.Localizer.BamlLocalizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Markup.Localizer.BamlLocalizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BamlLocalizerEvents(global::System.Windows.Markup.Localizer.BamlLocalizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Markup.Localizer.BamlLocalizer.ErrorNotify"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs> ErrorNotify => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventHandler, global::System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs>(x => _data.ErrorNotify += x, x => _data.ErrorNotify -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.MediaPlayer"/> class.
        /// </summary>
        public static MediaPlayerEvents Events(this global::System.Windows.Media.MediaPlayer item) => new MediaPlayerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.MediaPlayer"/> class as observables.
    /// </summary>
    public class MediaPlayerEvents
    {
        private readonly global::System.Windows.Media.MediaPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.MediaPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaPlayerEvents(global::System.Windows.Media.MediaPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.MediaPlayer.BufferingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BufferingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BufferingEnded += x, x => _data.BufferingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.MediaPlayer.BufferingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BufferingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BufferingStarted += x, x => _data.BufferingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.MediaPlayer.MediaEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MediaEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MediaEnded += x, x => _data.MediaEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.MediaPlayer.MediaFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> MediaFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(x => _data.MediaFailed += x, x => _data.MediaFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.MediaPlayer.MediaOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MediaOpened => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MediaOpened += x, x => _data.MediaOpened -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.MediaPlayer.ScriptCommand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.MediaScriptCommandEventArgs> ScriptCommand => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Media.MediaScriptCommandEventArgs>, global::System.Windows.Media.MediaScriptCommandEventArgs>(x => _data.ScriptCommand += x, x => _data.ScriptCommand -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Media.Animation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media.Animation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Animation.Clock"/> class.
        /// </summary>
        public static ClockEvents Events(this global::System.Windows.Media.Animation.Clock item) => new ClockEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class.
        /// </summary>
        public static TimelineEvents Events(this global::System.Windows.Media.Animation.Timeline item) => new TimelineEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Animation.Clock"/> class as observables.
    /// </summary>
    public class ClockEvents
    {
        private readonly global::System.Windows.Media.Animation.Clock _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Animation.Clock"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ClockEvents(global::System.Windows.Media.Animation.Clock data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Clock.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentGlobalSpeedInvalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentGlobalSpeedInvalidated += x, x => _data.CurrentGlobalSpeedInvalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Clock.CurrentStateInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentStateInvalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentStateInvalidated += x, x => _data.CurrentStateInvalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Clock.CurrentTimeInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentTimeInvalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentTimeInvalidated += x, x => _data.CurrentTimeInvalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Clock.RemoveRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemoveRequested => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RemoveRequested += x, x => _data.RemoveRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class as observables.
    /// </summary>
    public class TimelineEvents
    {
        private readonly global::System.Windows.Media.Animation.Timeline _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Animation.Timeline"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TimelineEvents(global::System.Windows.Media.Animation.Timeline data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Timeline.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentGlobalSpeedInvalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentGlobalSpeedInvalidated += x, x => _data.CurrentGlobalSpeedInvalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Timeline.CurrentStateInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentStateInvalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentStateInvalidated += x, x => _data.CurrentStateInvalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Timeline.CurrentTimeInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentTimeInvalidated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CurrentTimeInvalidated += x, x => _data.CurrentTimeInvalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Animation.Timeline.RemoveRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemoveRequested => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RemoveRequested += x, x => _data.RemoveRequested -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Media.Effects
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media.Effects"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Effects.PixelShader"/> class.
        /// </summary>
        public static PixelShaderEvents Events(this global::System.Windows.Media.Effects.PixelShader item) => new PixelShaderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Effects.PixelShader"/> class as observables.
    /// </summary>
    public class PixelShaderEvents
    {
        private readonly global::System.Windows.Media.Effects.PixelShader _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Effects.PixelShader"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PixelShaderEvents(global::System.Windows.Media.Effects.PixelShader data)
        {
            _data = data;
        }
    }
}

namespace System.Windows.Media.Imaging
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Media.Imaging"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class.
        /// </summary>
        public static BitmapDecoderEvents Events(this global::System.Windows.Media.Imaging.BitmapDecoder item) => new BitmapDecoderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class.
        /// </summary>
        public static BitmapSourceEvents Events(this global::System.Windows.Media.Imaging.BitmapSource item) => new BitmapSourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class as observables.
    /// </summary>
    public class BitmapDecoderEvents
    {
        private readonly global::System.Windows.Media.Imaging.BitmapDecoder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Imaging.BitmapDecoder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BitmapDecoderEvents(global::System.Windows.Media.Imaging.BitmapDecoder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Imaging.BitmapDecoder.DownloadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DownloadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DownloadCompleted += x, x => _data.DownloadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Imaging.BitmapDecoder.DownloadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DownloadFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(x => _data.DownloadFailed += x, x => _data.DownloadFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Imaging.BitmapDecoder.DownloadProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Media.Imaging.DownloadProgressEventArgs>, global::System.Windows.Media.Imaging.DownloadProgressEventArgs>(x => _data.DownloadProgress += x, x => _data.DownloadProgress -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class as observables.
    /// </summary>
    public class BitmapSourceEvents
    {
        private readonly global::System.Windows.Media.Imaging.BitmapSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Media.Imaging.BitmapSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BitmapSourceEvents(global::System.Windows.Media.Imaging.BitmapSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Imaging.BitmapSource.DecodeFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DecodeFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(x => _data.DecodeFailed += x, x => _data.DecodeFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Imaging.BitmapSource.DownloadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DownloadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DownloadCompleted += x, x => _data.DownloadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Imaging.BitmapSource.DownloadFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.ExceptionEventArgs> DownloadFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Media.ExceptionEventArgs>, global::System.Windows.Media.ExceptionEventArgs>(x => _data.DownloadFailed += x, x => _data.DownloadFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Imaging.BitmapSource.DownloadProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Media.Imaging.DownloadProgressEventArgs>, global::System.Windows.Media.Imaging.DownloadProgressEventArgs>(x => _data.DownloadProgress += x, x => _data.DownloadProgress -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Navigation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Navigation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Navigation.NavigationService"/> class.
        /// </summary>
        public static NavigationServiceEvents Events(this global::System.Windows.Navigation.NavigationService item) => new NavigationServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class.
        /// </summary>
        public static NavigationWindowEvents Events(this global::System.Windows.Navigation.NavigationWindow item) => new NavigationWindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Navigation.NavigationService"/> class as observables.
    /// </summary>
    public class NavigationServiceEvents
    {
        private readonly global::System.Windows.Navigation.NavigationService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Navigation.NavigationService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NavigationServiceEvents(global::System.Windows.Navigation.NavigationService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationService.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationService.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationService.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationService.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationService.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationService.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationService.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class as observables.
    /// </summary>
    public class NavigationWindowEvents
    {
        private readonly global::System.Windows.Navigation.NavigationWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Navigation.NavigationWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NavigationWindowEvents(global::System.Windows.Navigation.NavigationWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationWindow.FragmentNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.FragmentNavigationEventArgs> FragmentNavigation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.FragmentNavigationEventHandler, global::System.Windows.Navigation.FragmentNavigationEventArgs>(x => _data.FragmentNavigation += x, x => _data.FragmentNavigation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationWindow.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.LoadCompletedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationWindow.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationWindow.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigatingCancelEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigatingCancelEventHandler, global::System.Windows.Navigation.NavigatingCancelEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationWindow.NavigationFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationFailedEventArgs> NavigationFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationFailedEventHandler, global::System.Windows.Navigation.NavigationFailedEventArgs>(x => _data.NavigationFailed += x, x => _data.NavigationFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationWindow.NavigationProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationProgressEventArgs> NavigationProgress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationProgressEventHandler, global::System.Windows.Navigation.NavigationProgressEventArgs>(x => _data.NavigationProgress += x, x => _data.NavigationProgress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Navigation.NavigationWindow.NavigationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Navigation.NavigationEventArgs> NavigationStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Navigation.NavigationStoppedEventHandler, global::System.Windows.Navigation.NavigationEventArgs>(x => _data.NavigationStopped += x, x => _data.NavigationStopped -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Shell
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Shell"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Shell.JumpList"/> class.
        /// </summary>
        public static JumpListEvents Events(this global::System.Windows.Shell.JumpList item) => new JumpListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class.
        /// </summary>
        public static ThumbButtonInfoEvents Events(this global::System.Windows.Shell.ThumbButtonInfo item) => new ThumbButtonInfoEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Shell.JumpList"/> class as observables.
    /// </summary>
    public class JumpListEvents
    {
        private readonly global::System.Windows.Shell.JumpList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Shell.JumpList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public JumpListEvents(global::System.Windows.Shell.JumpList data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Shell.JumpList.JumpItemsRejected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Shell.JumpItemsRejectedEventArgs> JumpItemsRejected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Shell.JumpItemsRejectedEventArgs>, global::System.Windows.Shell.JumpItemsRejectedEventArgs>(x => _data.JumpItemsRejected += x, x => _data.JumpItemsRejected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Shell.JumpList.JumpItemsRemovedByUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Shell.JumpItemsRemovedEventArgs> JumpItemsRemovedByUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Shell.JumpItemsRemovedEventArgs>, global::System.Windows.Shell.JumpItemsRemovedEventArgs>(x => _data.JumpItemsRemovedByUser += x, x => _data.JumpItemsRemovedByUser -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class as observables.
    /// </summary>
    public class ThumbButtonInfoEvents
    {
        private readonly global::System.Windows.Shell.ThumbButtonInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Shell.ThumbButtonInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ThumbButtonInfoEvents(global::System.Windows.Shell.ThumbButtonInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Shell.ThumbButtonInfo.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Threading
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "System.Windows.Threading"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.Dispatcher"/> class.
        /// </summary>
        public static DispatcherEvents Events(this global::System.Windows.Threading.Dispatcher item) => new DispatcherEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class.
        /// </summary>
        public static DispatcherHooksEvents Events(this global::System.Windows.Threading.DispatcherHooks item) => new DispatcherHooksEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class.
        /// </summary>
        public static DispatcherOperationEvents Events(this global::System.Windows.Threading.DispatcherOperation item) => new DispatcherOperationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class.
        /// </summary>
        public static DispatcherTimerEvents Events(this global::System.Windows.Threading.DispatcherTimer item) => new DispatcherTimerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.Dispatcher"/> class as observables.
    /// </summary>
    public class DispatcherEvents
    {
        private readonly global::System.Windows.Threading.Dispatcher _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.Dispatcher"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DispatcherEvents(global::System.Windows.Threading.Dispatcher data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.Dispatcher.ShutdownFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShutdownFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ShutdownFinished += x, x => _data.ShutdownFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.Dispatcher.ShutdownStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShutdownStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ShutdownStarted += x, x => _data.ShutdownStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.Dispatcher.UnhandledException"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs> UnhandledException => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherUnhandledExceptionEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>(x => _data.UnhandledException += x, x => _data.UnhandledException -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.Dispatcher.UnhandledExceptionFilter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> UnhandledExceptionFilter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler, global::System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>(x => _data.UnhandledExceptionFilter += x, x => _data.UnhandledExceptionFilter -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class as observables.
    /// </summary>
    public class DispatcherHooksEvents
    {
        private readonly global::System.Windows.Threading.DispatcherHooks _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherHooks"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DispatcherHooksEvents(global::System.Windows.Threading.DispatcherHooks data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherHooks.DispatcherInactive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DispatcherInactive => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DispatcherInactive += x, x => _data.DispatcherInactive -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherHooks.OperationAborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationAborted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(x => _data.OperationAborted += x, x => _data.OperationAborted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherHooks.OperationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(x => _data.OperationCompleted += x, x => _data.OperationCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherHooks.OperationPosted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationPosted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(x => _data.OperationPosted += x, x => _data.OperationPosted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherHooks.OperationPriorityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationPriorityChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(x => _data.OperationPriorityChanged += x, x => _data.OperationPriorityChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherHooks.OperationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Windows.Threading.DispatcherHookEventArgs> OperationStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.Windows.Threading.DispatcherHookEventHandler, global::System.Windows.Threading.DispatcherHookEventArgs>(x => _data.OperationStarted += x, x => _data.OperationStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class as observables.
    /// </summary>
    public class DispatcherOperationEvents
    {
        private readonly global::System.Windows.Threading.DispatcherOperation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherOperation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DispatcherOperationEvents(global::System.Windows.Threading.DispatcherOperation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherOperation.Aborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Aborted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Aborted += x, x => _data.Aborted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherOperation.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class as observables.
    /// </summary>
    public class DispatcherTimerEvents
    {
        private readonly global::System.Windows.Threading.DispatcherTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::System.Windows.Threading.DispatcherTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DispatcherTimerEvents(global::System.Windows.Threading.DispatcherTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Threading.DispatcherTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Tick += x, x => _data.Tick -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.SystemParameters.StaticPropertyChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> SystemParametersStaticPropertyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(x => global::System.Windows.SystemParameters.StaticPropertyChanged += x, x => global::System.Windows.SystemParameters.StaticPropertyChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Data
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Data"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Data.BindingOperations.CollectionRegistering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Data.CollectionRegisteringEventArgs> BindingOperationsCollectionRegistering => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Data.CollectionRegisteringEventArgs>, global::System.Windows.Data.CollectionRegisteringEventArgs>(x => global::System.Windows.Data.BindingOperations.CollectionRegistering += x, x => global::System.Windows.Data.BindingOperations.CollectionRegistering -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Data.BindingOperations.CollectionViewRegistering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Data.CollectionViewRegisteringEventArgs> BindingOperationsCollectionViewRegistering => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Data.CollectionViewRegisteringEventArgs>, global::System.Windows.Data.CollectionViewRegisteringEventArgs>(x => global::System.Windows.Data.BindingOperations.CollectionViewRegistering += x, x => global::System.Windows.Data.BindingOperations.CollectionViewRegistering -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Diagnostics
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Diagnostics"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Windows.Diagnostics.VisualTreeChangeEventArgs> VisualDiagnosticsVisualTreeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::System.Windows.Diagnostics.VisualTreeChangeEventArgs>, global::System.Windows.Diagnostics.VisualTreeChangeEventArgs>(x => global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged += x, x => global::System.Windows.Diagnostics.VisualDiagnostics.VisualTreeChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Interop
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Interop"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.ComponentDispatcher.EnterThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherEnterThreadModal => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal += x, x => global::System.Windows.Interop.ComponentDispatcher.EnterThreadModal -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.ComponentDispatcher.LeaveThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherLeaveThreadModal => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal += x, x => global::System.Windows.Interop.ComponentDispatcher.LeaveThreadModal -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage"/> event triggers.
        /// </summary>
        public static global::System.IObservable<(global::System.Windows.Interop.MSG&, global::System.Boolean&)> ComponentDispatcherThreadFilterMessage => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Interop.ThreadMessageEventHandler, (global::System.Windows.Interop.MSG&, global::System.Boolean&)>(eventHandler =>
        {
            void Handler(global::System.Windows.Interop.MSG& msg, global::System.Boolean& handled) => eventHandler((msg, handled));
            return Handler;
        }

        , x => global::System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage += x, x => global::System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.ComponentDispatcher.ThreadIdle"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ComponentDispatcherThreadIdle => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Interop.ComponentDispatcher.ThreadIdle += x, x => global::System.Windows.Interop.ComponentDispatcher.ThreadIdle -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage"/> event triggers.
        /// </summary>
        public static global::System.IObservable<(global::System.Windows.Interop.MSG&, global::System.Boolean&)> ComponentDispatcherThreadPreprocessMessage => global::System.Reactive.Linq.Observable.FromEvent<global::System.Windows.Interop.ThreadMessageEventHandler, (global::System.Windows.Interop.MSG&, global::System.Boolean&)>(eventHandler =>
        {
            void Handler(global::System.Windows.Interop.MSG& msg, global::System.Boolean& handled) => eventHandler((msg, handled));
            return Handler;
        }

        , x => global::System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage += x, x => global::System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage -= x);
    }
}

namespace System.Windows.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Media"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.CompositionTarget.Rendering"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> CompositionTargetRendering => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Media.CompositionTarget.Rendering += x, x => global::System.Windows.Media.CompositionTarget.Rendering -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.RenderCapability.TierChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> RenderCapabilityTierChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Media.RenderCapability.TierChanged += x, x => global::System.Windows.Media.RenderCapability.TierChanged -= x).Select(x => x.EventArgs);
    }
}

namespace System.Windows.Media.Effects
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "System.Windows.Media.Effects"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> PixelShaderInvalidPixelShaderEncountered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered += x, x => global::System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered -= x).Select(x => x.EventArgs);
    }
}