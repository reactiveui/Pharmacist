using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Avalonia.Remote.Protocol
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Remote.Protocol"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection"/> class.
        /// </summary>
        public static IAvaloniaRemoteTransportConnectionEvents Events(this global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection item) => new IAvaloniaRemoteTransportConnectionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Remote.Protocol.TransportConnectionWrapper"/> class.
        /// </summary>
        public static TransportConnectionWrapperEvents Events(this global::Avalonia.Remote.Protocol.TransportConnectionWrapper item) => new TransportConnectionWrapperEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection"/> class as observables.
    /// </summary>
    public class IAvaloniaRemoteTransportConnectionEvents
    {
        private readonly global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IAvaloniaRemoteTransportConnectionEvents(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection.OnException"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, global::System.Exception arg2)> OnException => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection, global::System.Exception>, (global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, global::System.Exception arg2)>(eventHandler =>
        {
            void Handler(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, global::System.Exception arg2) => eventHandler((arg1, arg2));
            return Handler;
        }

        , x => _data.OnException += x, x => _data.OnException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection.OnMessage"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, object arg2)> OnMessage => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection, object>, (global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, object arg2)>(eventHandler =>
        {
            void Handler(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, object arg2) => eventHandler((arg1, arg2));
            return Handler;
        }

        , x => _data.OnMessage += x, x => _data.OnMessage -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Remote.Protocol.TransportConnectionWrapper"/> class as observables.
    /// </summary>
    public class TransportConnectionWrapperEvents
    {
        private readonly global::Avalonia.Remote.Protocol.TransportConnectionWrapper _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Remote.Protocol.TransportConnectionWrapper"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TransportConnectionWrapperEvents(global::Avalonia.Remote.Protocol.TransportConnectionWrapper data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Remote.Protocol.TransportConnectionWrapper.OnException"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, global::System.Exception arg2)> OnException => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection, global::System.Exception>, (global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, global::System.Exception arg2)>(eventHandler =>
        {
            void Handler(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, global::System.Exception arg2) => eventHandler((arg1, arg2));
            return Handler;
        }

        , x => _data.OnException += x, x => _data.OnException -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Remote.Protocol.TransportConnectionWrapper.OnMessage"/> event triggers.
        /// </summary>
        public global::System.IObservable<(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, object arg2)> OnMessage => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection, object>, (global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, object arg2)>(eventHandler =>
        {
            void Handler(global::Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection arg1, object arg2) => eventHandler((arg1, arg2));
            return Handler;
        }

        , x => _data.OnMessage += x, x => _data.OnMessage -= x);
    }
}
