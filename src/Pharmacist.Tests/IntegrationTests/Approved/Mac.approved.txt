// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;

using global::Pharmacist.Common;

namespace AppKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AppKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSActionCell"/> class.
        /// </summary>
        public static NSActionCellEvents Events(this global::AppKit.NSActionCell item) => new NSActionCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSAnimation"/> class.
        /// </summary>
        public static NSAnimationEvents Events(this global::AppKit.NSAnimation item) => new NSAnimationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSApplication"/> class.
        /// </summary>
        public static NSApplicationEvents Events(this global::AppKit.NSApplication item) => new NSApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSBrowser"/> class.
        /// </summary>
        public static NSBrowserEvents Events(this global::AppKit.NSBrowser item) => new NSBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSColorPickerTouchBarItem"/> class.
        /// </summary>
        public static NSColorPickerTouchBarItemEvents Events(this global::AppKit.NSColorPickerTouchBarItem item) => new NSColorPickerTouchBarItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSComboBox"/> class.
        /// </summary>
        public static NSComboBoxEvents Events(this global::AppKit.NSComboBox item) => new NSComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSControl"/> class.
        /// </summary>
        public static NSControlEvents Events(this global::AppKit.NSControl item) => new NSControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSDatePicker"/> class.
        /// </summary>
        public static NSDatePickerEvents Events(this global::AppKit.NSDatePicker item) => new NSDatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSDatePickerCell"/> class.
        /// </summary>
        public static NSDatePickerCellEvents Events(this global::AppKit.NSDatePickerCell item) => new NSDatePickerCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSDrawer"/> class.
        /// </summary>
        public static NSDrawerEvents Events(this global::AppKit.NSDrawer item) => new NSDrawerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSImage"/> class.
        /// </summary>
        public static NSImageEvents Events(this global::AppKit.NSImage item) => new NSImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSMatrix"/> class.
        /// </summary>
        public static NSMatrixEvents Events(this global::AppKit.NSMatrix item) => new NSMatrixEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSMenuItem"/> class.
        /// </summary>
        public static NSMenuItemEvents Events(this global::AppKit.NSMenuItem item) => new NSMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSPageController"/> class.
        /// </summary>
        public static NSPageControllerEvents Events(this global::AppKit.NSPageController item) => new NSPageControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSPathCell"/> class.
        /// </summary>
        public static NSPathCellEvents Events(this global::AppKit.NSPathCell item) => new NSPathCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSPathControl"/> class.
        /// </summary>
        public static NSPathControlEvents Events(this global::AppKit.NSPathControl item) => new NSPathControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSRuleEditor"/> class.
        /// </summary>
        public static NSRuleEditorEvents Events(this global::AppKit.NSRuleEditor item) => new NSRuleEditorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSSavePanel"/> class.
        /// </summary>
        public static NSSavePanelEvents Events(this global::AppKit.NSSavePanel item) => new NSSavePanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSSearchField"/> class.
        /// </summary>
        public static NSSearchFieldEvents Events(this global::AppKit.NSSearchField item) => new NSSearchFieldEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSSharingService"/> class.
        /// </summary>
        public static NSSharingServiceEvents Events(this global::AppKit.NSSharingService item) => new NSSharingServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSSharingServicePicker"/> class.
        /// </summary>
        public static NSSharingServicePickerEvents Events(this global::AppKit.NSSharingServicePicker item) => new NSSharingServicePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSSliderTouchBarItem"/> class.
        /// </summary>
        public static NSSliderTouchBarItemEvents Events(this global::AppKit.NSSliderTouchBarItem item) => new NSSliderTouchBarItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSSound"/> class.
        /// </summary>
        public static NSSoundEvents Events(this global::AppKit.NSSound item) => new NSSoundEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSStatusItem"/> class.
        /// </summary>
        public static NSStatusItemEvents Events(this global::AppKit.NSStatusItem item) => new NSStatusItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSTableView"/> class.
        /// </summary>
        public static NSTableViewEvents Events(this global::AppKit.NSTableView item) => new NSTableViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSTabView"/> class.
        /// </summary>
        public static NSTabViewEvents Events(this global::AppKit.NSTabView item) => new NSTabViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSText"/> class.
        /// </summary>
        public static NSTextEvents Events(this global::AppKit.NSText item) => new NSTextEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSTextField"/> class.
        /// </summary>
        public static NSTextFieldEvents Events(this global::AppKit.NSTextField item) => new NSTextFieldEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSTextStorage"/> class.
        /// </summary>
        public static NSTextStorageEvents Events(this global::AppKit.NSTextStorage item) => new NSTextStorageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSTextView"/> class.
        /// </summary>
        public static NSTextViewEvents Events(this global::AppKit.NSTextView item) => new NSTextViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSToolbar"/> class.
        /// </summary>
        public static NSToolbarEvents Events(this global::AppKit.NSToolbar item) => new NSToolbarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSToolbarItem"/> class.
        /// </summary>
        public static NSToolbarItemEvents Events(this global::AppKit.NSToolbarItem item) => new NSToolbarItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AppKit.NSWindow"/> class.
        /// </summary>
        public static NSWindowEvents Events(this global::AppKit.NSWindow item) => new NSWindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSActionCell"/> class as observables.
    /// </summary>
    public class NSActionCellEvents
    {
        private readonly global::AppKit.NSActionCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSActionCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSActionCellEvents(global::AppKit.NSActionCell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSActionCell.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSAnimation"/> class as observables.
    /// </summary>
    public class NSAnimationEvents
    {
        private readonly global::AppKit.NSAnimation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSAnimation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSAnimationEvents(global::AppKit.NSAnimation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSAnimation.AnimationDidEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationDidEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationDidEnd += x, x => _data.AnimationDidEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSAnimation.AnimationDidReachProgressMark"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSAnimationEventArgs> AnimationDidReachProgressMark => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSAnimationEventArgs>, global::AppKit.NSAnimationEventArgs>(x => _data.AnimationDidReachProgressMark += x, x => _data.AnimationDidReachProgressMark -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSAnimation.AnimationDidStop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationDidStop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationDidStop += x, x => _data.AnimationDidStop -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSApplication"/> class as observables.
    /// </summary>
    public class NSApplicationEvents
    {
        private readonly global::AppKit.NSApplication _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSApplication"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSApplicationEvents(global::AppKit.NSApplication data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.DecodedRestorableState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSCoderEventArgs> DecodedRestorableState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSCoderEventArgs>, global::AppKit.NSCoderEventArgs>(x => _data.DecodedRestorableState += x, x => _data.DecodedRestorableState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.DidBecomeActive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBecomeActive => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBecomeActive += x, x => _data.DidBecomeActive -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.DidFinishLaunching"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinishLaunching => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinishLaunching += x, x => _data.DidFinishLaunching -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.DidHide"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidHide => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidHide += x, x => _data.DidHide -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.DidResignActive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidResignActive => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidResignActive += x, x => _data.DidResignActive -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.DidUnhide"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUnhide => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUnhide += x, x => _data.DidUnhide -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.DidUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdate += x, x => _data.DidUpdate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.FailedToContinueUserActivity"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSApplicationFailedEventArgs> FailedToContinueUserActivity => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSApplicationFailedEventArgs>, global::AppKit.NSApplicationFailedEventArgs>(x => _data.FailedToContinueUserActivity += x, x => _data.FailedToContinueUserActivity -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.FailedToRegisterForRemoteNotifications"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> FailedToRegisterForRemoteNotifications => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.FailedToRegisterForRemoteNotifications += x, x => _data.FailedToRegisterForRemoteNotifications -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.OpenFiles"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSApplicationFilesEventArgs> OpenFiles => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSApplicationFilesEventArgs>, global::AppKit.NSApplicationFilesEventArgs>(x => _data.OpenFiles += x, x => _data.OpenFiles -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.OpenUrls"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSApplicationOpenUrlsEventArgs> OpenUrls => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSApplicationOpenUrlsEventArgs>, global::AppKit.NSApplicationOpenUrlsEventArgs>(x => _data.OpenUrls += x, x => _data.OpenUrls -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.OrderFrontStandardAboutPanel"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use the 'OrderFrontStandardAboutPanel2' on NSApplication.", false)]
        public global::System.IObservable<global::System.EventArgs> OrderFrontStandardAboutPanel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OrderFrontStandardAboutPanel += x, x => _data.OrderFrontStandardAboutPanel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.OrderFrontStandardAboutPanelWithOptions"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use the 'OrderFrontStandardAboutPanelWithOptions2' on NSApplication.", false)]
        public global::System.IObservable<global::System.EventArgs> OrderFrontStandardAboutPanelWithOptions => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OrderFrontStandardAboutPanelWithOptions += x, x => _data.OrderFrontStandardAboutPanelWithOptions -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.ReceivedRemoteNotification"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSDictionaryEventArgs> ReceivedRemoteNotification => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSDictionaryEventArgs>, global::AppKit.NSDictionaryEventArgs>(x => _data.ReceivedRemoteNotification += x, x => _data.ReceivedRemoteNotification -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.RegisteredForRemoteNotifications"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSDataEventArgs> RegisteredForRemoteNotifications => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSDataEventArgs>, global::AppKit.NSDataEventArgs>(x => _data.RegisteredForRemoteNotifications += x, x => _data.RegisteredForRemoteNotifications -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.RegisterServicesMenu"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use the 'RegisterServicesMenu2' on NSApplication.", false)]
        public global::System.IObservable<global::AppKit.NSApplicationRegisterEventArgs> RegisterServicesMenu => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSApplicationRegisterEventArgs>, global::AppKit.NSApplicationRegisterEventArgs>(x => _data.RegisterServicesMenu += x, x => _data.RegisterServicesMenu -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.ScreenParametersChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScreenParametersChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScreenParametersChanged += x, x => _data.ScreenParametersChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.UpdatedUserActivity"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSApplicationUpdatedUserActivityEventArgs> UpdatedUserActivity => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSApplicationUpdatedUserActivityEventArgs>, global::AppKit.NSApplicationUpdatedUserActivityEventArgs>(x => _data.UpdatedUserActivity += x, x => _data.UpdatedUserActivity -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.UserDidAcceptCloudKitShare"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSApplicationUserAcceptedCloudKitShareEventArgs> UserDidAcceptCloudKitShare => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSApplicationUserAcceptedCloudKitShareEventArgs>, global::AppKit.NSApplicationUserAcceptedCloudKitShareEventArgs>(x => _data.UserDidAcceptCloudKitShare += x, x => _data.UserDidAcceptCloudKitShare -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillBecomeActive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillBecomeActive => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillBecomeActive += x, x => _data.WillBecomeActive -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillEncodeRestorableState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSCoderEventArgs> WillEncodeRestorableState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSCoderEventArgs>, global::AppKit.NSCoderEventArgs>(x => _data.WillEncodeRestorableState += x, x => _data.WillEncodeRestorableState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillFinishLaunching"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillFinishLaunching => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillFinishLaunching += x, x => _data.WillFinishLaunching -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillHide"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillHide => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillHide += x, x => _data.WillHide -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillResignActive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillResignActive => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillResignActive += x, x => _data.WillResignActive -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillTerminate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillTerminate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillTerminate += x, x => _data.WillTerminate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillUnhide"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillUnhide => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillUnhide += x, x => _data.WillUnhide -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplication.WillUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillUpdate += x, x => _data.WillUpdate -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSBrowser"/> class as observables.
    /// </summary>
    public class NSBrowserEvents
    {
        private readonly global::AppKit.NSBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSBrowserEvents(global::AppKit.NSBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowser.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSColorPickerTouchBarItem"/> class as observables.
    /// </summary>
    public class NSColorPickerTouchBarItemEvents
    {
        private readonly global::AppKit.NSColorPickerTouchBarItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSColorPickerTouchBarItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSColorPickerTouchBarItemEvents(global::AppKit.NSColorPickerTouchBarItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSColorPickerTouchBarItem.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSComboBox"/> class as observables.
    /// </summary>
    public class NSComboBoxEvents
    {
        private readonly global::AppKit.NSComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSComboBoxEvents(global::AppKit.NSComboBox data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBox.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBox.SelectionIsChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionIsChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionIsChanging += x, x => _data.SelectionIsChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBox.WillDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillDismiss += x, x => _data.WillDismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBox.WillPopUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPopUp => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPopUp += x, x => _data.WillPopUp -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSControl"/> class as observables.
    /// </summary>
    public class NSControlEvents
    {
        private readonly global::AppKit.NSControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSControlEvents(global::AppKit.NSControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSControl.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSDatePicker"/> class as observables.
    /// </summary>
    public class NSDatePickerEvents
    {
        private readonly global::AppKit.NSDatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSDatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSDatePickerEvents(global::AppKit.NSDatePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDatePicker.ValidateProposedDateValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSDatePickerValidatorEventArgs> ValidateProposedDateValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSDatePickerValidatorEventArgs>, global::AppKit.NSDatePickerValidatorEventArgs>(x => _data.ValidateProposedDateValue += x, x => _data.ValidateProposedDateValue -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSDatePickerCell"/> class as observables.
    /// </summary>
    public class NSDatePickerCellEvents
    {
        private readonly global::AppKit.NSDatePickerCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSDatePickerCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSDatePickerCellEvents(global::AppKit.NSDatePickerCell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDatePickerCell.ValidateProposedDateValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSDatePickerValidatorEventArgs> ValidateProposedDateValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSDatePickerValidatorEventArgs>, global::AppKit.NSDatePickerValidatorEventArgs>(x => _data.ValidateProposedDateValue += x, x => _data.ValidateProposedDateValue -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSDrawer"/> class as observables.
    /// </summary>
    public class NSDrawerEvents
    {
        private readonly global::AppKit.NSDrawer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSDrawer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSDrawerEvents(global::AppKit.NSDrawer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawer.DrawerDidClose"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DrawerDidClose => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DrawerDidClose += x, x => _data.DrawerDidClose -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawer.DrawerDidOpen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DrawerDidOpen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DrawerDidOpen += x, x => _data.DrawerDidOpen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawer.DrawerWillClose"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DrawerWillClose => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DrawerWillClose += x, x => _data.DrawerWillClose -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawer.DrawerWillOpen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DrawerWillOpen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DrawerWillOpen += x, x => _data.DrawerWillOpen -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSImage"/> class as observables.
    /// </summary>
    public class NSImageEvents
    {
        private readonly global::AppKit.NSImage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSImage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSImageEvents(global::AppKit.NSImage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImage.DidLoadPartOfRepresentation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSImagePartialEventArgs> DidLoadPartOfRepresentation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSImagePartialEventArgs>, global::AppKit.NSImagePartialEventArgs>(x => _data.DidLoadPartOfRepresentation += x, x => _data.DidLoadPartOfRepresentation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImage.DidLoadRepresentation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSImageLoadRepresentationEventArgs> DidLoadRepresentation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSImageLoadRepresentationEventArgs>, global::AppKit.NSImageLoadRepresentationEventArgs>(x => _data.DidLoadRepresentation += x, x => _data.DidLoadRepresentation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImage.DidLoadRepresentationHeader"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSImageLoadEventArgs> DidLoadRepresentationHeader => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSImageLoadEventArgs>, global::AppKit.NSImageLoadEventArgs>(x => _data.DidLoadRepresentationHeader += x, x => _data.DidLoadRepresentationHeader -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImage.WillLoadRepresentation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSImageLoadEventArgs> WillLoadRepresentation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSImageLoadEventArgs>, global::AppKit.NSImageLoadEventArgs>(x => _data.WillLoadRepresentation += x, x => _data.WillLoadRepresentation -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSMatrix"/> class as observables.
    /// </summary>
    public class NSMatrixEvents
    {
        private readonly global::AppKit.NSMatrix _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSMatrix"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSMatrixEvents(global::AppKit.NSMatrix data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMatrix.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSMenuItem"/> class as observables.
    /// </summary>
    public class NSMenuItemEvents
    {
        private readonly global::AppKit.NSMenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSMenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSMenuItemEvents(global::AppKit.NSMenuItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMenuItem.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSPageController"/> class as observables.
    /// </summary>
    public class NSPageControllerEvents
    {
        private readonly global::AppKit.NSPageController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSPageController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSPageControllerEvents(global::AppKit.NSPageController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageController.DidEndLiveTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndLiveTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEndLiveTransition += x, x => _data.DidEndLiveTransition -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageController.DidTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSPageControllerTransitionEventArgs> DidTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSPageControllerTransitionEventArgs>, global::AppKit.NSPageControllerTransitionEventArgs>(x => _data.DidTransition += x, x => _data.DidTransition -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageController.PrepareViewController"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSPageControllerPrepareViewControllerEventArgs> PrepareViewController => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSPageControllerPrepareViewControllerEventArgs>, global::AppKit.NSPageControllerPrepareViewControllerEventArgs>(x => _data.PrepareViewController += x, x => _data.PrepareViewController -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageController.WillStartLiveTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLiveTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLiveTransition += x, x => _data.WillStartLiveTransition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSPathCell"/> class as observables.
    /// </summary>
    public class NSPathCellEvents
    {
        private readonly global::AppKit.NSPathCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSPathCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSPathCellEvents(global::AppKit.NSPathCell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathCell.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathCell.WillDisplayOpenPanel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSPathCellDisplayPanelEventArgs> WillDisplayOpenPanel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSPathCellDisplayPanelEventArgs>, global::AppKit.NSPathCellDisplayPanelEventArgs>(x => _data.WillDisplayOpenPanel += x, x => _data.WillDisplayOpenPanel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathCell.WillPopupMenu"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSPathCellMenuEventArgs> WillPopupMenu => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSPathCellMenuEventArgs>, global::AppKit.NSPathCellMenuEventArgs>(x => _data.WillPopupMenu += x, x => _data.WillPopupMenu -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSPathControl"/> class as observables.
    /// </summary>
    public class NSPathControlEvents
    {
        private readonly global::AppKit.NSPathControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSPathControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSPathControlEvents(global::AppKit.NSPathControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathControl.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSRuleEditor"/> class as observables.
    /// </summary>
    public class NSRuleEditorEvents
    {
        private readonly global::AppKit.NSRuleEditor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSRuleEditor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSRuleEditorEvents(global::AppKit.NSRuleEditor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditor.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Changed += x, x => _data.Changed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditor.EditingBegan"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingBegan => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingBegan += x, x => _data.EditingBegan -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditor.EditingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingEnded += x, x => _data.EditingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditor.RowsDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowsDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RowsDidChange += x, x => _data.RowsDidChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSSavePanel"/> class as observables.
    /// </summary>
    public class NSSavePanelEvents
    {
        private readonly global::AppKit.NSSavePanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSSavePanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSSavePanelEvents(global::AppKit.NSSavePanel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSavePanel.DidChangeToDirectory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSOpenSavePanelUrlEventArgs> DidChangeToDirectory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSOpenSavePanelUrlEventArgs>, global::AppKit.NSOpenSavePanelUrlEventArgs>(x => _data.DidChangeToDirectory += x, x => _data.DidChangeToDirectory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSavePanel.DirectoryDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSOpenSaveFilenameEventArgs> DirectoryDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSOpenSaveFilenameEventArgs>, global::AppKit.NSOpenSaveFilenameEventArgs>(x => _data.DirectoryDidChange += x, x => _data.DirectoryDidChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSavePanel.SelectionDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionDidChange += x, x => _data.SelectionDidChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSavePanel.WillExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSOpenSaveExpandingEventArgs> WillExpand => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSOpenSaveExpandingEventArgs>, global::AppKit.NSOpenSaveExpandingEventArgs>(x => _data.WillExpand += x, x => _data.WillExpand -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSSearchField"/> class as observables.
    /// </summary>
    public class NSSearchFieldEvents
    {
        private readonly global::AppKit.NSSearchField _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSSearchField"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSSearchFieldEvents(global::AppKit.NSSearchField data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchField.SearchingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchingEnded += x, x => _data.SearchingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchField.SearchingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchingStarted += x, x => _data.SearchingStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSSharingService"/> class as observables.
    /// </summary>
    public class NSSharingServiceEvents
    {
        private readonly global::AppKit.NSSharingService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSSharingService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSSharingServiceEvents(global::AppKit.NSSharingService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingService.DidFailToShareItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSharingServiceDidFailToShareItemsEventArgs> DidFailToShareItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSSharingServiceDidFailToShareItemsEventArgs>, global::AppKit.NSSharingServiceDidFailToShareItemsEventArgs>(x => _data.DidFailToShareItems += x, x => _data.DidFailToShareItems -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingService.DidShareItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSharingServiceItemsEventArgs> DidShareItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSSharingServiceItemsEventArgs>, global::AppKit.NSSharingServiceItemsEventArgs>(x => _data.DidShareItems += x, x => _data.DidShareItems -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingService.WillShareItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSharingServiceItemsEventArgs> WillShareItems => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSSharingServiceItemsEventArgs>, global::AppKit.NSSharingServiceItemsEventArgs>(x => _data.WillShareItems += x, x => _data.WillShareItems -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSSharingServicePicker"/> class as observables.
    /// </summary>
    public class NSSharingServicePickerEvents
    {
        private readonly global::AppKit.NSSharingServicePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSSharingServicePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSSharingServicePickerEvents(global::AppKit.NSSharingServicePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingServicePicker.DidChooseSharingService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSharingServicePickerDidChooseSharingServiceEventArgs> DidChooseSharingService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSSharingServicePickerDidChooseSharingServiceEventArgs>, global::AppKit.NSSharingServicePickerDidChooseSharingServiceEventArgs>(x => _data.DidChooseSharingService += x, x => _data.DidChooseSharingService -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSSliderTouchBarItem"/> class as observables.
    /// </summary>
    public class NSSliderTouchBarItemEvents
    {
        private readonly global::AppKit.NSSliderTouchBarItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSSliderTouchBarItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSSliderTouchBarItemEvents(global::AppKit.NSSliderTouchBarItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSliderTouchBarItem.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSSound"/> class as observables.
    /// </summary>
    public class NSSoundEvents
    {
        private readonly global::AppKit.NSSound _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSSound"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSSoundEvents(global::AppKit.NSSound data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSound.DidFinishPlaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSoundFinishedEventArgs> DidFinishPlaying => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSSoundFinishedEventArgs>, global::AppKit.NSSoundFinishedEventArgs>(x => _data.DidFinishPlaying += x, x => _data.DidFinishPlaying -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSStatusItem"/> class as observables.
    /// </summary>
    public class NSStatusItemEvents
    {
        private readonly global::AppKit.NSStatusItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSStatusItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSStatusItemEvents(global::AppKit.NSStatusItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSStatusItem.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSTableView"/> class as observables.
    /// </summary>
    public class NSTableViewEvents
    {
        private readonly global::AppKit.NSTableView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSTableView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTableViewEvents(global::AppKit.NSTableView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.ColumnDidMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnDidMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ColumnDidMove += x, x => _data.ColumnDidMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.ColumnDidResize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnDidResize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ColumnDidResize += x, x => _data.ColumnDidResize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.DidAddRowView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTableViewRowEventArgs> DidAddRowView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTableViewRowEventArgs>, global::AppKit.NSTableViewRowEventArgs>(x => _data.DidAddRowView += x, x => _data.DidAddRowView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.DidClickTableColumn"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTableViewTableEventArgs> DidClickTableColumn => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTableViewTableEventArgs>, global::AppKit.NSTableViewTableEventArgs>(x => _data.DidClickTableColumn += x, x => _data.DidClickTableColumn -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.DidDragTableColumn"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTableViewTableEventArgs> DidDragTableColumn => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTableViewTableEventArgs>, global::AppKit.NSTableViewTableEventArgs>(x => _data.DidDragTableColumn += x, x => _data.DidDragTableColumn -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.DidRemoveRowView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTableViewRowEventArgs> DidRemoveRowView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTableViewRowEventArgs>, global::AppKit.NSTableViewRowEventArgs>(x => _data.DidRemoveRowView += x, x => _data.DidRemoveRowView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DoubleClick += x, x => _data.DoubleClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.MouseDownInHeaderOfTableColumn"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTableViewTableEventArgs> MouseDownInHeaderOfTableColumn => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTableViewTableEventArgs>, global::AppKit.NSTableViewTableEventArgs>(x => _data.MouseDownInHeaderOfTableColumn += x, x => _data.MouseDownInHeaderOfTableColumn -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.SelectionDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionDidChange += x, x => _data.SelectionDidChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.SelectionIsChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionIsChanging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionIsChanging += x, x => _data.SelectionIsChanging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableView.WillDisplayCell"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTableViewCellEventArgs> WillDisplayCell => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTableViewCellEventArgs>, global::AppKit.NSTableViewCellEventArgs>(x => _data.WillDisplayCell += x, x => _data.WillDisplayCell -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSTabView"/> class as observables.
    /// </summary>
    public class NSTabViewEvents
    {
        private readonly global::AppKit.NSTabView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSTabView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTabViewEvents(global::AppKit.NSTabView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTabView.DidSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTabViewItemEventArgs> DidSelect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTabViewItemEventArgs>, global::AppKit.NSTabViewItemEventArgs>(x => _data.DidSelect += x, x => _data.DidSelect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTabView.NumberOfItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> NumberOfItemsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.NumberOfItemsChanged += x, x => _data.NumberOfItemsChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTabView.WillSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTabViewItemEventArgs> WillSelect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTabViewItemEventArgs>, global::AppKit.NSTabViewItemEventArgs>(x => _data.WillSelect += x, x => _data.WillSelect -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSText"/> class as observables.
    /// </summary>
    public class NSTextEvents
    {
        private readonly global::AppKit.NSText _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSText"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTextEvents(global::AppKit.NSText data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSText.TextDidBeginEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextDidBeginEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextDidBeginEditing += x, x => _data.TextDidBeginEditing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSText.TextDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextDidChange += x, x => _data.TextDidChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSText.TextDidEndEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextDidEndEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextDidEndEditing += x, x => _data.TextDidEndEditing -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSTextField"/> class as observables.
    /// </summary>
    public class NSTextFieldEvents
    {
        private readonly global::AppKit.NSTextField _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSTextField"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTextFieldEvents(global::AppKit.NSTextField data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextField.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Changed += x, x => _data.Changed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextField.DidFailToValidatePartialString"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSControlTextErrorEventArgs> DidFailToValidatePartialString => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSControlTextErrorEventArgs>, global::AppKit.NSControlTextErrorEventArgs>(x => _data.DidFailToValidatePartialString += x, x => _data.DidFailToValidatePartialString -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextField.EditingBegan"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingBegan => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingBegan += x, x => _data.EditingBegan -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextField.EditingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingEnded += x, x => _data.EditingEnded -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSTextStorage"/> class as observables.
    /// </summary>
    public class NSTextStorageEvents
    {
        private readonly global::AppKit.NSTextStorage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSTextStorage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTextStorageEvents(global::AppKit.NSTextStorage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorage.DidProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTextStorageEventArgs> DidProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTextStorageEventArgs>, global::AppKit.NSTextStorageEventArgs>(x => _data.DidProcessEditing += x, x => _data.DidProcessEditing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorage.TextStorageDidProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextStorageDidProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextStorageDidProcessEditing += x, x => _data.TextStorageDidProcessEditing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorage.TextStorageWillProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextStorageWillProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TextStorageWillProcessEditing += x, x => _data.TextStorageWillProcessEditing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorage.WillProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTextStorageEventArgs> WillProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTextStorageEventArgs>, global::AppKit.NSTextStorageEventArgs>(x => _data.WillProcessEditing += x, x => _data.WillProcessEditing -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSTextView"/> class as observables.
    /// </summary>
    public class NSTextViewEvents
    {
        private readonly global::AppKit.NSTextView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSTextView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTextViewEvents(global::AppKit.NSTextView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextView.CellClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTextViewClickedEventArgs> CellClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTextViewClickedEventArgs>, global::AppKit.NSTextViewClickedEventArgs>(x => _data.CellClicked += x, x => _data.CellClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextView.CellDoubleClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTextViewDoubleClickEventArgs> CellDoubleClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTextViewDoubleClickEventArgs>, global::AppKit.NSTextViewDoubleClickEventArgs>(x => _data.CellDoubleClicked += x, x => _data.CellDoubleClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextView.DidChangeSelection"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeSelection => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeSelection += x, x => _data.DidChangeSelection -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextView.DidChangeTypingAttributes"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeTypingAttributes => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeTypingAttributes += x, x => _data.DidChangeTypingAttributes -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextView.DraggedCell"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTextViewDraggedCellEventArgs> DraggedCell => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSTextViewDraggedCellEventArgs>, global::AppKit.NSTextViewDraggedCellEventArgs>(x => _data.DraggedCell += x, x => _data.DraggedCell -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSToolbar"/> class as observables.
    /// </summary>
    public class NSToolbarEvents
    {
        private readonly global::AppKit.NSToolbar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSToolbar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSToolbarEvents(global::AppKit.NSToolbar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSToolbar.DidRemoveItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidRemoveItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidRemoveItem += x, x => _data.DidRemoveItem -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSToolbar.WillAddItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillAddItem => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillAddItem += x, x => _data.WillAddItem -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSToolbarItem"/> class as observables.
    /// </summary>
    public class NSToolbarItemEvents
    {
        private readonly global::AppKit.NSToolbarItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSToolbarItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSToolbarItemEvents(global::AppKit.NSToolbarItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSToolbarItem.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AppKit.NSWindow"/> class as observables.
    /// </summary>
    public class NSWindowEvents
    {
        private readonly global::AppKit.NSWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AppKit.NSWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSWindowEvents(global::AppKit.NSWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidBecomeKey"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBecomeKey => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBecomeKey += x, x => _data.DidBecomeKey -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidBecomeMain"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBecomeMain => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBecomeMain += x, x => _data.DidBecomeMain -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidChangeBackingProperties"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeBackingProperties => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeBackingProperties += x, x => _data.DidChangeBackingProperties -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidChangeScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeScreen += x, x => _data.DidChangeScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidChangeScreenProfile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeScreenProfile => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeScreenProfile += x, x => _data.DidChangeScreenProfile -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidDecodeRestorableState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindowCoderEventArgs> DidDecodeRestorableState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSWindowCoderEventArgs>, global::AppKit.NSWindowCoderEventArgs>(x => _data.DidDecodeRestorableState += x, x => _data.DidDecodeRestorableState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidDeminiaturize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDeminiaturize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDeminiaturize += x, x => _data.DidDeminiaturize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidEndLiveResize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndLiveResize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEndLiveResize += x, x => _data.DidEndLiveResize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidEndSheet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndSheet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEndSheet += x, x => _data.DidEndSheet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidEnterFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEnterFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEnterFullScreen += x, x => _data.DidEnterFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidEnterVersionBrowser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEnterVersionBrowser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEnterVersionBrowser += x, x => _data.DidEnterVersionBrowser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidExitFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidExitFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidExitFullScreen += x, x => _data.DidExitFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidExitVersionBrowser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidExitVersionBrowser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidExitVersionBrowser += x, x => _data.DidExitVersionBrowser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidExpose"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidExpose => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidExpose += x, x => _data.DidExpose -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidFailToEnterFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFailToEnterFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFailToEnterFullScreen += x, x => _data.DidFailToEnterFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidFailToExitFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFailToExitFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFailToExitFullScreen += x, x => _data.DidFailToExitFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidMiniaturize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidMiniaturize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidMiniaturize += x, x => _data.DidMiniaturize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidMove += x, x => _data.DidMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidResignKey"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidResignKey => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidResignKey += x, x => _data.DidResignKey -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidResignMain"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidResignMain => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidResignMain += x, x => _data.DidResignMain -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidResize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidResize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidResize += x, x => _data.DidResize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.DidUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdate += x, x => _data.DidUpdate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.StartCustomAnimationToEnterFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindowDurationEventArgs> StartCustomAnimationToEnterFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSWindowDurationEventArgs>, global::AppKit.NSWindowDurationEventArgs>(x => _data.StartCustomAnimationToEnterFullScreen += x, x => _data.StartCustomAnimationToEnterFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.StartCustomAnimationToExitFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindowDurationEventArgs> StartCustomAnimationToExitFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSWindowDurationEventArgs>, global::AppKit.NSWindowDurationEventArgs>(x => _data.StartCustomAnimationToExitFullScreen += x, x => _data.StartCustomAnimationToExitFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillBeginSheet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillBeginSheet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillBeginSheet += x, x => _data.WillBeginSheet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillClose"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillClose => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillClose += x, x => _data.WillClose -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillEncodeRestorableState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindowCoderEventArgs> WillEncodeRestorableState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AppKit.NSWindowCoderEventArgs>, global::AppKit.NSWindowCoderEventArgs>(x => _data.WillEncodeRestorableState += x, x => _data.WillEncodeRestorableState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillEnterFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillEnterFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillEnterFullScreen += x, x => _data.WillEnterFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillEnterVersionBrowser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillEnterVersionBrowser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillEnterVersionBrowser += x, x => _data.WillEnterVersionBrowser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillExitFullScreen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillExitFullScreen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillExitFullScreen += x, x => _data.WillExitFullScreen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillExitVersionBrowser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillExitVersionBrowser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillExitVersionBrowser += x, x => _data.WillExitVersionBrowser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillMiniaturize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillMiniaturize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillMiniaturize += x, x => _data.WillMiniaturize -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillMove => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillMove += x, x => _data.WillMove -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindow.WillStartLiveResize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLiveResize => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLiveResize += x, x => _data.WillStartLiveResize -= x).Select(x => x.EventArgs);
    }
}

namespace AudioToolbox
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AudioToolbox"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.AudioConverter"/> class.
        /// </summary>
        public static AudioConverterEvents Events(this global::AudioToolbox.AudioConverter item) => new AudioConverterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.InputAudioQueue"/> class.
        /// </summary>
        public static InputAudioQueueEvents Events(this global::AudioToolbox.InputAudioQueue item) => new InputAudioQueueEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class.
        /// </summary>
        public static OutputAudioQueueEvents Events(this global::AudioToolbox.OutputAudioQueue item) => new OutputAudioQueueEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.AudioConverter"/> class as observables.
    /// </summary>
    public class AudioConverterEvents
    {
        private readonly global::AudioToolbox.AudioConverter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.AudioConverter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioConverterEvents(global::AudioToolbox.AudioConverter data)
        {
            _data = data;
        }
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.InputAudioQueue"/> class as observables.
    /// </summary>
    public class InputAudioQueueEvents
    {
        private readonly global::AudioToolbox.InputAudioQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.InputAudioQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public InputAudioQueueEvents(global::AudioToolbox.InputAudioQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.InputAudioQueue.InputCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AudioToolbox.InputCompletedEventArgs> InputCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AudioToolbox.InputCompletedEventArgs>, global::AudioToolbox.InputCompletedEventArgs>(x => _data.InputCompleted += x, x => _data.InputCompleted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class as observables.
    /// </summary>
    public class OutputAudioQueueEvents
    {
        private readonly global::AudioToolbox.OutputAudioQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public OutputAudioQueueEvents(global::AudioToolbox.OutputAudioQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.OutputAudioQueue.BufferCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AudioToolbox.BufferCompletedEventArgs> BufferCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AudioToolbox.BufferCompletedEventArgs>, global::AudioToolbox.BufferCompletedEventArgs>(x => _data.BufferCompleted += x, x => _data.BufferCompleted -= x).Select(x => x.EventArgs);
    }
}

namespace AVFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AVFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVAudioPlayer"/> class.
        /// </summary>
        public static AVAudioPlayerEvents Events(this global::AVFoundation.AVAudioPlayer item) => new AVAudioPlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVAudioRecorder"/> class.
        /// </summary>
        public static AVAudioRecorderEvents Events(this global::AVFoundation.AVAudioRecorder item) => new AVAudioRecorderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVAudioPlayer"/> class as observables.
    /// </summary>
    public class AVAudioPlayerEvents
    {
        private readonly global::AVFoundation.AVAudioPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVAudioPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVAudioPlayerEvents(global::AVFoundation.AVAudioPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.BeginInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginInterruption += x, x => _data.BeginInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.DecoderError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVErrorEventArgs> DecoderError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVErrorEventArgs>, global::AVFoundation.AVErrorEventArgs>(x => _data.DecoderError += x, x => _data.DecoderError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.EndInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndInterruption += x, x => _data.EndInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.FinishedPlaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVStatusEventArgs> FinishedPlaying => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVStatusEventArgs>, global::AVFoundation.AVStatusEventArgs>(x => _data.FinishedPlaying += x, x => _data.FinishedPlaying -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVAudioRecorder"/> class as observables.
    /// </summary>
    public class AVAudioRecorderEvents
    {
        private readonly global::AVFoundation.AVAudioRecorder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVAudioRecorder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVAudioRecorderEvents(global::AVFoundation.AVAudioRecorder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.BeginInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginInterruption += x, x => _data.BeginInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.EncoderError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVErrorEventArgs> EncoderError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVErrorEventArgs>, global::AVFoundation.AVErrorEventArgs>(x => _data.EncoderError += x, x => _data.EncoderError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.EndInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndInterruption += x, x => _data.EndInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorder.FinishedRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVStatusEventArgs> FinishedRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVStatusEventArgs>, global::AVFoundation.AVStatusEventArgs>(x => _data.FinishedRecording += x, x => _data.FinishedRecording -= x).Select(x => x.EventArgs);
    }
}

namespace CoreAnimation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreAnimation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreAnimation.CAAnimation"/> class.
        /// </summary>
        public static CAAnimationEvents Events(this global::CoreAnimation.CAAnimation item) => new CAAnimationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreAnimation.CAAnimation"/> class as observables.
    /// </summary>
    public class CAAnimationEvents
    {
        private readonly global::CoreAnimation.CAAnimation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreAnimation.CAAnimation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CAAnimationEvents(global::CoreAnimation.CAAnimation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimation.AnimationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationStarted += x, x => _data.AnimationStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimation.AnimationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CAAnimationStateEventArgs> AnimationStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreAnimation.CAAnimationStateEventArgs>, global::CoreAnimation.CAAnimationStateEventArgs>(x => _data.AnimationStopped += x, x => _data.AnimationStopped -= x).Select(x => x.EventArgs);
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreBluetooth"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        public static CBCentralManagerEvents Events(this global::CoreBluetooth.CBCentralManager item) => new CBCentralManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        public static CBPeripheralEvents Events(this global::CoreBluetooth.CBPeripheral item) => new CBPeripheralEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        public static CBPeripheralManagerEvents Events(this global::CoreBluetooth.CBPeripheralManager item) => new CBPeripheralManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class as observables.
    /// </summary>
    public class CBCentralManagerEvents
    {
        private readonly global::CoreBluetooth.CBCentralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBCentralManagerEvents(global::CoreBluetooth.CBCentralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.ConnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralEventArgs> ConnectedPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralEventArgs>, global::CoreBluetooth.CBPeripheralEventArgs>(x => _data.ConnectedPeripheral += x, x => _data.ConnectedPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.DisconnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> DisconnectedPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(x => _data.DisconnectedPeripheral += x, x => _data.DisconnectedPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.DiscoveredPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs> DiscoveredPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>, global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>(x => _data.DiscoveredPeripheral += x, x => _data.DiscoveredPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.FailedToConnectPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> FailedToConnectPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(x => _data.FailedToConnectPeripheral += x, x => _data.FailedToConnectPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.RetrievedConnectedPeripherals"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralsEventArgs> RetrievedConnectedPeripherals => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralsEventArgs>, global::CoreBluetooth.CBPeripheralsEventArgs>(x => _data.RetrievedConnectedPeripherals += x, x => _data.RetrievedConnectedPeripherals -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.RetrievedPeripherals"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralsEventArgs> RetrievedPeripherals => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralsEventArgs>, global::CoreBluetooth.CBPeripheralsEventArgs>(x => _data.RetrievedPeripherals += x, x => _data.RetrievedPeripherals -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.UpdatedState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UpdatedState += x, x => _data.UpdatedState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class as observables.
    /// </summary>
    public class CBPeripheralEvents
    {
        private readonly global::CoreBluetooth.CBPeripheral _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBPeripheralEvents(global::CoreBluetooth.CBPeripheral data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>(x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredCharacteristic"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredCharacteristic => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(x => _data.DiscoveredCharacteristic += x, x => _data.DiscoveredCharacteristic -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredDescriptor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> DiscoveredDescriptor => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.DiscoveredDescriptor += x, x => _data.DiscoveredDescriptor -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredIncludedService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredIncludedService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(x => _data.DiscoveredIncludedService += x, x => _data.DiscoveredIncludedService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DiscoveredService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DiscoveredService += x, x => _data.DiscoveredService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.InvalidatedService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> InvalidatedService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.InvalidatedService += x, x => _data.InvalidatedService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.IsReadyToSendWriteWithoutResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsReadyToSendWriteWithoutResponse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.IsReadyToSendWriteWithoutResponse += x, x => _data.IsReadyToSendWriteWithoutResponse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.ModifiedServices"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralServicesEventArgs> ModifiedServices => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralServicesEventArgs>, global::CoreBluetooth.CBPeripheralServicesEventArgs>(x => _data.ModifiedServices += x, x => _data.ModifiedServices -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.RssiRead"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBRssiEventArgs> RssiRead => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBRssiEventArgs>, global::CoreBluetooth.CBRssiEventArgs>(x => _data.RssiRead += x, x => _data.RssiRead -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.RssiUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> RssiUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.RssiUpdated += x, x => _data.RssiUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedCharacterteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedCharacterteristicValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.UpdatedCharacterteristicValue += x, x => _data.UpdatedCharacterteristicValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedName"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedName => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UpdatedName += x, x => _data.UpdatedName -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedNotificationState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedNotificationState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.UpdatedNotificationState += x, x => _data.UpdatedNotificationState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> UpdatedValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(x => _data.UpdatedValue += x, x => _data.UpdatedValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.WroteCharacteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> WroteCharacteristicValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.WroteCharacteristicValue += x, x => _data.WroteCharacteristicValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.WroteDescriptorValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> WroteDescriptorValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(x => _data.WroteDescriptorValue += x, x => _data.WroteDescriptorValue -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class as observables.
    /// </summary>
    public class CBPeripheralManagerEvents
    {
        private readonly global::CoreBluetooth.CBPeripheralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBPeripheralManagerEvents(global::CoreBluetooth.CBPeripheralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.AdvertisingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> AdvertisingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.AdvertisingStarted += x, x => _data.AdvertisingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.CharacteristicSubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicSubscribed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(x => _data.CharacteristicSubscribed += x, x => _data.CharacteristicSubscribed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.CharacteristicUnsubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicUnsubscribed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(x => _data.CharacteristicUnsubscribed += x, x => _data.CharacteristicUnsubscribed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>(x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidPublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidPublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(x => _data.DidPublishL2CapChannel += x, x => _data.DidPublishL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidUnpublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidUnpublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(x => _data.DidUnpublishL2CapChannel += x, x => _data.DidUnpublishL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ReadRequestReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestEventArgs> ReadRequestReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBATTRequestEventArgs>, global::CoreBluetooth.CBATTRequestEventArgs>(x => _data.ReadRequestReceived += x, x => _data.ReadRequestReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ReadyToUpdateSubscribers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadyToUpdateSubscribers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadyToUpdateSubscribers += x, x => _data.ReadyToUpdateSubscribers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ServiceAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs> ServiceAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>, global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>(x => _data.ServiceAdded += x, x => _data.ServiceAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.StateUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StateUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StateUpdated += x, x => _data.StateUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.WriteRequestsReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestsEventArgs> WriteRequestsReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBATTRequestsEventArgs>, global::CoreBluetooth.CBATTRequestsEventArgs>(x => _data.WriteRequestsReceived += x, x => _data.WriteRequestsReceived -= x).Select(x => x.EventArgs);
    }
}

namespace CoreFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        public static CFSocketEvents Events(this global::CoreFoundation.CFSocket item) => new CFSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        public static CFStreamEvents Events(this global::CoreFoundation.CFStream item) => new CFStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class as observables.
    /// </summary>
    public class CFSocketEvents
    {
        private readonly global::CoreFoundation.CFSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CFSocketEvents(global::CoreFoundation.CFSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.AcceptEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs> AcceptEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>, global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>(x => _data.AcceptEvent += x, x => _data.AcceptEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.ConnectEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs> ConnectEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>, global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>(x => _data.ConnectEvent += x, x => _data.ConnectEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.DataEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketDataEventArgs> DataEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketDataEventArgs>, global::CoreFoundation.CFSocket.CFSocketDataEventArgs>(x => _data.DataEvent += x, x => _data.DataEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.ReadEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketReadEventArgs> ReadEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketReadEventArgs>, global::CoreFoundation.CFSocket.CFSocketReadEventArgs>(x => _data.ReadEvent += x, x => _data.ReadEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.WriteEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs> WriteEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>, global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>(x => _data.WriteEvent += x, x => _data.WriteEvent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class as observables.
    /// </summary>
    public class CFStreamEvents
    {
        private readonly global::CoreFoundation.CFStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CFStreamEvents(global::CoreFoundation.CFStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.CanAcceptBytesEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> CanAcceptBytesEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.CanAcceptBytesEvent += x, x => _data.CanAcceptBytesEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.ClosedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ClosedEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.ClosedEvent += x, x => _data.ClosedEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.ErrorEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ErrorEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.ErrorEvent += x, x => _data.ErrorEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.HasBytesAvailableEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> HasBytesAvailableEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.HasBytesAvailableEvent += x, x => _data.HasBytesAvailableEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.OpenCompletedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> OpenCompletedEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.OpenCompletedEvent += x, x => _data.OpenCompletedEvent -= x).Select(x => x.EventArgs);
    }
}

namespace CoreLocation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreLocation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        public static CLLocationManagerEvents Events(this global::CoreLocation.CLLocationManager item) => new CLLocationManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class as observables.
    /// </summary>
    public class CLLocationManagerEvents
    {
        private readonly global::CoreLocation.CLLocationManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CLLocationManagerEvents(global::CoreLocation.CLLocationManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.AuthorizationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLAuthorizationChangedEventArgs> AuthorizationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLAuthorizationChangedEventArgs>, global::CoreLocation.CLAuthorizationChangedEventArgs>(x => _data.AuthorizationChanged += x, x => _data.AuthorizationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DeferredUpdatesFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DeferredUpdatesFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DeferredUpdatesFinished += x, x => _data.DeferredUpdatesFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DidDetermineState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionStateDeterminedEventArgs> DidDetermineState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionStateDeterminedEventArgs>, global::CoreLocation.CLRegionStateDeterminedEventArgs>(x => _data.DidDetermineState += x, x => _data.DidDetermineState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.DidStartMonitoringForRegion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionEventArgs> DidStartMonitoringForRegion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionEventArgs>, global::CoreLocation.CLRegionEventArgs>(x => _data.DidStartMonitoringForRegion += x, x => _data.DidStartMonitoringForRegion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.LocationsUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationsUpdatedEventArgs> LocationsUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLLocationsUpdatedEventArgs>, global::CoreLocation.CLLocationsUpdatedEventArgs>(x => _data.LocationsUpdated += x, x => _data.LocationsUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.LocationUpdatesPaused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationUpdatesPaused => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationUpdatesPaused += x, x => _data.LocationUpdatesPaused -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.LocationUpdatesResumed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationUpdatesResumed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocationUpdatesResumed += x, x => _data.LocationUpdatesResumed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.MonitoringFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionErrorEventArgs> MonitoringFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionErrorEventArgs>, global::CoreLocation.CLRegionErrorEventArgs>(x => _data.MonitoringFailed += x, x => _data.MonitoringFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.RegionEntered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionEventArgs> RegionEntered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionEventArgs>, global::CoreLocation.CLRegionEventArgs>(x => _data.RegionEntered += x, x => _data.RegionEntered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.RegionLeft"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLRegionEventArgs> RegionLeft => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLRegionEventArgs>, global::CoreLocation.CLRegionEventArgs>(x => _data.RegionLeft += x, x => _data.RegionLeft -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.UpdatedLocation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationUpdatedEventArgs> UpdatedLocation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLLocationUpdatedEventArgs>, global::CoreLocation.CLLocationUpdatedEventArgs>(x => _data.UpdatedLocation += x, x => _data.UpdatedLocation -= x).Select(x => x.EventArgs);
    }
}

namespace CoreMidi
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreMidi"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreMidi.MidiClient"/> class.
        /// </summary>
        public static MidiClientEvents Events(this global::CoreMidi.MidiClient item) => new MidiClientEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreMidi.MidiEndpoint"/> class.
        /// </summary>
        public static MidiEndpointEvents Events(this global::CoreMidi.MidiEndpoint item) => new MidiEndpointEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreMidi.MidiPort"/> class.
        /// </summary>
        public static MidiPortEvents Events(this global::CoreMidi.MidiPort item) => new MidiPortEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreMidi.MidiClient"/> class as observables.
    /// </summary>
    public class MidiClientEvents
    {
        private readonly global::CoreMidi.MidiClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreMidi.MidiClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MidiClientEvents(global::CoreMidi.MidiClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.IOError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.IOErrorEventArgs> IOError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.IOErrorEventArgs>, global::CoreMidi.IOErrorEventArgs>(x => _data.IOError += x, x => _data.IOError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.ObjectAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.ObjectAddedOrRemovedEventArgs> ObjectAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.ObjectAddedOrRemovedEventArgs>, global::CoreMidi.ObjectAddedOrRemovedEventArgs>(x => _data.ObjectAdded += x, x => _data.ObjectAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.ObjectRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.ObjectAddedOrRemovedEventArgs> ObjectRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.ObjectAddedOrRemovedEventArgs>, global::CoreMidi.ObjectAddedOrRemovedEventArgs>(x => _data.ObjectRemoved += x, x => _data.ObjectRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.ObjectPropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.ObjectPropertyChangedEventArgs>, global::CoreMidi.ObjectPropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.SerialPortOwnerChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SerialPortOwnerChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SerialPortOwnerChanged += x, x => _data.SerialPortOwnerChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.SetupChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SetupChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SetupChanged += x, x => _data.SetupChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiClient.ThruConnectionsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ThruConnectionsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ThruConnectionsChanged += x, x => _data.ThruConnectionsChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreMidi.MidiEndpoint"/> class as observables.
    /// </summary>
    public class MidiEndpointEvents
    {
        private readonly global::CoreMidi.MidiEndpoint _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreMidi.MidiEndpoint"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MidiEndpointEvents(global::CoreMidi.MidiEndpoint data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiEndpoint.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.MidiPacketsEventArgs> MessageReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.MidiPacketsEventArgs>, global::CoreMidi.MidiPacketsEventArgs>(x => _data.MessageReceived += x, x => _data.MessageReceived -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreMidi.MidiPort"/> class as observables.
    /// </summary>
    public class MidiPortEvents
    {
        private readonly global::CoreMidi.MidiPort _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreMidi.MidiPort"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MidiPortEvents(global::CoreMidi.MidiPort data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreMidi.MidiPort.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreMidi.MidiPacketsEventArgs> MessageReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreMidi.MidiPacketsEventArgs>, global::CoreMidi.MidiPacketsEventArgs>(x => _data.MessageReceived += x, x => _data.MessageReceived -= x).Select(x => x.EventArgs);
    }
}

namespace CoreServices
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreServices"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreServices.FSEventStream"/> class.
        /// </summary>
        public static FSEventStreamEvents Events(this global::CoreServices.FSEventStream item) => new FSEventStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreServices.FSEventStream"/> class as observables.
    /// </summary>
    public class FSEventStreamEvents
    {
        private readonly global::CoreServices.FSEventStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreServices.FSEventStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FSEventStreamEvents(global::CoreServices.FSEventStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreServices.FSEventStream.Events"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreServices.FSEventStreamEventsArgs> Events => global::System.Reactive.Linq.Observable.FromEventPattern<global::CoreServices.FSEventStreamEventsHandler, global::CoreServices.FSEventStreamEventsArgs>(x => _data.Events += x, x => _data.Events -= x).Select(x => x.EventArgs);
    }
}

namespace ExternalAccessory
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "ExternalAccessory"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ExternalAccessory.EAAccessory"/> class.
        /// </summary>
        public static EAAccessoryEvents Events(this global::ExternalAccessory.EAAccessory item) => new EAAccessoryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ExternalAccessory.EAAccessory"/> class as observables.
    /// </summary>
    public class EAAccessoryEvents
    {
        private readonly global::ExternalAccessory.EAAccessory _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ExternalAccessory.EAAccessory"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EAAccessoryEvents(global::ExternalAccessory.EAAccessory data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAAccessory.Disconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disconnected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disconnected += x, x => _data.Disconnected -= x).Select(x => x.EventArgs);
    }
}

namespace Foundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Foundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        public static NSCacheEvents Events(this global::Foundation.NSCache item) => new NSCacheEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        public static NSKeyedArchiverEvents Events(this global::Foundation.NSKeyedArchiver item) => new NSKeyedArchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        public static NSKeyedUnarchiverEvents Events(this global::Foundation.NSKeyedUnarchiver item) => new NSKeyedUnarchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSNetService"/> class.
        /// </summary>
        public static NSNetServiceEvents Events(this global::Foundation.NSNetService item) => new NSNetServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSNetServiceBrowser"/> class.
        /// </summary>
        public static NSNetServiceBrowserEvents Events(this global::Foundation.NSNetServiceBrowser item) => new NSNetServiceBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        public static NSStreamEvents Events(this global::Foundation.NSStream item) => new NSStreamEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSUserNotificationCenter"/> class.
        /// </summary>
        public static NSUserNotificationCenterEvents Events(this global::Foundation.NSUserNotificationCenter item) => new NSUserNotificationCenterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSCache"/> class as observables.
    /// </summary>
    public class NSCacheEvents
    {
        private readonly global::Foundation.NSCache _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSCacheEvents(global::Foundation.NSCache data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSCache.WillEvictObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> WillEvictObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(x => _data.WillEvictObject += x, x => _data.WillEvictObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class as observables.
    /// </summary>
    public class NSKeyedArchiverEvents
    {
        private readonly global::Foundation.NSKeyedArchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSKeyedArchiverEvents(global::Foundation.NSKeyedArchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.EncodedObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> EncodedObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(x => _data.EncodedObject += x, x => _data.EncodedObject -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finishing += x, x => _data.Finishing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class as observables.
    /// </summary>
    public class NSKeyedUnarchiverEvents
    {
        private readonly global::Foundation.NSKeyedUnarchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSKeyedUnarchiverEvents(global::Foundation.NSKeyedUnarchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finishing += x, x => _data.Finishing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSNetService"/> class as observables.
    /// </summary>
    public class NSNetServiceEvents
    {
        private readonly global::Foundation.NSNetService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSNetService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSNetServiceEvents(global::Foundation.NSNetService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.AddressResolved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AddressResolved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AddressResolved += x, x => _data.AddressResolved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.DidAcceptConnection"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceConnectionEventArgs> DidAcceptConnection => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceConnectionEventArgs>, global::Foundation.NSNetServiceConnectionEventArgs>(x => _data.DidAcceptConnection += x, x => _data.DidAcceptConnection -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.Published"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Published => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Published += x, x => _data.Published -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.PublishFailure"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> PublishFailure => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.PublishFailure += x, x => _data.PublishFailure -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.ResolveFailure"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> ResolveFailure => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.ResolveFailure += x, x => _data.ResolveFailure -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Stopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Stopped += x, x => _data.Stopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.UpdatedTxtRecordData"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceDataEventArgs> UpdatedTxtRecordData => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceDataEventArgs>, global::Foundation.NSNetServiceDataEventArgs>(x => _data.UpdatedTxtRecordData += x, x => _data.UpdatedTxtRecordData -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.WillPublish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPublish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPublish += x, x => _data.WillPublish -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.WillResolve"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillResolve => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillResolve += x, x => _data.WillResolve -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSNetServiceBrowser"/> class as observables.
    /// </summary>
    public class NSNetServiceBrowserEvents
    {
        private readonly global::Foundation.NSNetServiceBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSNetServiceBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSNetServiceBrowserEvents(global::Foundation.NSNetServiceBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.DomainRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetDomainEventArgs> DomainRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetDomainEventArgs>, global::Foundation.NSNetDomainEventArgs>(x => _data.DomainRemoved += x, x => _data.DomainRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.FoundDomain"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetDomainEventArgs> FoundDomain => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetDomainEventArgs>, global::Foundation.NSNetDomainEventArgs>(x => _data.FoundDomain += x, x => _data.FoundDomain -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.FoundService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceEventArgs> FoundService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceEventArgs>, global::Foundation.NSNetServiceEventArgs>(x => _data.FoundService += x, x => _data.FoundService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.NotSearched"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> NotSearched => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.NotSearched += x, x => _data.NotSearched -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.SearchStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchStarted += x, x => _data.SearchStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.SearchStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchStopped += x, x => _data.SearchStopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.ServiceRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceEventArgs> ServiceRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceEventArgs>, global::Foundation.NSNetServiceEventArgs>(x => _data.ServiceRemoved += x, x => _data.ServiceRemoved -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSStream"/> class as observables.
    /// </summary>
    public class NSStreamEvents
    {
        private readonly global::Foundation.NSStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSStreamEvents(global::Foundation.NSStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSStream.OnEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSStreamEventArgs> OnEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSStreamEventArgs>, global::Foundation.NSStreamEventArgs>(x => _data.OnEvent += x, x => _data.OnEvent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSUserNotificationCenter"/> class as observables.
    /// </summary>
    public class NSUserNotificationCenterEvents
    {
        private readonly global::Foundation.NSUserNotificationCenter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSUserNotificationCenter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSUserNotificationCenterEvents(global::Foundation.NSUserNotificationCenter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserNotificationCenter.DidActivateNotification"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.UNCDidActivateNotificationEventArgs> DidActivateNotification => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.UNCDidActivateNotificationEventArgs>, global::Foundation.UNCDidActivateNotificationEventArgs>(x => _data.DidActivateNotification += x, x => _data.DidActivateNotification -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserNotificationCenter.DidDeliverNotification"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.UNCDidDeliverNotificationEventArgs> DidDeliverNotification => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.UNCDidDeliverNotificationEventArgs>, global::Foundation.UNCDidDeliverNotificationEventArgs>(x => _data.DidDeliverNotification += x, x => _data.DidDeliverNotification -= x).Select(x => x.EventArgs);
    }
}

namespace GameKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "GameKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKAchievementViewController"/> class.
        /// </summary>
        public static GKAchievementViewControllerEvents Events(this global::GameKit.GKAchievementViewController item) => new GKAchievementViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKChallengeEventHandler"/> class.
        /// </summary>
        public static GKChallengeEventHandlerEvents Events(this global::GameKit.GKChallengeEventHandler item) => new GKChallengeEventHandlerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKFriendRequestComposeViewController"/> class.
        /// </summary>
        public static GKFriendRequestComposeViewControllerEvents Events(this global::GameKit.GKFriendRequestComposeViewController item) => new GKFriendRequestComposeViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKGameCenterViewController"/> class.
        /// </summary>
        public static GKGameCenterViewControllerEvents Events(this global::GameKit.GKGameCenterViewController item) => new GKGameCenterViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKLeaderboardViewController"/> class.
        /// </summary>
        public static GKLeaderboardViewControllerEvents Events(this global::GameKit.GKLeaderboardViewController item) => new GKLeaderboardViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKMatch"/> class.
        /// </summary>
        public static GKMatchEvents Events(this global::GameKit.GKMatch item) => new GKMatchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKMatchmakerViewController"/> class.
        /// </summary>
        public static GKMatchmakerViewControllerEvents Events(this global::GameKit.GKMatchmakerViewController item) => new GKMatchmakerViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKAchievementViewController"/> class as observables.
    /// </summary>
    public class GKAchievementViewControllerEvents
    {
        private readonly global::GameKit.GKAchievementViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKAchievementViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKAchievementViewControllerEvents(global::GameKit.GKAchievementViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKAchievementViewController.DidFinish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinish += x, x => _data.DidFinish -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKChallengeEventHandler"/> class as observables.
    /// </summary>
    public class GKChallengeEventHandlerEvents
    {
        private readonly global::GameKit.GKChallengeEventHandler _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKChallengeEventHandler"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKChallengeEventHandlerEvents(global::GameKit.GKChallengeEventHandler data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.LocalPlayerCompletedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocalPlayerCompletedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocalPlayerCompletedChallenge += x, x => _data.LocalPlayerCompletedChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.LocalPlayerReceivedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocalPlayerReceivedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocalPlayerReceivedChallenge += x, x => _data.LocalPlayerReceivedChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.LocalPlayerSelectedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocalPlayerSelectedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.LocalPlayerSelectedChallenge += x, x => _data.LocalPlayerSelectedChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandler.RemotePlayerCompletedChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemotePlayerCompletedChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RemotePlayerCompletedChallenge += x, x => _data.RemotePlayerCompletedChallenge -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKFriendRequestComposeViewController"/> class as observables.
    /// </summary>
    public class GKFriendRequestComposeViewControllerEvents
    {
        private readonly global::GameKit.GKFriendRequestComposeViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKFriendRequestComposeViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKFriendRequestComposeViewControllerEvents(global::GameKit.GKFriendRequestComposeViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKFriendRequestComposeViewController.DidFinish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinish += x, x => _data.DidFinish -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKGameCenterViewController"/> class as observables.
    /// </summary>
    public class GKGameCenterViewControllerEvents
    {
        private readonly global::GameKit.GKGameCenterViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKGameCenterViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKGameCenterViewControllerEvents(global::GameKit.GKGameCenterViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKGameCenterViewController.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKLeaderboardViewController"/> class as observables.
    /// </summary>
    public class GKLeaderboardViewControllerEvents
    {
        private readonly global::GameKit.GKLeaderboardViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKLeaderboardViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKLeaderboardViewControllerEvents(global::GameKit.GKLeaderboardViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKLeaderboardViewController.DidFinish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidFinish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidFinish += x, x => _data.DidFinish -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKMatch"/> class as observables.
    /// </summary>
    public class GKMatchEvents
    {
        private readonly global::GameKit.GKMatch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKMatch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKMatchEvents(global::GameKit.GKMatch data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.ConnectionFailed"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("It will never be called.", false)]
        public global::System.IObservable<global::GameKit.GKPlayerErrorEventArgs> ConnectionFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPlayerErrorEventArgs>, global::GameKit.GKPlayerErrorEventArgs>(x => _data.ConnectionFailed += x, x => _data.ConnectionFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKDataEventArgs> DataReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKDataEventArgs>, global::GameKit.GKDataEventArgs>(x => _data.DataReceived += x, x => _data.DataReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceivedForRecipient"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKDataReceivedForRecipientEventArgs> DataReceivedForRecipient => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKDataReceivedForRecipientEventArgs>, global::GameKit.GKDataReceivedForRecipientEventArgs>(x => _data.DataReceivedForRecipient += x, x => _data.DataReceivedForRecipient -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceivedFromPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs> DataReceivedFromPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs>, global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs>(x => _data.DataReceivedFromPlayer += x, x => _data.DataReceivedFromPlayer -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKErrorEventArgs>, global::GameKit.GKErrorEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKStateEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKStateEventArgs>, global::GameKit.GKStateEventArgs>(x => _data.StateChanged += x, x => _data.StateChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.StateChangedForPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchConnectionChangedEventArgs> StateChangedForPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchConnectionChangedEventArgs>, global::GameKit.GKMatchConnectionChangedEventArgs>(x => _data.StateChangedForPlayer += x, x => _data.StateChangedForPlayer -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKMatchmakerViewController"/> class as observables.
    /// </summary>
    public class GKMatchmakerViewControllerEvents
    {
        private readonly global::GameKit.GKMatchmakerViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKMatchmakerViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKMatchmakerViewControllerEvents(global::GameKit.GKMatchmakerViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFailWithError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKErrorEventArgs> DidFailWithError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKErrorEventArgs>, global::GameKit.GKErrorEventArgs>(x => _data.DidFailWithError += x, x => _data.DidFailWithError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindHostedPlayers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakingPlayersEventArgs> DidFindHostedPlayers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchmakingPlayersEventArgs>, global::GameKit.GKMatchmakingPlayersEventArgs>(x => _data.DidFindHostedPlayers += x, x => _data.DidFindHostedPlayers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindMatch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchEventArgs> DidFindMatch => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchEventArgs>, global::GameKit.GKMatchEventArgs>(x => _data.DidFindMatch += x, x => _data.DidFindMatch -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindPlayers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPlayersEventArgs> DidFindPlayers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPlayersEventArgs>, global::GameKit.GKPlayersEventArgs>(x => _data.DidFindPlayers += x, x => _data.DidFindPlayers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.HostedPlayerDidAccept"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakingPlayerEventArgs> HostedPlayerDidAccept => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchmakingPlayerEventArgs>, global::GameKit.GKMatchmakingPlayerEventArgs>(x => _data.HostedPlayerDidAccept += x, x => _data.HostedPlayerDidAccept -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.ReceivedAcceptFromHostedPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKPlayerEventArgs> ReceivedAcceptFromHostedPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKPlayerEventArgs>, global::GameKit.GKPlayerEventArgs>(x => _data.ReceivedAcceptFromHostedPlayer += x, x => _data.ReceivedAcceptFromHostedPlayer -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.WasCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WasCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WasCancelled += x, x => _data.WasCancelled -= x).Select(x => x.EventArgs);
    }
}

namespace ImageKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "ImageKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ImageKit.IKCameraDeviceView"/> class.
        /// </summary>
        public static IKCameraDeviceViewEvents Events(this global::ImageKit.IKCameraDeviceView item) => new IKCameraDeviceViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ImageKit.IKDeviceBrowserView"/> class.
        /// </summary>
        public static IKDeviceBrowserViewEvents Events(this global::ImageKit.IKDeviceBrowserView item) => new IKDeviceBrowserViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ImageKit.IKImageBrowserView"/> class.
        /// </summary>
        public static IKImageBrowserViewEvents Events(this global::ImageKit.IKImageBrowserView item) => new IKImageBrowserViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ImageKit.IKScannerDeviceView"/> class.
        /// </summary>
        public static IKScannerDeviceViewEvents Events(this global::ImageKit.IKScannerDeviceView item) => new IKScannerDeviceViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ImageKit.IKCameraDeviceView"/> class as observables.
    /// </summary>
    public class IKCameraDeviceViewEvents
    {
        private readonly global::ImageKit.IKCameraDeviceView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ImageKit.IKCameraDeviceView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IKCameraDeviceViewEvents(global::ImageKit.IKCameraDeviceView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKCameraDeviceView.DidDownloadFile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKCameraDeviceViewICCameraFileNSUrlNSDataNSErrorEventArgs> DidDownloadFile => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKCameraDeviceViewICCameraFileNSUrlNSDataNSErrorEventArgs>, global::ImageKit.IKCameraDeviceViewICCameraFileNSUrlNSDataNSErrorEventArgs>(x => _data.DidDownloadFile += x, x => _data.DidDownloadFile -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKCameraDeviceView.DidEncounterError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKCameraDeviceViewNSErrorEventArgs> DidEncounterError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKCameraDeviceViewNSErrorEventArgs>, global::ImageKit.IKCameraDeviceViewNSErrorEventArgs>(x => _data.DidEncounterError += x, x => _data.DidEncounterError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKCameraDeviceView.SelectionDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionDidChange += x, x => _data.SelectionDidChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ImageKit.IKDeviceBrowserView"/> class as observables.
    /// </summary>
    public class IKDeviceBrowserViewEvents
    {
        private readonly global::ImageKit.IKDeviceBrowserView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ImageKit.IKDeviceBrowserView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IKDeviceBrowserViewEvents(global::ImageKit.IKDeviceBrowserView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKDeviceBrowserView.DidEncounterError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKDeviceBrowserViewNSErrorEventArgs> DidEncounterError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKDeviceBrowserViewNSErrorEventArgs>, global::ImageKit.IKDeviceBrowserViewNSErrorEventArgs>(x => _data.DidEncounterError += x, x => _data.DidEncounterError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKDeviceBrowserView.SelectionDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKDeviceBrowserViewICDeviceEventArgs> SelectionDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKDeviceBrowserViewICDeviceEventArgs>, global::ImageKit.IKDeviceBrowserViewICDeviceEventArgs>(x => _data.SelectionDidChange += x, x => _data.SelectionDidChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ImageKit.IKImageBrowserView"/> class as observables.
    /// </summary>
    public class IKImageBrowserViewEvents
    {
        private readonly global::ImageKit.IKImageBrowserView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ImageKit.IKImageBrowserView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IKImageBrowserViewEvents(global::ImageKit.IKImageBrowserView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserView.BackgroundWasRightClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKImageBrowserViewEventEventArgs> BackgroundWasRightClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKImageBrowserViewEventEventArgs>, global::ImageKit.IKImageBrowserViewEventEventArgs>(x => _data.BackgroundWasRightClicked += x, x => _data.BackgroundWasRightClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserView.CellWasDoubleClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKImageBrowserViewIndexEventArgs> CellWasDoubleClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKImageBrowserViewIndexEventArgs>, global::ImageKit.IKImageBrowserViewIndexEventArgs>(x => _data.CellWasDoubleClicked += x, x => _data.CellWasDoubleClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserView.CellWasRightClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKImageBrowserViewIndexEventEventArgs> CellWasRightClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKImageBrowserViewIndexEventEventArgs>, global::ImageKit.IKImageBrowserViewIndexEventEventArgs>(x => _data.CellWasRightClicked += x, x => _data.CellWasRightClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserView.SelectionDidChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionDidChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionDidChange += x, x => _data.SelectionDidChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ImageKit.IKScannerDeviceView"/> class as observables.
    /// </summary>
    public class IKScannerDeviceViewEvents
    {
        private readonly global::ImageKit.IKScannerDeviceView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ImageKit.IKScannerDeviceView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IKScannerDeviceViewEvents(global::ImageKit.IKScannerDeviceView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceView.DidEncounterError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKScannerDeviceViewErrorEventArgs> DidEncounterError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKScannerDeviceViewErrorEventArgs>, global::ImageKit.IKScannerDeviceViewErrorEventArgs>(x => _data.DidEncounterError += x, x => _data.DidEncounterError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceView.DidScan"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKScannerDeviceViewScanEventArgs> DidScan => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKScannerDeviceViewScanEventArgs>, global::ImageKit.IKScannerDeviceViewScanEventArgs>(x => _data.DidScan += x, x => _data.DidScan -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceView.DidScanToBandData"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKScannerDeviceViewScanBandDataEventArgs> DidScanToBandData => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKScannerDeviceViewScanBandDataEventArgs>, global::ImageKit.IKScannerDeviceViewScanBandDataEventArgs>(x => _data.DidScanToBandData += x, x => _data.DidScanToBandData -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceView.DidScanToUrl"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKScannerDeviceViewScanUrlEventArgs> DidScanToUrl => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::ImageKit.IKScannerDeviceViewScanUrlEventArgs>, global::ImageKit.IKScannerDeviceViewScanUrlEventArgs>(x => _data.DidScanToUrl += x, x => _data.DidScanToUrl -= x).Select(x => x.EventArgs);
    }
}

namespace MapKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "MapKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::MapKit.MKMapView"/> class.
        /// </summary>
        public static MKMapViewEvents Events(this global::MapKit.MKMapView item) => new MKMapViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::MapKit.MKMapView"/> class as observables.
    /// </summary>
    public class MKMapViewEvents
    {
        private readonly global::MapKit.MKMapView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::MapKit.MKMapView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MKMapViewEvents(global::MapKit.MKMapView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.ChangedDragState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewDragStateEventArgs> ChangedDragState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewDragStateEventArgs>, global::MapKit.MKMapViewDragStateEventArgs>(x => _data.ChangedDragState += x, x => _data.ChangedDragState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidAddAnnotationViews"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewAnnotationEventArgs> DidAddAnnotationViews => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewAnnotationEventArgs>, global::MapKit.MKMapViewAnnotationEventArgs>(x => _data.DidAddAnnotationViews += x, x => _data.DidAddAnnotationViews -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidAddOverlayRenderers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKDidAddOverlayRenderersEventArgs> DidAddOverlayRenderers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKDidAddOverlayRenderersEventArgs>, global::MapKit.MKDidAddOverlayRenderersEventArgs>(x => _data.DidAddOverlayRenderers += x, x => _data.DidAddOverlayRenderers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidChangeVisibleRegion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeVisibleRegion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeVisibleRegion += x, x => _data.DidChangeVisibleRegion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidDeselectAnnotationView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKAnnotationViewEventArgs> DidDeselectAnnotationView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKAnnotationViewEventArgs>, global::MapKit.MKAnnotationViewEventArgs>(x => _data.DidDeselectAnnotationView += x, x => _data.DidDeselectAnnotationView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidFailToLocateUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DidFailToLocateUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DidFailToLocateUser += x, x => _data.DidFailToLocateUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidFinishRenderingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKDidFinishRenderingMapEventArgs> DidFinishRenderingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKDidFinishRenderingMapEventArgs>, global::MapKit.MKDidFinishRenderingMapEventArgs>(x => _data.DidFinishRenderingMap += x, x => _data.DidFinishRenderingMap -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidSelectAnnotationView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKAnnotationViewEventArgs> DidSelectAnnotationView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKAnnotationViewEventArgs>, global::MapKit.MKAnnotationViewEventArgs>(x => _data.DidSelectAnnotationView += x, x => _data.DidSelectAnnotationView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidStopLocatingUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidStopLocatingUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidStopLocatingUser += x, x => _data.DidStopLocatingUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidUpdateUserLocation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKUserLocationEventArgs> DidUpdateUserLocation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKUserLocationEventArgs>, global::MapKit.MKUserLocationEventArgs>(x => _data.DidUpdateUserLocation += x, x => _data.DidUpdateUserLocation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.LoadingMapFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> LoadingMapFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.LoadingMapFailed += x, x => _data.LoadingMapFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.MapLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MapLoaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MapLoaded += x, x => _data.MapLoaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewChangeEventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewChangeEventArgs>, global::MapKit.MKMapViewChangeEventArgs>(x => _data.RegionChanged += x, x => _data.RegionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.RegionWillChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewChangeEventArgs> RegionWillChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewChangeEventArgs>, global::MapKit.MKMapViewChangeEventArgs>(x => _data.RegionWillChange += x, x => _data.RegionWillChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartLoadingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLoadingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLoadingMap += x, x => _data.WillStartLoadingMap -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartLocatingUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLocatingUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLocatingUser += x, x => _data.WillStartLocatingUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartRenderingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartRenderingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartRenderingMap += x, x => _data.WillStartRenderingMap -= x).Select(x => x.EventArgs);
    }
}

namespace NotificationCenter
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "NotificationCenter"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::NotificationCenter.NCWidgetListViewController"/> class.
        /// </summary>
        public static NCWidgetListViewControllerEvents Events(this global::NotificationCenter.NCWidgetListViewController item) => new NCWidgetListViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::NotificationCenter.NCWidgetSearchViewController"/> class.
        /// </summary>
        public static NCWidgetSearchViewControllerEvents Events(this global::NotificationCenter.NCWidgetSearchViewController item) => new NCWidgetSearchViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::NotificationCenter.NCWidgetListViewController"/> class as observables.
    /// </summary>
    public class NCWidgetListViewControllerEvents
    {
        private readonly global::NotificationCenter.NCWidgetListViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::NotificationCenter.NCWidgetListViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NCWidgetListViewControllerEvents(global::NotificationCenter.NCWidgetListViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetListViewController.DidRemoveRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::NotificationCenter.NCWidgetListViewControllerDidRemoveRowEventArgs> DidRemoveRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::NotificationCenter.NCWidgetListViewControllerDidRemoveRowEventArgs>, global::NotificationCenter.NCWidgetListViewControllerDidRemoveRowEventArgs>(x => _data.DidRemoveRow += x, x => _data.DidRemoveRow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetListViewController.DidReorderRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::NotificationCenter.NCWidgetListViewControllerDidReorderEventArgs> DidReorderRow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::NotificationCenter.NCWidgetListViewControllerDidReorderEventArgs>, global::NotificationCenter.NCWidgetListViewControllerDidReorderEventArgs>(x => _data.DidReorderRow += x, x => _data.DidReorderRow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetListViewController.PerformAddAction"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PerformAddAction => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PerformAddAction += x, x => _data.PerformAddAction -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::NotificationCenter.NCWidgetSearchViewController"/> class as observables.
    /// </summary>
    public class NCWidgetSearchViewControllerEvents
    {
        private readonly global::NotificationCenter.NCWidgetSearchViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::NotificationCenter.NCWidgetSearchViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NCWidgetSearchViewControllerEvents(global::NotificationCenter.NCWidgetSearchViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetSearchViewController.ResultSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::NotificationCenter.NSWidgetSearchResultSelectedEventArgs> ResultSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::NotificationCenter.NSWidgetSearchResultSelectedEventArgs>, global::NotificationCenter.NSWidgetSearchResultSelectedEventArgs>(x => _data.ResultSelected += x, x => _data.ResultSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetSearchViewController.SearchForTearm"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::NotificationCenter.NSWidgetSearchForTermEventArgs> SearchForTearm => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::NotificationCenter.NSWidgetSearchForTermEventArgs>, global::NotificationCenter.NSWidgetSearchForTermEventArgs>(x => _data.SearchForTearm += x, x => _data.SearchForTearm -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetSearchViewController.TermCleared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TermCleared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TermCleared += x, x => _data.TermCleared -= x).Select(x => x.EventArgs);
    }
}

namespace PdfKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "PdfKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::PdfKit.PdfDocument"/> class.
        /// </summary>
        public static PdfDocumentEvents Events(this global::PdfKit.PdfDocument item) => new PdfDocumentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::PdfKit.PdfView"/> class.
        /// </summary>
        public static PdfViewEvents Events(this global::PdfKit.PdfView item) => new PdfViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::PdfKit.PdfDocument"/> class as observables.
    /// </summary>
    public class PdfDocumentEvents
    {
        private readonly global::PdfKit.PdfDocument _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::PdfKit.PdfDocument"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PdfDocumentEvents(global::PdfKit.PdfDocument data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.DidBeginDocumentFind"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBeginDocumentFind => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBeginDocumentFind += x, x => _data.DidBeginDocumentFind -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.DidMatchString"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidMatchString => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidMatchString += x, x => _data.DidMatchString -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.DidUnlock"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUnlock => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUnlock += x, x => _data.DidUnlock -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.FindFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FindFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.FindFinished += x, x => _data.FindFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.MatchFound"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MatchFound => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MatchFound += x, x => _data.MatchFound -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.PageFindFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageFindFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageFindFinished += x, x => _data.PageFindFinished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocument.PageFindStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageFindStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PageFindStarted += x, x => _data.PageFindStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::PdfKit.PdfView"/> class as observables.
    /// </summary>
    public class PdfViewEvents
    {
        private readonly global::PdfKit.PdfView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::PdfKit.PdfView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PdfViewEvents(global::PdfKit.PdfView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.OpenPdf"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfViewActionEventArgs> OpenPdf => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PdfKit.PdfViewActionEventArgs>, global::PdfKit.PdfViewActionEventArgs>(x => _data.OpenPdf += x, x => _data.OpenPdf -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.PerformFind"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PerformFind => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PerformFind += x, x => _data.PerformFind -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.PerformGoToPage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PerformGoToPage => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PerformGoToPage += x, x => _data.PerformGoToPage -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.PerformPrint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PerformPrint => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PerformPrint += x, x => _data.PerformPrint -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfView.WillClickOnLink"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfViewUrlEventArgs> WillClickOnLink => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::PdfKit.PdfViewUrlEventArgs>, global::PdfKit.PdfViewUrlEventArgs>(x => _data.WillClickOnLink += x, x => _data.WillClickOnLink -= x).Select(x => x.EventArgs);
    }
}

namespace QTKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "QTKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::QTKit.QTCaptureDecompressedVideoOutput"/> class.
        /// </summary>
        public static QTCaptureDecompressedVideoOutputEvents Events(this global::QTKit.QTCaptureDecompressedVideoOutput item) => new QTCaptureDecompressedVideoOutputEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::QTKit.QTCaptureFileOutput"/> class.
        /// </summary>
        public static QTCaptureFileOutputEvents Events(this global::QTKit.QTCaptureFileOutput item) => new QTCaptureFileOutputEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::QTKit.QTCaptureDecompressedVideoOutput"/> class as observables.
    /// </summary>
    public class QTCaptureDecompressedVideoOutputEvents
    {
        private readonly global::QTKit.QTCaptureDecompressedVideoOutput _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::QTKit.QTCaptureDecompressedVideoOutput"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public QTCaptureDecompressedVideoOutputEvents(global::QTKit.QTCaptureDecompressedVideoOutput data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureDecompressedVideoOutput.DidDropVideoFrame"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureVideoDroppedEventArgs> DidDropVideoFrame => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureVideoDroppedEventArgs>, global::QTKit.QTCaptureVideoDroppedEventArgs>(x => _data.DidDropVideoFrame += x, x => _data.DidDropVideoFrame -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureDecompressedVideoOutput.DidOutputVideoFrame"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureVideoFrameEventArgs> DidOutputVideoFrame => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureVideoFrameEventArgs>, global::QTKit.QTCaptureVideoFrameEventArgs>(x => _data.DidOutputVideoFrame += x, x => _data.DidOutputVideoFrame -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::QTKit.QTCaptureFileOutput"/> class as observables.
    /// </summary>
    public class QTCaptureFileOutputEvents
    {
        private readonly global::QTKit.QTCaptureFileOutput _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::QTKit.QTCaptureFileOutput"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public QTCaptureFileOutputEvents(global::QTKit.QTCaptureFileOutput data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.DidFinishRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileErrorEventArgs> DidFinishRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileErrorEventArgs>, global::QTKit.QTCaptureFileErrorEventArgs>(x => _data.DidFinishRecording += x, x => _data.DidFinishRecording -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.DidOutputSampleBuffer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileSampleEventArgs> DidOutputSampleBuffer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileSampleEventArgs>, global::QTKit.QTCaptureFileSampleEventArgs>(x => _data.DidOutputSampleBuffer += x, x => _data.DidOutputSampleBuffer -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.DidPauseRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileUrlEventArgs> DidPauseRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileUrlEventArgs>, global::QTKit.QTCaptureFileUrlEventArgs>(x => _data.DidPauseRecording += x, x => _data.DidPauseRecording -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.DidResumeRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileUrlEventArgs> DidResumeRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileUrlEventArgs>, global::QTKit.QTCaptureFileUrlEventArgs>(x => _data.DidResumeRecording += x, x => _data.DidResumeRecording -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.DidStartRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileUrlEventArgs> DidStartRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileUrlEventArgs>, global::QTKit.QTCaptureFileUrlEventArgs>(x => _data.DidStartRecording += x, x => _data.DidStartRecording -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.MustChangeOutputFile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileErrorEventArgs> MustChangeOutputFile => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileErrorEventArgs>, global::QTKit.QTCaptureFileErrorEventArgs>(x => _data.MustChangeOutputFile += x, x => _data.MustChangeOutputFile -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.WillFinishRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileErrorEventArgs> WillFinishRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileErrorEventArgs>, global::QTKit.QTCaptureFileErrorEventArgs>(x => _data.WillFinishRecording += x, x => _data.WillFinishRecording -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutput.WillStartRecording"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::QTKit.QTCaptureFileUrlEventArgs> WillStartRecording => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::QTKit.QTCaptureFileUrlEventArgs>, global::QTKit.QTCaptureFileUrlEventArgs>(x => _data.WillStartRecording += x, x => _data.WillStartRecording -= x).Select(x => x.EventArgs);
    }
}

namespace SceneKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SceneKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        public static SCNPhysicsWorldEvents Events(this global::SceneKit.SCNPhysicsWorld item) => new SCNPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class as observables.
    /// </summary>
    public class SCNPhysicsWorldEvents
    {
        private readonly global::SceneKit.SCNPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SCNPhysicsWorldEvents(global::SceneKit.SCNPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidEndContact += x, x => _data.DidEndContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidUpdateContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidUpdateContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidUpdateContact += x, x => _data.DidUpdateContact -= x).Select(x => x.EventArgs);
    }
}

namespace SpriteKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SpriteKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        public static SKPhysicsWorldEvents Events(this global::SpriteKit.SKPhysicsWorld item) => new SKPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class as observables.
    /// </summary>
    public class SKPhysicsWorldEvents
    {
        private readonly global::SpriteKit.SKPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKPhysicsWorldEvents(global::SpriteKit.SKPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEndContact += x, x => _data.DidEndContact -= x).Select(x => x.EventArgs);
    }
}

namespace StoreKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "StoreKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        public static SKProductsRequestEvents Events(this global::StoreKit.SKProductsRequest item) => new SKProductsRequestEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        public static SKRequestEvents Events(this global::StoreKit.SKRequest item) => new SKRequestEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class as observables.
    /// </summary>
    public class SKProductsRequestEvents
    {
        private readonly global::StoreKit.SKProductsRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKProductsRequestEvents(global::StoreKit.SKProductsRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKProductsRequest.ReceivedResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKProductsRequestResponseEventArgs> ReceivedResponse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::StoreKit.SKProductsRequestResponseEventArgs>, global::StoreKit.SKProductsRequestResponseEventArgs>(x => _data.ReceivedResponse += x, x => _data.ReceivedResponse -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKRequest"/> class as observables.
    /// </summary>
    public class SKRequestEvents
    {
        private readonly global::StoreKit.SKRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKRequestEvents(global::StoreKit.SKRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequest.RequestFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequestErrorEventArgs> RequestFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::StoreKit.SKRequestErrorEventArgs>, global::StoreKit.SKRequestErrorEventArgs>(x => _data.RequestFailed += x, x => _data.RequestFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequest.RequestFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RequestFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RequestFinished += x, x => _data.RequestFinished -= x).Select(x => x.EventArgs);
    }
}

namespace WebKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "WebKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::WebKit.WebView"/> class.
        /// </summary>
        public static WebViewEvents Events(this global::WebKit.WebView item) => new WebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::WebKit.WebView"/> class as observables.
    /// </summary>
    public class WebViewEvents
    {
        private readonly global::WebKit.WebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::WebKit.WebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebViewEvents(global::WebKit.WebView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.CanceledClientRedirect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameEventArgs> CanceledClientRedirect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameEventArgs>, global::WebKit.WebFrameEventArgs>(x => _data.CanceledClientRedirect += x, x => _data.CanceledClientRedirect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.ChangedLocationWithinPage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameEventArgs> ChangedLocationWithinPage => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameEventArgs>, global::WebKit.WebFrameEventArgs>(x => _data.ChangedLocationWithinPage += x, x => _data.ChangedLocationWithinPage -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.ClearedWindowObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameScriptFrameEventArgs> ClearedWindowObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameScriptFrameEventArgs>, global::WebKit.WebFrameScriptFrameEventArgs>(x => _data.ClearedWindowObject += x, x => _data.ClearedWindowObject -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.CommitedLoad"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameEventArgs> CommitedLoad => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameEventArgs>, global::WebKit.WebFrameEventArgs>(x => _data.CommitedLoad += x, x => _data.CommitedLoad -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.DecidePolicyForMimeType"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebMimeTypePolicyEventArgs> DecidePolicyForMimeType => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebMimeTypePolicyEventArgs>, global::WebKit.WebMimeTypePolicyEventArgs>(x => _data.DecidePolicyForMimeType += x, x => _data.DecidePolicyForMimeType -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.DecidePolicyForNavigation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebNavigationPolicyEventArgs> DecidePolicyForNavigation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebNavigationPolicyEventArgs>, global::WebKit.WebNavigationPolicyEventArgs>(x => _data.DecidePolicyForNavigation += x, x => _data.DecidePolicyForNavigation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.DecidePolicyForNewWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebNewWindowPolicyEventArgs> DecidePolicyForNewWindow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebNewWindowPolicyEventArgs>, global::WebKit.WebNewWindowPolicyEventArgs>(x => _data.DecidePolicyForNewWindow += x, x => _data.DecidePolicyForNewWindow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.DidCreateJavaScriptContext"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameJavaScriptContextEventArgs> DidCreateJavaScriptContext => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameJavaScriptContextEventArgs>, global::WebKit.WebFrameJavaScriptContextEventArgs>(x => _data.DidCreateJavaScriptContext += x, x => _data.DidCreateJavaScriptContext -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.FailedLoadWithError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameErrorEventArgs> FailedLoadWithError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameErrorEventArgs>, global::WebKit.WebFrameErrorEventArgs>(x => _data.FailedLoadWithError += x, x => _data.FailedLoadWithError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.FailedProvisionalLoad"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameErrorEventArgs> FailedProvisionalLoad => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameErrorEventArgs>, global::WebKit.WebFrameErrorEventArgs>(x => _data.FailedProvisionalLoad += x, x => _data.FailedProvisionalLoad -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.FinishedLoad"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameEventArgs> FinishedLoad => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameEventArgs>, global::WebKit.WebFrameEventArgs>(x => _data.FinishedLoad += x, x => _data.FinishedLoad -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.OnCancelledAuthenticationChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebResourceCancelledChallengeEventArgs> OnCancelledAuthenticationChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebResourceCancelledChallengeEventArgs>, global::WebKit.WebResourceCancelledChallengeEventArgs>(x => _data.OnCancelledAuthenticationChallenge += x, x => _data.OnCancelledAuthenticationChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.OnFailedLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebResourceErrorEventArgs> OnFailedLoading => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebResourceErrorEventArgs>, global::WebKit.WebResourceErrorEventArgs>(x => _data.OnFailedLoading += x, x => _data.OnFailedLoading -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.OnFinishedLoading"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebResourceCompletedEventArgs> OnFinishedLoading => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebResourceCompletedEventArgs>, global::WebKit.WebResourceCompletedEventArgs>(x => _data.OnFinishedLoading += x, x => _data.OnFinishedLoading -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.OnPlugInFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebResourcePluginErrorEventArgs> OnPlugInFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebResourcePluginErrorEventArgs>, global::WebKit.WebResourcePluginErrorEventArgs>(x => _data.OnPlugInFailed += x, x => _data.OnPlugInFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.OnReceivedAuthenticationChallenge"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebResourceAuthenticationChallengeEventArgs> OnReceivedAuthenticationChallenge => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebResourceAuthenticationChallengeEventArgs>, global::WebKit.WebResourceAuthenticationChallengeEventArgs>(x => _data.OnReceivedAuthenticationChallenge += x, x => _data.OnReceivedAuthenticationChallenge -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.OnReceivedContentLength"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebResourceReceivedContentLengthEventArgs> OnReceivedContentLength => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebResourceReceivedContentLengthEventArgs>, global::WebKit.WebResourceReceivedContentLengthEventArgs>(x => _data.OnReceivedContentLength += x, x => _data.OnReceivedContentLength -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.OnReceivedResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebResourceReceivedResponseEventArgs> OnReceivedResponse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebResourceReceivedResponseEventArgs>, global::WebKit.WebResourceReceivedResponseEventArgs>(x => _data.OnReceivedResponse += x, x => _data.OnReceivedResponse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.ReceivedIcon"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameImageEventArgs> ReceivedIcon => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameImageEventArgs>, global::WebKit.WebFrameImageEventArgs>(x => _data.ReceivedIcon += x, x => _data.ReceivedIcon -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.ReceivedServerRedirectForProvisionalLoad"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameEventArgs> ReceivedServerRedirectForProvisionalLoad => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameEventArgs>, global::WebKit.WebFrameEventArgs>(x => _data.ReceivedServerRedirectForProvisionalLoad += x, x => _data.ReceivedServerRedirectForProvisionalLoad -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.ReceivedTitle"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameTitleEventArgs> ReceivedTitle => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameTitleEventArgs>, global::WebKit.WebFrameTitleEventArgs>(x => _data.ReceivedTitle += x, x => _data.ReceivedTitle -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.StartedProvisionalLoad"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameEventArgs> StartedProvisionalLoad => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameEventArgs>, global::WebKit.WebFrameEventArgs>(x => _data.StartedProvisionalLoad += x, x => _data.StartedProvisionalLoad -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIClose"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UIClose => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UIClose += x, x => _data.UIClose -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIDrawFooterInRect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewFooterEventArgs> UIDrawFooterInRect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewFooterEventArgs>, global::WebKit.WebViewFooterEventArgs>(x => _data.UIDrawFooterInRect += x, x => _data.UIDrawFooterInRect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIDrawHeaderInRect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewHeaderEventArgs> UIDrawHeaderInRect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewHeaderEventArgs>, global::WebKit.WebViewHeaderEventArgs>(x => _data.UIDrawHeaderInRect += x, x => _data.UIDrawHeaderInRect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UIFocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UIFocus += x, x => _data.UIFocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIMakeFirstResponder"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewResponderEventArgs> UIMakeFirstResponder => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewResponderEventArgs>, global::WebKit.WebViewResponderEventArgs>(x => _data.UIMakeFirstResponder += x, x => _data.UIMakeFirstResponder -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIMouseDidMoveOverElement"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewMouseMovedEventArgs> UIMouseDidMoveOverElement => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewMouseMovedEventArgs>, global::WebKit.WebViewMouseMovedEventArgs>(x => _data.UIMouseDidMoveOverElement += x, x => _data.UIMouseDidMoveOverElement -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIPrintFrameView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewPrintEventArgs> UIPrintFrameView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewPrintEventArgs>, global::WebKit.WebViewPrintEventArgs>(x => _data.UIPrintFrameView += x, x => _data.UIPrintFrameView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIRunJavaScriptAlertPanel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewJavaScriptEventArgs> UIRunJavaScriptAlertPanel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewJavaScriptEventArgs>, global::WebKit.WebViewJavaScriptEventArgs>(x => _data.UIRunJavaScriptAlertPanel += x, x => _data.UIRunJavaScriptAlertPanel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIRunJavaScriptAlertPanelMessage"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewJavaScriptFrameEventArgs> UIRunJavaScriptAlertPanelMessage => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewJavaScriptFrameEventArgs>, global::WebKit.WebViewJavaScriptFrameEventArgs>(x => _data.UIRunJavaScriptAlertPanelMessage += x, x => _data.UIRunJavaScriptAlertPanelMessage -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIRunModal"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UIRunModal => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UIRunModal += x, x => _data.UIRunModal -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIRunOpenPanelForFileButton"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewRunOpenPanelEventArgs> UIRunOpenPanelForFileButton => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewRunOpenPanelEventArgs>, global::WebKit.WebViewRunOpenPanelEventArgs>(x => _data.UIRunOpenPanelForFileButton += x, x => _data.UIRunOpenPanelForFileButton -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UISetContentRect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewContentEventArgs> UISetContentRect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewContentEventArgs>, global::WebKit.WebViewContentEventArgs>(x => _data.UISetContentRect += x, x => _data.UISetContentRect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UISetFrame"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewFrameEventArgs> UISetFrame => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewFrameEventArgs>, global::WebKit.WebViewFrameEventArgs>(x => _data.UISetFrame += x, x => _data.UISetFrame -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UISetResizable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewResizableEventArgs> UISetResizable => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewResizableEventArgs>, global::WebKit.WebViewResizableEventArgs>(x => _data.UISetResizable += x, x => _data.UISetResizable -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UISetStatusBarVisible"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewStatusBarEventArgs> UISetStatusBarVisible => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewStatusBarEventArgs>, global::WebKit.WebViewStatusBarEventArgs>(x => _data.UISetStatusBarVisible += x, x => _data.UISetStatusBarVisible -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UISetStatusText"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewStatusTextEventArgs> UISetStatusText => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewStatusTextEventArgs>, global::WebKit.WebViewStatusTextEventArgs>(x => _data.UISetStatusText += x, x => _data.UISetStatusText -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UISetToolbarsVisible"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewToolBarsEventArgs> UISetToolbarsVisible => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewToolBarsEventArgs>, global::WebKit.WebViewToolBarsEventArgs>(x => _data.UISetToolbarsVisible += x, x => _data.UISetToolbarsVisible -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIShow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UIShow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UIShow += x, x => _data.UIShow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIUnfocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UIUnfocus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UIUnfocus += x, x => _data.UIUnfocus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIWillPerformDragDestination"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewDragEventArgs> UIWillPerformDragDestination => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewDragEventArgs>, global::WebKit.WebViewDragEventArgs>(x => _data.UIWillPerformDragDestination += x, x => _data.UIWillPerformDragDestination -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UIWillPerformDragSource"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebViewPerformDragEventArgs> UIWillPerformDragSource => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebViewPerformDragEventArgs>, global::WebKit.WebViewPerformDragEventArgs>(x => _data.UIWillPerformDragSource += x, x => _data.UIWillPerformDragSource -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.UnableToImplementPolicy"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFailureToImplementPolicyEventArgs> UnableToImplementPolicy => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFailureToImplementPolicyEventArgs>, global::WebKit.WebFailureToImplementPolicyEventArgs>(x => _data.UnableToImplementPolicy += x, x => _data.UnableToImplementPolicy -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.WillCloseFrame"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameEventArgs> WillCloseFrame => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameEventArgs>, global::WebKit.WebFrameEventArgs>(x => _data.WillCloseFrame += x, x => _data.WillCloseFrame -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.WillPerformClientRedirect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameClientRedirectEventArgs> WillPerformClientRedirect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameClientRedirectEventArgs>, global::WebKit.WebFrameClientRedirectEventArgs>(x => _data.WillPerformClientRedirect += x, x => _data.WillPerformClientRedirect -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebView.WindowScriptObjectAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebFrameScriptObjectEventArgs> WindowScriptObjectAvailable => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::WebKit.WebFrameScriptObjectEventArgs>, global::WebKit.WebFrameScriptObjectEventArgs>(x => _data.WindowScriptObjectAvailable += x, x => _data.WindowScriptObjectAvailable -= x).Select(x => x.EventArgs);
    }
}

namespace ObjCRuntime
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "ObjCRuntime"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ObjCRuntime.Runtime.AssemblyRegistration"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.AssemblyRegistrationEventArgs> RuntimeAssemblyRegistration => global::System.Reactive.Linq.Observable.FromEventPattern<global::ObjCRuntime.AssemblyRegistrationHandler, global::ObjCRuntime.AssemblyRegistrationEventArgs>(x => global::ObjCRuntime.Runtime.AssemblyRegistration += x, x => global::ObjCRuntime.Runtime.AssemblyRegistration -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ObjCRuntime.Runtime.MarshalManagedException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalManagedExceptionEventArgs> RuntimeMarshalManagedException => global::System.Reactive.Linq.Observable.FromEventPattern<global::ObjCRuntime.MarshalManagedExceptionHandler, global::ObjCRuntime.MarshalManagedExceptionEventArgs>(x => global::ObjCRuntime.Runtime.MarshalManagedException += x, x => global::ObjCRuntime.Runtime.MarshalManagedException -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ObjCRuntime.Runtime.MarshalObjectiveCException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs> RuntimeMarshalObjectiveCException => global::System.Reactive.Linq.Observable.FromEventPattern<global::ObjCRuntime.MarshalObjectiveCExceptionHandler, global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs>(x => global::ObjCRuntime.Runtime.MarshalObjectiveCException += x, x => global::ObjCRuntime.Runtime.MarshalObjectiveCException -= x).Select(x => x.EventArgs);
    }
}

namespace AppKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSAnimationDelegate"/> into Observables.
    /// </summary>
    public partial class NSAnimationDelegateRx : global::AppKit.NSAnimationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSAnimation> _animationDidEnd = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSAnimation>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSAnimation animation, float progress)> _animationDidReachProgressMark = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSAnimation animation, float progress)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSAnimation> _animationDidStop = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSAnimation>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSAnimationDelegate.AnimationDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSAnimation> AnimationDidEndObs => _animationDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSAnimationDelegate.AnimationDidReachProgressMark"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSAnimation animation, float progress)> AnimationDidReachProgressMarkObs => _animationDidReachProgressMark;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSAnimationDelegate.AnimationDidStop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSAnimation> AnimationDidStopObs => _animationDidStop;
        /// <inheritdoc/>
        public override void AnimationDidEnd(global::AppKit.NSAnimation animation) => _animationDidEnd.OnNext(animation);
        /// <inheritdoc/>
        public override void AnimationDidReachProgressMark(global::AppKit.NSAnimation animation, float progress) => _animationDidReachProgressMark.OnNext((animation, progress));
        /// <inheritdoc/>
        public override void AnimationDidStop(global::AppKit.NSAnimation animation) => _animationDidStop.OnNext(animation);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSApplicationDelegate"/> into Observables.
    /// </summary>
    public partial class NSApplicationDelegateRx : global::AppKit.NSApplicationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication app, global::Foundation.NSCoder state)> _decodedRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication app, global::Foundation.NSCoder state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didBecomeActive = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didFinishLaunching = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didHide = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResignActive = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didUnhide = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didUpdate = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, string userActivityType, global::Foundation.NSError error)> _failedToContinueUserActivity = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, string userActivityType, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSError error)> _failedToRegisterForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication sender, global::System.String[] filenames)> _openFiles = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication sender, global::System.String[] filenames)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSUrl[] urls)> _openUrls = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSUrl[] urls)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSObject> _orderFrontStandardAboutPanel = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSObject>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSDictionary> _orderFrontStandardAboutPanelWithOptions = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSDictionary>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSDictionary userInfo)> _receivedRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSDictionary userInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSData deviceToken)> _registeredForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSData deviceToken)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::System.String[] sendTypes, global::System.String[] returnTypes)> _registerServicesMenu = new Pharmacist.Common.SingleAwaitSubject<(global::System.String[] sendTypes, global::System.String[] returnTypes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _screenParametersChanged = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSUserActivity userActivity)> _updatedUserActivity = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::Foundation.NSUserActivity userActivity)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::CloudKit.CKShareMetadata metadata)> _userDidAcceptCloudKitShare = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication application, global::CloudKit.CKShareMetadata metadata)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willBecomeActive = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication app, global::Foundation.NSCoder encoder)> _willEncodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSApplication app, global::Foundation.NSCoder encoder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willFinishLaunching = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willHide = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willResignActive = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willTerminate = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willUnhide = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willUpdate = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.DecodedRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication app, global::Foundation.NSCoder state)> DecodedRestorableStateObs => _decodedRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.DidBecomeActive"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidBecomeActiveObs => _didBecomeActive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.DidFinishLaunching"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidFinishLaunchingObs => _didFinishLaunching;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.DidHide"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidHideObs => _didHide;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.DidResignActive"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResignActiveObs => _didResignActive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.DidUnhide"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidUnhideObs => _didUnhide;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.DidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidUpdateObs => _didUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.FailedToContinueUserActivity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication application, string userActivityType, global::Foundation.NSError error)> FailedToContinueUserActivityObs => _failedToContinueUserActivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.FailedToRegisterForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication application, global::Foundation.NSError error)> FailedToRegisterForRemoteNotificationsObs => _failedToRegisterForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.OpenFiles"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication sender, global::System.String[] filenames)> OpenFilesObs => _openFiles;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.OpenUrls"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication application, global::Foundation.NSUrl[] urls)> OpenUrlsObs => _openUrls;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.OrderFrontStandardAboutPanel"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("Use the 'OrderFrontStandardAboutPanel2' on NSApplication.", false)]
        public global::System.IObservable<global::Foundation.NSObject> OrderFrontStandardAboutPanelObs => _orderFrontStandardAboutPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.OrderFrontStandardAboutPanelWithOptions"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("Use the 'OrderFrontStandardAboutPanelWithOptions2' on NSApplication.", false)]
        public global::System.IObservable<global::Foundation.NSDictionary> OrderFrontStandardAboutPanelWithOptionsObs => _orderFrontStandardAboutPanelWithOptions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.ReceivedRemoteNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication application, global::Foundation.NSDictionary userInfo)> ReceivedRemoteNotificationObs => _receivedRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.RegisteredForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication application, global::Foundation.NSData deviceToken)> RegisteredForRemoteNotificationsObs => _registeredForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.RegisterServicesMenu"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("Use the 'RegisterServicesMenu2' on NSApplication.", false)]
        public global::System.IObservable<(global::System.String[] sendTypes, global::System.String[] returnTypes)> RegisterServicesMenuObs => _registerServicesMenu;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.ScreenParametersChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ScreenParametersChangedObs => _screenParametersChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.UpdatedUserActivity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication application, global::Foundation.NSUserActivity userActivity)> UpdatedUserActivityObs => _updatedUserActivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.UserDidAcceptCloudKitShare"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication application, global::CloudKit.CKShareMetadata metadata)> UserDidAcceptCloudKitShareObs => _userDidAcceptCloudKitShare;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillBecomeActive"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillBecomeActiveObs => _willBecomeActive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillEncodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSApplication app, global::Foundation.NSCoder encoder)> WillEncodeRestorableStateObs => _willEncodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillFinishLaunching"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillFinishLaunchingObs => _willFinishLaunching;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillHide"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillHideObs => _willHide;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillResignActive"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillResignActiveObs => _willResignActive;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillTerminate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillTerminateObs => _willTerminate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillUnhide"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillUnhideObs => _willUnhide;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSApplicationDelegate.WillUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillUpdateObs => _willUpdate;
        /// <inheritdoc/>
        public override void DecodedRestorableState(global::AppKit.NSApplication app, global::Foundation.NSCoder state) => _decodedRestorableState.OnNext((app, state));
        /// <inheritdoc/>
        public override void DidBecomeActive(global::Foundation.NSNotification notification) => _didBecomeActive.OnNext(notification);
        /// <inheritdoc/>
        public override void DidFinishLaunching(global::Foundation.NSNotification notification) => _didFinishLaunching.OnNext(notification);
        /// <inheritdoc/>
        public override void DidHide(global::Foundation.NSNotification notification) => _didHide.OnNext(notification);
        /// <inheritdoc/>
        public override void DidResignActive(global::Foundation.NSNotification notification) => _didResignActive.OnNext(notification);
        /// <inheritdoc/>
        public override void DidUnhide(global::Foundation.NSNotification notification) => _didUnhide.OnNext(notification);
        /// <inheritdoc/>
        public override void DidUpdate(global::Foundation.NSNotification notification) => _didUpdate.OnNext(notification);
        /// <inheritdoc/>
        public override void FailedToContinueUserActivity(global::AppKit.NSApplication application, string userActivityType, global::Foundation.NSError error) => _failedToContinueUserActivity.OnNext((application, userActivityType, error));
        /// <inheritdoc/>
        public override void FailedToRegisterForRemoteNotifications(global::AppKit.NSApplication application, global::Foundation.NSError error) => _failedToRegisterForRemoteNotifications.OnNext((application, error));
        /// <inheritdoc/>
        public override void OpenFiles(global::AppKit.NSApplication sender, global::System.String[] filenames) => _openFiles.OnNext((sender, filenames));
        /// <inheritdoc/>
        public override void OpenUrls(global::AppKit.NSApplication application, global::Foundation.NSUrl[] urls) => _openUrls.OnNext((application, urls));
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("Use the 'OrderFrontStandardAboutPanel2' on NSApplication.", false)]
        public override void OrderFrontStandardAboutPanel(global::Foundation.NSObject sender) => _orderFrontStandardAboutPanel.OnNext(sender);
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("Use the 'OrderFrontStandardAboutPanelWithOptions2' on NSApplication.", false)]
        public override void OrderFrontStandardAboutPanelWithOptions(global::Foundation.NSDictionary optionsDictionary) => _orderFrontStandardAboutPanelWithOptions.OnNext(optionsDictionary);
        /// <inheritdoc/>
        public override void ReceivedRemoteNotification(global::AppKit.NSApplication application, global::Foundation.NSDictionary userInfo) => _receivedRemoteNotification.OnNext((application, userInfo));
        /// <inheritdoc/>
        public override void RegisteredForRemoteNotifications(global::AppKit.NSApplication application, global::Foundation.NSData deviceToken) => _registeredForRemoteNotifications.OnNext((application, deviceToken));
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("Use the 'RegisterServicesMenu2' on NSApplication.", false)]
        public override void RegisterServicesMenu(global::System.String[] sendTypes, global::System.String[] returnTypes) => _registerServicesMenu.OnNext((sendTypes, returnTypes));
        /// <inheritdoc/>
        public override void ScreenParametersChanged(global::Foundation.NSNotification notification) => _screenParametersChanged.OnNext(notification);
        /// <inheritdoc/>
        public override void UpdatedUserActivity(global::AppKit.NSApplication application, global::Foundation.NSUserActivity userActivity) => _updatedUserActivity.OnNext((application, userActivity));
        /// <inheritdoc/>
        public override void UserDidAcceptCloudKitShare(global::AppKit.NSApplication application, global::CloudKit.CKShareMetadata metadata) => _userDidAcceptCloudKitShare.OnNext((application, metadata));
        /// <inheritdoc/>
        public override void WillBecomeActive(global::Foundation.NSNotification notification) => _willBecomeActive.OnNext(notification);
        /// <inheritdoc/>
        public override void WillEncodeRestorableState(global::AppKit.NSApplication app, global::Foundation.NSCoder encoder) => _willEncodeRestorableState.OnNext((app, encoder));
        /// <inheritdoc/>
        public override void WillFinishLaunching(global::Foundation.NSNotification notification) => _willFinishLaunching.OnNext(notification);
        /// <inheritdoc/>
        public override void WillHide(global::Foundation.NSNotification notification) => _willHide.OnNext(notification);
        /// <inheritdoc/>
        public override void WillResignActive(global::Foundation.NSNotification notification) => _willResignActive.OnNext(notification);
        /// <inheritdoc/>
        public override void WillTerminate(global::Foundation.NSNotification notification) => _willTerminate.OnNext(notification);
        /// <inheritdoc/>
        public override void WillUnhide(global::Foundation.NSNotification notification) => _willUnhide.OnNext(notification);
        /// <inheritdoc/>
        public override void WillUpdate(global::Foundation.NSNotification notification) => _willUpdate.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSBrowserDelegate"/> into Observables.
    /// </summary>
    public partial class NSBrowserDelegateRx : global::AppKit.NSBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _columnConfigurationDidChange = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser sender, global::System.nint column, global::AppKit.NSMatrix matrix)> _createRowsForColumn = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser sender, global::System.nint column, global::AppKit.NSMatrix matrix)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser browser, global::System.nint oldLastColumn, global::System.nint toColumn)> _didChangeLastColumn = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser browser, global::System.nint oldLastColumn, global::System.nint toColumn)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSBrowser> _didScroll = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser browser, global::Foundation.NSObject obj, global::Foundation.NSObject item)> _setObjectValue = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser browser, global::Foundation.NSObject obj, global::Foundation.NSObject item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser sender, global::Foundation.NSObject cell, global::System.nint row, global::System.nint column)> _willDisplayCell = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSBrowser sender, global::Foundation.NSObject cell, global::System.nint row, global::System.nint column)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSBrowser> _willScroll = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSBrowser>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowserDelegate.ColumnConfigurationDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ColumnConfigurationDidChangeObs => _columnConfigurationDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowserDelegate.CreateRowsForColumn"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSBrowser sender, global::System.nint column, global::AppKit.NSMatrix matrix)> CreateRowsForColumnObs => _createRowsForColumn;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowserDelegate.DidChangeLastColumn"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSBrowser browser, global::System.nint oldLastColumn, global::System.nint toColumn)> DidChangeLastColumnObs => _didChangeLastColumn;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowserDelegate.DidScroll"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSBrowser> DidScrollObs => _didScroll;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowserDelegate.SetObjectValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSBrowser browser, global::Foundation.NSObject obj, global::Foundation.NSObject item)> SetObjectValueObs => _setObjectValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowserDelegate.WillDisplayCell"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSBrowser sender, global::Foundation.NSObject cell, global::System.nint row, global::System.nint column)> WillDisplayCellObs => _willDisplayCell;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSBrowserDelegate.WillScroll"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSBrowser> WillScrollObs => _willScroll;
        /// <inheritdoc/>
        public override void ColumnConfigurationDidChange(global::Foundation.NSNotification notification) => _columnConfigurationDidChange.OnNext(notification);
        /// <inheritdoc/>
        public override void CreateRowsForColumn(global::AppKit.NSBrowser sender, global::System.nint column, global::AppKit.NSMatrix matrix) => _createRowsForColumn.OnNext((sender, column, matrix));
        /// <inheritdoc/>
        public override void DidChangeLastColumn(global::AppKit.NSBrowser browser, global::System.nint oldLastColumn, global::System.nint toColumn) => _didChangeLastColumn.OnNext((browser, oldLastColumn, toColumn));
        /// <inheritdoc/>
        public override void DidScroll(global::AppKit.NSBrowser sender) => _didScroll.OnNext(sender);
        /// <inheritdoc/>
        public override void SetObjectValue(global::AppKit.NSBrowser browser, global::Foundation.NSObject obj, global::Foundation.NSObject item) => _setObjectValue.OnNext((browser, obj, item));
        /// <inheritdoc/>
        public override void WillDisplayCell(global::AppKit.NSBrowser sender, global::Foundation.NSObject cell, global::System.nint row, global::System.nint column) => _willDisplayCell.OnNext((sender, cell, row, column));
        /// <inheritdoc/>
        public override void WillScroll(global::AppKit.NSBrowser sender) => _willScroll.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSCandidateListTouchBarItemDelegate"/> into Observables.
    /// </summary>
    public partial class NSCandidateListTouchBarItemDelegateRx : global::AppKit.NSCandidateListTouchBarItemDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index)> _beginSelectingCandidate = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, bool isVisible)> _changedCandidateListVisibility = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, bool isVisible)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint previousIndex, global::System.nint index)> _changeSelectionFromCandidate = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint previousIndex, global::System.nint index)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index)> _endSelectingCandidate = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCandidateListTouchBarItemDelegate.BeginSelectingCandidate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index)> BeginSelectingCandidateObs => _beginSelectingCandidate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCandidateListTouchBarItemDelegate.ChangedCandidateListVisibility"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCandidateListTouchBarItem anItem, bool isVisible)> ChangedCandidateListVisibilityObs => _changedCandidateListVisibility;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCandidateListTouchBarItemDelegate.ChangeSelectionFromCandidate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint previousIndex, global::System.nint index)> ChangeSelectionFromCandidateObs => _changeSelectionFromCandidate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCandidateListTouchBarItemDelegate.EndSelectingCandidate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index)> EndSelectingCandidateObs => _endSelectingCandidate;
        /// <inheritdoc/>
        public override void BeginSelectingCandidate(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index) => _beginSelectingCandidate.OnNext((anItem, index));
        /// <inheritdoc/>
        public override void ChangedCandidateListVisibility(global::AppKit.NSCandidateListTouchBarItem anItem, bool isVisible) => _changedCandidateListVisibility.OnNext((anItem, isVisible));
        /// <inheritdoc/>
        public override void ChangeSelectionFromCandidate(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint previousIndex, global::System.nint index) => _changeSelectionFromCandidate.OnNext((anItem, previousIndex, index));
        /// <inheritdoc/>
        public override void EndSelectingCandidate(global::AppKit.NSCandidateListTouchBarItem anItem, global::System.nint index) => _endSelectingCandidate.OnNext((anItem, index));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSCloudSharingServiceDelegate"/> into Observables.
    /// </summary>
    public partial class NSCloudSharingServiceDelegateRx : global::AppKit.NSCloudSharingServiceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error)> _completed = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share)> _saved = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share)> _stopped = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCloudSharingServiceDelegate.Completed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error)> CompletedObs => _completed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCloudSharingServiceDelegate.Saved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share)> SavedObs => _saved;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCloudSharingServiceDelegate.Stopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share)> StoppedObs => _stopped;
        /// <inheritdoc/>
        public override void Completed(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error) => _completed.OnNext((sharingService, items, error));
        /// <inheritdoc/>
        public override void Saved(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share) => _saved.OnNext((sharingService, share));
        /// <inheritdoc/>
        public override void Stopped(global::AppKit.NSSharingService sharingService, global::CloudKit.CKShare share) => _stopped.OnNext((sharingService, share));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSCollectionViewDelegate"/> into Observables.
    /// </summary>
    public partial class NSCollectionViewDelegateRx : global::AppKit.NSCollectionViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath)> _displayingItemEnded = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, string elementKind, global::Foundation.NSIndexPath indexPath)> _displayingSupplementaryViewEnded = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, string elementKind, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession draggingSession, global::CoreGraphics.CGPoint screenPoint, global::AppKit.NSDragOperation dragOperation)> _draggingSessionEnded = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession draggingSession, global::CoreGraphics.CGPoint screenPoint, global::AppKit.NSDragOperation dragOperation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession session, global::CoreGraphics.CGPoint screenPoint, global::Foundation.NSSet indexPaths)> _draggingSessionWillBegin = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession session, global::CoreGraphics.CGPoint screenPoint, global::Foundation.NSSet indexPaths)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths, global::AppKit.NSCollectionViewItemHighlightState highlightState)> _itemsChanged = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths, global::AppKit.NSCollectionViewItemHighlightState highlightState)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths)> _itemsDeselected = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths)> _itemsSelected = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingInfo draggingInfo)> _updateDraggingItemsForDrag = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingInfo draggingInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath)> _willDisplayItem = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)> _willDisplaySupplementaryView = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.DisplayingItemEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath)> DisplayingItemEndedObs => _displayingItemEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.DisplayingSupplementaryViewEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, string elementKind, global::Foundation.NSIndexPath indexPath)> DisplayingSupplementaryViewEndedObs => _displayingSupplementaryViewEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.DraggingSessionEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession draggingSession, global::CoreGraphics.CGPoint screenPoint, global::AppKit.NSDragOperation dragOperation)> DraggingSessionEndedObs => _draggingSessionEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.DraggingSessionWillBegin"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession session, global::CoreGraphics.CGPoint screenPoint, global::Foundation.NSSet indexPaths)> DraggingSessionWillBeginObs => _draggingSessionWillBegin;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.ItemsChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths, global::AppKit.NSCollectionViewItemHighlightState highlightState)> ItemsChangedObs => _itemsChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.ItemsDeselected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths)> ItemsDeselectedObs => _itemsDeselected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.ItemsSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths)> ItemsSelectedObs => _itemsSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.UpdateDraggingItemsForDrag"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingInfo draggingInfo)> UpdateDraggingItemsForDragObs => _updateDraggingItemsForDrag;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.WillDisplayItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath)> WillDisplayItemObs => _willDisplayItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSCollectionViewDelegate.WillDisplaySupplementaryView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)> WillDisplaySupplementaryViewObs => _willDisplaySupplementaryView;
        /// <inheritdoc/>
        public override void DisplayingItemEnded(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath) => _displayingItemEnded.OnNext((collectionView, item, indexPath));
        /// <inheritdoc/>
        public override void DisplayingSupplementaryViewEnded(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, string elementKind, global::Foundation.NSIndexPath indexPath) => _displayingSupplementaryViewEnded.OnNext((collectionView, view, elementKind, indexPath));
        /// <inheritdoc/>
        public override void DraggingSessionEnded(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession draggingSession, global::CoreGraphics.CGPoint screenPoint, global::AppKit.NSDragOperation dragOperation) => _draggingSessionEnded.OnNext((collectionView, draggingSession, screenPoint, dragOperation));
        /// <inheritdoc/>
        public override void DraggingSessionWillBegin(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingSession session, global::CoreGraphics.CGPoint screenPoint, global::Foundation.NSSet indexPaths) => _draggingSessionWillBegin.OnNext((collectionView, session, screenPoint, indexPaths));
        /// <inheritdoc/>
        public override void ItemsChanged(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths, global::AppKit.NSCollectionViewItemHighlightState highlightState) => _itemsChanged.OnNext((collectionView, indexPaths, highlightState));
        /// <inheritdoc/>
        public override void ItemsDeselected(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths) => _itemsDeselected.OnNext((collectionView, indexPaths));
        /// <inheritdoc/>
        public override void ItemsSelected(global::AppKit.NSCollectionView collectionView, global::Foundation.NSSet indexPaths) => _itemsSelected.OnNext((collectionView, indexPaths));
        /// <inheritdoc/>
        public override void UpdateDraggingItemsForDrag(global::AppKit.NSCollectionView collectionView, global::AppKit.NSDraggingInfo draggingInfo) => _updateDraggingItemsForDrag.OnNext((collectionView, draggingInfo));
        /// <inheritdoc/>
        public override void WillDisplayItem(global::AppKit.NSCollectionView collectionView, global::AppKit.NSCollectionViewItem item, global::Foundation.NSIndexPath indexPath) => _willDisplayItem.OnNext((collectionView, item, indexPath));
        /// <inheritdoc/>
        public override void WillDisplaySupplementaryView(global::AppKit.NSCollectionView collectionView, global::AppKit.NSView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath) => _willDisplaySupplementaryView.OnNext((collectionView, view, elementKind, indexPath));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSComboBoxDelegate"/> into Observables.
    /// </summary>
    public partial class NSComboBoxDelegateRx : global::AppKit.NSComboBoxDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _selectionChanged = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _selectionIsChanging = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willDismiss = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willPopUp = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBoxDelegate.SelectionChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> SelectionChangedObs => _selectionChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBoxDelegate.SelectionIsChanging"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> SelectionIsChangingObs => _selectionIsChanging;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBoxDelegate.WillDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillDismissObs => _willDismiss;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSComboBoxDelegate.WillPopUp"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillPopUpObs => _willPopUp;
        /// <inheritdoc/>
        public override void SelectionChanged(global::Foundation.NSNotification notification) => _selectionChanged.OnNext(notification);
        /// <inheritdoc/>
        public override void SelectionIsChanging(global::Foundation.NSNotification notification) => _selectionIsChanging.OnNext(notification);
        /// <inheritdoc/>
        public override void WillDismiss(global::Foundation.NSNotification notification) => _willDismiss.OnNext(notification);
        /// <inheritdoc/>
        public override void WillPopUp(global::Foundation.NSNotification notification) => _willPopUp.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSControlTextEditingDelegate"/> into Observables.
    /// </summary>
    public partial class NSControlTextEditingDelegateRx : global::AppKit.NSControlTextEditingDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _controlTextDidBeginEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _controlTextDidChange = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _controlTextDidEndEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)> _didFailToValidatePartialString = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSControlTextEditingDelegate.ControlTextDidBeginEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ControlTextDidBeginEditingObs => _controlTextDidBeginEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSControlTextEditingDelegate.ControlTextDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ControlTextDidChangeObs => _controlTextDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSControlTextEditingDelegate.ControlTextDidEndEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ControlTextDidEndEditingObs => _controlTextDidEndEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSControlTextEditingDelegate.DidFailToValidatePartialString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSControl control, string str, string error)> DidFailToValidatePartialStringObs => _didFailToValidatePartialString;
        /// <inheritdoc/>
        public override void ControlTextDidBeginEditing(global::Foundation.NSNotification obj) => _controlTextDidBeginEditing.OnNext(obj);
        /// <inheritdoc/>
        public override void ControlTextDidChange(global::Foundation.NSNotification obj) => _controlTextDidChange.OnNext(obj);
        /// <inheritdoc/>
        public override void ControlTextDidEndEditing(global::Foundation.NSNotification obj) => _controlTextDidEndEditing.OnNext(obj);
        /// <inheritdoc/>
        public override void DidFailToValidatePartialString(global::AppKit.NSControl control, string str, string error) => _didFailToValidatePartialString.OnNext((control, str, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSDrawerDelegate"/> into Observables.
    /// </summary>
    public partial class NSDrawerDelegateRx : global::AppKit.NSDrawerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _drawerDidClose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _drawerDidOpen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _drawerWillClose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _drawerWillOpen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawerDelegate.DrawerDidClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DrawerDidCloseObs => _drawerDidClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawerDelegate.DrawerDidOpen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DrawerDidOpenObs => _drawerDidOpen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawerDelegate.DrawerWillClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DrawerWillCloseObs => _drawerWillClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSDrawerDelegate.DrawerWillOpen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DrawerWillOpenObs => _drawerWillOpen;
        /// <inheritdoc/>
        public override void DrawerDidClose(global::Foundation.NSNotification notification) => _drawerDidClose.OnNext(notification);
        /// <inheritdoc/>
        public override void DrawerDidOpen(global::Foundation.NSNotification notification) => _drawerDidOpen.OnNext(notification);
        /// <inheritdoc/>
        public override void DrawerWillClose(global::Foundation.NSNotification notification) => _drawerWillClose.OnNext(notification);
        /// <inheritdoc/>
        public override void DrawerWillOpen(global::Foundation.NSNotification notification) => _drawerWillOpen.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSFilePromiseProviderDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSFilePromiseProviderDelegateRx : global::AppKit.NSFilePromiseProviderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSFilePromiseProvider filePromiseProvider, global::Foundation.NSUrl url, global::System.Action<global::Foundation.NSError> completionHandler)> _writePromiseToUrl = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSFilePromiseProvider filePromiseProvider, global::Foundation.NSUrl url, global::System.Action<global::Foundation.NSError> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSFilePromiseProviderDelegate.WritePromiseToUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSFilePromiseProvider filePromiseProvider, global::Foundation.NSUrl url, global::System.Action<global::Foundation.NSError> completionHandler)> WritePromiseToUrlObs => _writePromiseToUrl;
        /// <inheritdoc/>
        public override void WritePromiseToUrl(global::AppKit.NSFilePromiseProvider filePromiseProvider, global::Foundation.NSUrl url, global::System.Action<global::Foundation.NSError> completionHandler) => _writePromiseToUrl.OnNext((filePromiseProvider, url, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSImageDelegate"/> into Observables.
    /// </summary>
    public partial class NSImageDelegateRx : global::AppKit.NSImageDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::System.nint rows)> _didLoadPartOfRepresentation = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::System.nint rows)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::AppKit.NSImageLoadStatus status)> _didLoadRepresentation = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::AppKit.NSImageLoadStatus status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep)> _didLoadRepresentationHeader = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep)> _willLoadRepresentation = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImageDelegate.DidLoadPartOfRepresentation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::System.nint rows)> DidLoadPartOfRepresentationObs => _didLoadPartOfRepresentation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImageDelegate.DidLoadRepresentation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::AppKit.NSImageLoadStatus status)> DidLoadRepresentationObs => _didLoadRepresentation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImageDelegate.DidLoadRepresentationHeader"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep)> DidLoadRepresentationHeaderObs => _didLoadRepresentationHeader;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSImageDelegate.WillLoadRepresentation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSImage image, global::AppKit.NSImageRep rep)> WillLoadRepresentationObs => _willLoadRepresentation;
        /// <inheritdoc/>
        public override void DidLoadPartOfRepresentation(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::System.nint rows) => _didLoadPartOfRepresentation.OnNext((image, rep, rows));
        /// <inheritdoc/>
        public override void DidLoadRepresentation(global::AppKit.NSImage image, global::AppKit.NSImageRep rep, global::AppKit.NSImageLoadStatus status) => _didLoadRepresentation.OnNext((image, rep, status));
        /// <inheritdoc/>
        public override void DidLoadRepresentationHeader(global::AppKit.NSImage image, global::AppKit.NSImageRep rep) => _didLoadRepresentationHeader.OnNext((image, rep));
        /// <inheritdoc/>
        public override void WillLoadRepresentation(global::AppKit.NSImage image, global::AppKit.NSImageRep rep) => _willLoadRepresentation.OnNext((image, rep));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSLayoutManagerDelegate"/> into Observables.
    /// </summary>
    public partial class NSLayoutManagerDelegateRx : global::AppKit.NSLayoutManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)> _didChangeGeometry = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, bool layoutFinishedFlag)> _layoutCompleted = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, bool layoutFinishedFlag)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSLayoutManager> _layoutInvalidated = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSLayoutManager>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSLayoutManagerDelegate.DidChangeGeometry"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)> DidChangeGeometryObs => _didChangeGeometry;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSLayoutManagerDelegate.LayoutCompleted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, bool layoutFinishedFlag)> LayoutCompletedObs => _layoutCompleted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSLayoutManagerDelegate.LayoutInvalidated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSLayoutManager> LayoutInvalidatedObs => _layoutInvalidated;
        /// <inheritdoc/>
        public override void DidChangeGeometry(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize) => _didChangeGeometry.OnNext((layoutManager, textContainer, oldSize));
        /// <inheritdoc/>
        public override void LayoutCompleted(global::AppKit.NSLayoutManager layoutManager, global::AppKit.NSTextContainer textContainer, bool layoutFinishedFlag) => _layoutCompleted.OnNext((layoutManager, textContainer, layoutFinishedFlag));
        /// <inheritdoc/>
        public override void LayoutInvalidated(global::AppKit.NSLayoutManager sender) => _layoutInvalidated.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSMatrixDelegate"/> into Observables.
    /// </summary>
    public partial class NSMatrixDelegateRx : global::AppKit.NSMatrixDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _controlTextDidBeginEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _controlTextDidChange = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _controlTextDidEndEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)> _didFailToValidatePartialString = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMatrixDelegate.ControlTextDidBeginEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ControlTextDidBeginEditingObs => _controlTextDidBeginEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMatrixDelegate.ControlTextDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ControlTextDidChangeObs => _controlTextDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMatrixDelegate.ControlTextDidEndEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ControlTextDidEndEditingObs => _controlTextDidEndEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMatrixDelegate.DidFailToValidatePartialString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSControl control, string str, string error)> DidFailToValidatePartialStringObs => _didFailToValidatePartialString;
        /// <inheritdoc/>
        public override void ControlTextDidBeginEditing(global::Foundation.NSNotification obj) => _controlTextDidBeginEditing.OnNext(obj);
        /// <inheritdoc/>
        public override void ControlTextDidChange(global::Foundation.NSNotification obj) => _controlTextDidChange.OnNext(obj);
        /// <inheritdoc/>
        public override void ControlTextDidEndEditing(global::Foundation.NSNotification obj) => _controlTextDidEndEditing.OnNext(obj);
        /// <inheritdoc/>
        public override void DidFailToValidatePartialString(global::AppKit.NSControl control, string str, string error) => _didFailToValidatePartialString.OnNext((control, str, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSMenuDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSMenuDelegateRx : global::AppKit.NSMenuDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSMenu> _menuDidClose = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSMenu>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSMenu menu, global::AppKit.NSMenuItem item)> _menuWillHighlightItem = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSMenu menu, global::AppKit.NSMenuItem item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSMenu> _menuWillOpen = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSMenu>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSMenu> _needsUpdate = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSMenu>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMenuDelegate.MenuDidClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSMenu> MenuDidCloseObs => _menuDidClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMenuDelegate.MenuWillHighlightItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSMenu menu, global::AppKit.NSMenuItem item)> MenuWillHighlightItemObs => _menuWillHighlightItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMenuDelegate.MenuWillOpen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSMenu> MenuWillOpenObs => _menuWillOpen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSMenuDelegate.NeedsUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSMenu> NeedsUpdateObs => _needsUpdate;
        /// <inheritdoc/>
        public override void MenuDidClose(global::AppKit.NSMenu menu) => _menuDidClose.OnNext(menu);
        /// <inheritdoc/>
        public override void MenuWillHighlightItem(global::AppKit.NSMenu menu, global::AppKit.NSMenuItem item) => _menuWillHighlightItem.OnNext((menu, item));
        /// <inheritdoc/>
        public override void MenuWillOpen(global::AppKit.NSMenu menu) => _menuWillOpen.OnNext(menu);
        /// <inheritdoc/>
        public override void NeedsUpdate(global::AppKit.NSMenu menu) => _needsUpdate.OnNext(menu);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSOpenSavePanelDelegate"/> into Observables.
    /// </summary>
    public partial class NSOpenSavePanelDelegateRx : global::AppKit.NSOpenSavePanelDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSavePanel panel, global::Foundation.NSUrl newDirectoryUrl)> _didChangeToDirectory = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSavePanel panel, global::Foundation.NSUrl newDirectoryUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSavePanel panel, string path)> _directoryDidChange = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSavePanel panel, string path)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSSavePanel> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSSavePanel>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSavePanel panel, bool expanding)> _willExpand = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSavePanel panel, bool expanding)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOpenSavePanelDelegate.DidChangeToDirectory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSavePanel panel, global::Foundation.NSUrl newDirectoryUrl)> DidChangeToDirectoryObs => _didChangeToDirectory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOpenSavePanelDelegate.DirectoryDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSavePanel panel, string path)> DirectoryDidChangeObs => _directoryDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOpenSavePanelDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSavePanel> SelectionDidChangeObs => _selectionDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOpenSavePanelDelegate.WillExpand"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSavePanel panel, bool expanding)> WillExpandObs => _willExpand;
        /// <inheritdoc/>
        public override void DidChangeToDirectory(global::AppKit.NSSavePanel panel, global::Foundation.NSUrl newDirectoryUrl) => _didChangeToDirectory.OnNext((panel, newDirectoryUrl));
        /// <inheritdoc/>
        public override void DirectoryDidChange(global::AppKit.NSSavePanel panel, string path) => _directoryDidChange.OnNext((panel, path));
        /// <inheritdoc/>
        public override void SelectionDidChange(global::AppKit.NSSavePanel panel) => _selectionDidChange.OnNext(panel);
        /// <inheritdoc/>
        public override void WillExpand(global::AppKit.NSSavePanel panel, bool expanding) => _willExpand.OnNext((panel, expanding));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSOutlineViewDelegate"/> into Observables.
    /// </summary>
    public partial class NSOutlineViewDelegateRx : global::AppKit.NSOutlineViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _columnDidMove = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _columnDidResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row)> _didAddRowView = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)> _didClickTableColumn = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)> _didDragTableColumn = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row)> _didRemoveRowView = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _itemDidCollapse = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _itemDidExpand = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _itemWillCollapse = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _itemWillExpand = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)> _mouseDown = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _selectionIsChanging = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item)> _willDisplayCell = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item)> _willDisplayOutlineCell = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.ColumnDidMove"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ColumnDidMoveObs => _columnDidMove;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.ColumnDidResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ColumnDidResizeObs => _columnDidResize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.DidAddRowView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row)> DidAddRowViewObs => _didAddRowView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.DidClickTableColumn"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)> DidClickTableColumnObs => _didClickTableColumn;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.DidDragTableColumn"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)> DidDragTableColumnObs => _didDragTableColumn;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.DidRemoveRowView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row)> DidRemoveRowViewObs => _didRemoveRowView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.ItemDidCollapse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ItemDidCollapseObs => _itemDidCollapse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.ItemDidExpand"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ItemDidExpandObs => _itemDidExpand;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.ItemWillCollapse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ItemWillCollapseObs => _itemWillCollapse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.ItemWillExpand"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ItemWillExpandObs => _itemWillExpand;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.MouseDown"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn)> MouseDownObs => _mouseDown;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> SelectionDidChangeObs => _selectionDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.SelectionIsChanging"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> SelectionIsChangingObs => _selectionIsChanging;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.WillDisplayCell"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item)> WillDisplayCellObs => _willDisplayCell;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSOutlineViewDelegate.WillDisplayOutlineCell"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item)> WillDisplayOutlineCellObs => _willDisplayOutlineCell;
        /// <inheritdoc/>
        public override void ColumnDidMove(global::Foundation.NSNotification notification) => _columnDidMove.OnNext(notification);
        /// <inheritdoc/>
        public override void ColumnDidResize(global::Foundation.NSNotification notification) => _columnDidResize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidAddRowView(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row) => _didAddRowView.OnNext((outlineView, rowView, row));
        /// <inheritdoc/>
        public override void DidClickTableColumn(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn) => _didClickTableColumn.OnNext((outlineView, tableColumn));
        /// <inheritdoc/>
        public override void DidDragTableColumn(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn) => _didDragTableColumn.OnNext((outlineView, tableColumn));
        /// <inheritdoc/>
        public override void DidRemoveRowView(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableRowView rowView, global::System.nint row) => _didRemoveRowView.OnNext((outlineView, rowView, row));
        /// <inheritdoc/>
        public override void ItemDidCollapse(global::Foundation.NSNotification notification) => _itemDidCollapse.OnNext(notification);
        /// <inheritdoc/>
        public override void ItemDidExpand(global::Foundation.NSNotification notification) => _itemDidExpand.OnNext(notification);
        /// <inheritdoc/>
        public override void ItemWillCollapse(global::Foundation.NSNotification notification) => _itemWillCollapse.OnNext(notification);
        /// <inheritdoc/>
        public override void ItemWillExpand(global::Foundation.NSNotification notification) => _itemWillExpand.OnNext(notification);
        /// <inheritdoc/>
        public override void MouseDown(global::AppKit.NSOutlineView outlineView, global::AppKit.NSTableColumn tableColumn) => _mouseDown.OnNext((outlineView, tableColumn));
        /// <inheritdoc/>
        public override void SelectionDidChange(global::Foundation.NSNotification notification) => _selectionDidChange.OnNext(notification);
        /// <inheritdoc/>
        public override void SelectionIsChanging(global::Foundation.NSNotification notification) => _selectionIsChanging.OnNext(notification);
        /// <inheritdoc/>
        public override void WillDisplayCell(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item) => _willDisplayCell.OnNext((outlineView, cell, tableColumn, item));
        /// <inheritdoc/>
        public override void WillDisplayOutlineCell(global::AppKit.NSOutlineView outlineView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::Foundation.NSObject item) => _willDisplayOutlineCell.OnNext((outlineView, cell, tableColumn, item));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSPageControllerDelegate"/> into Observables.
    /// </summary>
    public partial class NSPageControllerDelegateRx : global::AppKit.NSPageControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSPageController> _didEndLiveTransition = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSPageController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPageController pageController, global::Foundation.NSObject targetObject)> _didTransition = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPageController pageController, global::Foundation.NSObject targetObject)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPageController pageController, global::AppKit.NSViewController viewController, global::Foundation.NSObject targetObject)> _prepareViewController = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPageController pageController, global::AppKit.NSViewController viewController, global::Foundation.NSObject targetObject)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSPageController> _willStartLiveTransition = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSPageController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageControllerDelegate.DidEndLiveTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSPageController> DidEndLiveTransitionObs => _didEndLiveTransition;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageControllerDelegate.DidTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSPageController pageController, global::Foundation.NSObject targetObject)> DidTransitionObs => _didTransition;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageControllerDelegate.PrepareViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSPageController pageController, global::AppKit.NSViewController viewController, global::Foundation.NSObject targetObject)> PrepareViewControllerObs => _prepareViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPageControllerDelegate.WillStartLiveTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSPageController> WillStartLiveTransitionObs => _willStartLiveTransition;
        /// <inheritdoc/>
        public override void DidEndLiveTransition(global::AppKit.NSPageController pageController) => _didEndLiveTransition.OnNext(pageController);
        /// <inheritdoc/>
        public override void DidTransition(global::AppKit.NSPageController pageController, global::Foundation.NSObject targetObject) => _didTransition.OnNext((pageController, targetObject));
        /// <inheritdoc/>
        public override void PrepareViewController(global::AppKit.NSPageController pageController, global::AppKit.NSViewController viewController, global::Foundation.NSObject targetObject) => _prepareViewController.OnNext((pageController, viewController, targetObject));
        /// <inheritdoc/>
        public override void WillStartLiveTransition(global::AppKit.NSPageController pageController) => _willStartLiveTransition.OnNext(pageController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSPathCellDelegate"/> into Observables.
    /// </summary>
    public partial class NSPathCellDelegateRx : global::AppKit.NSPathCellDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathCell pathCell, global::AppKit.NSOpenPanel openPanel)> _willDisplayOpenPanel = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathCell pathCell, global::AppKit.NSOpenPanel openPanel)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathCell pathCell, global::AppKit.NSMenu menu)> _willPopupMenu = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathCell pathCell, global::AppKit.NSMenu menu)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathCellDelegate.WillDisplayOpenPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSPathCell pathCell, global::AppKit.NSOpenPanel openPanel)> WillDisplayOpenPanelObs => _willDisplayOpenPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathCellDelegate.WillPopupMenu"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSPathCell pathCell, global::AppKit.NSMenu menu)> WillPopupMenuObs => _willPopupMenu;
        /// <inheritdoc/>
        public override void WillDisplayOpenPanel(global::AppKit.NSPathCell pathCell, global::AppKit.NSOpenPanel openPanel) => _willDisplayOpenPanel.OnNext((pathCell, openPanel));
        /// <inheritdoc/>
        public override void WillPopupMenu(global::AppKit.NSPathCell pathCell, global::AppKit.NSMenu menu) => _willPopupMenu.OnNext((pathCell, menu));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSPathControlDelegate"/> into Observables.
    /// </summary>
    public partial class NSPathControlDelegateRx : global::AppKit.NSPathControlDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathControl pathControl, global::AppKit.NSOpenPanel openPanel)> _willDisplayOpenPanel = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathControl pathControl, global::AppKit.NSOpenPanel openPanel)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathControl pathControl, global::AppKit.NSMenu menu)> _willPopUpMenu = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSPathControl pathControl, global::AppKit.NSMenu menu)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathControlDelegate.WillDisplayOpenPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSPathControl pathControl, global::AppKit.NSOpenPanel openPanel)> WillDisplayOpenPanelObs => _willDisplayOpenPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPathControlDelegate.WillPopUpMenu"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSPathControl pathControl, global::AppKit.NSMenu menu)> WillPopUpMenuObs => _willPopUpMenu;
        /// <inheritdoc/>
        public override void WillDisplayOpenPanel(global::AppKit.NSPathControl pathControl, global::AppKit.NSOpenPanel openPanel) => _willDisplayOpenPanel.OnNext((pathControl, openPanel));
        /// <inheritdoc/>
        public override void WillPopUpMenu(global::AppKit.NSPathControl pathControl, global::AppKit.NSMenu menu) => _willPopUpMenu.OnNext((pathControl, menu));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSPopoverDelegate"/> into Observables.
    /// </summary>
    public partial class NSPopoverDelegateRx : global::AppKit.NSPopoverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didClose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSPopover> _didDetach = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSPopover>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didShow = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willClose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willShow = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPopoverDelegate.DidClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidCloseObs => _didClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPopoverDelegate.DidDetach"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSPopover> DidDetachObs => _didDetach;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPopoverDelegate.DidShow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidShowObs => _didShow;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPopoverDelegate.WillClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillCloseObs => _willClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSPopoverDelegate.WillShow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillShowObs => _willShow;
        /// <inheritdoc/>
        public override void DidClose(global::Foundation.NSNotification notification) => _didClose.OnNext(notification);
        /// <inheritdoc/>
        public override void DidDetach(global::AppKit.NSPopover popover) => _didDetach.OnNext(popover);
        /// <inheritdoc/>
        public override void DidShow(global::Foundation.NSNotification notification) => _didShow.OnNext(notification);
        /// <inheritdoc/>
        public override void WillClose(global::Foundation.NSNotification notification) => _willClose.OnNext(notification);
        /// <inheritdoc/>
        public override void WillShow(global::Foundation.NSNotification notification) => _willShow.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSRuleEditorDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSRuleEditorDelegateRx : global::AppKit.NSRuleEditorDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _changed = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _editingBegan = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _editingEnded = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _rowsDidChange = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditorDelegate.Changed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ChangedObs => _changed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditorDelegate.EditingBegan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> EditingBeganObs => _editingBegan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditorDelegate.EditingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> EditingEndedObs => _editingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSRuleEditorDelegate.RowsDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> RowsDidChangeObs => _rowsDidChange;
        /// <inheritdoc/>
        public override void Changed(global::Foundation.NSNotification notification) => _changed.OnNext(notification);
        /// <inheritdoc/>
        public override void EditingBegan(global::Foundation.NSNotification notification) => _editingBegan.OnNext(notification);
        /// <inheritdoc/>
        public override void EditingEnded(global::Foundation.NSNotification notification) => _editingEnded.OnNext(notification);
        /// <inheritdoc/>
        public override void RowsDidChange(global::Foundation.NSNotification notification) => _rowsDidChange.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSScrubberDelegate"/> into Observables.
    /// </summary>
    public partial class NSScrubberDelegateRx : global::AppKit.NSScrubberDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber> _didBeginInteracting = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber> _didCancelInteracting = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange)> _didChangeVisible = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber> _didFinishInteracting = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex)> _didHighlightItem = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex)> _didSelectItem = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberDelegate.DidBeginInteracting"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSScrubber> DidBeginInteractingObs => _didBeginInteracting;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberDelegate.DidCancelInteracting"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSScrubber> DidCancelInteractingObs => _didCancelInteracting;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberDelegate.DidChangeVisible"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange)> DidChangeVisibleObs => _didChangeVisible;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberDelegate.DidFinishInteracting"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSScrubber> DidFinishInteractingObs => _didFinishInteracting;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberDelegate.DidHighlightItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex)> DidHighlightItemObs => _didHighlightItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberDelegate.DidSelectItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex)> DidSelectItemObs => _didSelectItem;
        /// <inheritdoc/>
        public override void DidBeginInteracting(global::AppKit.NSScrubber scrubber) => _didBeginInteracting.OnNext(scrubber);
        /// <inheritdoc/>
        public override void DidCancelInteracting(global::AppKit.NSScrubber scrubber) => _didCancelInteracting.OnNext(scrubber);
        /// <inheritdoc/>
        public override void DidChangeVisible(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange) => _didChangeVisible.OnNext((scrubber, visibleRange));
        /// <inheritdoc/>
        public override void DidFinishInteracting(global::AppKit.NSScrubber scrubber) => _didFinishInteracting.OnNext(scrubber);
        /// <inheritdoc/>
        public override void DidHighlightItem(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex) => _didHighlightItem.OnNext((scrubber, highlightedIndex));
        /// <inheritdoc/>
        public override void DidSelectItem(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex) => _didSelectItem.OnNext((scrubber, selectedIndex));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSScrubberFlowLayoutDelegate"/> into Observables.
    /// </summary>
    public partial class NSScrubberFlowLayoutDelegateRx : global::AppKit.NSScrubberFlowLayoutDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber> _didBeginInteracting = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber> _didCancelInteracting = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange)> _didChangeVisible = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber> _didFinishInteracting = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSScrubber>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex)> _didHighlightItem = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex)> _didSelectItem = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberFlowLayoutDelegate.DidBeginInteracting"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSScrubber> DidBeginInteractingObs => _didBeginInteracting;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberFlowLayoutDelegate.DidCancelInteracting"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSScrubber> DidCancelInteractingObs => _didCancelInteracting;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberFlowLayoutDelegate.DidChangeVisible"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange)> DidChangeVisibleObs => _didChangeVisible;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberFlowLayoutDelegate.DidFinishInteracting"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSScrubber> DidFinishInteractingObs => _didFinishInteracting;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberFlowLayoutDelegate.DidHighlightItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex)> DidHighlightItemObs => _didHighlightItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSScrubberFlowLayoutDelegate.DidSelectItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex)> DidSelectItemObs => _didSelectItem;
        /// <inheritdoc/>
        public override void DidBeginInteracting(global::AppKit.NSScrubber scrubber) => _didBeginInteracting.OnNext(scrubber);
        /// <inheritdoc/>
        public override void DidCancelInteracting(global::AppKit.NSScrubber scrubber) => _didCancelInteracting.OnNext(scrubber);
        /// <inheritdoc/>
        public override void DidChangeVisible(global::AppKit.NSScrubber scrubber, global::Foundation.NSRange visibleRange) => _didChangeVisible.OnNext((scrubber, visibleRange));
        /// <inheritdoc/>
        public override void DidFinishInteracting(global::AppKit.NSScrubber scrubber) => _didFinishInteracting.OnNext(scrubber);
        /// <inheritdoc/>
        public override void DidHighlightItem(global::AppKit.NSScrubber scrubber, global::System.nint highlightedIndex) => _didHighlightItem.OnNext((scrubber, highlightedIndex));
        /// <inheritdoc/>
        public override void DidSelectItem(global::AppKit.NSScrubber scrubber, global::System.nint selectedIndex) => _didSelectItem.OnNext((scrubber, selectedIndex));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSearchFieldDelegate"/> into Observables.
    /// </summary>
    public partial class NSSearchFieldDelegateRx : global::AppKit.NSSearchFieldDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _changed = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)> _didFailToValidatePartialString = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _editingBegan = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _editingEnded = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSSearchField> _searchingEnded = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSSearchField>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSSearchField> _searchingStarted = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSSearchField>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchFieldDelegate.Changed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ChangedObs => _changed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchFieldDelegate.DidFailToValidatePartialString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSControl control, string str, string error)> DidFailToValidatePartialStringObs => _didFailToValidatePartialString;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchFieldDelegate.EditingBegan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> EditingBeganObs => _editingBegan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchFieldDelegate.EditingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> EditingEndedObs => _editingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchFieldDelegate.SearchingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSearchField> SearchingEndedObs => _searchingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSearchFieldDelegate.SearchingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSSearchField> SearchingStartedObs => _searchingStarted;
        /// <inheritdoc/>
        public override void Changed(global::Foundation.NSNotification notification) => _changed.OnNext(notification);
        /// <inheritdoc/>
        public override void DidFailToValidatePartialString(global::AppKit.NSControl control, string str, string error) => _didFailToValidatePartialString.OnNext((control, str, error));
        /// <inheritdoc/>
        public override void EditingBegan(global::Foundation.NSNotification notification) => _editingBegan.OnNext(notification);
        /// <inheritdoc/>
        public override void EditingEnded(global::Foundation.NSNotification notification) => _editingEnded.OnNext(notification);
        /// <inheritdoc/>
        public override void SearchingEnded(global::AppKit.NSSearchField sender) => _searchingEnded.OnNext(sender);
        /// <inheritdoc/>
        public override void SearchingStarted(global::AppKit.NSSearchField sender) => _searchingStarted.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSharingServiceDelegate"/> into Observables.
    /// </summary>
    public partial class NSSharingServiceDelegateRx : global::AppKit.NSSharingServiceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error)> _didFailToShareItems = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items)> _didShareItems = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items)> _willShareItems = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingServiceDelegate.DidFailToShareItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error)> DidFailToShareItemsObs => _didFailToShareItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingServiceDelegate.DidShareItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items)> DidShareItemsObs => _didShareItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingServiceDelegate.WillShareItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items)> WillShareItemsObs => _willShareItems;
        /// <inheritdoc/>
        public override void DidFailToShareItems(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items, global::Foundation.NSError error) => _didFailToShareItems.OnNext((sharingService, items, error));
        /// <inheritdoc/>
        public override void DidShareItems(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items) => _didShareItems.OnNext((sharingService, items));
        /// <inheritdoc/>
        public override void WillShareItems(global::AppKit.NSSharingService sharingService, global::Foundation.NSObject[] items) => _willShareItems.OnNext((sharingService, items));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSharingServicePickerDelegate"/> into Observables.
    /// </summary>
    public partial class NSSharingServicePickerDelegateRx : global::AppKit.NSSharingServicePickerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service)> _didChooseSharingService = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingServicePickerDelegate.DidChooseSharingService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service)> DidChooseSharingServiceObs => _didChooseSharingService;
        /// <inheritdoc/>
        public override void DidChooseSharingService(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service) => _didChooseSharingService.OnNext((sharingServicePicker, service));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSharingServicePickerTouchBarItemDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSSharingServicePickerTouchBarItemDelegateRx : global::AppKit.NSSharingServicePickerTouchBarItemDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service)> _didChooseSharingService = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSharingServicePickerTouchBarItemDelegate.DidChooseSharingService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service)> DidChooseSharingServiceObs => _didChooseSharingService;
        /// <inheritdoc/>
        public override void DidChooseSharingService(global::AppKit.NSSharingServicePicker sharingServicePicker, global::AppKit.NSSharingService service) => _didChooseSharingService.OnNext((sharingServicePicker, service));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSoundDelegate"/> into Observables.
    /// </summary>
    public partial class NSSoundDelegateRx : global::AppKit.NSSoundDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSound sound, bool finished)> _didFinishPlaying = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSound sound, bool finished)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSoundDelegate.DidFinishPlaying"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSound sound, bool finished)> DidFinishPlayingObs => _didFinishPlaying;
        /// <inheritdoc/>
        public override void DidFinishPlaying(global::AppKit.NSSound sound, bool finished) => _didFinishPlaying.OnNext((sound, finished));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSpeechRecognizerDelegate"/> into Observables.
    /// </summary>
    public partial class NSSpeechRecognizerDelegateRx : global::AppKit.NSSpeechRecognizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechRecognizer sender, string command)> _didRecognizeCommand = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechRecognizer sender, string command)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSpeechRecognizerDelegate.DidRecognizeCommand"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSpeechRecognizer sender, string command)> DidRecognizeCommandObs => _didRecognizeCommand;
        /// <inheritdoc/>
        public override void DidRecognizeCommand(global::AppKit.NSSpeechRecognizer sender, string command) => _didRecognizeCommand.OnNext((sender, command));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSpeechSynthesizerDelegate"/> into Observables.
    /// </summary>
    public partial class NSSpeechSynthesizerDelegateRx : global::AppKit.NSSpeechSynthesizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, global::System.nuint characterIndex, string theString, string message)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, global::System.nuint characterIndex, string theString, string message)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, string message)> _didEncounterSyncMessage = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, string message)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, bool finishedSpeaking)> _didFinishSpeaking = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, bool finishedSpeaking)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, short phonemeOpcode)> _willSpeakPhoneme = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, short phonemeOpcode)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, global::Foundation.NSRange wordCharacterRange, string ofString)> _willSpeakWord = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSpeechSynthesizer sender, global::Foundation.NSRange wordCharacterRange, string ofString)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSpeechSynthesizerDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSpeechSynthesizer sender, global::System.nuint characterIndex, string theString, string message)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSpeechSynthesizerDelegate.DidEncounterSyncMessage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSpeechSynthesizer sender, string message)> DidEncounterSyncMessageObs => _didEncounterSyncMessage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSpeechSynthesizerDelegate.DidFinishSpeaking"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSpeechSynthesizer sender, bool finishedSpeaking)> DidFinishSpeakingObs => _didFinishSpeaking;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSpeechSynthesizerDelegate.WillSpeakPhoneme"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSpeechSynthesizer sender, short phonemeOpcode)> WillSpeakPhonemeObs => _willSpeakPhoneme;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSpeechSynthesizerDelegate.WillSpeakWord"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSpeechSynthesizer sender, global::Foundation.NSRange wordCharacterRange, string ofString)> WillSpeakWordObs => _willSpeakWord;
        /// <inheritdoc/>
        public override void DidEncounterError(global::AppKit.NSSpeechSynthesizer sender, global::System.nuint characterIndex, string theString, string message) => _didEncounterError.OnNext((sender, characterIndex, theString, message));
        /// <inheritdoc/>
        public override void DidEncounterSyncMessage(global::AppKit.NSSpeechSynthesizer sender, string message) => _didEncounterSyncMessage.OnNext((sender, message));
        /// <inheritdoc/>
        public override void DidFinishSpeaking(global::AppKit.NSSpeechSynthesizer sender, bool finishedSpeaking) => _didFinishSpeaking.OnNext((sender, finishedSpeaking));
        /// <inheritdoc/>
        public override void WillSpeakPhoneme(global::AppKit.NSSpeechSynthesizer sender, short phonemeOpcode) => _willSpeakPhoneme.OnNext((sender, phonemeOpcode));
        /// <inheritdoc/>
        public override void WillSpeakWord(global::AppKit.NSSpeechSynthesizer sender, global::Foundation.NSRange wordCharacterRange, string ofString) => _willSpeakWord.OnNext((sender, wordCharacterRange, ofString));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSSplitViewDelegate"/> into Observables.
    /// </summary>
    public partial class NSSplitViewDelegateRx : global::AppKit.NSSplitViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResizeSubviews = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSplitView splitView, global::CoreGraphics.CGSize oldSize)> _resize = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSSplitView splitView, global::CoreGraphics.CGSize oldSize)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _splitViewWillResizeSubviews = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSplitViewDelegate.DidResizeSubviews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResizeSubviewsObs => _didResizeSubviews;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSplitViewDelegate.Resize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSSplitView splitView, global::CoreGraphics.CGSize oldSize)> ResizeObs => _resize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSSplitViewDelegate.SplitViewWillResizeSubviews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> SplitViewWillResizeSubviewsObs => _splitViewWillResizeSubviews;
        /// <inheritdoc/>
        public override void DidResizeSubviews(global::Foundation.NSNotification notification) => _didResizeSubviews.OnNext(notification);
        /// <inheritdoc/>
        public override void Resize(global::AppKit.NSSplitView splitView, global::CoreGraphics.CGSize oldSize) => _resize.OnNext((splitView, oldSize));
        /// <inheritdoc/>
        public override void SplitViewWillResizeSubviews(global::Foundation.NSNotification notification) => _splitViewWillResizeSubviews.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSStackViewDelegate"/> into Observables.
    /// </summary>
    public partial class NSStackViewDelegateRx : global::AppKit.NSStackViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views)> _didReattachViews = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views)> _willDetachViews = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSStackViewDelegate.DidReattachViews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views)> DidReattachViewsObs => _didReattachViews;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSStackViewDelegate.WillDetachViews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views)> WillDetachViewsObs => _willDetachViews;
        /// <inheritdoc/>
        public override void DidReattachViews(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views) => _didReattachViews.OnNext((stackView, views));
        /// <inheritdoc/>
        public override void WillDetachViews(global::AppKit.NSStackView stackView, global::AppKit.NSView[] views) => _willDetachViews.OnNext((stackView, views));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSTableViewDelegate"/> into Observables.
    /// </summary>
    public partial class NSTableViewDelegateRx : global::AppKit.NSTableViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _columnDidMove = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _columnDidResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row)> _didAddRowView = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)> _didClickTableColumn = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)> _didDragTableColumn = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row)> _didRemoveRowView = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)> _mouseDownInHeaderOfTableColumn = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _selectionIsChanging = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::System.nint row)> _willDisplayCell = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTableView tableView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::System.nint row)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.ColumnDidMove"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ColumnDidMoveObs => _columnDidMove;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.ColumnDidResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ColumnDidResizeObs => _columnDidResize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.DidAddRowView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row)> DidAddRowViewObs => _didAddRowView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.DidClickTableColumn"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)> DidClickTableColumnObs => _didClickTableColumn;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.DidDragTableColumn"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)> DidDragTableColumnObs => _didDragTableColumn;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.DidRemoveRowView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row)> DidRemoveRowViewObs => _didRemoveRowView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.MouseDownInHeaderOfTableColumn"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn)> MouseDownInHeaderOfTableColumnObs => _mouseDownInHeaderOfTableColumn;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> SelectionDidChangeObs => _selectionDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.SelectionIsChanging"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> SelectionIsChangingObs => _selectionIsChanging;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTableViewDelegate.WillDisplayCell"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTableView tableView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::System.nint row)> WillDisplayCellObs => _willDisplayCell;
        /// <inheritdoc/>
        public override void ColumnDidMove(global::Foundation.NSNotification notification) => _columnDidMove.OnNext(notification);
        /// <inheritdoc/>
        public override void ColumnDidResize(global::Foundation.NSNotification notification) => _columnDidResize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidAddRowView(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row) => _didAddRowView.OnNext((tableView, rowView, row));
        /// <inheritdoc/>
        public override void DidClickTableColumn(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn) => _didClickTableColumn.OnNext((tableView, tableColumn));
        /// <inheritdoc/>
        public override void DidDragTableColumn(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn) => _didDragTableColumn.OnNext((tableView, tableColumn));
        /// <inheritdoc/>
        public override void DidRemoveRowView(global::AppKit.NSTableView tableView, global::AppKit.NSTableRowView rowView, global::System.nint row) => _didRemoveRowView.OnNext((tableView, rowView, row));
        /// <inheritdoc/>
        public override void MouseDownInHeaderOfTableColumn(global::AppKit.NSTableView tableView, global::AppKit.NSTableColumn tableColumn) => _mouseDownInHeaderOfTableColumn.OnNext((tableView, tableColumn));
        /// <inheritdoc/>
        public override void SelectionDidChange(global::Foundation.NSNotification notification) => _selectionDidChange.OnNext(notification);
        /// <inheritdoc/>
        public override void SelectionIsChanging(global::Foundation.NSNotification notification) => _selectionIsChanging.OnNext(notification);
        /// <inheritdoc/>
        public override void WillDisplayCell(global::AppKit.NSTableView tableView, global::Foundation.NSObject cell, global::AppKit.NSTableColumn tableColumn, global::System.nint row) => _willDisplayCell.OnNext((tableView, cell, tableColumn, row));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSTabViewDelegate"/> into Observables.
    /// </summary>
    public partial class NSTabViewDelegateRx : global::AppKit.NSTabViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item)> _didSelect = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSTabView> _numberOfItemsChanged = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSTabView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item)> _willSelect = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTabViewDelegate.DidSelect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item)> DidSelectObs => _didSelect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTabViewDelegate.NumberOfItemsChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSTabView> NumberOfItemsChangedObs => _numberOfItemsChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTabViewDelegate.WillSelect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item)> WillSelectObs => _willSelect;
        /// <inheritdoc/>
        public override void DidSelect(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item) => _didSelect.OnNext((tabView, item));
        /// <inheritdoc/>
        public override void NumberOfItemsChanged(global::AppKit.NSTabView tabView) => _numberOfItemsChanged.OnNext(tabView);
        /// <inheritdoc/>
        public override void WillSelect(global::AppKit.NSTabView tabView, global::AppKit.NSTabViewItem item) => _willSelect.OnNext((tabView, item));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSTextDelegate"/> into Observables.
    /// </summary>
    public partial class NSTextDelegateRx : global::AppKit.NSTextDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _textDidBeginEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _textDidChange = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _textDidEndEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextDelegate.TextDidBeginEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> TextDidBeginEditingObs => _textDidBeginEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextDelegate.TextDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> TextDidChangeObs => _textDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextDelegate.TextDidEndEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> TextDidEndEditingObs => _textDidEndEditing;
        /// <inheritdoc/>
        public override void TextDidBeginEditing(global::Foundation.NSNotification notification) => _textDidBeginEditing.OnNext(notification);
        /// <inheritdoc/>
        public override void TextDidChange(global::Foundation.NSNotification notification) => _textDidChange.OnNext(notification);
        /// <inheritdoc/>
        public override void TextDidEndEditing(global::Foundation.NSNotification notification) => _textDidEndEditing.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSTextFieldDelegate"/> into Observables.
    /// </summary>
    public partial class NSTextFieldDelegateRx : global::AppKit.NSTextFieldDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _changed = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)> _didFailToValidatePartialString = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSControl control, string str, string error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _editingBegan = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _editingEnded = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextFieldDelegate.Changed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> ChangedObs => _changed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextFieldDelegate.DidFailToValidatePartialString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSControl control, string str, string error)> DidFailToValidatePartialStringObs => _didFailToValidatePartialString;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextFieldDelegate.EditingBegan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> EditingBeganObs => _editingBegan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextFieldDelegate.EditingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> EditingEndedObs => _editingEnded;
        /// <inheritdoc/>
        public override void Changed(global::Foundation.NSNotification notification) => _changed.OnNext(notification);
        /// <inheritdoc/>
        public override void DidFailToValidatePartialString(global::AppKit.NSControl control, string str, string error) => _didFailToValidatePartialString.OnNext((control, str, error));
        /// <inheritdoc/>
        public override void EditingBegan(global::Foundation.NSNotification notification) => _editingBegan.OnNext(notification);
        /// <inheritdoc/>
        public override void EditingEnded(global::Foundation.NSNotification notification) => _editingEnded.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSTextStorageDelegate"/> into Observables.
    /// </summary>
    public partial class NSTextStorageDelegateRx : global::AppKit.NSTextStorageDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> _didProcessEditing = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _textStorageDidProcessEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _textStorageWillProcessEditing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> _willProcessEditing = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorageDelegate.DidProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> DidProcessEditingObs => _didProcessEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorageDelegate.TextStorageDidProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> TextStorageDidProcessEditingObs => _textStorageDidProcessEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorageDelegate.TextStorageWillProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> TextStorageWillProcessEditingObs => _textStorageWillProcessEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextStorageDelegate.WillProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> WillProcessEditingObs => _willProcessEditing;
        /// <inheritdoc/>
        public override void DidProcessEditing(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta) => _didProcessEditing.OnNext((textStorage, editedMask, editedRange, delta));
        /// <inheritdoc/>
        public override void TextStorageDidProcessEditing(global::Foundation.NSNotification notification) => _textStorageDidProcessEditing.OnNext(notification);
        /// <inheritdoc/>
        public override void TextStorageWillProcessEditing(global::Foundation.NSNotification notification) => _textStorageWillProcessEditing.OnNext(notification);
        /// <inheritdoc/>
        public override void WillProcessEditing(global::AppKit.NSTextStorage textStorage, global::AppKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta) => _willProcessEditing.OnNext((textStorage, editedMask, editedRange, delta));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSTextViewDelegate"/> into Observables.
    /// </summary>
    public partial class NSTextViewDelegateRx : global::AppKit.NSTextViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex)> _cellClicked = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex)> _cellDoubleClicked = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeSelection = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeTypingAttributes = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextView view, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect rect, global::AppKit.NSEvent theevent)> _draggedCell = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSTextView view, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect rect, global::AppKit.NSEvent theevent)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextViewDelegate.CellClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex)> CellClickedObs => _cellClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextViewDelegate.CellDoubleClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex)> CellDoubleClickedObs => _cellDoubleClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextViewDelegate.DidChangeSelection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeSelectionObs => _didChangeSelection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextViewDelegate.DidChangeTypingAttributes"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeTypingAttributesObs => _didChangeTypingAttributes;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSTextViewDelegate.DraggedCell"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSTextView view, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect rect, global::AppKit.NSEvent theevent)> DraggedCellObs => _draggedCell;
        /// <inheritdoc/>
        public override void CellClicked(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex) => _cellClicked.OnNext((textView, cell, cellFrame, charIndex));
        /// <inheritdoc/>
        public override void CellDoubleClicked(global::AppKit.NSTextView textView, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect cellFrame, global::System.nuint charIndex) => _cellDoubleClicked.OnNext((textView, cell, cellFrame, charIndex));
        /// <inheritdoc/>
        public override void DidChangeSelection(global::Foundation.NSNotification notification) => _didChangeSelection.OnNext(notification);
        /// <inheritdoc/>
        public override void DidChangeTypingAttributes(global::Foundation.NSNotification notification) => _didChangeTypingAttributes.OnNext(notification);
        /// <inheritdoc/>
        public override void DraggedCell(global::AppKit.NSTextView view, global::AppKit.NSTextAttachmentCell cell, global::CoreGraphics.CGRect rect, global::AppKit.NSEvent theevent) => _draggedCell.OnNext((view, cell, rect, theevent));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSToolbarDelegate"/> into Observables.
    /// </summary>
    public partial class NSToolbarDelegateRx : global::AppKit.NSToolbarDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didRemoveItem = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willAddItem = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSToolbarDelegate.DidRemoveItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidRemoveItemObs => _didRemoveItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSToolbarDelegate.WillAddItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillAddItemObs => _willAddItem;
        /// <inheritdoc/>
        public override void DidRemoveItem(global::Foundation.NSNotification notification) => _didRemoveItem.OnNext(notification);
        /// <inheritdoc/>
        public override void WillAddItem(global::Foundation.NSNotification notification) => _willAddItem.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AppKit.NSWindowDelegate"/> into Observables.
    /// </summary>
    public partial class NSWindowDelegateRx : global::AppKit.NSWindowDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didBecomeKey = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didBecomeMain = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeBackingProperties = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeScreenProfile = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> _didDecodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didDeminiaturize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEndLiveResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEndSheet = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEnterVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didExitVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didExpose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow> _didFailToEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow> _didFailToExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didMiniaturize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didMove = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResignKey = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResignMain = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didUpdate = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)> _startCustomAnimationToEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)> _startCustomAnimationToExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willBeginSheet = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willClose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> _willEncodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willEnterVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willExitVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willMiniaturize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willMove = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willStartLiveResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidBecomeKey"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidBecomeKeyObs => _didBecomeKey;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidBecomeMain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidBecomeMainObs => _didBecomeMain;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidChangeBackingProperties"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeBackingPropertiesObs => _didChangeBackingProperties;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidChangeScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeScreenObs => _didChangeScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidChangeScreenProfile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeScreenProfileObs => _didChangeScreenProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidDecodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> DidDecodeRestorableStateObs => _didDecodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidDeminiaturize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidDeminiaturizeObs => _didDeminiaturize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidEndLiveResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEndLiveResizeObs => _didEndLiveResize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidEndSheet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEndSheetObs => _didEndSheet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEnterFullScreenObs => _didEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidEnterVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEnterVersionBrowserObs => _didEnterVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidExitFullScreenObs => _didExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidExitVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidExitVersionBrowserObs => _didExitVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidExpose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidExposeObs => _didExpose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidFailToEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindow> DidFailToEnterFullScreenObs => _didFailToEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidFailToExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindow> DidFailToExitFullScreenObs => _didFailToExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidMiniaturize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidMiniaturizeObs => _didMiniaturize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidMove"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidMoveObs => _didMove;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidResignKey"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResignKeyObs => _didResignKey;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidResignMain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResignMainObs => _didResignMain;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResizeObs => _didResize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.DidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidUpdateObs => _didUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.StartCustomAnimationToEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, double duration)> StartCustomAnimationToEnterFullScreenObs => _startCustomAnimationToEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.StartCustomAnimationToExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, double duration)> StartCustomAnimationToExitFullScreenObs => _startCustomAnimationToExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillBeginSheet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillBeginSheetObs => _willBeginSheet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillCloseObs => _willClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillEncodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> WillEncodeRestorableStateObs => _willEncodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillEnterFullScreenObs => _willEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillEnterVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillEnterVersionBrowserObs => _willEnterVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillExitFullScreenObs => _willExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillExitVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillExitVersionBrowserObs => _willExitVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillMiniaturize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillMiniaturizeObs => _willMiniaturize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillMove"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillMoveObs => _willMove;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AppKit.NSWindowDelegate.WillStartLiveResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillStartLiveResizeObs => _willStartLiveResize;
        /// <inheritdoc/>
        public override void DidBecomeKey(global::Foundation.NSNotification notification) => _didBecomeKey.OnNext(notification);
        /// <inheritdoc/>
        public override void DidBecomeMain(global::Foundation.NSNotification notification) => _didBecomeMain.OnNext(notification);
        /// <inheritdoc/>
        public override void DidChangeBackingProperties(global::Foundation.NSNotification notification) => _didChangeBackingProperties.OnNext(notification);
        /// <inheritdoc/>
        public override void DidChangeScreen(global::Foundation.NSNotification notification) => _didChangeScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void DidChangeScreenProfile(global::Foundation.NSNotification notification) => _didChangeScreenProfile.OnNext(notification);
        /// <inheritdoc/>
        public override void DidDecodeRestorableState(global::AppKit.NSWindow window, global::Foundation.NSCoder coder) => _didDecodeRestorableState.OnNext((window, coder));
        /// <inheritdoc/>
        public override void DidDeminiaturize(global::Foundation.NSNotification notification) => _didDeminiaturize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEndLiveResize(global::Foundation.NSNotification notification) => _didEndLiveResize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEndSheet(global::Foundation.NSNotification notification) => _didEndSheet.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEnterFullScreen(global::Foundation.NSNotification notification) => _didEnterFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEnterVersionBrowser(global::Foundation.NSNotification notification) => _didEnterVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void DidExitFullScreen(global::Foundation.NSNotification notification) => _didExitFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void DidExitVersionBrowser(global::Foundation.NSNotification notification) => _didExitVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void DidExpose(global::Foundation.NSNotification notification) => _didExpose.OnNext(notification);
        /// <inheritdoc/>
        public override void DidFailToEnterFullScreen(global::AppKit.NSWindow window) => _didFailToEnterFullScreen.OnNext(window);
        /// <inheritdoc/>
        public override void DidFailToExitFullScreen(global::AppKit.NSWindow window) => _didFailToExitFullScreen.OnNext(window);
        /// <inheritdoc/>
        public override void DidMiniaturize(global::Foundation.NSNotification notification) => _didMiniaturize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidMove(global::Foundation.NSNotification notification) => _didMove.OnNext(notification);
        /// <inheritdoc/>
        public override void DidResignKey(global::Foundation.NSNotification notification) => _didResignKey.OnNext(notification);
        /// <inheritdoc/>
        public override void DidResignMain(global::Foundation.NSNotification notification) => _didResignMain.OnNext(notification);
        /// <inheritdoc/>
        public override void DidResize(global::Foundation.NSNotification notification) => _didResize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidUpdate(global::Foundation.NSNotification notification) => _didUpdate.OnNext(notification);
        /// <inheritdoc/>
        public override void StartCustomAnimationToEnterFullScreen(global::AppKit.NSWindow window, double duration) => _startCustomAnimationToEnterFullScreen.OnNext((window, duration));
        /// <inheritdoc/>
        public override void StartCustomAnimationToExitFullScreen(global::AppKit.NSWindow window, double duration) => _startCustomAnimationToExitFullScreen.OnNext((window, duration));
        /// <inheritdoc/>
        public override void WillBeginSheet(global::Foundation.NSNotification notification) => _willBeginSheet.OnNext(notification);
        /// <inheritdoc/>
        public override void WillClose(global::Foundation.NSNotification notification) => _willClose.OnNext(notification);
        /// <inheritdoc/>
        public override void WillEncodeRestorableState(global::AppKit.NSWindow window, global::Foundation.NSCoder coder) => _willEncodeRestorableState.OnNext((window, coder));
        /// <inheritdoc/>
        public override void WillEnterFullScreen(global::Foundation.NSNotification notification) => _willEnterFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void WillEnterVersionBrowser(global::Foundation.NSNotification notification) => _willEnterVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void WillExitFullScreen(global::Foundation.NSNotification notification) => _willExitFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void WillExitVersionBrowser(global::Foundation.NSNotification notification) => _willExitVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void WillMiniaturize(global::Foundation.NSNotification notification) => _willMiniaturize.OnNext(notification);
        /// <inheritdoc/>
        public override void WillMove(global::Foundation.NSNotification notification) => _willMove.OnNext(notification);
        /// <inheritdoc/>
        public override void WillStartLiveResize(global::Foundation.NSNotification notification) => _willStartLiveResize.OnNext(notification);
    }
}

namespace AVFoundation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAssetResourceLoaderDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVAssetResourceLoaderDelegateRx : global::AVFoundation.AVAssetResourceLoaderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)> _didCancelAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)> _didCancelLoadingRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetResourceLoaderDelegate.DidCancelAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)> DidCancelAuthenticationChallengeObs => _didCancelAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetResourceLoaderDelegate.DidCancelLoadingRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)> DidCancelLoadingRequestObs => _didCancelLoadingRequest;
        /// <inheritdoc/>
        public override void DidCancelAuthenticationChallenge(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge) => _didCancelAuthenticationChallenge.OnNext((resourceLoader, authenticationChallenge));
        /// <inheritdoc/>
        public override void DidCancelLoadingRequest(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest) => _didCancelLoadingRequest.OnNext((resourceLoader, loadingRequest));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioPlayerDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioPlayerDelegateRx : global::AVFoundation.AVAudioPlayerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> _decoderError = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)> _finishedPlaying = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.DecoderError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> DecoderErrorObs => _decoderError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.FinishedPlaying"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, bool flag)> FinishedPlayingObs => _finishedPlaying;
        /// <inheritdoc/>
        public override void DecoderError(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error) => _decoderError.OnNext((player, error));
        /// <inheritdoc/>
        public override void FinishedPlaying(global::AVFoundation.AVAudioPlayer player, bool flag) => _finishedPlaying.OnNext((player, flag));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioRecorderDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioRecorderDelegateRx : global::AVFoundation.AVAudioRecorderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)> _encoderError = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, bool flag)> _finishedRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioRecorder recorder, bool flag)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorderDelegate.EncoderError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error)> EncoderErrorObs => _encoderError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioRecorderDelegate.FinishedRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioRecorder recorder, bool flag)> FinishedRecordingObs => _finishedRecording;
        /// <inheritdoc/>
        public override void EncoderError(global::AVFoundation.AVAudioRecorder recorder, global::Foundation.NSError error) => _encoderError.OnNext((recorder, error));
        /// <inheritdoc/>
        public override void FinishedRecording(global::AVFoundation.AVAudioRecorder recorder, bool flag) => _finishedRecording.OnNext((recorder, flag));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate"/> into Observables.
    /// </summary>
    public partial class AVCaptureAudioDataOutputSampleBufferDelegateRx : global::AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didDropSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didOutputSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidDropSampleBuffer"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("This member only exists for 'AVCaptureVideoDataOutputSampleBufferDelegate'.", false)]
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidDropSampleBufferObs => _didDropSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidOutputSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidOutputSampleBufferObs => _didOutputSampleBuffer;
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("This member only exists for 'AVCaptureVideoDataOutputSampleBufferDelegate'.", false)]
        public override void DidDropSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didDropSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
        /// <inheritdoc/>
        public override void DidOutputSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didOutputSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
    }

    [global::System.ObsoleteAttribute("This API is not available on this platform.", false)]
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureDataOutputSynchronizerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVCaptureDataOutputSynchronizerDelegateRx : global::AVFoundation.AVCaptureDataOutputSynchronizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection)> _didOutputSynchronizedDataCollection = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureDataOutputSynchronizerDelegate.DidOutputSynchronizedDataCollection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection)> DidOutputSynchronizedDataCollectionObs => _didOutputSynchronizedDataCollection;
        /// <inheritdoc/>
        public override void DidOutputSynchronizedDataCollection(global::AVFoundation.AVCaptureDataOutputSynchronizer synchronizer, global::AVFoundation.AVCaptureSynchronizedDataCollection synchronizedDataCollection) => _didOutputSynchronizedDataCollection.OnNext((synchronizer, synchronizedDataCollection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureFileOutputDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVCaptureFileOutputDelegateRx : global::AVFoundation.AVCaptureFileOutputDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didOutputSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputDelegate.DidOutputSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidOutputSampleBufferObs => _didOutputSampleBuffer;
        /// <inheritdoc/>
        public override void DidOutputSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didOutputSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureFileOutputRecordingDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVCaptureFileOutputRecordingDelegateRx : global::AVFoundation.AVCaptureFileOutputRecordingDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections)> _didPauseRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections)> _didResumeRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections)> _didStartRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error)> _finishedRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections, global::Foundation.NSError error)> _willFinishRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputRecordingDelegate.DidPauseRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections)> DidPauseRecordingObs => _didPauseRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputRecordingDelegate.DidResumeRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections)> DidResumeRecordingObs => _didResumeRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputRecordingDelegate.DidStartRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections)> DidStartRecordingObs => _didStartRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputRecordingDelegate.FinishedRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error)> FinishedRecordingObs => _finishedRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureFileOutputRecordingDelegate.WillFinishRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections, global::Foundation.NSError error)> WillFinishRecordingObs => _willFinishRecording;
        /// <inheritdoc/>
        public override void DidPauseRecording(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections) => _didPauseRecording.OnNext((captureOutput, outputFileUrl, connections));
        /// <inheritdoc/>
        public override void DidResumeRecording(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections) => _didResumeRecording.OnNext((captureOutput, outputFileUrl, connections));
        /// <inheritdoc/>
        public override void DidStartRecording(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections) => _didStartRecording.OnNext((captureOutput, outputFileUrl, connections));
        /// <inheritdoc/>
        public override void FinishedRecording(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::Foundation.NSObject[] connections, global::Foundation.NSError error) => _finishedRecording.OnNext((captureOutput, outputFileUrl, connections, error));
        /// <inheritdoc/>
        public override void WillFinishRecording(global::AVFoundation.AVCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileUrl, global::AVFoundation.AVCaptureConnection[] connections, global::Foundation.NSError error) => _willFinishRecording.OnNext((captureOutput, outputFileUrl, connections, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate"/> into Observables.
    /// </summary>
    public partial class AVCaptureVideoDataOutputSampleBufferDelegateRx : global::AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didDropSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> _didOutputSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidDropSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidDropSampleBufferObs => _didDropSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidOutputSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection)> DidOutputSampleBufferObs => _didOutputSampleBuffer;
        /// <inheritdoc/>
        public override void DidDropSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didDropSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
        /// <inheritdoc/>
        public override void DidOutputSampleBuffer(global::AVFoundation.AVCaptureOutput captureOutput, global::CoreMedia.CMSampleBuffer sampleBuffer, global::AVFoundation.AVCaptureConnection connection) => _didOutputSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVContentKeySessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVContentKeySessionDelegateRx : global::AVFoundation.AVContentKeySessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didGenerateExpiredSessionReport = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> _didProvidePersistableContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideRenewingContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didSucceed = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidChangeObs => _didChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidGenerateExpiredSessionReport"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidGenerateExpiredSessionReportObs => _didGenerateExpiredSessionReport;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvideContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideContentKeyRequestObs => _didProvideContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvidePersistableContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> DidProvidePersistableContentKeyRequestObs => _didProvidePersistableContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvideRenewingContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideRenewingContentKeyRequestObs => _didProvideRenewingContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidSucceed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidSucceedObs => _didSucceed;
        /// <inheritdoc/>
        public override void DidChange(global::AVFoundation.AVContentKeySession session) => _didChange.OnNext(session);
        /// <inheritdoc/>
        public override void DidFail(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err) => _didFail.OnNext((session, keyRequest, err));
        /// <inheritdoc/>
        public override void DidGenerateExpiredSessionReport(global::AVFoundation.AVContentKeySession session) => _didGenerateExpiredSessionReport.OnNext(session);
        /// <inheritdoc/>
        public override void DidProvideContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvidePersistableContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest) => _didProvidePersistableContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvideRenewingContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideRenewingContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidSucceed(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didSucceed.OnNext((session, keyRequest));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVPlayerItemMetadataCollectorPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> _didCollectDateRange = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataCollectorPushDelegate.DidCollectDateRange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> DidCollectDateRangeObs => _didCollectDateRange;
        /// <inheritdoc/>
        public override void DidCollectDateRange(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups) => _didCollectDateRange.OnNext((metadataCollector, metadataGroups, indexesOfNewGroups, indexesOfModifiedGroups));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemMetadataOutputPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> _didOutputTimedMetadataGroups = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataOutputPushDelegate.DidOutputTimedMetadataGroups"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> DidOutputTimedMetadataGroupsObs => _didOutputTimedMetadataGroups;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataOutputPushDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void DidOutputTimedMetadataGroups(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track) => _didOutputTimedMetadataGroups.OnNext((output, groups, track));
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPullDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPullDelegateRx : global::AVFoundation.AVPlayerItemOutputPullDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputMediaDataWillChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPullDelegate.OutputMediaDataWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputMediaDataWillChangeObs => _outputMediaDataWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPullDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputMediaDataWillChange(global::AVFoundation.AVPlayerItemOutput sender) => _outputMediaDataWillChange.OnNext(sender);
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPushDelegateRx : global::AVFoundation.AVPlayerItemOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPushDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }
}

namespace AVKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVKit.AVCaptureViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVCaptureViewDelegateRx : global::AVKit.AVCaptureViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVCaptureView captureView, global::AVFoundation.AVCaptureFileOutput fileOutput)> _startRecording = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVCaptureView captureView, global::AVFoundation.AVCaptureFileOutput fileOutput)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVCaptureViewDelegate.StartRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVCaptureView captureView, global::AVFoundation.AVCaptureFileOutput fileOutput)> StartRecordingObs => _startRecording;
        /// <inheritdoc/>
        public override void StartRecording(global::AVKit.AVCaptureView captureView, global::AVFoundation.AVCaptureFileOutput fileOutput) => _startRecording.OnNext((captureView, fileOutput));
    }
}

namespace ContactsUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ContactsUI.CNContactPickerDelegate"/> into Observables.
    /// </summary>
    public partial class CNContactPickerDelegateRx : global::ContactsUI.CNContactPickerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContactProperty contactProperty)> _contactPropertySelected = new Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContactProperty contactProperty)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContact contact)> _contactSelected = new Pharmacist.Common.SingleAwaitSubject<(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ContactsUI.CNContactPicker> _didClose = new Pharmacist.Common.SingleAwaitSubject<global::ContactsUI.CNContactPicker>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ContactsUI.CNContactPicker> _willClose = new Pharmacist.Common.SingleAwaitSubject<global::ContactsUI.CNContactPicker>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.ContactPropertySelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContactProperty contactProperty)> ContactPropertySelectedObs => _contactPropertySelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.ContactSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContact contact)> ContactSelectedObs => _contactSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.DidClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ContactsUI.CNContactPicker> DidCloseObs => _didClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ContactsUI.CNContactPickerDelegate.WillClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ContactsUI.CNContactPicker> WillCloseObs => _willClose;
        /// <inheritdoc/>
        public override void ContactPropertySelected(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContactProperty contactProperty) => _contactPropertySelected.OnNext((picker, contactProperty));
        /// <inheritdoc/>
        public override void ContactSelected(global::ContactsUI.CNContactPicker picker, global::Contacts.CNContact contact) => _contactSelected.OnNext((picker, contact));
        /// <inheritdoc/>
        public override void DidClose(global::ContactsUI.CNContactPicker picker) => _didClose.OnNext(picker);
        /// <inheritdoc/>
        public override void WillClose(global::ContactsUI.CNContactPicker picker) => _willClose.OnNext(picker);
    }
}

namespace CoreAnimation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreAnimation.CAAnimationDelegate"/> into Observables.
    /// </summary>
    public partial class CAAnimationDelegateRx : global::CoreAnimation.CAAnimationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CAAnimation> _animationStarted = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CAAnimation>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CAAnimation anim, bool finished)> _animationStopped = new Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CAAnimation anim, bool finished)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimationDelegate.AnimationStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CAAnimation> AnimationStartedObs => _animationStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimationDelegate.AnimationStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreAnimation.CAAnimation anim, bool finished)> AnimationStoppedObs => _animationStopped;
        /// <inheritdoc/>
        public override void AnimationStarted(global::CoreAnimation.CAAnimation anim) => _animationStarted.OnNext(anim);
        /// <inheritdoc/>
        public override void AnimationStopped(global::CoreAnimation.CAAnimation anim, bool finished) => _animationStopped.OnNext((anim, finished));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreAnimation.CALayerDelegate"/> into Observables.
    /// </summary>
    public partial class CALayerDelegateRx : global::CoreAnimation.CALayerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _displayLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)> _drawLayer = new Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _layoutSublayersOfLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _willDrawLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.DisplayLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> DisplayLayerObs => _displayLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.DrawLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)> DrawLayerObs => _drawLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.LayoutSublayersOfLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> LayoutSublayersOfLayerObs => _layoutSublayersOfLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.WillDrawLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> WillDrawLayerObs => _willDrawLayer;
        /// <inheritdoc/>
        public override void DisplayLayer(global::CoreAnimation.CALayer layer) => _displayLayer.OnNext(layer);
        /// <inheritdoc/>
        public override void DrawLayer(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context) => _drawLayer.OnNext((layer, context));
        /// <inheritdoc/>
        public override void LayoutSublayersOfLayer(global::CoreAnimation.CALayer layer) => _layoutSublayersOfLayer.OnNext(layer);
        /// <inheritdoc/>
        public override void WillDrawLayer(global::CoreAnimation.CALayer layer) => _willDrawLayer.OnNext(layer);
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBCentralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBCentralManagerDelegateRx : global::CoreBluetooth.CBCentralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> _connectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _disconnectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> _discoveredPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _failedToConnectPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> _retrievedConnectedPeripherals = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> _retrievedPeripherals = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager> _updatedState = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.ConnectedPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> ConnectedPeripheralObs => _connectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.DisconnectedPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DisconnectedPeripheralObs => _disconnectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.DiscoveredPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> DiscoveredPeripheralObs => _discoveredPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.FailedToConnectPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> FailedToConnectPeripheralObs => _failedToConnectPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.RetrievedConnectedPeripherals"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> RetrievedConnectedPeripheralsObs => _retrievedConnectedPeripherals;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.RetrievedPeripherals"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals)> RetrievedPeripheralsObs => _retrievedPeripherals;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.UpdatedState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCentralManager> UpdatedStateObs => _updatedState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.WillRestoreState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <inheritdoc/>
        public override void ConnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral) => _connectedPeripheral.OnNext((central, peripheral));
        /// <inheritdoc/>
        public override void DisconnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _disconnectedPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void DiscoveredPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI) => _discoveredPeripheral.OnNext((central, peripheral, advertisementData, RSSI));
        /// <inheritdoc/>
        public override void FailedToConnectPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _failedToConnectPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void RetrievedConnectedPeripherals(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals) => _retrievedConnectedPeripherals.OnNext((central, peripherals));
        /// <inheritdoc/>
        public override void RetrievedPeripherals(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral[] peripherals) => _retrievedPeripherals.OnNext((central, peripherals));
        /// <inheritdoc/>
        public override void UpdatedState(global::CoreBluetooth.CBCentralManager central) => _updatedState.OnNext(central);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((central, dict));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralDelegate"/> into Observables.
    /// </summary>
    public partial class CBPeripheralDelegateRx : global::CoreBluetooth.CBPeripheralDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredCharacteristic = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _discoveredDescriptor = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredIncludedService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _discoveredService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _invalidatedService = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _isReadyToSendWriteWithoutResponse = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> _modifiedServices = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> _rssiRead = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _rssiUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedCharacterteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _updatedName = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedNotificationState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _updatedValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _wroteCharacteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _wroteDescriptorValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DidOpenL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredCharacteristic"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredCharacteristicObs => _discoveredCharacteristic;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredDescriptor"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> DiscoveredDescriptorObs => _discoveredDescriptor;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredIncludedService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredIncludedServiceObs => _discoveredIncludedService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DiscoveredServiceObs => _discoveredService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.InvalidatedService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> InvalidatedServiceObs => _invalidatedService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.IsReadyToSendWriteWithoutResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> IsReadyToSendWriteWithoutResponseObs => _isReadyToSendWriteWithoutResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.ModifiedServices"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> ModifiedServicesObs => _modifiedServices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.RssiRead"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> RssiReadObs => _rssiRead;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.RssiUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> RssiUpdatedObs => _rssiUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedCharacterteristicValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedCharacterteristicValueObs => _updatedCharacterteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> UpdatedNameObs => _updatedName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedNotificationState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedNotificationStateObs => _updatedNotificationState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> UpdatedValueObs => _updatedValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.WroteCharacteristicValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> WroteCharacteristicValueObs => _wroteCharacteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.WroteDescriptorValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> WroteDescriptorValueObs => _wroteDescriptorValue;
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DiscoveredCharacteristic(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredCharacteristic.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredDescriptor(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _discoveredDescriptor.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void DiscoveredIncludedService(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredIncludedService.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredService(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _discoveredService.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void InvalidatedService(global::CoreBluetooth.CBPeripheral peripheral) => _invalidatedService.OnNext(peripheral);
        /// <inheritdoc/>
        public override void IsReadyToSendWriteWithoutResponse(global::CoreBluetooth.CBPeripheral peripheral) => _isReadyToSendWriteWithoutResponse.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ModifiedServices(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services) => _modifiedServices.OnNext((peripheral, services));
        /// <inheritdoc/>
        public override void RssiRead(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error) => _rssiRead.OnNext((peripheral, rssi, error));
        /// <inheritdoc/>
        public override void RssiUpdated(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _rssiUpdated.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void UpdatedCharacterteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedCharacterteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedName(global::CoreBluetooth.CBPeripheral peripheral) => _updatedName.OnNext(peripheral);
        /// <inheritdoc/>
        public override void UpdatedNotificationState(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedNotificationState.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _updatedValue.OnNext((peripheral, descriptor, error));
        /// <inheritdoc/>
        public override void WroteCharacteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _wroteCharacteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void WroteDescriptorValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _wroteDescriptorValue.OnNext((peripheral, descriptor, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBPeripheralManagerDelegateRx : global::CoreBluetooth.CBPeripheralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> _advertisingStarted = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicSubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicUnsubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didPublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didUnpublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> _readRequestReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _readyToUpdateSubscribers = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _serviceAdded = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _stateUpdated = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> _writeRequestsReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.AdvertisingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> AdvertisingStartedObs => _advertisingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicSubscribed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicSubscribedObs => _characteristicSubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicUnsubscribed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicUnsubscribedObs => _characteristicUnsubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidOpenL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidPublishL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidPublishL2CapChannelObs => _didPublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidUnpublishL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidUnpublishL2CapChannelObs => _didUnpublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ReadRequestReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> ReadRequestReceivedObs => _readRequestReceived;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ReadyToUpdateSubscribers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> ReadyToUpdateSubscribersObs => _readyToUpdateSubscribers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ServiceAdded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> ServiceAddedObs => _serviceAdded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.StateUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> StateUpdatedObs => _stateUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.WriteRequestsReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> WriteRequestsReceivedObs => _writeRequestsReceived;
        /// <inheritdoc/>
        public override void AdvertisingStarted(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error) => _advertisingStarted.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void CharacteristicSubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicSubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void CharacteristicUnsubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicUnsubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DidPublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didPublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void DidUnpublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didUnpublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void ReadRequestReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request) => _readRequestReceived.OnNext((peripheral, request));
        /// <inheritdoc/>
        public override void ReadyToUpdateSubscribers(global::CoreBluetooth.CBPeripheralManager peripheral) => _readyToUpdateSubscribers.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ServiceAdded(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _serviceAdded.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void StateUpdated(global::CoreBluetooth.CBPeripheralManager peripheral) => _stateUpdated.OnNext(peripheral);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((peripheral, dict));
        /// <inheritdoc/>
        public override void WriteRequestsReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests) => _writeRequestsReceived.OnNext((peripheral, requests));
    }
}

namespace CoreData
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreData.NSCoreDataCoreSpotlightDelegate"/> into Observables.
    /// </summary>
    public partial class NSCoreDataCoreSpotlightDelegateRx : global::CoreData.NSCoreDataCoreSpotlightDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> _reindexAllSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> _reindexSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSCoreDataCoreSpotlightDelegate.ReindexAllSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> ReindexAllSearchableItemsObs => _reindexAllSearchableItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSCoreDataCoreSpotlightDelegate.ReindexSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> ReindexSearchableItemsObs => _reindexSearchableItems;
        /// <inheritdoc/>
        public override void ReindexAllSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler) => _reindexAllSearchableItems.OnNext((searchableIndex, acknowledgementHandler));
        /// <inheritdoc/>
        public override void ReindexSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler) => _reindexSearchableItems.OnNext((searchableIndex, identifiers, acknowledgementHandler));
    }
}

namespace CoreLocation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreLocation.CLLocationManagerDelegate"/> into Observables.
    /// </summary>
    public partial class CLLocationManagerDelegateRx : global::CoreLocation.CLLocationManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> _authorizationChanged = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> _deferredUpdatesFinished = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region)> _didDetermineState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> _didStartMonitoringForRegion = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> _locationsUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager> _locationUpdatesPaused = new Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager> _locationUpdatesResumed = new Pharmacist.Common.SingleAwaitSubject<global::CoreLocation.CLLocationManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error)> _monitoringFailed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> _regionEntered = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> _regionLeft = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation)> _updatedLocation = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.AuthorizationChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> AuthorizationChangedObs => _authorizationChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DeferredUpdatesFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> DeferredUpdatesFinishedObs => _deferredUpdatesFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DidDetermineState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region)> DidDetermineStateObs => _didDetermineState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.DidStartMonitoringForRegion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> DidStartMonitoringForRegionObs => _didStartMonitoringForRegion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.Failed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.LocationsUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> LocationsUpdatedObs => _locationsUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.LocationUpdatesPaused"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationManager> LocationUpdatesPausedObs => _locationUpdatesPaused;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.LocationUpdatesResumed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationManager> LocationUpdatesResumedObs => _locationUpdatesResumed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.MonitoringFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error)> MonitoringFailedObs => _monitoringFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.RegionEntered"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> RegionEnteredObs => _regionEntered;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.RegionLeft"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region)> RegionLeftObs => _regionLeft;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.UpdatedLocation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation)> UpdatedLocationObs => _updatedLocation;
        /// <inheritdoc/>
        public override void AuthorizationChanged(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status) => _authorizationChanged.OnNext((manager, status));
        /// <inheritdoc/>
        public override void DeferredUpdatesFinished(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error) => _deferredUpdatesFinished.OnNext((manager, error));
        /// <inheritdoc/>
        public override void DidDetermineState(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegionState state, global::CoreLocation.CLRegion region) => _didDetermineState.OnNext((manager, state, region));
        /// <inheritdoc/>
        public override void DidStartMonitoringForRegion(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region) => _didStartMonitoringForRegion.OnNext((manager, region));
        /// <inheritdoc/>
        public override void Failed(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error) => _failed.OnNext((manager, error));
        /// <inheritdoc/>
        public override void LocationsUpdated(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations) => _locationsUpdated.OnNext((manager, locations));
        /// <inheritdoc/>
        public override void LocationUpdatesPaused(global::CoreLocation.CLLocationManager manager) => _locationUpdatesPaused.OnNext(manager);
        /// <inheritdoc/>
        public override void LocationUpdatesResumed(global::CoreLocation.CLLocationManager manager) => _locationUpdatesResumed.OnNext(manager);
        /// <inheritdoc/>
        public override void MonitoringFailed(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region, global::Foundation.NSError error) => _monitoringFailed.OnNext((manager, region, error));
        /// <inheritdoc/>
        public override void RegionEntered(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region) => _regionEntered.OnNext((manager, region));
        /// <inheritdoc/>
        public override void RegionLeft(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLRegion region) => _regionLeft.OnNext((manager, region));
        /// <inheritdoc/>
        public override void UpdatedLocation(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation newLocation, global::CoreLocation.CLLocation oldLocation) => _updatedLocation.OnNext((manager, newLocation, oldLocation));
    }
}

namespace CoreSpotlight
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreSpotlight.CSSearchableIndexDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CSSearchableIndexDelegateRx : global::CoreSpotlight.CSSearchableIndexDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex> _didFinishThrottle = new Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex> _didThrottle = new Pharmacist.Common.SingleAwaitSubject<global::CoreSpotlight.CSSearchableIndex>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> _reindexAllSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> _reindexSearchableItems = new Pharmacist.Common.SingleAwaitSubject<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.DidFinishThrottle"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreSpotlight.CSSearchableIndex> DidFinishThrottleObs => _didFinishThrottle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.DidThrottle"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreSpotlight.CSSearchableIndex> DidThrottleObs => _didThrottle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.ReindexAllSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler)> ReindexAllSearchableItemsObs => _reindexAllSearchableItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreSpotlight.CSSearchableIndexDelegate.ReindexSearchableItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler)> ReindexSearchableItemsObs => _reindexSearchableItems;
        /// <inheritdoc/>
        public override void DidFinishThrottle(global::CoreSpotlight.CSSearchableIndex searchableIndex) => _didFinishThrottle.OnNext(searchableIndex);
        /// <inheritdoc/>
        public override void DidThrottle(global::CoreSpotlight.CSSearchableIndex searchableIndex) => _didThrottle.OnNext(searchableIndex);
        /// <inheritdoc/>
        public override void ReindexAllSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.Action acknowledgementHandler) => _reindexAllSearchableItems.OnNext((searchableIndex, acknowledgementHandler));
        /// <inheritdoc/>
        public override void ReindexSearchableItems(global::CoreSpotlight.CSSearchableIndex searchableIndex, global::System.String[] identifiers, global::System.Action acknowledgementHandler) => _reindexSearchableItems.OnNext((searchableIndex, identifiers, acknowledgementHandler));
    }
}

namespace CoreWlan
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreWlan.CWEventDelegate"/> into Observables.
    /// </summary>
    public partial class CWEventDelegateRx : global::CoreWlan.CWEventDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<string> _bssidDidChangeForWiFi = new Pharmacist.Common.SingleAwaitSubject<string>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _clientConnectionInterrupted = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit> _clientConnectionInvalidated = new Pharmacist.Common.SingleAwaitSubject<global::System.Reactive.Unit>();
        private readonly Pharmacist.Common.SingleAwaitSubject<string> _countryCodeDidChangeForWiFi = new Pharmacist.Common.SingleAwaitSubject<string>();
        private readonly Pharmacist.Common.SingleAwaitSubject<string> _linkDidChangeForWiFi = new Pharmacist.Common.SingleAwaitSubject<string>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(string interfaceName, int rssi, double transmitRate)> _linkQualityDidChangeForWiFi = new Pharmacist.Common.SingleAwaitSubject<(string interfaceName, int rssi, double transmitRate)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<string> _modeDidChangeForWiFi = new Pharmacist.Common.SingleAwaitSubject<string>();
        private readonly Pharmacist.Common.SingleAwaitSubject<string> _powerStateDidChangeForWiFi = new Pharmacist.Common.SingleAwaitSubject<string>();
        private readonly Pharmacist.Common.SingleAwaitSubject<string> _scanCacheUpdatedForWiFi = new Pharmacist.Common.SingleAwaitSubject<string>();
        private readonly Pharmacist.Common.SingleAwaitSubject<string> _ssidDidChangeForWiFi = new Pharmacist.Common.SingleAwaitSubject<string>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.BssidDidChangeForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<string> BssidDidChangeForWiFiObs => _bssidDidChangeForWiFi;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.ClientConnectionInterrupted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> ClientConnectionInterruptedObs => _clientConnectionInterrupted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.ClientConnectionInvalidated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> ClientConnectionInvalidatedObs => _clientConnectionInvalidated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.CountryCodeDidChangeForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<string> CountryCodeDidChangeForWiFiObs => _countryCodeDidChangeForWiFi;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.LinkDidChangeForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<string> LinkDidChangeForWiFiObs => _linkDidChangeForWiFi;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.LinkQualityDidChangeForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(string interfaceName, int rssi, double transmitRate)> LinkQualityDidChangeForWiFiObs => _linkQualityDidChangeForWiFi;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.ModeDidChangeForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<string> ModeDidChangeForWiFiObs => _modeDidChangeForWiFi;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.PowerStateDidChangeForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<string> PowerStateDidChangeForWiFiObs => _powerStateDidChangeForWiFi;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.ScanCacheUpdatedForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<string> ScanCacheUpdatedForWiFiObs => _scanCacheUpdatedForWiFi;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreWlan.CWEventDelegate.SsidDidChangeForWiFi"/> method is invoked.
        /// </summary>
        public global::System.IObservable<string> SsidDidChangeForWiFiObs => _ssidDidChangeForWiFi;
        /// <inheritdoc/>
        public override void BssidDidChangeForWiFi(string interfaceName) => _bssidDidChangeForWiFi.OnNext(interfaceName);
        /// <inheritdoc/>
        public override void ClientConnectionInterrupted() => _clientConnectionInterrupted.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void ClientConnectionInvalidated() => _clientConnectionInvalidated.OnNext(global::System.Reactive.Unit.Default);
        /// <inheritdoc/>
        public override void CountryCodeDidChangeForWiFi(string interfaceName) => _countryCodeDidChangeForWiFi.OnNext(interfaceName);
        /// <inheritdoc/>
        public override void LinkDidChangeForWiFi(string interfaceName) => _linkDidChangeForWiFi.OnNext(interfaceName);
        /// <inheritdoc/>
        public override void LinkQualityDidChangeForWiFi(string interfaceName, int rssi, double transmitRate) => _linkQualityDidChangeForWiFi.OnNext((interfaceName, rssi, transmitRate));
        /// <inheritdoc/>
        public override void ModeDidChangeForWiFi(string interfaceName) => _modeDidChangeForWiFi.OnNext(interfaceName);
        /// <inheritdoc/>
        public override void PowerStateDidChangeForWiFi(string interfaceName) => _powerStateDidChangeForWiFi.OnNext(interfaceName);
        /// <inheritdoc/>
        public override void ScanCacheUpdatedForWiFi(string interfaceName) => _scanCacheUpdatedForWiFi.OnNext(interfaceName);
        /// <inheritdoc/>
        public override void SsidDidChangeForWiFi(string interfaceName) => _ssidDidChangeForWiFi.OnNext(interfaceName);
    }
}

namespace ExternalAccessory
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ExternalAccessory.EAAccessoryDelegate"/> into Observables.
    /// </summary>
    public partial class EAAccessoryDelegateRx : global::ExternalAccessory.EAAccessoryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ExternalAccessory.EAAccessory> _disconnected = new Pharmacist.Common.SingleAwaitSubject<global::ExternalAccessory.EAAccessory>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAAccessoryDelegate.Disconnected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ExternalAccessory.EAAccessory> DisconnectedObs => _disconnected;
        /// <inheritdoc/>
        public override void Disconnected(global::ExternalAccessory.EAAccessory accessory) => _disconnected.OnNext(accessory);
    }
}

namespace Foundation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSCacheDelegate"/> into Observables.
    /// </summary>
    public partial class NSCacheDelegateRx : global::Foundation.NSCacheDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> _willEvictObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSCacheDelegate.WillEvictObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> WillEvictObjectObs => _willEvictObject;
        /// <inheritdoc/>
        public override void WillEvictObject(global::Foundation.NSCache cache, global::Foundation.NSObject obj) => _willEvictObject.OnNext((cache, obj));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedArchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedArchiverDelegateRx : global::Foundation.NSKeyedArchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> _encodedObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.EncodedObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> EncodedObjectObs => _encodedObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.Finishing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.ReplacingObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void EncodedObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj) => _encodedObject.OnNext((archiver, obj));
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedArchiver archiver) => _finished.OnNext(archiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedArchiver archiver) => _finishing.OnNext(archiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((archiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedUnarchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedUnarchiverDelegateRx : global::Foundation.NSKeyedUnarchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.Finishing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.ReplacingObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedUnarchiver unarchiver) => _finished.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedUnarchiver unarchiver) => _finishing.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((unarchiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSMachPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSMachPortDelegateRx : global::Foundation.NSMachPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr> _machMessageReceived = new Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSMachPortDelegate.MachMessageReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.IntPtr> MachMessageReceivedObs => _machMessageReceived;
        /// <inheritdoc/>
        public override void MachMessageReceived(global::System.IntPtr msgHeader) => _machMessageReceived.OnNext(msgHeader);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSNetServiceBrowserDelegate"/> into Observables.
    /// </summary>
    public partial class NSNetServiceBrowserDelegateRx : global::Foundation.NSNetServiceBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> _domainRemoved = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> _foundDomain = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> _foundService = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)> _notSearched = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser> _searchStarted = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser> _searchStopped = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> _serviceRemoved = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.DomainRemoved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> DomainRemovedObs => _domainRemoved;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.FoundDomain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> FoundDomainObs => _foundDomain;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.FoundService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> FoundServiceObs => _foundService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.NotSearched"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)> NotSearchedObs => _notSearched;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.SearchStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceBrowser> SearchStartedObs => _searchStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.SearchStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceBrowser> SearchStoppedObs => _searchStopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.ServiceRemoved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> ServiceRemovedObs => _serviceRemoved;
        /// <inheritdoc/>
        public override void DomainRemoved(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing) => _domainRemoved.OnNext((sender, domain, moreComing));
        /// <inheritdoc/>
        public override void FoundDomain(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing) => _foundDomain.OnNext((sender, domain, moreComing));
        /// <inheritdoc/>
        public override void FoundService(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing) => _foundService.OnNext((sender, service, moreComing));
        /// <inheritdoc/>
        public override void NotSearched(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors) => _notSearched.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void SearchStarted(global::Foundation.NSNetServiceBrowser sender) => _searchStarted.OnNext(sender);
        /// <inheritdoc/>
        public override void SearchStopped(global::Foundation.NSNetServiceBrowser sender) => _searchStopped.OnNext(sender);
        /// <inheritdoc/>
        public override void ServiceRemoved(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing) => _serviceRemoved.OnNext((sender, service, moreComing));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSNetServiceDelegate"/> into Observables.
    /// </summary>
    public partial class NSNetServiceDelegateRx : global::Foundation.NSNetServiceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _addressResolved = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _didAcceptConnection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _published = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> _publishFailure = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> _resolveFailure = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _stopped = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSData data)> _updatedTxtRecordData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _willPublish = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _willResolve = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.AddressResolved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> AddressResolvedObs => _addressResolved;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.DidAcceptConnection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> DidAcceptConnectionObs => _didAcceptConnection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.Published"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> PublishedObs => _published;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.PublishFailure"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> PublishFailureObs => _publishFailure;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.ResolveFailure"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> ResolveFailureObs => _resolveFailure;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.Stopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> StoppedObs => _stopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.UpdatedTxtRecordData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSData data)> UpdatedTxtRecordDataObs => _updatedTxtRecordData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.WillPublish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> WillPublishObs => _willPublish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.WillResolve"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> WillResolveObs => _willResolve;
        /// <inheritdoc/>
        public override void AddressResolved(global::Foundation.NSNetService sender) => _addressResolved.OnNext(sender);
        /// <inheritdoc/>
        public override void DidAcceptConnection(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _didAcceptConnection.OnNext((sender, inputStream, outputStream));
        /// <inheritdoc/>
        public override void Published(global::Foundation.NSNetService sender) => _published.OnNext(sender);
        /// <inheritdoc/>
        public override void PublishFailure(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors) => _publishFailure.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void ResolveFailure(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors) => _resolveFailure.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void Stopped(global::Foundation.NSNetService sender) => _stopped.OnNext(sender);
        /// <inheritdoc/>
        public override void UpdatedTxtRecordData(global::Foundation.NSNetService sender, global::Foundation.NSData data) => _updatedTxtRecordData.OnNext((sender, data));
        /// <inheritdoc/>
        public override void WillPublish(global::Foundation.NSNetService sender) => _willPublish.OnNext(sender);
        /// <inheritdoc/>
        public override void WillResolve(global::Foundation.NSNetService sender) => _willResolve.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSPortDelegateRx : global::Foundation.NSPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage> _messageReceived = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSPortDelegate.MessageReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSPortMessage> MessageReceivedObs => _messageReceived;
        /// <inheritdoc/>
        public override void MessageReceived(global::Foundation.NSPortMessage message) => _messageReceived.OnNext(message);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSStreamDelegateRx : global::Foundation.NSStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> _handleEvent = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSStreamDelegate.HandleEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> HandleEventObs => _handleEvent;
        /// <inheritdoc/>
        public override void HandleEvent(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent) => _handleEvent.OnNext((theStream, streamEvent));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDataDelegateRx : global::Foundation.NSUrlConnectionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection> _finishedLoading = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> _receivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> _sentBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.FinishedLoading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlConnection> FinishedLoadingObs => _finishedLoading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.ReceivedData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> ReceivedDataObs => _receivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.ReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.SentBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> SentBodyDataObs => _sentBodyData;
        /// <inheritdoc/>
        public override void FinishedLoading(global::Foundation.NSUrlConnection connection) => _finishedLoading.OnNext(connection);
        /// <inheritdoc/>
        public override void ReceivedData(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data) => _receivedData.OnNext((connection, data));
        /// <inheritdoc/>
        public override void ReceivedResponse(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response) => _receivedResponse.OnNext((connection, response));
        /// <inheritdoc/>
        public override void SentBodyData(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite) => _sentBodyData.OnNext((connection, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDelegateRx : global::Foundation.NSUrlConnectionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _canceledAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _receivedAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _willSendRequestForAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.CanceledAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> CanceledAuthenticationChallengeObs => _canceledAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.ReceivedAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> ReceivedAuthenticationChallengeObs => _receivedAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.WillSendRequestForAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> WillSendRequestForAuthenticationChallengeObs => _willSendRequestForAuthenticationChallenge;
        /// <inheritdoc/>
        public override void CanceledAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _canceledAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void FailedWithError(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error) => _failedWithError.OnNext((connection, error));
        /// <inheritdoc/>
        public override void ReceivedAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _receivedAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void WillSendRequestForAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _willSendRequestForAuthenticationChallenge.OnNext((connection, challenge));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlConnectionDownloadDelegateRx : global::Foundation.NSUrlConnectionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> _finishedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> _resumedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> _wroteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.FinishedDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> FinishedDownloadingObs => _finishedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.ResumedDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> ResumedDownloadingObs => _resumedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.WroteData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> WroteDataObs => _wroteData;
        /// <inheritdoc/>
        public override void FinishedDownloading(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl) => _finishedDownloading.OnNext((connection, destinationUrl));
        /// <inheritdoc/>
        public override void ResumedDownloading(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes) => _resumedDownloading.OnNext((connection, totalBytesWritten, expectedTotalBytes));
        /// <inheritdoc/>
        public override void WroteData(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes) => _wroteData.OnNext((connection, bytesWritten, totalBytesWritten, expectedTotalBytes));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlDownloadDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlDownloadDelegateRx : global::Foundation.NSUrlDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge)> _canceledAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, string path)> _createdDestination = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, string path)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, string suggestedFilename)> _decideDestination = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, string suggestedFilename)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlDownload> _downloadBegan = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlDownload>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlDownload> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlDownload>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge)> _receivedAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::System.nuint length)> _receivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::System.nuint length)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response, long startingByte)> _resume = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response, long startingByte)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.CanceledAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge)> CanceledAuthenticationChallengeObs => _canceledAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.CreatedDestination"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, string path)> CreatedDestinationObs => _createdDestination;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.DecideDestination"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, string suggestedFilename)> DecideDestinationObs => _decideDestination;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.DownloadBegan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlDownload> DownloadBeganObs => _downloadBegan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlDownload> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.ReceivedAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge)> ReceivedAuthenticationChallengeObs => _receivedAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.ReceivedData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, global::System.nuint length)> ReceivedDataObs => _receivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.ReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlDownloadDelegate.Resume"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response, long startingByte)> ResumeObs => _resume;
        /// <inheritdoc/>
        public override void CanceledAuthenticationChallenge(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge) => _canceledAuthenticationChallenge.OnNext((download, challenge));
        /// <inheritdoc/>
        public override void CreatedDestination(global::Foundation.NSUrlDownload download, string path) => _createdDestination.OnNext((download, path));
        /// <inheritdoc/>
        public override void DecideDestination(global::Foundation.NSUrlDownload download, string suggestedFilename) => _decideDestination.OnNext((download, suggestedFilename));
        /// <inheritdoc/>
        public override void DownloadBegan(global::Foundation.NSUrlDownload download) => _downloadBegan.OnNext(download);
        /// <inheritdoc/>
        public override void FailedWithError(global::Foundation.NSUrlDownload download, global::Foundation.NSError error) => _failedWithError.OnNext((download, error));
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSUrlDownload download) => _finished.OnNext(download);
        /// <inheritdoc/>
        public override void ReceivedAuthenticationChallenge(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlAuthenticationChallenge challenge) => _receivedAuthenticationChallenge.OnNext((download, challenge));
        /// <inheritdoc/>
        public override void ReceivedData(global::Foundation.NSUrlDownload download, global::System.nuint length) => _receivedData.OnNext((download, length));
        /// <inheritdoc/>
        public override void ReceivedResponse(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response) => _receivedResponse.OnNext((download, response));
        /// <inheritdoc/>
        public override void Resume(global::Foundation.NSUrlDownload download, global::Foundation.NSUrlResponse response, long startingByte) => _resume.OnNext((download, response, startingByte));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDataDelegateRx : global::Foundation.NSUrlSessionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> _didBecomeDownloadTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> _didBecomeStreamTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> _didReceiveData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> _didReceiveResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> _willCacheResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidBecomeDownloadTask"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> DidBecomeDownloadTaskObs => _didBecomeDownloadTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidBecomeStreamTask"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> DidBecomeStreamTaskObs => _didBecomeStreamTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidReceiveData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> DidReceiveDataObs => _didReceiveData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidReceiveResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> DidReceiveResponseObs => _didReceiveResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.WillCacheResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> WillCacheResponseObs => _willCacheResponse;
        /// <inheritdoc/>
        public override void DidBecomeDownloadTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask) => _didBecomeDownloadTask.OnNext((session, dataTask, downloadTask));
        /// <inheritdoc/>
        public override void DidBecomeStreamTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask) => _didBecomeStreamTask.OnNext((session, dataTask, streamTask));
        /// <inheritdoc/>
        public override void DidReceiveData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data) => _didReceiveData.OnNext((session, dataTask, data));
        /// <inheritdoc/>
        public override void DidReceiveResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler) => _didReceiveResponse.OnNext((session, dataTask, response, completionHandler));
        /// <inheritdoc/>
        public override void WillCacheResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler) => _willCacheResponse.OnNext((session, dataTask, proposedResponse, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDelegateRx : global::Foundation.NSUrlSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> _didBecomeInvalid = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession> _didFinishEventsForBackgroundSession = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidBecomeInvalid"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> DidBecomeInvalidObs => _didBecomeInvalid;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidFinishEventsForBackgroundSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlSession> DidFinishEventsForBackgroundSessionObs => _didFinishEventsForBackgroundSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <inheritdoc/>
        public override void DidBecomeInvalid(global::Foundation.NSUrlSession session, global::Foundation.NSError error) => _didBecomeInvalid.OnNext((session, error));
        /// <inheritdoc/>
        public override void DidFinishEventsForBackgroundSession(global::Foundation.NSUrlSession session) => _didFinishEventsForBackgroundSession.OnNext(session);
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, challenge, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlSessionDownloadDelegateRx : global::Foundation.NSUrlSessionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> _didFinishDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> _didResume = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> _didWriteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidFinishDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> DidFinishDownloadingObs => _didFinishDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidResume"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> DidResumeObs => _didResume;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidWriteData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> DidWriteDataObs => _didWriteData;
        /// <inheritdoc/>
        public override void DidFinishDownloading(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location) => _didFinishDownloading.OnNext((session, downloadTask, location));
        /// <inheritdoc/>
        public override void DidResume(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes) => _didResume.OnNext((session, downloadTask, resumeFileOffset, expectedTotalBytes));
        /// <inheritdoc/>
        public override void DidWriteData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite) => _didWriteData.OnNext((session, downloadTask, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionStreamDelegateRx : global::Foundation.NSUrlSessionStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _betterRouteDiscovered = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _completedTaskCaptureStreams = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _readClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _writeClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.BetterRouteDiscovered"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> BetterRouteDiscoveredObs => _betterRouteDiscovered;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.CompletedTaskCaptureStreams"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> CompletedTaskCaptureStreamsObs => _completedTaskCaptureStreams;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.ReadClosed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> ReadClosedObs => _readClosed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.WriteClosed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> WriteClosedObs => _writeClosed;
        /// <inheritdoc/>
        public override void BetterRouteDiscovered(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _betterRouteDiscovered.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void CompletedTaskCaptureStreams(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _completedTaskCaptureStreams.OnNext((session, streamTask, inputStream, outputStream));
        /// <inheritdoc/>
        public override void ReadClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _readClosed.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void WriteClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _writeClosed.OnNext((session, streamTask));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionTaskDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionTaskDelegateRx : global::Foundation.NSUrlSessionTaskDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> _didCompleteWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> _didFinishCollectingMetrics = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> _didSendBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> _needNewBodyStream = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> _taskIsWaitingForConnectivity = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> _willBeginDelayedRequest = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> _willPerformHttpRedirection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidCompleteWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> DidCompleteWithErrorObs => _didCompleteWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidFinishCollectingMetrics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> DidFinishCollectingMetricsObs => _didFinishCollectingMetrics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidSendBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> DidSendBodyDataObs => _didSendBodyData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.NeedNewBodyStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> NeedNewBodyStreamObs => _needNewBodyStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.TaskIsWaitingForConnectivity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> TaskIsWaitingForConnectivityObs => _taskIsWaitingForConnectivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.WillBeginDelayedRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> WillBeginDelayedRequestObs => _willBeginDelayedRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.WillPerformHttpRedirection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> WillPerformHttpRedirectionObs => _willPerformHttpRedirection;
        /// <inheritdoc/>
        public override void DidCompleteWithError(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error) => _didCompleteWithError.OnNext((session, task, error));
        /// <inheritdoc/>
        public override void DidFinishCollectingMetrics(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics) => _didFinishCollectingMetrics.OnNext((session, task, metrics));
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, task, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidSendBodyData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend) => _didSendBodyData.OnNext((session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend));
        /// <inheritdoc/>
        public override void NeedNewBodyStream(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler) => _needNewBodyStream.OnNext((session, task, completionHandler));
        /// <inheritdoc/>
        public override void TaskIsWaitingForConnectivity(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task) => _taskIsWaitingForConnectivity.OnNext((session, task));
        /// <inheritdoc/>
        public override void WillBeginDelayedRequest(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler) => _willBeginDelayedRequest.OnNext((session, task, request, completionHandler));
        /// <inheritdoc/>
        public override void WillPerformHttpRedirection(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler) => _willPerformHttpRedirection.OnNext((session, task, response, newRequest, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUserActivityDelegate"/> into Observables.
    /// </summary>
    public partial class NSUserActivityDelegateRx : global::Foundation.NSUserActivityDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _userActivityReceivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWasContinued = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWillSave = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityReceivedData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> UserActivityReceivedDataObs => _userActivityReceivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityWasContinued"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWasContinuedObs => _userActivityWasContinued;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityWillSave"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWillSaveObs => _userActivityWillSave;
        /// <inheritdoc/>
        public override void UserActivityReceivedData(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _userActivityReceivedData.OnNext((userActivity, inputStream, outputStream));
        /// <inheritdoc/>
        public override void UserActivityWasContinued(global::Foundation.NSUserActivity userActivity) => _userActivityWasContinued.OnNext(userActivity);
        /// <inheritdoc/>
        public override void UserActivityWillSave(global::Foundation.NSUserActivity userActivity) => _userActivityWillSave.OnNext(userActivity);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUserNotificationCenterDelegate"/> into Observables.
    /// </summary>
    public partial class NSUserNotificationCenterDelegateRx : global::Foundation.NSUserNotificationCenterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification)> _didActivateNotification = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification)> _didDeliverNotification = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserNotificationCenterDelegate.DidActivateNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification)> DidActivateNotificationObs => _didActivateNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserNotificationCenterDelegate.DidDeliverNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification)> DidDeliverNotificationObs => _didDeliverNotification;
        /// <inheritdoc/>
        public override void DidActivateNotification(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification) => _didActivateNotification.OnNext((center, notification));
        /// <inheritdoc/>
        public override void DidDeliverNotification(global::Foundation.NSUserNotificationCenter center, global::Foundation.NSUserNotification notification) => _didDeliverNotification.OnNext((center, notification));
    }
}

namespace GameKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKAchievementViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKAchievementViewControllerDelegateRx : global::GameKit.GKAchievementViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKAchievementViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKAchievementViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKAchievementViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKAchievementViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKAchievementViewController viewController) => _didFinish.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKChallengeEventHandlerDelegate"/> into Observables.
    /// </summary>
    public partial class GKChallengeEventHandlerDelegateRx : global::GameKit.GKChallengeEventHandlerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _localPlayerCompletedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _localPlayerReceivedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _localPlayerSelectedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge> _remotePlayerCompletedChallenge = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallenge>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.LocalPlayerCompletedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> LocalPlayerCompletedChallengeObs => _localPlayerCompletedChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.LocalPlayerReceivedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> LocalPlayerReceivedChallengeObs => _localPlayerReceivedChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.LocalPlayerSelectedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> LocalPlayerSelectedChallengeObs => _localPlayerSelectedChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengeEventHandlerDelegate.RemotePlayerCompletedChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallenge> RemotePlayerCompletedChallengeObs => _remotePlayerCompletedChallenge;
        /// <inheritdoc/>
        public override void LocalPlayerCompletedChallenge(global::GameKit.GKChallenge challenge) => _localPlayerCompletedChallenge.OnNext(challenge);
        /// <inheritdoc/>
        public override void LocalPlayerReceivedChallenge(global::GameKit.GKChallenge challenge) => _localPlayerReceivedChallenge.OnNext(challenge);
        /// <inheritdoc/>
        public override void LocalPlayerSelectedChallenge(global::GameKit.GKChallenge challenge) => _localPlayerSelectedChallenge.OnNext(challenge);
        /// <inheritdoc/>
        public override void RemotePlayerCompletedChallenge(global::GameKit.GKChallenge challenge) => _remotePlayerCompletedChallenge.OnNext(challenge);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKChallengesViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKChallengesViewControllerDelegateRx : global::GameKit.GKChallengesViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallengesViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKChallengesViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKChallengesViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKChallengesViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKChallengesViewController viewController) => _didFinish.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKFriendRequestComposeViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKFriendRequestComposeViewControllerDelegateRx : global::GameKit.GKFriendRequestComposeViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKFriendRequestComposeViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKFriendRequestComposeViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKFriendRequestComposeViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKFriendRequestComposeViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKFriendRequestComposeViewController viewController) => _didFinish.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKGameCenterControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKGameCenterControllerDelegateRx : global::GameKit.GKGameCenterControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKGameCenterViewController> _finished = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKGameCenterViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKGameCenterControllerDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKGameCenterViewController> FinishedObs => _finished;
        /// <inheritdoc/>
        public override void Finished(global::GameKit.GKGameCenterViewController controller) => _finished.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKLeaderboardViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKLeaderboardViewControllerDelegateRx : global::GameKit.GKLeaderboardViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKLeaderboardViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKLeaderboardViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKLeaderboardViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKLeaderboardViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKLeaderboardViewController viewController) => _didFinish.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKMatchDelegate"/> into Observables.
    /// </summary>
    public partial class GKMatchDelegateRx : global::GameKit.GKMatchDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, string playerId, global::Foundation.NSError error)> _connectionFailed = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, string playerId, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId)> _dataReceived = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)> _dataReceivedForRecipient = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)> _dataReceivedFromPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state)> _stateChanged = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)> _stateChangedForPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.ConnectionFailed"/> method is invoked.
        /// </summary>
        [global::System.ObsoleteAttribute("It will never be called.", false)]
        public global::System.IObservable<(global::GameKit.GKMatch match, string playerId, global::Foundation.NSError error)> ConnectionFailedObs => _connectionFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId)> DataReceivedObs => _dataReceived;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceivedForRecipient"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)> DataReceivedForRecipientObs => _dataReceivedForRecipient;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceivedFromPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)> DataReceivedFromPlayerObs => _dataReceivedFromPlayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.Failed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.StateChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state)> StateChangedObs => _stateChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.StateChangedForPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)> StateChangedForPlayerObs => _stateChangedForPlayer;
        /// <inheritdoc/>
        [global::System.ObsoleteAttribute("It will never be called.", false)]
        public override void ConnectionFailed(global::GameKit.GKMatch match, string playerId, global::Foundation.NSError error) => _connectionFailed.OnNext((match, playerId, error));
        /// <inheritdoc/>
        public override void DataReceived(global::GameKit.GKMatch match, global::Foundation.NSData data, string playerId) => _dataReceived.OnNext((match, data, playerId));
        /// <inheritdoc/>
        public override void DataReceivedForRecipient(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player) => _dataReceivedForRecipient.OnNext((match, data, recipient, player));
        /// <inheritdoc/>
        public override void DataReceivedFromPlayer(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player) => _dataReceivedFromPlayer.OnNext((match, data, player));
        /// <inheritdoc/>
        public override void Failed(global::GameKit.GKMatch match, global::Foundation.NSError error) => _failed.OnNext((match, error));
        /// <inheritdoc/>
        public override void StateChanged(global::GameKit.GKMatch match, string playerId, global::GameKit.GKPlayerConnectionState state) => _stateChanged.OnNext((match, playerId, state));
        /// <inheritdoc/>
        public override void StateChangedForPlayer(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state) => _stateChangedForPlayer.OnNext((match, player, state));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKMatchmakerViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKMatchmakerViewControllerDelegateRx : global::GameKit.GKMatchmakerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)> _didFailWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)> _didFindHostedPlayers = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)> _didFindMatch = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs)> _didFindPlayers = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)> _hostedPlayerDidAccept = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, string playerID)> _receivedAcceptFromHostedPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, string playerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKMatchmakerViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKMatchmakerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFailWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)> DidFailWithErrorObs => _didFailWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindHostedPlayers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)> DidFindHostedPlayersObs => _didFindHostedPlayers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)> DidFindMatchObs => _didFindMatch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindPlayers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs)> DidFindPlayersObs => _didFindPlayers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.HostedPlayerDidAccept"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)> HostedPlayerDidAcceptObs => _hostedPlayerDidAccept;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.ReceivedAcceptFromHostedPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, string playerID)> ReceivedAcceptFromHostedPlayerObs => _receivedAcceptFromHostedPlayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakerViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidFailWithError(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error) => _didFailWithError.OnNext((viewController, error));
        /// <inheritdoc/>
        public override void DidFindHostedPlayers(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs) => _didFindHostedPlayers.OnNext((viewController, playerIDs));
        /// <inheritdoc/>
        public override void DidFindMatch(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match) => _didFindMatch.OnNext((viewController, match));
        /// <inheritdoc/>
        public override void DidFindPlayers(global::GameKit.GKMatchmakerViewController viewController, global::System.String[] playerIDs) => _didFindPlayers.OnNext((viewController, playerIDs));
        /// <inheritdoc/>
        public override void HostedPlayerDidAccept(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID) => _hostedPlayerDidAccept.OnNext((viewController, playerID));
        /// <inheritdoc/>
        public override void ReceivedAcceptFromHostedPlayer(global::GameKit.GKMatchmakerViewController viewController, string playerID) => _receivedAcceptFromHostedPlayer.OnNext((viewController, playerID));
        /// <inheritdoc/>
        public override void WasCancelled(global::GameKit.GKMatchmakerViewController viewController) => _wasCancelled.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKSessionDelegate"/> into Observables.
    /// </summary>
    public partial class GKSessionDelegateRx : global::GameKit.GKSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state)> _peerChangedState = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error)> _peerConnectionFailed = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID)> _peerConnectionRequest = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKSession session, string peerID)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.PeerChangedState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state)> PeerChangedStateObs => _peerChangedState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.PeerConnectionFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error)> PeerConnectionFailedObs => _peerConnectionFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKSessionDelegate.PeerConnectionRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKSession session, string peerID)> PeerConnectionRequestObs => _peerConnectionRequest;
        /// <inheritdoc/>
        public override void FailedWithError(global::GameKit.GKSession session, global::Foundation.NSError error) => _failedWithError.OnNext((session, error));
        /// <inheritdoc/>
        public override void PeerChangedState(global::GameKit.GKSession session, string peerID, global::GameKit.GKPeerConnectionState state) => _peerChangedState.OnNext((session, peerID, state));
        /// <inheritdoc/>
        public override void PeerConnectionFailed(global::GameKit.GKSession session, string peerID, global::Foundation.NSError error) => _peerConnectionFailed.OnNext((session, peerID, error));
        /// <inheritdoc/>
        public override void PeerConnectionRequest(global::GameKit.GKSession session, string peerID) => _peerConnectionRequest.OnNext((session, peerID));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKTurnBasedEventHandlerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKTurnBasedEventHandlerDelegateRx : global::GameKit.GKTurnBasedEventHandlerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSString[]> _handleInviteFromGameCenter = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSString[]>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch> _handleMatchEnded = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatch match, bool activated)> _handleTurnEvent = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatch match, bool activated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch> _handleTurnEventForMatch = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatch>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleInviteFromGameCenter"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSString[]> HandleInviteFromGameCenterObs => _handleInviteFromGameCenter;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleMatchEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatch> HandleMatchEndedObs => _handleMatchEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatch match, bool activated)> HandleTurnEventObs => _handleTurnEvent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEventForMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatch> HandleTurnEventForMatchObs => _handleTurnEventForMatch;
        /// <inheritdoc/>
        public override void HandleInviteFromGameCenter(global::Foundation.NSString[] playersToInvite) => _handleInviteFromGameCenter.OnNext(playersToInvite);
        /// <inheritdoc/>
        public override void HandleMatchEnded(global::GameKit.GKTurnBasedMatch match) => _handleMatchEnded.OnNext(match);
        /// <inheritdoc/>
        public override void HandleTurnEvent(global::GameKit.GKTurnBasedMatch match, bool activated) => _handleTurnEvent.OnNext((match, activated));
        /// <inheritdoc/>
        public override void HandleTurnEventForMatch(global::GameKit.GKTurnBasedMatch match) => _handleTurnEventForMatch.OnNext(match);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKTurnBasedMatchmakerViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKTurnBasedMatchmakerViewControllerDelegateRx : global::GameKit.GKTurnBasedMatchmakerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> _foundMatch = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> _playerQuitForMatch = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatchmakerViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatchmakerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FoundMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> FoundMatchObs => _foundMatch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.PlayerQuitForMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match)> PlayerQuitForMatchObs => _playerQuitForMatch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatchmakerViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void FailedWithError(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error) => _failedWithError.OnNext((viewController, error));
        /// <inheritdoc/>
        public override void FoundMatch(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match) => _foundMatch.OnNext((viewController, match));
        /// <inheritdoc/>
        public override void PlayerQuitForMatch(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::GameKit.GKTurnBasedMatch match) => _playerQuitForMatch.OnNext((viewController, match));
        /// <inheritdoc/>
        public override void WasCancelled(global::GameKit.GKTurnBasedMatchmakerViewController viewController) => _wasCancelled.OnNext(viewController);
    }
}

namespace GameplayKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameplayKit.GKAgentDelegate"/> into Observables.
    /// </summary>
    public partial class GKAgentDelegateRx : global::GameplayKit.GKAgentDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent> _agentDidUpdate = new Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent> _agentWillUpdate = new Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameplayKit.GKAgentDelegate.AgentDidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameplayKit.GKAgent> AgentDidUpdateObs => _agentDidUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameplayKit.GKAgentDelegate.AgentWillUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameplayKit.GKAgent> AgentWillUpdateObs => _agentWillUpdate;
        /// <inheritdoc/>
        public override void AgentDidUpdate(global::GameplayKit.GKAgent agent) => _agentDidUpdate.OnNext(agent);
        /// <inheritdoc/>
        public override void AgentWillUpdate(global::GameplayKit.GKAgent agent) => _agentWillUpdate.OnNext(agent);
    }
}

namespace ImageCaptureCore
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageCaptureCore.ICCameraDeviceDelegate"/> into Observables.
    /// </summary>
    public abstract partial class ICCameraDeviceDelegateRx : global::ImageCaptureCore.ICCameraDeviceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item)> _didAddItem = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)> _didAddItems = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didBecomeReady = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didBecomeReadyWithCompleteContentCatalog = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICCameraDevice> _didChangeCapability = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICCameraDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didChangeName = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didChangeSharingState = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didCloseSession = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice scanner, global::Foundation.NSError error)> _didCompleteDeleteFiles = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice scanner, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didOpenSession = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)> _didReceiveButtonPress = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)> _didReceiveCustomNotification = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem)> _didReceiveMetadata = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::Foundation.NSData eventData)> _didReceivePtpEvent = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::Foundation.NSData eventData)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)> _didReceiveStatusInformation = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem)> _didReceiveThumbnail = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didRemoveDevice = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item)> _didRemoveItem = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)> _didRemoveItems = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)> _didRenameItems = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidAddItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item)> DidAddItemObs => _didAddItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidAddItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)> DidAddItemsObs => _didAddItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidBecomeReady"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidBecomeReadyObs => _didBecomeReady;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidBecomeReadyWithCompleteContentCatalog"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidBecomeReadyWithCompleteContentCatalogObs => _didBecomeReadyWithCompleteContentCatalog;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidChangeCapability"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICCameraDevice> DidChangeCapabilityObs => _didChangeCapability;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidChangeName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidChangeNameObs => _didChangeName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidChangeSharingState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidChangeSharingStateObs => _didChangeSharingState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidCloseSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidCloseSessionObs => _didCloseSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidCompleteDeleteFiles"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice scanner, global::Foundation.NSError error)> DidCompleteDeleteFilesObs => _didCompleteDeleteFiles;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidOpenSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidOpenSessionObs => _didOpenSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveButtonPress"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)> DidReceiveButtonPressObs => _didReceiveButtonPress;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveCustomNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)> DidReceiveCustomNotificationObs => _didReceiveCustomNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveMetadata"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem)> DidReceiveMetadataObs => _didReceiveMetadata;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidReceivePtpEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::Foundation.NSData eventData)> DidReceivePtpEventObs => _didReceivePtpEvent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveStatusInformation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)> DidReceiveStatusInformationObs => _didReceiveStatusInformation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveThumbnail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem)> DidReceiveThumbnailObs => _didReceiveThumbnail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidRemoveDevice"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidRemoveDeviceObs => _didRemoveDevice;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidRemoveItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item)> DidRemoveItemObs => _didRemoveItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidRemoveItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)> DidRemoveItemsObs => _didRemoveItems;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDelegate.DidRenameItems"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items)> DidRenameItemsObs => _didRenameItems;
        /// <inheritdoc/>
        public override void DidAddItem(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item) => _didAddItem.OnNext((camera, item));
        /// <inheritdoc/>
        public override void DidAddItems(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items) => _didAddItems.OnNext((camera, items));
        /// <inheritdoc/>
        public override void DidBecomeReady(global::ImageCaptureCore.ICDevice device) => _didBecomeReady.OnNext(device);
        /// <inheritdoc/>
        public override void DidBecomeReadyWithCompleteContentCatalog(global::ImageCaptureCore.ICDevice device) => _didBecomeReadyWithCompleteContentCatalog.OnNext(device);
        /// <inheritdoc/>
        public override void DidChangeCapability(global::ImageCaptureCore.ICCameraDevice camera) => _didChangeCapability.OnNext(camera);
        /// <inheritdoc/>
        public override void DidChangeName(global::ImageCaptureCore.ICDevice device) => _didChangeName.OnNext(device);
        /// <inheritdoc/>
        public override void DidChangeSharingState(global::ImageCaptureCore.ICDevice device) => _didChangeSharingState.OnNext(device);
        /// <inheritdoc/>
        public override void DidCloseSession(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didCloseSession.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidCompleteDeleteFiles(global::ImageCaptureCore.ICCameraDevice scanner, global::Foundation.NSError error) => _didCompleteDeleteFiles.OnNext((scanner, error));
        /// <inheritdoc/>
        public override void DidEncounterError(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didEncounterError.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidOpenSession(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didOpenSession.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidReceiveButtonPress(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType) => _didReceiveButtonPress.OnNext((device, buttonType));
        /// <inheritdoc/>
        public override void DidReceiveCustomNotification(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data) => _didReceiveCustomNotification.OnNext((device, notification, data));
        /// <inheritdoc/>
        public override void DidReceiveMetadata(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem) => _didReceiveMetadata.OnNext((camera, forItem));
        /// <inheritdoc/>
        public override void DidReceivePtpEvent(global::ImageCaptureCore.ICCameraDevice camera, global::Foundation.NSData eventData) => _didReceivePtpEvent.OnNext((camera, eventData));
        /// <inheritdoc/>
        public override void DidReceiveStatusInformation(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status) => _didReceiveStatusInformation.OnNext((device, status));
        /// <inheritdoc/>
        public override void DidReceiveThumbnail(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem forItem) => _didReceiveThumbnail.OnNext((camera, forItem));
        /// <inheritdoc/>
        public override void DidRemoveDevice(global::ImageCaptureCore.ICDevice device) => _didRemoveDevice.OnNext(device);
        /// <inheritdoc/>
        public override void DidRemoveItem(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem item) => _didRemoveItem.OnNext((camera, item));
        /// <inheritdoc/>
        public override void DidRemoveItems(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items) => _didRemoveItems.OnNext((camera, items));
        /// <inheritdoc/>
        public override void DidRenameItems(global::ImageCaptureCore.ICCameraDevice camera, global::ImageCaptureCore.ICCameraItem[] items) => _didRenameItems.OnNext((camera, items));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageCaptureCore.ICCameraDeviceDownloadDelegate"/> into Observables.
    /// </summary>
    public partial class ICCameraDeviceDownloadDelegateRx : global::ImageCaptureCore.ICCameraDeviceDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSError error, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options, global::System.IntPtr contextInfo)> _didDownloadFile = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSError error, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options, global::System.IntPtr contextInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraFile file, long downloadedBytes, long maxBytes)> _didReceiveDownloadProgress = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICCameraFile file, long downloadedBytes, long maxBytes)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDownloadDelegate.DidDownloadFile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSError error, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options, global::System.IntPtr contextInfo)> DidDownloadFileObs => _didDownloadFile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICCameraDeviceDownloadDelegate.DidReceiveDownloadProgress"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICCameraFile file, long downloadedBytes, long maxBytes)> DidReceiveDownloadProgressObs => _didReceiveDownloadProgress;
        /// <inheritdoc/>
        public override void DidDownloadFile(global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSError error, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options, global::System.IntPtr contextInfo) => _didDownloadFile.OnNext((file, error, options, contextInfo));
        /// <inheritdoc/>
        public override void DidReceiveDownloadProgress(global::ImageCaptureCore.ICCameraFile file, long downloadedBytes, long maxBytes) => _didReceiveDownloadProgress.OnNext((file, downloadedBytes, maxBytes));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageCaptureCore.ICDeviceBrowserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class ICDeviceBrowserDelegateRx : global::ImageCaptureCore.ICDeviceBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)> _deviceDidChangeName = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)> _deviceDidChangeSharingState = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreComing)> _didAddDevice = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDeviceBrowser> _didEnumerateLocalDevices = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDeviceBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreGoing)> _didRemoveDevice = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreGoing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)> _requestsSelectDevice = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceBrowserDelegate.DeviceDidChangeName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)> DeviceDidChangeNameObs => _deviceDidChangeName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceBrowserDelegate.DeviceDidChangeSharingState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)> DeviceDidChangeSharingStateObs => _deviceDidChangeSharingState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceBrowserDelegate.DidAddDevice"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreComing)> DidAddDeviceObs => _didAddDevice;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceBrowserDelegate.DidEnumerateLocalDevices"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDeviceBrowser> DidEnumerateLocalDevicesObs => _didEnumerateLocalDevices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceBrowserDelegate.DidRemoveDevice"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreGoing)> DidRemoveDeviceObs => _didRemoveDevice;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceBrowserDelegate.RequestsSelectDevice"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device)> RequestsSelectDeviceObs => _requestsSelectDevice;
        /// <inheritdoc/>
        public override void DeviceDidChangeName(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device) => _deviceDidChangeName.OnNext((browser, device));
        /// <inheritdoc/>
        public override void DeviceDidChangeSharingState(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device) => _deviceDidChangeSharingState.OnNext((browser, device));
        /// <inheritdoc/>
        public override void DidAddDevice(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreComing) => _didAddDevice.OnNext((browser, device, moreComing));
        /// <inheritdoc/>
        public override void DidEnumerateLocalDevices(global::ImageCaptureCore.ICDeviceBrowser browser) => _didEnumerateLocalDevices.OnNext(browser);
        /// <inheritdoc/>
        public override void DidRemoveDevice(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device, bool moreGoing) => _didRemoveDevice.OnNext((browser, device, moreGoing));
        /// <inheritdoc/>
        public override void RequestsSelectDevice(global::ImageCaptureCore.ICDeviceBrowser browser, global::ImageCaptureCore.ICDevice device) => _requestsSelectDevice.OnNext((browser, device));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageCaptureCore.ICDeviceDelegate"/> into Observables.
    /// </summary>
    public abstract partial class ICDeviceDelegateRx : global::ImageCaptureCore.ICDeviceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didBecomeReady = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didChangeName = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didChangeSharingState = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didCloseSession = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didOpenSession = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)> _didReceiveButtonPress = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)> _didReceiveCustomNotification = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)> _didReceiveStatusInformation = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didRemoveDevice = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidBecomeReady"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidBecomeReadyObs => _didBecomeReady;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidChangeName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidChangeNameObs => _didChangeName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidChangeSharingState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidChangeSharingStateObs => _didChangeSharingState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidCloseSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidCloseSessionObs => _didCloseSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidOpenSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidOpenSessionObs => _didOpenSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidReceiveButtonPress"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)> DidReceiveButtonPressObs => _didReceiveButtonPress;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidReceiveCustomNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)> DidReceiveCustomNotificationObs => _didReceiveCustomNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidReceiveStatusInformation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)> DidReceiveStatusInformationObs => _didReceiveStatusInformation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICDeviceDelegate.DidRemoveDevice"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidRemoveDeviceObs => _didRemoveDevice;
        /// <inheritdoc/>
        public override void DidBecomeReady(global::ImageCaptureCore.ICDevice device) => _didBecomeReady.OnNext(device);
        /// <inheritdoc/>
        public override void DidChangeName(global::ImageCaptureCore.ICDevice device) => _didChangeName.OnNext(device);
        /// <inheritdoc/>
        public override void DidChangeSharingState(global::ImageCaptureCore.ICDevice device) => _didChangeSharingState.OnNext(device);
        /// <inheritdoc/>
        public override void DidCloseSession(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didCloseSession.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidEncounterError(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didEncounterError.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidOpenSession(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didOpenSession.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidReceiveButtonPress(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType) => _didReceiveButtonPress.OnNext((device, buttonType));
        /// <inheritdoc/>
        public override void DidReceiveCustomNotification(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data) => _didReceiveCustomNotification.OnNext((device, notification, data));
        /// <inheritdoc/>
        public override void DidReceiveStatusInformation(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status) => _didReceiveStatusInformation.OnNext((device, status));
        /// <inheritdoc/>
        public override void DidRemoveDevice(global::ImageCaptureCore.ICDevice device) => _didRemoveDevice.OnNext(device);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageCaptureCore.ICScannerDeviceDelegate"/> into Observables.
    /// </summary>
    public partial class ICScannerDeviceDelegateRx : global::ImageCaptureCore.ICScannerDeviceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICScannerDevice> _didBecomeAvailable = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICScannerDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didBecomeReady = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didChangeName = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didChangeSharingState = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didCloseSession = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error)> _didCompleteOverviewScan = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error)> _didCompleteScan = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> _didOpenSession = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)> _didReceiveButtonPress = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)> _didReceiveCustomNotification = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)> _didReceiveStatusInformation = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice> _didRemoveDevice = new Pharmacist.Common.SingleAwaitSubject<global::ImageCaptureCore.ICDevice>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerBandData data)> _didScanToBandData = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerBandData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSUrl url, global::Foundation.NSData data)> _didScanToUrl = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSUrl url, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerFunctionalUnit functionalUnit, global::Foundation.NSError error)> _didSelectFunctionalUnit = new Pharmacist.Common.SingleAwaitSubject<(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerFunctionalUnit functionalUnit, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidBecomeAvailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICScannerDevice> DidBecomeAvailableObs => _didBecomeAvailable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidBecomeReady"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidBecomeReadyObs => _didBecomeReady;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidChangeName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidChangeNameObs => _didChangeName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidChangeSharingState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidChangeSharingStateObs => _didChangeSharingState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidCloseSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidCloseSessionObs => _didCloseSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidCompleteOverviewScan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error)> DidCompleteOverviewScanObs => _didCompleteOverviewScan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidCompleteScan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error)> DidCompleteScanObs => _didCompleteScan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidOpenSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error)> DidOpenSessionObs => _didOpenSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidReceiveButtonPress"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType)> DidReceiveButtonPressObs => _didReceiveButtonPress;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidReceiveCustomNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data)> DidReceiveCustomNotificationObs => _didReceiveCustomNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidReceiveStatusInformation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status)> DidReceiveStatusInformationObs => _didReceiveStatusInformation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidRemoveDevice"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageCaptureCore.ICDevice> DidRemoveDeviceObs => _didRemoveDevice;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidScanToBandData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerBandData data)> DidScanToBandDataObs => _didScanToBandData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidScanToUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSUrl url, global::Foundation.NSData data)> DidScanToUrlObs => _didScanToUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageCaptureCore.ICScannerDeviceDelegate.DidSelectFunctionalUnit"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerFunctionalUnit functionalUnit, global::Foundation.NSError error)> DidSelectFunctionalUnitObs => _didSelectFunctionalUnit;
        /// <inheritdoc/>
        public override void DidBecomeAvailable(global::ImageCaptureCore.ICScannerDevice scanner) => _didBecomeAvailable.OnNext(scanner);
        /// <inheritdoc/>
        public override void DidBecomeReady(global::ImageCaptureCore.ICDevice device) => _didBecomeReady.OnNext(device);
        /// <inheritdoc/>
        public override void DidChangeName(global::ImageCaptureCore.ICDevice device) => _didChangeName.OnNext(device);
        /// <inheritdoc/>
        public override void DidChangeSharingState(global::ImageCaptureCore.ICDevice device) => _didChangeSharingState.OnNext(device);
        /// <inheritdoc/>
        public override void DidCloseSession(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didCloseSession.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidCompleteOverviewScan(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error) => _didCompleteOverviewScan.OnNext((scanner, error));
        /// <inheritdoc/>
        public override void DidCompleteScan(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSError error) => _didCompleteScan.OnNext((scanner, error));
        /// <inheritdoc/>
        public override void DidEncounterError(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didEncounterError.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidOpenSession(global::ImageCaptureCore.ICDevice device, global::Foundation.NSError error) => _didOpenSession.OnNext((device, error));
        /// <inheritdoc/>
        public override void DidReceiveButtonPress(global::ImageCaptureCore.ICDevice device, global::Foundation.NSString buttonType) => _didReceiveButtonPress.OnNext((device, buttonType));
        /// <inheritdoc/>
        public override void DidReceiveCustomNotification(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> notification, global::Foundation.NSData data) => _didReceiveCustomNotification.OnNext((device, notification, data));
        /// <inheritdoc/>
        public override void DidReceiveStatusInformation(global::ImageCaptureCore.ICDevice device, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> status) => _didReceiveStatusInformation.OnNext((device, status));
        /// <inheritdoc/>
        public override void DidRemoveDevice(global::ImageCaptureCore.ICDevice device) => _didRemoveDevice.OnNext(device);
        /// <inheritdoc/>
        public override void DidScanToBandData(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerBandData data) => _didScanToBandData.OnNext((scanner, data));
        /// <inheritdoc/>
        public override void DidScanToUrl(global::ImageCaptureCore.ICScannerDevice scanner, global::Foundation.NSUrl url, global::Foundation.NSData data) => _didScanToUrl.OnNext((scanner, url, data));
        /// <inheritdoc/>
        public override void DidSelectFunctionalUnit(global::ImageCaptureCore.ICScannerDevice scanner, global::ImageCaptureCore.ICScannerFunctionalUnit functionalUnit, global::Foundation.NSError error) => _didSelectFunctionalUnit.OnNext((scanner, functionalUnit, error));
    }
}

namespace ImageKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageKit.IKCameraDeviceViewDelegate"/> into Observables.
    /// </summary>
    public partial class IKCameraDeviceViewDelegateRx : global::ImageKit.IKCameraDeviceViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error)> _didDownloadFile = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::Foundation.NSError error)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageKit.IKCameraDeviceView> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<global::ImageKit.IKCameraDeviceView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKCameraDeviceViewDelegate.DidDownloadFile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error)> DidDownloadFileObs => _didDownloadFile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKCameraDeviceViewDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::Foundation.NSError error)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKCameraDeviceViewDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKCameraDeviceView> SelectionDidChangeObs => _selectionDidChange;
        /// <inheritdoc/>
        public override void DidDownloadFile(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::ImageCaptureCore.ICCameraFile file, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error) => _didDownloadFile.OnNext((cameraDeviceView, file, url, data, error));
        /// <inheritdoc/>
        public override void DidEncounterError(global::ImageKit.IKCameraDeviceView cameraDeviceView, global::Foundation.NSError error) => _didEncounterError.OnNext((cameraDeviceView, error));
        /// <inheritdoc/>
        public override void SelectionDidChange(global::ImageKit.IKCameraDeviceView cameraDeviceView) => _selectionDidChange.OnNext(cameraDeviceView);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageKit.IKDeviceBrowserViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class IKDeviceBrowserViewDelegateRx : global::ImageKit.IKDeviceBrowserViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::Foundation.NSError error)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::ImageCaptureCore.ICDevice device)> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::ImageCaptureCore.ICDevice device)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKDeviceBrowserViewDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::Foundation.NSError error)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKDeviceBrowserViewDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::ImageCaptureCore.ICDevice device)> SelectionDidChangeObs => _selectionDidChange;
        /// <inheritdoc/>
        public override void DidEncounterError(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::Foundation.NSError error) => _didEncounterError.OnNext((deviceBrowserView, error));
        /// <inheritdoc/>
        public override void SelectionDidChange(global::ImageKit.IKDeviceBrowserView deviceBrowserView, global::ImageCaptureCore.ICDevice device) => _selectionDidChange.OnNext((deviceBrowserView, device));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageKit.IKImageBrowserDelegate"/> into Observables.
    /// </summary>
    public partial class IKImageBrowserDelegateRx : global::ImageKit.IKImageBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKImageBrowserView browser, global::AppKit.NSEvent nsevent)> _backgroundWasRightClicked = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKImageBrowserView browser, global::AppKit.NSEvent nsevent)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKImageBrowserView browser, global::System.nint index)> _cellWasDoubleClicked = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKImageBrowserView browser, global::System.nint index)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKImageBrowserView browser, global::System.nint index, global::AppKit.NSEvent nsevent)> _cellWasRightClicked = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKImageBrowserView browser, global::System.nint index, global::AppKit.NSEvent nsevent)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ImageKit.IKImageBrowserView> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<global::ImageKit.IKImageBrowserView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserDelegate.BackgroundWasRightClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKImageBrowserView browser, global::AppKit.NSEvent nsevent)> BackgroundWasRightClickedObs => _backgroundWasRightClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserDelegate.CellWasDoubleClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKImageBrowserView browser, global::System.nint index)> CellWasDoubleClickedObs => _cellWasDoubleClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserDelegate.CellWasRightClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKImageBrowserView browser, global::System.nint index, global::AppKit.NSEvent nsevent)> CellWasRightClickedObs => _cellWasRightClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKImageBrowserDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ImageKit.IKImageBrowserView> SelectionDidChangeObs => _selectionDidChange;
        /// <inheritdoc/>
        public override void BackgroundWasRightClicked(global::ImageKit.IKImageBrowserView browser, global::AppKit.NSEvent nsevent) => _backgroundWasRightClicked.OnNext((browser, nsevent));
        /// <inheritdoc/>
        public override void CellWasDoubleClicked(global::ImageKit.IKImageBrowserView browser, global::System.nint index) => _cellWasDoubleClicked.OnNext((browser, index));
        /// <inheritdoc/>
        public override void CellWasRightClicked(global::ImageKit.IKImageBrowserView browser, global::System.nint index, global::AppKit.NSEvent nsevent) => _cellWasRightClicked.OnNext((browser, index, nsevent));
        /// <inheritdoc/>
        public override void SelectionDidChange(global::ImageKit.IKImageBrowserView browser) => _selectionDidChange.OnNext(browser);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ImageKit.IKScannerDeviceViewDelegate"/> into Observables.
    /// </summary>
    public partial class IKScannerDeviceViewDelegateRx : global::ImageKit.IKScannerDeviceViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSError error)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error)> _didScan = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::ImageCaptureCore.ICScannerBandData data, global::Foundation.NSDictionary scanInfo, global::Foundation.NSError error)> _didScanToBandData = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::ImageCaptureCore.ICScannerBandData data, global::Foundation.NSDictionary scanInfo, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSError error)> _didScanToUrl = new Pharmacist.Common.SingleAwaitSubject<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceViewDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSError error)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceViewDelegate.DidScan"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error)> DidScanObs => _didScan;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceViewDelegate.DidScanToBandData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::ImageCaptureCore.ICScannerBandData data, global::Foundation.NSDictionary scanInfo, global::Foundation.NSError error)> DidScanToBandDataObs => _didScanToBandData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ImageKit.IKScannerDeviceViewDelegate.DidScanToUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSError error)> DidScanToUrlObs => _didScanToUrl;
        /// <inheritdoc/>
        public override void DidEncounterError(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSError error) => _didEncounterError.OnNext((scannerDeviceView, error));
        /// <inheritdoc/>
        public override void DidScan(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSData data, global::Foundation.NSError error) => _didScan.OnNext((scannerDeviceView, url, data, error));
        /// <inheritdoc/>
        public override void DidScanToBandData(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::ImageCaptureCore.ICScannerBandData data, global::Foundation.NSDictionary scanInfo, global::Foundation.NSError error) => _didScanToBandData.OnNext((scannerDeviceView, data, scanInfo, error));
        /// <inheritdoc/>
        public override void DidScanToUrl(global::ImageKit.IKScannerDeviceView scannerDeviceView, global::Foundation.NSUrl url, global::Foundation.NSError error) => _didScanToUrl.OnNext((scannerDeviceView, url, error));
    }
}

namespace MapKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MapKit.MKLocalSearchCompleterDelegate"/> into Observables.
    /// </summary>
    public partial class MKLocalSearchCompleterDelegateRx : global::MapKit.MKLocalSearchCompleterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKLocalSearchCompleter> _didUpdateResults = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKLocalSearchCompleter>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKLocalSearchCompleterDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKLocalSearchCompleterDelegate.DidUpdateResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKLocalSearchCompleter> DidUpdateResultsObs => _didUpdateResults;
        /// <inheritdoc/>
        public override void DidFail(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error) => _didFail.OnNext((completer, error));
        /// <inheritdoc/>
        public override void DidUpdateResults(global::MapKit.MKLocalSearchCompleter completer) => _didUpdateResults.OnNext(completer);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MapKit.MKMapViewDelegate"/> into Observables.
    /// </summary>
    public partial class MKMapViewDelegateRx : global::MapKit.MKMapViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState)> _changedDragState = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)> _didAddAnnotationViews = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)> _didAddOverlayRenderers = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _didChangeVisibleRegion = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> _didDeselectAnnotationView = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> _didFailToLocateUser = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool fullyRendered)> _didFinishRenderingMap = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool fullyRendered)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> _didSelectAnnotationView = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _didStopLocatingUser = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)> _didUpdateUserLocation = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> _loadingMapFailed = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _mapLoaded = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)> _regionChanged = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)> _regionWillChange = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartLoadingMap = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartLocatingUser = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartRenderingMap = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.ChangedDragState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState)> ChangedDragStateObs => _changedDragState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidAddAnnotationViews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)> DidAddAnnotationViewsObs => _didAddAnnotationViews;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidAddOverlayRenderers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)> DidAddOverlayRenderersObs => _didAddOverlayRenderers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidChangeVisibleRegion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> DidChangeVisibleRegionObs => _didChangeVisibleRegion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidDeselectAnnotationView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> DidDeselectAnnotationViewObs => _didDeselectAnnotationView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidFailToLocateUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> DidFailToLocateUserObs => _didFailToLocateUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidFinishRenderingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool fullyRendered)> DidFinishRenderingMapObs => _didFinishRenderingMap;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidSelectAnnotationView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> DidSelectAnnotationViewObs => _didSelectAnnotationView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidStopLocatingUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> DidStopLocatingUserObs => _didStopLocatingUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidUpdateUserLocation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)> DidUpdateUserLocationObs => _didUpdateUserLocation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.LoadingMapFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> LoadingMapFailedObs => _loadingMapFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.MapLoaded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> MapLoadedObs => _mapLoaded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.RegionChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool animated)> RegionChangedObs => _regionChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.RegionWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool animated)> RegionWillChangeObs => _regionWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartLoadingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartLoadingMapObs => _willStartLoadingMap;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartLocatingUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartLocatingUserObs => _willStartLocatingUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartRenderingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartRenderingMapObs => _willStartRenderingMap;
        /// <inheritdoc/>
        public override void ChangedDragState(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView annotationView, global::MapKit.MKAnnotationViewDragState newState, global::MapKit.MKAnnotationViewDragState oldState) => _changedDragState.OnNext((mapView, annotationView, newState, oldState));
        /// <inheritdoc/>
        public override void DidAddAnnotationViews(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views) => _didAddAnnotationViews.OnNext((mapView, views));
        /// <inheritdoc/>
        public override void DidAddOverlayRenderers(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers) => _didAddOverlayRenderers.OnNext((mapView, renderers));
        /// <inheritdoc/>
        public override void DidChangeVisibleRegion(global::MapKit.MKMapView mapView) => _didChangeVisibleRegion.OnNext(mapView);
        /// <inheritdoc/>
        public override void DidDeselectAnnotationView(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view) => _didDeselectAnnotationView.OnNext((mapView, view));
        /// <inheritdoc/>
        public override void DidFailToLocateUser(global::MapKit.MKMapView mapView, global::Foundation.NSError error) => _didFailToLocateUser.OnNext((mapView, error));
        /// <inheritdoc/>
        public override void DidFinishRenderingMap(global::MapKit.MKMapView mapView, bool fullyRendered) => _didFinishRenderingMap.OnNext((mapView, fullyRendered));
        /// <inheritdoc/>
        public override void DidSelectAnnotationView(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view) => _didSelectAnnotationView.OnNext((mapView, view));
        /// <inheritdoc/>
        public override void DidStopLocatingUser(global::MapKit.MKMapView mapView) => _didStopLocatingUser.OnNext(mapView);
        /// <inheritdoc/>
        public override void DidUpdateUserLocation(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation) => _didUpdateUserLocation.OnNext((mapView, userLocation));
        /// <inheritdoc/>
        public override void LoadingMapFailed(global::MapKit.MKMapView mapView, global::Foundation.NSError error) => _loadingMapFailed.OnNext((mapView, error));
        /// <inheritdoc/>
        public override void MapLoaded(global::MapKit.MKMapView mapView) => _mapLoaded.OnNext(mapView);
        /// <inheritdoc/>
        public override void RegionChanged(global::MapKit.MKMapView mapView, bool animated) => _regionChanged.OnNext((mapView, animated));
        /// <inheritdoc/>
        public override void RegionWillChange(global::MapKit.MKMapView mapView, bool animated) => _regionWillChange.OnNext((mapView, animated));
        /// <inheritdoc/>
        public override void WillStartLoadingMap(global::MapKit.MKMapView mapView) => _willStartLoadingMap.OnNext(mapView);
        /// <inheritdoc/>
        public override void WillStartLocatingUser(global::MapKit.MKMapView mapView) => _willStartLocatingUser.OnNext(mapView);
        /// <inheritdoc/>
        public override void WillStartRenderingMap(global::MapKit.MKMapView mapView) => _willStartRenderingMap.OnNext(mapView);
    }
}

namespace MetalKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MetalKit.MTKViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MTKViewDelegateRx : global::MetalKit.MTKViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MetalKit.MTKView> _draw = new Pharmacist.Common.SingleAwaitSubject<global::MetalKit.MTKView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)> _drawableSizeWillChange = new Pharmacist.Common.SingleAwaitSubject<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MetalKit.MTKViewDelegate.Draw"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MetalKit.MTKView> DrawObs => _draw;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MetalKit.MTKViewDelegate.DrawableSizeWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)> DrawableSizeWillChangeObs => _drawableSizeWillChange;
        /// <inheritdoc/>
        public override void Draw(global::MetalKit.MTKView view) => _draw.OnNext(view);
        /// <inheritdoc/>
        public override void DrawableSizeWillChange(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size) => _drawableSizeWillChange.OnNext((view, size));
    }
}

namespace MultipeerConnectivity
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCAdvertiserAssistantDelegate"/> into Observables.
    /// </summary>
    public partial class MCAdvertiserAssistantDelegateRx : global::MultipeerConnectivity.MCAdvertiserAssistantDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant> _didDismissInvitation = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant> _willPresentInvitation = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCAdvertiserAssistantDelegate.DidDismissInvitation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCAdvertiserAssistant> DidDismissInvitationObs => _didDismissInvitation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCAdvertiserAssistantDelegate.WillPresentInvitation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCAdvertiserAssistant> WillPresentInvitationObs => _willPresentInvitation;
        /// <inheritdoc/>
        public override void DidDismissInvitation(global::MultipeerConnectivity.MCAdvertiserAssistant advertiserAssistant) => _didDismissInvitation.OnNext(advertiserAssistant);
        /// <inheritdoc/>
        public override void WillPresentInvitation(global::MultipeerConnectivity.MCAdvertiserAssistant advertiserAssistant) => _willPresentInvitation.OnNext(advertiserAssistant);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCBrowserViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCBrowserViewControllerDelegateRx : global::MultipeerConnectivity.MCBrowserViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCBrowserViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCBrowserViewController> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCBrowserViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCBrowserViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidFinish(global::MultipeerConnectivity.MCBrowserViewController browserViewController) => _didFinish.OnNext(browserViewController);
        /// <inheritdoc/>
        public override void WasCancelled(global::MultipeerConnectivity.MCBrowserViewController browserViewController) => _wasCancelled.OnNext(browserViewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCNearbyServiceAdvertiserDelegateRx : global::MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)> _didNotStartAdvertisingPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)> _didReceiveInvitationFromPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidNotStartAdvertisingPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)> DidNotStartAdvertisingPeerObs => _didNotStartAdvertisingPeer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)> DidReceiveInvitationFromPeerObs => _didReceiveInvitationFromPeer;
        /// <inheritdoc/>
        public override void DidNotStartAdvertisingPeer(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error) => _didNotStartAdvertisingPeer.OnNext((advertiser, error));
        /// <inheritdoc/>
        public override void DidReceiveInvitationFromPeer(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler) => _didReceiveInvitationFromPeer.OnNext((advertiser, peerID, context, invitationHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCNearbyServiceBrowserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCNearbyServiceBrowserDelegateRx : global::MultipeerConnectivity.MCNearbyServiceBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)> _didNotStartBrowsingForPeers = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)> _foundPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)> _lostPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.DidNotStartBrowsingForPeers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)> DidNotStartBrowsingForPeersObs => _didNotStartBrowsingForPeers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)> FoundPeerObs => _foundPeer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.LostPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)> LostPeerObs => _lostPeer;
        /// <inheritdoc/>
        public override void DidNotStartBrowsingForPeers(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error) => _didNotStartBrowsingForPeers.OnNext((browser, error));
        /// <inheritdoc/>
        public override void FoundPeer(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info) => _foundPeer.OnNext((browser, peerID, info));
        /// <inheritdoc/>
        public override void LostPeer(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID) => _lostPeer.OnNext((browser, peerID));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCSessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCSessionDelegateRx : global::MultipeerConnectivity.MCSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)> _didChangeState = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)> _didFinishReceivingResource = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)> _didReceiveData = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)> _didReceiveStream = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)> _didStartReceivingResource = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidChangeState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)> DidChangeStateObs => _didChangeState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidFinishReceivingResource"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)> DidFinishReceivingResourceObs => _didFinishReceivingResource;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidReceiveData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)> DidReceiveDataObs => _didReceiveData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidReceiveStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)> DidReceiveStreamObs => _didReceiveStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidStartReceivingResource"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)> DidStartReceivingResourceObs => _didStartReceivingResource;
        /// <inheritdoc/>
        public override void DidChangeState(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state) => _didChangeState.OnNext((session, peerID, state));
        /// <inheritdoc/>
        public override void DidFinishReceivingResource(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error) => _didFinishReceivingResource.OnNext((session, resourceName, fromPeer, localUrl, error));
        /// <inheritdoc/>
        public override void DidReceiveData(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID) => _didReceiveData.OnNext((session, data, peerID));
        /// <inheritdoc/>
        public override void DidReceiveStream(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID) => _didReceiveStream.OnNext((session, stream, streamName, peerID));
        /// <inheritdoc/>
        public override void DidStartReceivingResource(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress) => _didStartReceivingResource.OnNext((session, resourceName, fromPeer, progress));
    }
}

namespace NetworkExtension
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::NetworkExtension.NWTcpConnectionAuthenticationDelegate"/> into Observables.
    /// </summary>
    public partial class NWTcpConnectionAuthenticationDelegateRx : global::NetworkExtension.NWTcpConnectionAuthenticationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion)> _evaluateTrust = new Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion)> _provideIdentity = new Pharmacist.Common.SingleAwaitSubject<(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NetworkExtension.NWTcpConnectionAuthenticationDelegate.EvaluateTrust"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion)> EvaluateTrustObs => _evaluateTrust;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NetworkExtension.NWTcpConnectionAuthenticationDelegate.ProvideIdentity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion)> ProvideIdentityObs => _provideIdentity;
        /// <inheritdoc/>
        public override void EvaluateTrust(global::NetworkExtension.NWTcpConnection connection, global::Foundation.NSArray peerCertificateChain, global::System.Action<global::Security.SecTrust> completion) => _evaluateTrust.OnNext((connection, peerCertificateChain, completion));
        /// <inheritdoc/>
        public override void ProvideIdentity(global::NetworkExtension.NWTcpConnection connection, global::System.Action<global::Security.SecIdentity, global::Foundation.NSArray> completion) => _provideIdentity.OnNext((connection, completion));
    }
}

namespace NotificationCenter
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::NotificationCenter.NCWidgetListViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NCWidgetListViewDelegateRx : global::NotificationCenter.NCWidgetListViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row)> _didRemoveRow = new Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row, global::System.nuint newIndex)> _didReorderRow = new Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row, global::System.nuint newIndex)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::NotificationCenter.NCWidgetListViewController> _performAddAction = new Pharmacist.Common.SingleAwaitSubject<global::NotificationCenter.NCWidgetListViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetListViewDelegate.DidRemoveRow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row)> DidRemoveRowObs => _didRemoveRow;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetListViewDelegate.DidReorderRow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row, global::System.nuint newIndex)> DidReorderRowObs => _didReorderRow;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetListViewDelegate.PerformAddAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::NotificationCenter.NCWidgetListViewController> PerformAddActionObs => _performAddAction;
        /// <inheritdoc/>
        public override void DidRemoveRow(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row) => _didRemoveRow.OnNext((list, row));
        /// <inheritdoc/>
        public override void DidReorderRow(global::NotificationCenter.NCWidgetListViewController list, global::System.nuint row, global::System.nuint newIndex) => _didReorderRow.OnNext((list, row, newIndex));
        /// <inheritdoc/>
        public override void PerformAddAction(global::NotificationCenter.NCWidgetListViewController list) => _performAddAction.OnNext(list);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::NotificationCenter.NCWidgetSearchViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NCWidgetSearchViewDelegateRx : global::NotificationCenter.NCWidgetSearchViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetSearchViewController controller, global::Foundation.NSObject obj)> _resultSelected = new Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetSearchViewController controller, global::Foundation.NSObject obj)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetSearchViewController controller, string searchTerm, global::System.nuint max)> _searchForTearm = new Pharmacist.Common.SingleAwaitSubject<(global::NotificationCenter.NCWidgetSearchViewController controller, string searchTerm, global::System.nuint max)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::NotificationCenter.NCWidgetSearchViewController> _termCleared = new Pharmacist.Common.SingleAwaitSubject<global::NotificationCenter.NCWidgetSearchViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetSearchViewDelegate.ResultSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NotificationCenter.NCWidgetSearchViewController controller, global::Foundation.NSObject obj)> ResultSelectedObs => _resultSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetSearchViewDelegate.SearchForTearm"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::NotificationCenter.NCWidgetSearchViewController controller, string searchTerm, global::System.nuint max)> SearchForTearmObs => _searchForTearm;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "NotificationCenter.NCWidgetSearchViewDelegate.TermCleared"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::NotificationCenter.NCWidgetSearchViewController> TermClearedObs => _termCleared;
        /// <inheritdoc/>
        public override void ResultSelected(global::NotificationCenter.NCWidgetSearchViewController controller, global::Foundation.NSObject obj) => _resultSelected.OnNext((controller, obj));
        /// <inheritdoc/>
        public override void SearchForTearm(global::NotificationCenter.NCWidgetSearchViewController controller, string searchTerm, global::System.nuint max) => _searchForTearm.OnNext((controller, searchTerm, max));
        /// <inheritdoc/>
        public override void TermCleared(global::NotificationCenter.NCWidgetSearchViewController controller) => _termCleared.OnNext(controller);
    }
}

namespace PdfKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PdfKit.PdfDocumentDelegate"/> into Observables.
    /// </summary>
    public partial class PdfDocumentDelegateRx : global::PdfKit.PdfDocumentDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didBeginDocumentFind = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfSelection> _didMatchString = new Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfSelection>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didUnlock = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _findFinished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _matchFound = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _pageFindFinished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _pageFindStarted = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.DidBeginDocumentFind"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidBeginDocumentFindObs => _didBeginDocumentFind;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.DidMatchString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfSelection> DidMatchStringObs => _didMatchString;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.DidUnlock"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidUnlockObs => _didUnlock;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.FindFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> FindFinishedObs => _findFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.MatchFound"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> MatchFoundObs => _matchFound;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.PageFindFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> PageFindFinishedObs => _pageFindFinished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfDocumentDelegate.PageFindStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> PageFindStartedObs => _pageFindStarted;
        /// <inheritdoc/>
        public override void DidBeginDocumentFind(global::Foundation.NSNotification notification) => _didBeginDocumentFind.OnNext(notification);
        /// <inheritdoc/>
        public override void DidMatchString(global::PdfKit.PdfSelection sender) => _didMatchString.OnNext(sender);
        /// <inheritdoc/>
        public override void DidUnlock(global::Foundation.NSNotification notification) => _didUnlock.OnNext(notification);
        /// <inheritdoc/>
        public override void FindFinished(global::Foundation.NSNotification notification) => _findFinished.OnNext(notification);
        /// <inheritdoc/>
        public override void MatchFound(global::Foundation.NSNotification notification) => _matchFound.OnNext(notification);
        /// <inheritdoc/>
        public override void PageFindFinished(global::Foundation.NSNotification notification) => _pageFindFinished.OnNext(notification);
        /// <inheritdoc/>
        public override void PageFindStarted(global::Foundation.NSNotification notification) => _pageFindStarted.OnNext(notification);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::PdfKit.PdfViewDelegate"/> into Observables.
    /// </summary>
    public partial class PdfViewDelegateRx : global::PdfKit.PdfViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action)> _openPdf = new Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView> _performFind = new Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView> _performGoToPage = new Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView> _performPrint = new Pharmacist.Common.SingleAwaitSubject<global::PdfKit.PdfView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::Foundation.NSUrl url)> _willClickOnLink = new Pharmacist.Common.SingleAwaitSubject<(global::PdfKit.PdfView sender, global::Foundation.NSUrl url)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.OpenPdf"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action)> OpenPdfObs => _openPdf;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.PerformFind"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfView> PerformFindObs => _performFind;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.PerformGoToPage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfView> PerformGoToPageObs => _performGoToPage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.PerformPrint"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::PdfKit.PdfView> PerformPrintObs => _performPrint;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PdfKit.PdfViewDelegate.WillClickOnLink"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PdfKit.PdfView sender, global::Foundation.NSUrl url)> WillClickOnLinkObs => _willClickOnLink;
        /// <inheritdoc/>
        public override void OpenPdf(global::PdfKit.PdfView sender, global::PdfKit.PdfActionRemoteGoTo action) => _openPdf.OnNext((sender, action));
        /// <inheritdoc/>
        public override void PerformFind(global::PdfKit.PdfView sender) => _performFind.OnNext(sender);
        /// <inheritdoc/>
        public override void PerformGoToPage(global::PdfKit.PdfView sender) => _performGoToPage.OnNext(sender);
        /// <inheritdoc/>
        public override void PerformPrint(global::PdfKit.PdfView sender) => _performPrint.OnNext(sender);
        /// <inheritdoc/>
        public override void WillClickOnLink(global::PdfKit.PdfView sender, global::Foundation.NSUrl url) => _willClickOnLink.OnNext((sender, url));
    }
}

namespace PhotosUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PhotosUI.PHLivePhotoViewDelegate"/> into Observables.
    /// </summary>
    public partial class PHLivePhotoViewDelegateRx : global::PhotosUI.PHLivePhotoViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> _didEndPlayback = new Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> _willBeginPlayback = new Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PhotosUI.PHLivePhotoViewDelegate.DidEndPlayback"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> DidEndPlaybackObs => _didEndPlayback;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PhotosUI.PHLivePhotoViewDelegate.WillBeginPlayback"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> WillBeginPlaybackObs => _willBeginPlayback;
        /// <inheritdoc/>
        public override void DidEndPlayback(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle) => _didEndPlayback.OnNext((livePhotoView, playbackStyle));
        /// <inheritdoc/>
        public override void WillBeginPlayback(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle) => _willBeginPlayback.OnNext((livePhotoView, playbackStyle));
    }
}

namespace QTKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::QTKit.QTCaptureDecompressedVideoOutputDelegate"/> into Observables.
    /// </summary>
    public partial class QTCaptureDecompressedVideoOutputDelegateRx : global::QTKit.QTCaptureDecompressedVideoOutputDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)> _didDropVideoFrame = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureOutput captureOutput, global::CoreVideo.CVImageBuffer videoFrame, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)> _didOutputVideoFrame = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureOutput captureOutput, global::CoreVideo.CVImageBuffer videoFrame, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureDecompressedVideoOutputDelegate.DidDropVideoFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)> DidDropVideoFrameObs => _didDropVideoFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureDecompressedVideoOutputDelegate.DidOutputVideoFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureOutput captureOutput, global::CoreVideo.CVImageBuffer videoFrame, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)> DidOutputVideoFrameObs => _didOutputVideoFrame;
        /// <inheritdoc/>
        public override void DidDropVideoFrame(global::QTKit.QTCaptureOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection) => _didDropVideoFrame.OnNext((captureOutput, sampleBuffer, connection));
        /// <inheritdoc/>
        public override void DidOutputVideoFrame(global::QTKit.QTCaptureOutput captureOutput, global::CoreVideo.CVImageBuffer videoFrame, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection) => _didOutputVideoFrame.OnNext((captureOutput, videoFrame, sampleBuffer, connection));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::QTKit.QTCaptureFileOutputDelegate"/> into Observables.
    /// </summary>
    public partial class QTCaptureFileOutputDelegateRx : global::QTKit.QTCaptureFileOutputDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)> _didFinishRecording = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)> _didOutputSampleBuffer = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> _didPauseRecording = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> _didResumeRecording = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> _didStartRecording = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)> _mustChangeOutputFile = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)> _willFinishRecording = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> _willStartRecording = new Pharmacist.Common.SingleAwaitSubject<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.DidFinishRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)> DidFinishRecordingObs => _didFinishRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.DidOutputSampleBuffer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection)> DidOutputSampleBufferObs => _didOutputSampleBuffer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.DidPauseRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> DidPauseRecordingObs => _didPauseRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.DidResumeRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> DidResumeRecordingObs => _didResumeRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.DidStartRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> DidStartRecordingObs => _didStartRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.MustChangeOutputFile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)> MustChangeOutputFileObs => _mustChangeOutputFile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.WillFinishRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason)> WillFinishRecordingObs => _willFinishRecording;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QTKit.QTCaptureFileOutputDelegate.WillStartRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections)> WillStartRecordingObs => _willStartRecording;
        /// <inheritdoc/>
        public override void DidFinishRecording(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason) => _didFinishRecording.OnNext((captureOutput, outputFileURL, connections, reason));
        /// <inheritdoc/>
        public override void DidOutputSampleBuffer(global::QTKit.QTCaptureFileOutput captureOutput, global::QTKit.QTSampleBuffer sampleBuffer, global::QTKit.QTCaptureConnection connection) => _didOutputSampleBuffer.OnNext((captureOutput, sampleBuffer, connection));
        /// <inheritdoc/>
        public override void DidPauseRecording(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections) => _didPauseRecording.OnNext((captureOutput, fileUrl, connections));
        /// <inheritdoc/>
        public override void DidResumeRecording(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections) => _didResumeRecording.OnNext((captureOutput, fileUrl, connections));
        /// <inheritdoc/>
        public override void DidStartRecording(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections) => _didStartRecording.OnNext((captureOutput, fileUrl, connections));
        /// <inheritdoc/>
        public override void MustChangeOutputFile(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason) => _mustChangeOutputFile.OnNext((captureOutput, outputFileURL, connections, reason));
        /// <inheritdoc/>
        public override void WillFinishRecording(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl outputFileURL, global::QTKit.QTCaptureConnection[] connections, global::Foundation.NSError reason) => _willFinishRecording.OnNext((captureOutput, outputFileURL, connections, reason));
        /// <inheritdoc/>
        public override void WillStartRecording(global::QTKit.QTCaptureFileOutput captureOutput, global::Foundation.NSUrl fileUrl, global::QTKit.QTCaptureConnection[] connections) => _willStartRecording.OnNext((captureOutput, fileUrl, connections));
    }
}

namespace QuickLookUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::QuickLookUI.QLPreviewPanelDelegate"/> into Observables.
    /// </summary>
    public partial class QLPreviewPanelDelegateRx : global::QuickLookUI.QLPreviewPanelDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didBecomeKey = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didBecomeMain = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeBackingProperties = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didChangeScreenProfile = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> _didDecodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didDeminiaturize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEndLiveResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEndSheet = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didEnterVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didExitVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didExpose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow> _didFailToEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow> _didFailToExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::AppKit.NSWindow>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didMiniaturize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didMove = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResignKey = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResignMain = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _didUpdate = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)> _startCustomAnimationToEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)> _startCustomAnimationToExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, double duration)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willBeginSheet = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willClose = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> _willEncodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willEnterFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willEnterVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willExitFullScreen = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willExitVersionBrowser = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willMiniaturize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willMove = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification> _willStartLiveResize = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNotification>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidBecomeKey"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidBecomeKeyObs => _didBecomeKey;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidBecomeMain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidBecomeMainObs => _didBecomeMain;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidChangeBackingProperties"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeBackingPropertiesObs => _didChangeBackingProperties;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidChangeScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeScreenObs => _didChangeScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidChangeScreenProfile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidChangeScreenProfileObs => _didChangeScreenProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidDecodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> DidDecodeRestorableStateObs => _didDecodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidDeminiaturize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidDeminiaturizeObs => _didDeminiaturize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidEndLiveResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEndLiveResizeObs => _didEndLiveResize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidEndSheet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEndSheetObs => _didEndSheet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEnterFullScreenObs => _didEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidEnterVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidEnterVersionBrowserObs => _didEnterVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidExitFullScreenObs => _didExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidExitVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidExitVersionBrowserObs => _didExitVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidExpose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidExposeObs => _didExpose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidFailToEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindow> DidFailToEnterFullScreenObs => _didFailToEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidFailToExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AppKit.NSWindow> DidFailToExitFullScreenObs => _didFailToExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidMiniaturize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidMiniaturizeObs => _didMiniaturize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidMove"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidMoveObs => _didMove;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidResignKey"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResignKeyObs => _didResignKey;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidResignMain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResignMainObs => _didResignMain;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidResizeObs => _didResize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.DidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> DidUpdateObs => _didUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.StartCustomAnimationToEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, double duration)> StartCustomAnimationToEnterFullScreenObs => _startCustomAnimationToEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.StartCustomAnimationToExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, double duration)> StartCustomAnimationToExitFullScreenObs => _startCustomAnimationToExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillBeginSheet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillBeginSheetObs => _willBeginSheet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillCloseObs => _willClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillEncodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AppKit.NSWindow window, global::Foundation.NSCoder coder)> WillEncodeRestorableStateObs => _willEncodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillEnterFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillEnterFullScreenObs => _willEnterFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillEnterVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillEnterVersionBrowserObs => _willEnterVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillExitFullScreen"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillExitFullScreenObs => _willExitFullScreen;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillExitVersionBrowser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillExitVersionBrowserObs => _willExitVersionBrowser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillMiniaturize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillMiniaturizeObs => _willMiniaturize;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillMove"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillMoveObs => _willMove;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "QuickLookUI.QLPreviewPanelDelegate.WillStartLiveResize"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNotification> WillStartLiveResizeObs => _willStartLiveResize;
        /// <inheritdoc/>
        public override void DidBecomeKey(global::Foundation.NSNotification notification) => _didBecomeKey.OnNext(notification);
        /// <inheritdoc/>
        public override void DidBecomeMain(global::Foundation.NSNotification notification) => _didBecomeMain.OnNext(notification);
        /// <inheritdoc/>
        public override void DidChangeBackingProperties(global::Foundation.NSNotification notification) => _didChangeBackingProperties.OnNext(notification);
        /// <inheritdoc/>
        public override void DidChangeScreen(global::Foundation.NSNotification notification) => _didChangeScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void DidChangeScreenProfile(global::Foundation.NSNotification notification) => _didChangeScreenProfile.OnNext(notification);
        /// <inheritdoc/>
        public override void DidDecodeRestorableState(global::AppKit.NSWindow window, global::Foundation.NSCoder coder) => _didDecodeRestorableState.OnNext((window, coder));
        /// <inheritdoc/>
        public override void DidDeminiaturize(global::Foundation.NSNotification notification) => _didDeminiaturize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEndLiveResize(global::Foundation.NSNotification notification) => _didEndLiveResize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEndSheet(global::Foundation.NSNotification notification) => _didEndSheet.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEnterFullScreen(global::Foundation.NSNotification notification) => _didEnterFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void DidEnterVersionBrowser(global::Foundation.NSNotification notification) => _didEnterVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void DidExitFullScreen(global::Foundation.NSNotification notification) => _didExitFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void DidExitVersionBrowser(global::Foundation.NSNotification notification) => _didExitVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void DidExpose(global::Foundation.NSNotification notification) => _didExpose.OnNext(notification);
        /// <inheritdoc/>
        public override void DidFailToEnterFullScreen(global::AppKit.NSWindow window) => _didFailToEnterFullScreen.OnNext(window);
        /// <inheritdoc/>
        public override void DidFailToExitFullScreen(global::AppKit.NSWindow window) => _didFailToExitFullScreen.OnNext(window);
        /// <inheritdoc/>
        public override void DidMiniaturize(global::Foundation.NSNotification notification) => _didMiniaturize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidMove(global::Foundation.NSNotification notification) => _didMove.OnNext(notification);
        /// <inheritdoc/>
        public override void DidResignKey(global::Foundation.NSNotification notification) => _didResignKey.OnNext(notification);
        /// <inheritdoc/>
        public override void DidResignMain(global::Foundation.NSNotification notification) => _didResignMain.OnNext(notification);
        /// <inheritdoc/>
        public override void DidResize(global::Foundation.NSNotification notification) => _didResize.OnNext(notification);
        /// <inheritdoc/>
        public override void DidUpdate(global::Foundation.NSNotification notification) => _didUpdate.OnNext(notification);
        /// <inheritdoc/>
        public override void StartCustomAnimationToEnterFullScreen(global::AppKit.NSWindow window, double duration) => _startCustomAnimationToEnterFullScreen.OnNext((window, duration));
        /// <inheritdoc/>
        public override void StartCustomAnimationToExitFullScreen(global::AppKit.NSWindow window, double duration) => _startCustomAnimationToExitFullScreen.OnNext((window, duration));
        /// <inheritdoc/>
        public override void WillBeginSheet(global::Foundation.NSNotification notification) => _willBeginSheet.OnNext(notification);
        /// <inheritdoc/>
        public override void WillClose(global::Foundation.NSNotification notification) => _willClose.OnNext(notification);
        /// <inheritdoc/>
        public override void WillEncodeRestorableState(global::AppKit.NSWindow window, global::Foundation.NSCoder coder) => _willEncodeRestorableState.OnNext((window, coder));
        /// <inheritdoc/>
        public override void WillEnterFullScreen(global::Foundation.NSNotification notification) => _willEnterFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void WillEnterVersionBrowser(global::Foundation.NSNotification notification) => _willEnterVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void WillExitFullScreen(global::Foundation.NSNotification notification) => _willExitFullScreen.OnNext(notification);
        /// <inheritdoc/>
        public override void WillExitVersionBrowser(global::Foundation.NSNotification notification) => _willExitVersionBrowser.OnNext(notification);
        /// <inheritdoc/>
        public override void WillMiniaturize(global::Foundation.NSNotification notification) => _willMiniaturize.OnNext(notification);
        /// <inheritdoc/>
        public override void WillMove(global::Foundation.NSNotification notification) => _willMove.OnNext(notification);
        /// <inheritdoc/>
        public override void WillStartLiveResize(global::Foundation.NSNotification notification) => _willStartLiveResize.OnNext(notification);
    }
}

namespace SceneKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNAvoidOccluderConstraintDelegate"/> into Observables.
    /// </summary>
    public partial class SCNAvoidOccluderConstraintDelegateRx : global::SceneKit.SCNAvoidOccluderConstraintDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> _didAvoidOccluder = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNAvoidOccluderConstraintDelegate.DidAvoidOccluder"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> DidAvoidOccluderObs => _didAvoidOccluder;
        /// <inheritdoc/>
        public override void DidAvoidOccluder(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node) => _didAvoidOccluder.OnNext((constraint, occluder, node));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNCameraControllerDelegate"/> into Observables.
    /// </summary>
    public partial class SCNCameraControllerDelegateRx : global::SceneKit.SCNCameraControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaDidEnd = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaWillStart = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNCameraControllerDelegate.CameraInertiaDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaDidEndObs => _cameraInertiaDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNCameraControllerDelegate.CameraInertiaWillStart"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaWillStartObs => _cameraInertiaWillStart;
        /// <inheritdoc/>
        public override void CameraInertiaDidEnd(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaDidEnd.OnNext(cameraController);
        /// <inheritdoc/>
        public override void CameraInertiaWillStart(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaWillStart.OnNext(cameraController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNNodeRendererDelegate"/> into Observables.
    /// </summary>
    public partial class SCNNodeRendererDelegateRx : global::SceneKit.SCNNodeRendererDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)> _render = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNNodeRendererDelegate.Render"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)> RenderObs => _render;
        /// <inheritdoc/>
        public override void Render(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments) => _render.OnNext((node, renderer, arguments));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SCNPhysicsContactDelegateRx : global::SceneKit.SCNPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didUpdateContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidBeginContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidEndContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidEndContactObs => _didEndContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidUpdateContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidUpdateContactObs => _didUpdateContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didBeginContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidEndContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didEndContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidUpdateContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didUpdateContact.OnNext((world, contact));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNProgramDelegate"/> into Observables.
    /// </summary>
    public partial class SCNProgramDelegateRx : global::SceneKit.SCNProgramDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)> _handleError = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, string symbol, uint location, uint programID, global::SceneKit.SCNRenderer renderer)> _unbindValue = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, string symbol, uint location, uint programID, global::SceneKit.SCNRenderer renderer)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNProgramDelegate.HandleError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)> HandleErrorObs => _handleError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNProgramDelegate.UnbindValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNProgram program, string symbol, uint location, uint programID, global::SceneKit.SCNRenderer renderer)> UnbindValueObs => _unbindValue;
        /// <inheritdoc/>
        public override void HandleError(global::SceneKit.SCNProgram program, global::Foundation.NSError error) => _handleError.OnNext((program, error));
        /// <inheritdoc/>
        public override void UnbindValue(global::SceneKit.SCNProgram program, string symbol, uint location, uint programID, global::SceneKit.SCNRenderer renderer) => _unbindValue.OnNext((program, symbol, location, programID, renderer));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNSceneRendererDelegate"/> into Observables.
    /// </summary>
    public partial class SCNSceneRendererDelegateRx : global::SceneKit.SCNSceneRendererDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didApplyAnimations = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _didRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _update = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _willRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidApplyAnimations"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidApplyAnimationsObs => _didApplyAnimations;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidApplyConstraints"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> DidRenderSceneObs => _didRenderScene;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidSimulatePhysics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> UpdateObs => _update;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.WillRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> WillRenderSceneObs => _willRenderScene;
        /// <inheritdoc/>
        public override void DidApplyAnimations(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didApplyAnimations.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SceneKit.ISCNSceneRenderer renderer, double atTime) => _didApplyConstraints.OnNext((renderer, atTime));
        /// <inheritdoc/>
        public override void DidRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _didRenderScene.OnNext((renderer, scene, timeInSeconds));
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didSimulatePhysics.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void Update(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _update.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void WillRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _willRenderScene.OnNext((renderer, scene, timeInSeconds));
    }
}

namespace SpriteKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SKPhysicsContactDelegateRx : global::SpriteKit.SKPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsContactDelegate.DidBeginContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsContactDelegate.DidEndContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidEndContactObs => _didEndContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SpriteKit.SKPhysicsContact contact) => _didBeginContact.OnNext(contact);
        /// <inheritdoc/>
        public override void DidEndContact(global::SpriteKit.SKPhysicsContact contact) => _didEndContact.OnNext(contact);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKSceneDelegate"/> into Observables.
    /// </summary>
    public partial class SKSceneDelegateRx : global::SpriteKit.SKSceneDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didEvaluateActions = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didFinishUpdate = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)> _update = new Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidApplyConstraints"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidEvaluateActions"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidEvaluateActionsObs => _didEvaluateActions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidFinishUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidFinishUpdateObs => _didFinishUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidSimulatePhysics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(double currentTime, global::SpriteKit.SKScene scene)> UpdateObs => _update;
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SpriteKit.SKScene scene) => _didApplyConstraints.OnNext(scene);
        /// <inheritdoc/>
        public override void DidEvaluateActions(global::SpriteKit.SKScene scene) => _didEvaluateActions.OnNext(scene);
        /// <inheritdoc/>
        public override void DidFinishUpdate(global::SpriteKit.SKScene scene) => _didFinishUpdate.OnNext(scene);
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SpriteKit.SKScene scene) => _didSimulatePhysics.OnNext(scene);
        /// <inheritdoc/>
        public override void Update(double currentTime, global::SpriteKit.SKScene scene) => _update.OnNext((currentTime, scene));
    }
}

namespace StoreKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKProductsRequestDelegate"/> into Observables.
    /// </summary>
    public abstract partial class SKProductsRequestDelegateRx : global::StoreKit.SKProductsRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKProductsRequestDelegate.ReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <inheritdoc/>
        public override void ReceivedResponse(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response) => _receivedResponse.OnNext((request, response));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKRequestDelegate"/> into Observables.
    /// </summary>
    public partial class SKRequestDelegateRx : global::StoreKit.SKRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> _requestFailed = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest> _requestFinished = new Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequestDelegate.RequestFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> RequestFailedObs => _requestFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequestDelegate.RequestFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequest> RequestFinishedObs => _requestFinished;
        /// <inheritdoc/>
        public override void RequestFailed(global::StoreKit.SKRequest request, global::Foundation.NSError error) => _requestFailed.OnNext((request, error));
        /// <inheritdoc/>
        public override void RequestFinished(global::StoreKit.SKRequest request) => _requestFinished.OnNext(request);
    }
}

namespace UserNotifications
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::UserNotifications.UNUserNotificationCenterDelegate"/> into Observables.
    /// </summary>
    public partial class UNUserNotificationCenterDelegateRx : global::UserNotifications.UNUserNotificationCenterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)> _didReceiveNotificationResponse = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification)> _openSettings = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> _willPresentNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UserNotifications.UNUserNotificationCenterDelegate.DidReceiveNotificationResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler)> DidReceiveNotificationResponseObs => _didReceiveNotificationResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UserNotifications.UNUserNotificationCenterDelegate.OpenSettings"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification)> OpenSettingsObs => _openSettings;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UserNotifications.UNUserNotificationCenterDelegate.WillPresentNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> WillPresentNotificationObs => _willPresentNotification;
        /// <inheritdoc/>
        public override void DidReceiveNotificationResponse(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotificationResponse response, global::System.Action completionHandler) => _didReceiveNotificationResponse.OnNext((center, response, completionHandler));
        /// <inheritdoc/>
        public override void OpenSettings(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification) => _openSettings.OnNext((center, notification));
        /// <inheritdoc/>
        public override void WillPresentNotification(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler) => _willPresentNotification.OnNext((center, notification, completionHandler));
    }
}

namespace VideoSubscriberAccount
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::VideoSubscriberAccount.VSAccountManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class VSAccountManagerDelegateRx : global::VideoSubscriberAccount.VSAccountManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController)> _dismissViewController = new Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController)> _presentViewController = new Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "VideoSubscriberAccount.VSAccountManagerDelegate.DismissViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController)> DismissViewControllerObs => _dismissViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "VideoSubscriberAccount.VSAccountManagerDelegate.PresentViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController)> PresentViewControllerObs => _presentViewController;
        /// <inheritdoc/>
        public override void DismissViewController(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController) => _dismissViewController.OnNext((accountManager, viewController));
        /// <inheritdoc/>
        public override void PresentViewController(global::VideoSubscriberAccount.VSAccountManager accountManager, global::AppKit.NSViewController viewController) => _presentViewController.OnNext((accountManager, viewController));
    }
}

namespace WebKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WebFrameLoadDelegate"/> into Observables.
    /// </summary>
    public partial class WebFrameLoadDelegateRx : global::WebKit.WebFrameLoadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> _canceledClientRedirect = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> _changedLocationWithinPage = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowObject, global::WebKit.WebFrame forFrame)> _clearedWindowObject = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowObject, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> _commitedLoad = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::JavaScriptCore.JSContext context, global::WebKit.WebFrame frame)> _didCreateJavaScriptContext = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::JavaScriptCore.JSContext context, global::WebKit.WebFrame frame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame)> _failedLoadWithError = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame)> _failedProvisionalLoad = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> _finishedLoad = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::AppKit.NSImage image, global::WebKit.WebFrame forFrame)> _receivedIcon = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::AppKit.NSImage image, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> _receivedServerRedirectForProvisionalLoad = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string title, global::WebKit.WebFrame forFrame)> _receivedTitle = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string title, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> _startedProvisionalLoad = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> _willCloseFrame = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSUrl toUrl, double secondsDelay, global::Foundation.NSDate fireDate, global::WebKit.WebFrame forFrame)> _willPerformClientRedirect = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSUrl toUrl, double secondsDelay, global::Foundation.NSDate fireDate, global::WebKit.WebFrame forFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowScriptObject)> _windowScriptObjectAvailable = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowScriptObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.CanceledClientRedirect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> CanceledClientRedirectObs => _canceledClientRedirect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.ChangedLocationWithinPage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> ChangedLocationWithinPageObs => _changedLocationWithinPage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.ClearedWindowObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowObject, global::WebKit.WebFrame forFrame)> ClearedWindowObjectObs => _clearedWindowObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.CommitedLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> CommitedLoadObs => _commitedLoad;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.DidCreateJavaScriptContext"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::JavaScriptCore.JSContext context, global::WebKit.WebFrame frame)> DidCreateJavaScriptContextObs => _didCreateJavaScriptContext;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.FailedLoadWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame)> FailedLoadWithErrorObs => _failedLoadWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.FailedProvisionalLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame)> FailedProvisionalLoadObs => _failedProvisionalLoad;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.FinishedLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> FinishedLoadObs => _finishedLoad;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.ReceivedIcon"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::AppKit.NSImage image, global::WebKit.WebFrame forFrame)> ReceivedIconObs => _receivedIcon;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.ReceivedServerRedirectForProvisionalLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> ReceivedServerRedirectForProvisionalLoadObs => _receivedServerRedirectForProvisionalLoad;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.ReceivedTitle"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, string title, global::WebKit.WebFrame forFrame)> ReceivedTitleObs => _receivedTitle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.StartedProvisionalLoad"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> StartedProvisionalLoadObs => _startedProvisionalLoad;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.WillCloseFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame)> WillCloseFrameObs => _willCloseFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.WillPerformClientRedirect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSUrl toUrl, double secondsDelay, global::Foundation.NSDate fireDate, global::WebKit.WebFrame forFrame)> WillPerformClientRedirectObs => _willPerformClientRedirect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebFrameLoadDelegate.WindowScriptObjectAvailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowScriptObject)> WindowScriptObjectAvailableObs => _windowScriptObjectAvailable;
        /// <inheritdoc/>
        public override void CanceledClientRedirect(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame) => _canceledClientRedirect.OnNext((sender, forFrame));
        /// <inheritdoc/>
        public override void ChangedLocationWithinPage(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame) => _changedLocationWithinPage.OnNext((sender, forFrame));
        /// <inheritdoc/>
        public override void ClearedWindowObject(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowObject, global::WebKit.WebFrame forFrame) => _clearedWindowObject.OnNext((webView, windowObject, forFrame));
        /// <inheritdoc/>
        public override void CommitedLoad(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame) => _commitedLoad.OnNext((sender, forFrame));
        /// <inheritdoc/>
        public override void DidCreateJavaScriptContext(global::WebKit.WebView webView, global::JavaScriptCore.JSContext context, global::WebKit.WebFrame frame) => _didCreateJavaScriptContext.OnNext((webView, context, frame));
        /// <inheritdoc/>
        public override void FailedLoadWithError(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame) => _failedLoadWithError.OnNext((sender, error, forFrame));
        /// <inheritdoc/>
        public override void FailedProvisionalLoad(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebFrame forFrame) => _failedProvisionalLoad.OnNext((sender, error, forFrame));
        /// <inheritdoc/>
        public override void FinishedLoad(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame) => _finishedLoad.OnNext((sender, forFrame));
        /// <inheritdoc/>
        public override void ReceivedIcon(global::WebKit.WebView sender, global::AppKit.NSImage image, global::WebKit.WebFrame forFrame) => _receivedIcon.OnNext((sender, image, forFrame));
        /// <inheritdoc/>
        public override void ReceivedServerRedirectForProvisionalLoad(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame) => _receivedServerRedirectForProvisionalLoad.OnNext((sender, forFrame));
        /// <inheritdoc/>
        public override void ReceivedTitle(global::WebKit.WebView sender, string title, global::WebKit.WebFrame forFrame) => _receivedTitle.OnNext((sender, title, forFrame));
        /// <inheritdoc/>
        public override void StartedProvisionalLoad(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame) => _startedProvisionalLoad.OnNext((sender, forFrame));
        /// <inheritdoc/>
        public override void WillCloseFrame(global::WebKit.WebView sender, global::WebKit.WebFrame forFrame) => _willCloseFrame.OnNext((sender, forFrame));
        /// <inheritdoc/>
        public override void WillPerformClientRedirect(global::WebKit.WebView sender, global::Foundation.NSUrl toUrl, double secondsDelay, global::Foundation.NSDate fireDate, global::WebKit.WebFrame forFrame) => _willPerformClientRedirect.OnNext((sender, toUrl, secondsDelay, fireDate, forFrame));
        /// <inheritdoc/>
        public override void WindowScriptObjectAvailable(global::WebKit.WebView webView, global::WebKit.WebScriptObject windowScriptObject) => _windowScriptObjectAvailable.OnNext((webView, windowScriptObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WebPolicyDelegate"/> into Observables.
    /// </summary>
    public partial class WebPolicyDelegateRx : global::WebKit.WebPolicyDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, string mimeType, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken)> _decidePolicyForMimeType = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, string mimeType, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken)> _decidePolicyForNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, string newFrameName, global::Foundation.NSObject decisionToken)> _decidePolicyForNewWindow = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, string newFrameName, global::Foundation.NSObject decisionToken)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::Foundation.NSError error, global::WebKit.WebFrame frame)> _unableToImplementPolicy = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::Foundation.NSError error, global::WebKit.WebFrame frame)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebPolicyDelegate.DecidePolicyForMimeType"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, string mimeType, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken)> DecidePolicyForMimeTypeObs => _decidePolicyForMimeType;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebPolicyDelegate.DecidePolicyForNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken)> DecidePolicyForNavigationObs => _decidePolicyForNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebPolicyDelegate.DecidePolicyForNewWindow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, string newFrameName, global::Foundation.NSObject decisionToken)> DecidePolicyForNewWindowObs => _decidePolicyForNewWindow;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebPolicyDelegate.UnableToImplementPolicy"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::Foundation.NSError error, global::WebKit.WebFrame frame)> UnableToImplementPolicyObs => _unableToImplementPolicy;
        /// <inheritdoc/>
        public override void DecidePolicyForMimeType(global::WebKit.WebView webView, string mimeType, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken) => _decidePolicyForMimeType.OnNext((webView, mimeType, request, frame, decisionToken));
        /// <inheritdoc/>
        public override void DecidePolicyForNavigation(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, global::WebKit.WebFrame frame, global::Foundation.NSObject decisionToken) => _decidePolicyForNavigation.OnNext((webView, actionInformation, request, frame, decisionToken));
        /// <inheritdoc/>
        public override void DecidePolicyForNewWindow(global::WebKit.WebView webView, global::Foundation.NSDictionary actionInformation, global::Foundation.NSUrlRequest request, string newFrameName, global::Foundation.NSObject decisionToken) => _decidePolicyForNewWindow.OnNext((webView, actionInformation, request, newFrameName, decisionToken));
        /// <inheritdoc/>
        public override void UnableToImplementPolicy(global::WebKit.WebView webView, global::Foundation.NSError error, global::WebKit.WebFrame frame) => _unableToImplementPolicy.OnNext((webView, error, frame));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WebResourceLoadDelegate"/> into Observables.
    /// </summary>
    public partial class WebResourceLoadDelegateRx : global::WebKit.WebResourceLoadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource)> _onCancelledAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSError withError, global::WebKit.WebDataSource dataSource)> _onFailedLoading = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSError withError, global::WebKit.WebDataSource dataSource)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::WebKit.WebDataSource dataSource)> _onFinishedLoading = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::WebKit.WebDataSource dataSource)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebDataSource dataSource)> _onPlugInFailed = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebDataSource dataSource)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource)> _onReceivedAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::System.nint length, global::WebKit.WebDataSource dataSource)> _onReceivedContentLength = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::System.nint length, global::WebKit.WebDataSource dataSource)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlResponse responseReceived, global::WebKit.WebDataSource dataSource)> _onReceivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlResponse responseReceived, global::WebKit.WebDataSource dataSource)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebResourceLoadDelegate.OnCancelledAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource)> OnCancelledAuthenticationChallengeObs => _onCancelledAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebResourceLoadDelegate.OnFailedLoading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSError withError, global::WebKit.WebDataSource dataSource)> OnFailedLoadingObs => _onFailedLoading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebResourceLoadDelegate.OnFinishedLoading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::WebKit.WebDataSource dataSource)> OnFinishedLoadingObs => _onFinishedLoading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebResourceLoadDelegate.OnPlugInFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebDataSource dataSource)> OnPlugInFailedObs => _onPlugInFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebResourceLoadDelegate.OnReceivedAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource)> OnReceivedAuthenticationChallengeObs => _onReceivedAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebResourceLoadDelegate.OnReceivedContentLength"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::System.nint length, global::WebKit.WebDataSource dataSource)> OnReceivedContentLengthObs => _onReceivedContentLength;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebResourceLoadDelegate.OnReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlResponse responseReceived, global::WebKit.WebDataSource dataSource)> OnReceivedResponseObs => _onReceivedResponse;
        /// <inheritdoc/>
        public override void OnCancelledAuthenticationChallenge(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource) => _onCancelledAuthenticationChallenge.OnNext((sender, identifier, challenge, dataSource));
        /// <inheritdoc/>
        public override void OnFailedLoading(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSError withError, global::WebKit.WebDataSource dataSource) => _onFailedLoading.OnNext((sender, identifier, withError, dataSource));
        /// <inheritdoc/>
        public override void OnFinishedLoading(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::WebKit.WebDataSource dataSource) => _onFinishedLoading.OnNext((sender, identifier, dataSource));
        /// <inheritdoc/>
        public override void OnPlugInFailed(global::WebKit.WebView sender, global::Foundation.NSError error, global::WebKit.WebDataSource dataSource) => _onPlugInFailed.OnNext((sender, error, dataSource));
        /// <inheritdoc/>
        public override void OnReceivedAuthenticationChallenge(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlAuthenticationChallenge challenge, global::WebKit.WebDataSource dataSource) => _onReceivedAuthenticationChallenge.OnNext((sender, identifier, challenge, dataSource));
        /// <inheritdoc/>
        public override void OnReceivedContentLength(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::System.nint length, global::WebKit.WebDataSource dataSource) => _onReceivedContentLength.OnNext((sender, identifier, length, dataSource));
        /// <inheritdoc/>
        public override void OnReceivedResponse(global::WebKit.WebView sender, global::Foundation.NSObject identifier, global::Foundation.NSUrlResponse responseReceived, global::WebKit.WebDataSource dataSource) => _onReceivedResponse.OnNext((sender, identifier, responseReceived, dataSource));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WebUIDelegate"/> into Observables.
    /// </summary>
    public partial class WebUIDelegateRx : global::WebKit.WebUIDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView> _uIClose = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect)> _uIDrawFooterInRect = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect)> _uIDrawHeaderInRect = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView> _uIFocus = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::AppKit.NSResponder newResponder)> _uIMakeFirstResponder = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::AppKit.NSResponder newResponder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSDictionary elementInformation, global::AppKit.NSEventModifierMask modifierFlags)> _uIMouseDidMoveOverElement = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::Foundation.NSDictionary elementInformation, global::AppKit.NSEventModifierMask modifierFlags)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrameView frameView)> _uIPrintFrameView = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.WebFrameView frameView)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string message)> _uIRunJavaScriptAlertPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string message)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string withMessage, global::WebKit.WebFrame initiatedByFrame)> _uIRunJavaScriptAlertPanelMessage = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string withMessage, global::WebKit.WebFrame initiatedByFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView> _uIRunModal = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.IWebOpenPanelResultListener resultListener)> _uIRunOpenPanelForFileButton = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::WebKit.IWebOpenPanelResultListener resultListener)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect frame)> _uISetContentRect = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect frame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect newFrame)> _uISetFrame = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, global::CoreGraphics.CGRect newFrame)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, bool resizable)> _uISetResizable = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, bool resizable)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, bool visible)> _uISetStatusBarVisible = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, bool visible)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string text)> _uISetStatusText = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, string text)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, bool visible)> _uISetToolbarsVisible = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView sender, bool visible)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView> _uIShow = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView> _uIUnfocus = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebDragDestinationAction action, global::AppKit.NSDraggingInfo draggingInfo)> _uIWillPerformDragDestination = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebDragDestinationAction action, global::AppKit.NSDraggingInfo draggingInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebDragSourceAction action, global::CoreGraphics.CGPoint sourcePoint, global::AppKit.NSPasteboard pasteboard)> _uIWillPerformDragSource = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WebView webView, global::WebKit.WebDragSourceAction action, global::CoreGraphics.CGPoint sourcePoint, global::AppKit.NSPasteboard pasteboard)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebView> UICloseObs => _uIClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIDrawFooterInRect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect)> UIDrawFooterInRectObs => _uIDrawFooterInRect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIDrawHeaderInRect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect)> UIDrawHeaderInRectObs => _uIDrawHeaderInRect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIFocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebView> UIFocusObs => _uIFocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIMakeFirstResponder"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::AppKit.NSResponder newResponder)> UIMakeFirstResponderObs => _uIMakeFirstResponder;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIMouseDidMoveOverElement"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::Foundation.NSDictionary elementInformation, global::AppKit.NSEventModifierMask modifierFlags)> UIMouseDidMoveOverElementObs => _uIMouseDidMoveOverElement;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIPrintFrameView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.WebFrameView frameView)> UIPrintFrameViewObs => _uIPrintFrameView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIRunJavaScriptAlertPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, string message)> UIRunJavaScriptAlertPanelObs => _uIRunJavaScriptAlertPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIRunJavaScriptAlertPanelMessage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, string withMessage, global::WebKit.WebFrame initiatedByFrame)> UIRunJavaScriptAlertPanelMessageObs => _uIRunJavaScriptAlertPanelMessage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIRunModal"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebView> UIRunModalObs => _uIRunModal;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIRunOpenPanelForFileButton"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::WebKit.IWebOpenPanelResultListener resultListener)> UIRunOpenPanelForFileButtonObs => _uIRunOpenPanelForFileButton;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UISetContentRect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::CoreGraphics.CGRect frame)> UISetContentRectObs => _uISetContentRect;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UISetFrame"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, global::CoreGraphics.CGRect newFrame)> UISetFrameObs => _uISetFrame;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UISetResizable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, bool resizable)> UISetResizableObs => _uISetResizable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UISetStatusBarVisible"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, bool visible)> UISetStatusBarVisibleObs => _uISetStatusBarVisible;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UISetStatusText"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, string text)> UISetStatusTextObs => _uISetStatusText;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UISetToolbarsVisible"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView sender, bool visible)> UISetToolbarsVisibleObs => _uISetToolbarsVisible;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIShow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebView> UIShowObs => _uIShow;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIUnfocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WebView> UIUnfocusObs => _uIUnfocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIWillPerformDragDestination"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::WebKit.WebDragDestinationAction action, global::AppKit.NSDraggingInfo draggingInfo)> UIWillPerformDragDestinationObs => _uIWillPerformDragDestination;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WebUIDelegate.UIWillPerformDragSource"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WebView webView, global::WebKit.WebDragSourceAction action, global::CoreGraphics.CGPoint sourcePoint, global::AppKit.NSPasteboard pasteboard)> UIWillPerformDragSourceObs => _uIWillPerformDragSource;
        /// <inheritdoc/>
        public override void UIClose(global::WebKit.WebView sender) => _uIClose.OnNext(sender);
        /// <inheritdoc/>
        public override void UIDrawFooterInRect(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect) => _uIDrawFooterInRect.OnNext((sender, rect));
        /// <inheritdoc/>
        public override void UIDrawHeaderInRect(global::WebKit.WebView sender, global::CoreGraphics.CGRect rect) => _uIDrawHeaderInRect.OnNext((sender, rect));
        /// <inheritdoc/>
        public override void UIFocus(global::WebKit.WebView sender) => _uIFocus.OnNext(sender);
        /// <inheritdoc/>
        public override void UIMakeFirstResponder(global::WebKit.WebView sender, global::AppKit.NSResponder newResponder) => _uIMakeFirstResponder.OnNext((sender, newResponder));
        /// <inheritdoc/>
        public override void UIMouseDidMoveOverElement(global::WebKit.WebView sender, global::Foundation.NSDictionary elementInformation, global::AppKit.NSEventModifierMask modifierFlags) => _uIMouseDidMoveOverElement.OnNext((sender, elementInformation, modifierFlags));
        /// <inheritdoc/>
        public override void UIPrintFrameView(global::WebKit.WebView sender, global::WebKit.WebFrameView frameView) => _uIPrintFrameView.OnNext((sender, frameView));
        /// <inheritdoc/>
        public override void UIRunJavaScriptAlertPanel(global::WebKit.WebView sender, string message) => _uIRunJavaScriptAlertPanel.OnNext((sender, message));
        /// <inheritdoc/>
        public override void UIRunJavaScriptAlertPanelMessage(global::WebKit.WebView sender, string withMessage, global::WebKit.WebFrame initiatedByFrame) => _uIRunJavaScriptAlertPanelMessage.OnNext((sender, withMessage, initiatedByFrame));
        /// <inheritdoc/>
        public override void UIRunModal(global::WebKit.WebView sender) => _uIRunModal.OnNext(sender);
        /// <inheritdoc/>
        public override void UIRunOpenPanelForFileButton(global::WebKit.WebView sender, global::WebKit.IWebOpenPanelResultListener resultListener) => _uIRunOpenPanelForFileButton.OnNext((sender, resultListener));
        /// <inheritdoc/>
        public override void UISetContentRect(global::WebKit.WebView sender, global::CoreGraphics.CGRect frame) => _uISetContentRect.OnNext((sender, frame));
        /// <inheritdoc/>
        public override void UISetFrame(global::WebKit.WebView sender, global::CoreGraphics.CGRect newFrame) => _uISetFrame.OnNext((sender, newFrame));
        /// <inheritdoc/>
        public override void UISetResizable(global::WebKit.WebView sender, bool resizable) => _uISetResizable.OnNext((sender, resizable));
        /// <inheritdoc/>
        public override void UISetStatusBarVisible(global::WebKit.WebView sender, bool visible) => _uISetStatusBarVisible.OnNext((sender, visible));
        /// <inheritdoc/>
        public override void UISetStatusText(global::WebKit.WebView sender, string text) => _uISetStatusText.OnNext((sender, text));
        /// <inheritdoc/>
        public override void UISetToolbarsVisible(global::WebKit.WebView sender, bool visible) => _uISetToolbarsVisible.OnNext((sender, visible));
        /// <inheritdoc/>
        public override void UIShow(global::WebKit.WebView sender) => _uIShow.OnNext(sender);
        /// <inheritdoc/>
        public override void UIUnfocus(global::WebKit.WebView sender) => _uIUnfocus.OnNext(sender);
        /// <inheritdoc/>
        public override void UIWillPerformDragDestination(global::WebKit.WebView webView, global::WebKit.WebDragDestinationAction action, global::AppKit.NSDraggingInfo draggingInfo) => _uIWillPerformDragDestination.OnNext((webView, action, draggingInfo));
        /// <inheritdoc/>
        public override void UIWillPerformDragSource(global::WebKit.WebView webView, global::WebKit.WebDragSourceAction action, global::CoreGraphics.CGPoint sourcePoint, global::AppKit.NSPasteboard pasteboard) => _uIWillPerformDragSource.OnNext((webView, action, sourcePoint, pasteboard));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WKNavigationDelegate"/> into Observables.
    /// </summary>
    public partial class WKNavigationDelegateRx : global::WebKit.WKNavigationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView> _contentProcessDidTerminate = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler)> _decidePolicy = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didCommitNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> _didFailNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> _didFailProvisionalNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didFinishNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didReceiveServerRedirectForProvisionalNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> _didStartProvisionalNavigation = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.ContentProcessDidTerminate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WKWebView> ContentProcessDidTerminateObs => _contentProcessDidTerminate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DecidePolicy"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler)> DecidePolicyObs => _decidePolicy;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidCommitNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidCommitNavigationObs => _didCommitNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidFailNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> DidFailNavigationObs => _didFailNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidFailProvisionalNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error)> DidFailProvisionalNavigationObs => _didFailProvisionalNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidFinishNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidFinishNavigationObs => _didFinishNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidReceiveAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveAuthenticationChallengeObs => _didReceiveAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidReceiveServerRedirectForProvisionalNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidReceiveServerRedirectForProvisionalNavigationObs => _didReceiveServerRedirectForProvisionalNavigation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKNavigationDelegate.DidStartProvisionalNavigation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation)> DidStartProvisionalNavigationObs => _didStartProvisionalNavigation;
        /// <inheritdoc/>
        public override void ContentProcessDidTerminate(global::WebKit.WKWebView webView) => _contentProcessDidTerminate.OnNext(webView);
        /// <inheritdoc/>
        public override void DecidePolicy(global::WebKit.WKWebView webView, global::WebKit.WKNavigationAction navigationAction, global::System.Action<global::WebKit.WKNavigationActionPolicy> decisionHandler) => _decidePolicy.OnNext((webView, navigationAction, decisionHandler));
        /// <inheritdoc/>
        public override void DidCommitNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didCommitNavigation.OnNext((webView, navigation));
        /// <inheritdoc/>
        public override void DidFailNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error) => _didFailNavigation.OnNext((webView, navigation, error));
        /// <inheritdoc/>
        public override void DidFailProvisionalNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation, global::Foundation.NSError error) => _didFailProvisionalNavigation.OnNext((webView, navigation, error));
        /// <inheritdoc/>
        public override void DidFinishNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didFinishNavigation.OnNext((webView, navigation));
        /// <inheritdoc/>
        public override void DidReceiveAuthenticationChallenge(global::WebKit.WKWebView webView, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveAuthenticationChallenge.OnNext((webView, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidReceiveServerRedirectForProvisionalNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didReceiveServerRedirectForProvisionalNavigation.OnNext((webView, navigation));
        /// <inheritdoc/>
        public override void DidStartProvisionalNavigation(global::WebKit.WKWebView webView, global::WebKit.WKNavigation navigation) => _didStartProvisionalNavigation.OnNext((webView, navigation));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::WebKit.WKUIDelegate"/> into Observables.
    /// </summary>
    public partial class WKUIDelegateRx : global::WebKit.WKUIDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView> _didClose = new Pharmacist.Common.SingleAwaitSubject<global::WebKit.WKWebView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler)> _runJavaScriptAlertPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler)> _runJavaScriptConfirmPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler)> _runJavaScriptTextInputPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKOpenPanelParameters parameters, global::WebKit.WKFrameInfo frame, global::System.Action<global::Foundation.NSUrl[]> completionHandler)> _runOpenPanel = new Pharmacist.Common.SingleAwaitSubject<(global::WebKit.WKWebView webView, global::WebKit.WKOpenPanelParameters parameters, global::WebKit.WKFrameInfo frame, global::System.Action<global::Foundation.NSUrl[]> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.DidClose"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::WebKit.WKWebView> DidCloseObs => _didClose;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.RunJavaScriptAlertPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler)> RunJavaScriptAlertPanelObs => _runJavaScriptAlertPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.RunJavaScriptConfirmPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler)> RunJavaScriptConfirmPanelObs => _runJavaScriptConfirmPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.RunJavaScriptTextInputPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler)> RunJavaScriptTextInputPanelObs => _runJavaScriptTextInputPanel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "WebKit.WKUIDelegate.RunOpenPanel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::WebKit.WKWebView webView, global::WebKit.WKOpenPanelParameters parameters, global::WebKit.WKFrameInfo frame, global::System.Action<global::Foundation.NSUrl[]> completionHandler)> RunOpenPanelObs => _runOpenPanel;
        /// <inheritdoc/>
        public override void DidClose(global::WebKit.WKWebView webView) => _didClose.OnNext(webView);
        /// <inheritdoc/>
        public override void RunJavaScriptAlertPanel(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action completionHandler) => _runJavaScriptAlertPanel.OnNext((webView, message, frame, completionHandler));
        /// <inheritdoc/>
        public override void RunJavaScriptConfirmPanel(global::WebKit.WKWebView webView, string message, global::WebKit.WKFrameInfo frame, global::System.Action<bool> completionHandler) => _runJavaScriptConfirmPanel.OnNext((webView, message, frame, completionHandler));
        /// <inheritdoc/>
        public override void RunJavaScriptTextInputPanel(global::WebKit.WKWebView webView, string prompt, string defaultText, global::WebKit.WKFrameInfo frame, global::System.Action<string> completionHandler) => _runJavaScriptTextInputPanel.OnNext((webView, prompt, defaultText, frame, completionHandler));
        /// <inheritdoc/>
        public override void RunOpenPanel(global::WebKit.WKWebView webView, global::WebKit.WKOpenPanelParameters parameters, global::WebKit.WKFrameInfo frame, global::System.Action<global::Foundation.NSUrl[]> completionHandler) => _runOpenPanel.OnNext((webView, parameters, frame, completionHandler));
    }
}