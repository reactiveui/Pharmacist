
using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace ElmSharp
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "ElmSharp"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Button"/> class.
        /// </summary>
        public static ButtonEvents Events(this global::ElmSharp.Button item) => new ButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Calendar"/> class.
        /// </summary>
        public static CalendarEvents Events(this global::ElmSharp.Calendar item) => new CalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Check"/> class.
        /// </summary>
        public static CheckEvents Events(this global::ElmSharp.Check item) => new CheckEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.ColorSelector"/> class.
        /// </summary>
        public static ColorSelectorEvents Events(this global::ElmSharp.ColorSelector item) => new ColorSelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.ContextPopup"/> class.
        /// </summary>
        public static ContextPopupEvents Events(this global::ElmSharp.ContextPopup item) => new ContextPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.ContextPopupItem"/> class.
        /// </summary>
        public static ContextPopupItemEvents Events(this global::ElmSharp.ContextPopupItem item) => new ContextPopupItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.DateTimeSelector"/> class.
        /// </summary>
        public static DateTimeSelectorEvents Events(this global::ElmSharp.DateTimeSelector item) => new DateTimeSelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.EcoreTimelineAnimator"/> class.
        /// </summary>
        public static EcoreTimelineAnimatorEvents Events(this global::ElmSharp.EcoreTimelineAnimator item) => new EcoreTimelineAnimatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.EffectBase"/> class.
        /// </summary>
        public static EffectBaseEvents Events(this global::ElmSharp.EffectBase item) => new EffectBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Entry"/> class.
        /// </summary>
        public static EntryEvents Events(this global::ElmSharp.Entry item) => new EntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.EvasObject"/> class.
        /// </summary>
        public static EvasObjectEvents Events(this global::ElmSharp.EvasObject item) => new EvasObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.EvasObjectEvent"/> class.
        /// </summary>
        public static EvasObjectEventEvents Events(this global::ElmSharp.EvasObjectEvent item) => new EvasObjectEventEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.FlipSelector"/> class.
        /// </summary>
        public static FlipSelectorEvents Events(this global::ElmSharp.FlipSelector item) => new FlipSelectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.FlipSelectorItem"/> class.
        /// </summary>
        public static FlipSelectorItemEvents Events(this global::ElmSharp.FlipSelectorItem item) => new FlipSelectorItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.GenGrid"/> class.
        /// </summary>
        public static GenGridEvents Events(this global::ElmSharp.GenGrid item) => new GenGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.GenList"/> class.
        /// </summary>
        public static GenListEvents Events(this global::ElmSharp.GenList item) => new GenListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Hoversel"/> class.
        /// </summary>
        public static HoverselEvents Events(this global::ElmSharp.Hoversel item) => new HoverselEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.HoverselItem"/> class.
        /// </summary>
        public static HoverselItemEvents Events(this global::ElmSharp.HoverselItem item) => new HoverselItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Image"/> class.
        /// </summary>
        public static ImageEvents Events(this global::ElmSharp.Image item) => new ImageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Index"/> class.
        /// </summary>
        public static IndexEvents Events(this global::ElmSharp.Index item) => new IndexEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.IndexItem"/> class.
        /// </summary>
        public static IndexItemEvents Events(this global::ElmSharp.IndexItem item) => new IndexItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.ItemObject"/> class.
        /// </summary>
        public static ItemObjectEvents Events(this global::ElmSharp.ItemObject item) => new ItemObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Label"/> class.
        /// </summary>
        public static LabelEvents Events(this global::ElmSharp.Label item) => new LabelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Layout"/> class.
        /// </summary>
        public static LayoutEvents Events(this global::ElmSharp.Layout item) => new LayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.List"/> class.
        /// </summary>
        public static ListEvents Events(this global::ElmSharp.List item) => new ListEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.MultiButtonEntry"/> class.
        /// </summary>
        public static MultiButtonEntryEvents Events(this global::ElmSharp.MultiButtonEntry item) => new MultiButtonEntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Naviframe"/> class.
        /// </summary>
        public static NaviframeEvents Events(this global::ElmSharp.Naviframe item) => new NaviframeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.NaviItem"/> class.
        /// </summary>
        public static NaviItemEvents Events(this global::ElmSharp.NaviItem item) => new NaviItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Panel"/> class.
        /// </summary>
        public static PanelEvents Events(this global::ElmSharp.Panel item) => new PanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Panes"/> class.
        /// </summary>
        public static PanesEvents Events(this global::ElmSharp.Panes item) => new PanesEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Popup"/> class.
        /// </summary>
        public static PopupEvents Events(this global::ElmSharp.Popup item) => new PopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.ProgressBar"/> class.
        /// </summary>
        public static ProgressBarEvents Events(this global::ElmSharp.ProgressBar item) => new ProgressBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Radio"/> class.
        /// </summary>
        public static RadioEvents Events(this global::ElmSharp.Radio item) => new RadioEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Scroller"/> class.
        /// </summary>
        public static ScrollerEvents Events(this global::ElmSharp.Scroller item) => new ScrollerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Slider"/> class.
        /// </summary>
        public static SliderEvents Events(this global::ElmSharp.Slider item) => new SliderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.SmartEvent"/> class.
        /// </summary>
        public static SmartEventEvents Events(this global::ElmSharp.SmartEvent item) => new SmartEventEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Spinner"/> class.
        /// </summary>
        public static SpinnerEvents Events(this global::ElmSharp.Spinner item) => new SpinnerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Toolbar"/> class.
        /// </summary>
        public static ToolbarEvents Events(this global::ElmSharp.Toolbar item) => new ToolbarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.ToolbarItem"/> class.
        /// </summary>
        public static ToolbarItemEvents Events(this global::ElmSharp.ToolbarItem item) => new ToolbarItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Transit"/> class.
        /// </summary>
        public static TransitEvents Events(this global::ElmSharp.Transit item) => new TransitEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Widget"/> class.
        /// </summary>
        public static WidgetEvents Events(this global::ElmSharp.Widget item) => new WidgetEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Window"/> class.
        /// </summary>
        public static WindowEvents Events(this global::ElmSharp.Window item) => new WindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Button"/> class as observables.
    /// </summary>
    public class ButtonEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonEvents(global::ElmSharp.Button data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Button.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Button.Pressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Pressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pressed += x, x => _data.Pressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Button.Released"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Released => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Released += x, x => _data.Released -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Button.Repeated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Repeated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Repeated += x, x => _data.Repeated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Calendar"/> class as observables.
    /// </summary>
    public class CalendarEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Calendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Calendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CalendarEvents(global::ElmSharp.Calendar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Calendar.DateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.DateChangedEventArgs> DateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.DateChangedEventArgs>, global::ElmSharp.DateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.DateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateChanged += x, x => _data.DateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Calendar.DisplayedMonthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.DisplayedMonthChangedEventArgs> DisplayedMonthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.DisplayedMonthChangedEventArgs>, global::ElmSharp.DisplayedMonthChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.DisplayedMonthChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DisplayedMonthChanged += x, x => _data.DisplayedMonthChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Check"/> class as observables.
    /// </summary>
    public class CheckEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Check _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Check"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CheckEvents(global::ElmSharp.Check data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Check.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.CheckStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.CheckStateChangedEventArgs>, global::ElmSharp.CheckStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.CheckStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.ColorSelector"/> class as observables.
    /// </summary>
    public class ColorSelectorEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.ColorSelector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.ColorSelector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ColorSelectorEvents(global::ElmSharp.ColorSelector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ColorSelector.ColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ColorChangedEventArgs> ColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ColorChangedEventArgs>, global::ElmSharp.ColorChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ColorChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ColorChanged += x, x => _data.ColorChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.ContextPopup"/> class as observables.
    /// </summary>
    public class ContextPopupEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.ContextPopup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.ContextPopup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContextPopupEvents(global::ElmSharp.ContextPopup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ContextPopup.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Dismissed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Dismissed += x, x => _data.Dismissed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.ContextPopupItem"/> class as observables.
    /// </summary>
    public class ContextPopupItemEvents : global::ElmSharp.ItemObjectEvents
    {
        private readonly global::ElmSharp.ContextPopupItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.ContextPopupItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContextPopupItemEvents(global::ElmSharp.ContextPopupItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ContextPopupItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.DateTimeSelector"/> class as observables.
    /// </summary>
    public class DateTimeSelectorEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.DateTimeSelector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.DateTimeSelector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DateTimeSelectorEvents(global::ElmSharp.DateTimeSelector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.DateTimeSelector.DateTimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.DateChangedEventArgs> DateTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.DateChangedEventArgs>, global::ElmSharp.DateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.DateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateTimeChanged += x, x => _data.DateTimeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.EcoreTimelineAnimator"/> class as observables.
    /// </summary>
    public class EcoreTimelineAnimatorEvents
    {
        private readonly global::ElmSharp.EcoreTimelineAnimator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.EcoreTimelineAnimator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EcoreTimelineAnimatorEvents(global::ElmSharp.EcoreTimelineAnimator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EcoreTimelineAnimator.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Finished += x, x => _data.Finished -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.EffectBase"/> class as observables.
    /// </summary>
    public class EffectBaseEvents
    {
        private readonly global::ElmSharp.EffectBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.EffectBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EffectBaseEvents(global::ElmSharp.EffectBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EffectBase.EffectEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EffectEnded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EffectEnded += x, x => _data.EffectEnded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Entry"/> class as observables.
    /// </summary>
    public class EntryEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Entry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Entry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EntryEvents(global::ElmSharp.Entry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Entry.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Entry.ChangedByUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ChangedByUser => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChangedByUser += x, x => _data.ChangedByUser -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Entry.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Entry.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.EvasObject"/> class as observables.
    /// </summary>
    public class EvasObjectEvents
    {
        private readonly global::ElmSharp.EvasObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.EvasObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EvasObjectEvents(global::ElmSharp.EvasObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.BackButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.Deleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Deleted += x, x => _data.Deleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.EvasKeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.EvasKeyEventArgs>, global::ElmSharp.EvasKeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.EvasKeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.EvasKeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.EvasKeyEventArgs>, global::ElmSharp.EvasKeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.EvasKeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.MoreButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MoreButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MoreButtonPressed += x, x => _data.MoreButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.Moved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Moved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Moved += x, x => _data.Moved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.RenderPost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RenderPost => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RenderPost += x, x => _data.RenderPost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObject.Resized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resized += x, x => _data.Resized -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.EvasObjectEvent"/> class as observables.
    /// </summary>
    public class EvasObjectEventEvents
    {
        private readonly global::ElmSharp.EvasObjectEvent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.EvasObjectEvent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EvasObjectEventEvents(global::ElmSharp.EvasObjectEvent data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.EvasObjectEvent.On"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> On => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.On += x, x => _data.On -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.FlipSelector"/> class as observables.
    /// </summary>
    public class FlipSelectorEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.FlipSelector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.FlipSelector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FlipSelectorEvents(global::ElmSharp.FlipSelector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.FlipSelector.Overflowed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Overflowed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Overflowed += x, x => _data.Overflowed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.FlipSelector.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.FlipSelector.Underflowed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Underflowed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Underflowed += x, x => _data.Underflowed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.FlipSelectorItem"/> class as observables.
    /// </summary>
    public class FlipSelectorItemEvents : global::ElmSharp.ItemObjectEvents
    {
        private readonly global::ElmSharp.FlipSelectorItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.FlipSelectorItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FlipSelectorItemEvents(global::ElmSharp.FlipSelectorItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.FlipSelectorItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.GenGrid"/> class as observables.
    /// </summary>
    public class GenGridEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.GenGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.GenGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GenGridEvents(global::ElmSharp.GenGrid data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemActivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemActivated += x, x => _data.ItemActivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemDoubleClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemDoubleClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemDoubleClicked += x, x => _data.ItemDoubleClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemLongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemLongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemLongPressed += x, x => _data.ItemLongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemPressed += x, x => _data.ItemPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemRealized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemRealized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemRealized += x, x => _data.ItemRealized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemReleased += x, x => _data.ItemReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemUnrealized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemUnrealized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemUnrealized += x, x => _data.ItemUnrealized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenGrid.ItemUnselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenGridItemEventArgs> ItemUnselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenGridItemEventArgs>, global::ElmSharp.GenGridItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenGridItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemUnselected += x, x => _data.ItemUnselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.GenList"/> class as observables.
    /// </summary>
    public class GenListEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.GenList _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.GenList"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GenListEvents(global::ElmSharp.GenList data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemActivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemActivated += x, x => _data.ItemActivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemDoubleClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemDoubleClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemDoubleClicked += x, x => _data.ItemDoubleClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemExpanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemExpanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemExpanded += x, x => _data.ItemExpanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemLongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemLongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemLongPressed += x, x => _data.ItemLongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemMoved += x, x => _data.ItemMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemMovedAfter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemMovedAfter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemMovedAfter += x, x => _data.ItemMovedAfter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemMovedBefore"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemMovedBefore => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemMovedBefore += x, x => _data.ItemMovedBefore -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemPressed += x, x => _data.ItemPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemRealized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemRealized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemRealized += x, x => _data.ItemRealized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemReleased += x, x => _data.ItemReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemUnrealized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemUnrealized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemUnrealized += x, x => _data.ItemUnrealized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ItemUnselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.GenListItemEventArgs> ItemUnselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.GenListItemEventArgs>, global::ElmSharp.GenListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.GenListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemUnselected += x, x => _data.ItemUnselected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ScrollAnimationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollAnimationStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollAnimationStarted += x, x => _data.ScrollAnimationStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.GenList.ScrollAnimationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollAnimationStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollAnimationStopped += x, x => _data.ScrollAnimationStopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Hoversel"/> class as observables.
    /// </summary>
    public class HoverselEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Hoversel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Hoversel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HoverselEvents(global::ElmSharp.Hoversel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Hoversel.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Hoversel.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Dismissed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Dismissed += x, x => _data.Dismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Hoversel.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Expanded += x, x => _data.Expanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Hoversel.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.HoverselItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.HoverselItemEventArgs>, global::ElmSharp.HoverselItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.HoverselItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.HoverselItem"/> class as observables.
    /// </summary>
    public class HoverselItemEvents : global::ElmSharp.ItemObjectEvents
    {
        private readonly global::ElmSharp.HoverselItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.HoverselItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HoverselItemEvents(global::ElmSharp.HoverselItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.HoverselItem.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Image"/> class as observables.
    /// </summary>
    public class ImageEvents : global::ElmSharp.WidgetEvents
    {
        private readonly global::ElmSharp.Image _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Image"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageEvents(global::ElmSharp.Image data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Image.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Image.LoadingCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LoadingCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LoadingCompleted += x, x => _data.LoadingCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Image.LoadingFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LoadingFailed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LoadingFailed += x, x => _data.LoadingFailed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Index"/> class as observables.
    /// </summary>
    public class IndexEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Index _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Index"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IndexEvents(global::ElmSharp.Index data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Index.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.IndexItem"/> class as observables.
    /// </summary>
    public class IndexItemEvents : global::ElmSharp.ItemObjectEvents
    {
        private readonly global::ElmSharp.IndexItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.IndexItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IndexItemEvents(global::ElmSharp.IndexItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.IndexItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.ItemObject"/> class as observables.
    /// </summary>
    public class ItemObjectEvents
    {
        private readonly global::ElmSharp.ItemObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.ItemObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ItemObjectEvents(global::ElmSharp.ItemObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ItemObject.Deleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Deleted += x, x => _data.Deleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Label"/> class as observables.
    /// </summary>
    public class LabelEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Label _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Label"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LabelEvents(global::ElmSharp.Label data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Label.SlideCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SlideCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SlideCompleted += x, x => _data.SlideCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Layout"/> class as observables.
    /// </summary>
    public class LayoutEvents : global::ElmSharp.WidgetEvents
    {
        private readonly global::ElmSharp.Layout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Layout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LayoutEvents(global::ElmSharp.Layout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Layout.LanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LanguageChanged += x, x => _data.LanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Layout.ThemeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ThemeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ThemeChanged += x, x => _data.ThemeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.List"/> class as observables.
    /// </summary>
    public class ListEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.List _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.List"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListEvents(global::ElmSharp.List data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.List.ItemActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ListItemEventArgs> ItemActivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ListItemEventArgs>, global::ElmSharp.ListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemActivated += x, x => _data.ItemActivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.List.ItemDoubleClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ListItemEventArgs> ItemDoubleClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ListItemEventArgs>, global::ElmSharp.ListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemDoubleClicked += x, x => _data.ItemDoubleClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.List.ItemLongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ListItemEventArgs> ItemLongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ListItemEventArgs>, global::ElmSharp.ListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemLongPressed += x, x => _data.ItemLongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.List.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ListItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ListItemEventArgs>, global::ElmSharp.ListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.List.ItemUnselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ListItemEventArgs> ItemUnselected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ListItemEventArgs>, global::ElmSharp.ListItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ListItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemUnselected += x, x => _data.ItemUnselected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.MultiButtonEntry"/> class as observables.
    /// </summary>
    public class MultiButtonEntryEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.MultiButtonEntry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.MultiButtonEntry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MultiButtonEntryEvents(global::ElmSharp.MultiButtonEntry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.Contracted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Contracted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Contracted += x, x => _data.Contracted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.Expanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Expanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Expanded += x, x => _data.Expanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.ExpandedStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ExpandedStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ExpandedStateChanged += x, x => _data.ExpandedStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.ItemAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.MultiButtonEntryItemEventArgs> ItemAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.MultiButtonEntryItemEventArgs>, global::ElmSharp.MultiButtonEntryItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.MultiButtonEntryItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemAdded += x, x => _data.ItemAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.ItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.MultiButtonEntryItemEventArgs> ItemClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.MultiButtonEntryItemEventArgs>, global::ElmSharp.MultiButtonEntryItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.MultiButtonEntryItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemClicked += x, x => _data.ItemClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.ItemDeleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.MultiButtonEntryItemEventArgs> ItemDeleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.MultiButtonEntryItemEventArgs>, global::ElmSharp.MultiButtonEntryItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.MultiButtonEntryItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemDeleted += x, x => _data.ItemDeleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.ItemLongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.MultiButtonEntryItemEventArgs> ItemLongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.MultiButtonEntryItemEventArgs>, global::ElmSharp.MultiButtonEntryItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.MultiButtonEntryItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemLongPressed += x, x => _data.ItemLongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.MultiButtonEntry.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.MultiButtonEntryItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.MultiButtonEntryItemEventArgs>, global::ElmSharp.MultiButtonEntryItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.MultiButtonEntryItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Naviframe"/> class as observables.
    /// </summary>
    public class NaviframeEvents : global::ElmSharp.WidgetEvents
    {
        private readonly global::ElmSharp.Naviframe _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Naviframe"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NaviframeEvents(global::ElmSharp.Naviframe data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Naviframe.AnimationFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AnimationFinished += x, x => _data.AnimationFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Naviframe.Popped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.NaviframeEventArgs> Popped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.NaviframeEventArgs>, global::ElmSharp.NaviframeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.NaviframeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Popped += x, x => _data.Popped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.NaviItem"/> class as observables.
    /// </summary>
    public class NaviItemEvents : global::ElmSharp.ItemObjectEvents
    {
        private readonly global::ElmSharp.NaviItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.NaviItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NaviItemEvents(global::ElmSharp.NaviItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.NaviItem.Popped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Popped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Popped += x, x => _data.Popped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Panel"/> class as observables.
    /// </summary>
    public class PanelEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Panel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Panel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PanelEvents(global::ElmSharp.Panel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Panel.Toggled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Toggled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Toggled += x, x => _data.Toggled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Panes"/> class as observables.
    /// </summary>
    public class PanesEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Panes _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Panes"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PanesEvents(global::ElmSharp.Panes data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Panes.Pressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Pressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pressed += x, x => _data.Pressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Panes.Unpressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Unpressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unpressed += x, x => _data.Unpressed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Popup"/> class as observables.
    /// </summary>
    public class PopupEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PopupEvents(global::ElmSharp.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Popup.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Dismissed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Dismissed += x, x => _data.Dismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Popup.OutsideClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OutsideClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OutsideClicked += x, x => _data.OutsideClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Popup.ShowAnimationFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShowAnimationFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ShowAnimationFinished += x, x => _data.ShowAnimationFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Popup.TimedOut"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TimedOut => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TimedOut += x, x => _data.TimedOut -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.ProgressBar"/> class as observables.
    /// </summary>
    public class ProgressBarEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.ProgressBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.ProgressBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ProgressBarEvents(global::ElmSharp.ProgressBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ProgressBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Radio"/> class as observables.
    /// </summary>
    public class RadioEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Radio _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Radio"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RadioEvents(global::ElmSharp.Radio data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Radio.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Scroller"/> class as observables.
    /// </summary>
    public class ScrollerEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Scroller _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Scroller"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollerEvents(global::ElmSharp.Scroller data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Scroller.DragStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStart += x, x => _data.DragStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Scroller.DragStop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStop => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStop += x, x => _data.DragStop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Scroller.PageScrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PageScrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PageScrolled += x, x => _data.PageScrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Scroller.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Slider"/> class as observables.
    /// </summary>
    public class SliderEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Slider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Slider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SliderEvents(global::ElmSharp.Slider data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Slider.DelayedValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DelayedValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DelayedValueChanged += x, x => _data.DelayedValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Slider.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStarted += x, x => _data.DragStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Slider.DragStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStopped += x, x => _data.DragStopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Slider.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.SmartEvent"/> class as observables.
    /// </summary>
    public class SmartEventEvents
    {
        private readonly global::ElmSharp.SmartEvent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.SmartEvent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SmartEventEvents(global::ElmSharp.SmartEvent data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.SmartEvent.On"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> On => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.On += x, x => _data.On -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Spinner"/> class as observables.
    /// </summary>
    public class SpinnerEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Spinner _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Spinner"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SpinnerEvents(global::ElmSharp.Spinner data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Spinner.DelayedValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DelayedValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DelayedValueChanged += x, x => _data.DelayedValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Spinner.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Toolbar"/> class as observables.
    /// </summary>
    public class ToolbarEvents : global::ElmSharp.WidgetEvents
    {
        private readonly global::ElmSharp.Toolbar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Toolbar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolbarEvents(global::ElmSharp.Toolbar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Toolbar.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ToolbarItemEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ToolbarItemEventArgs>, global::ElmSharp.ToolbarItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ToolbarItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.ToolbarItem"/> class as observables.
    /// </summary>
    public class ToolbarItemEvents : global::ElmSharp.ItemObjectEvents
    {
        private readonly global::ElmSharp.ToolbarItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.ToolbarItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolbarItemEvents(global::ElmSharp.ToolbarItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ToolbarItem.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ToolbarItem.LongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LongPressed += x, x => _data.LongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.ToolbarItem.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Transit"/> class as observables.
    /// </summary>
    public class TransitEvents
    {
        private readonly global::ElmSharp.Transit _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Transit"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TransitEvents(global::ElmSharp.Transit data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Transit.Deleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Deleted += x, x => _data.Deleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Widget"/> class as observables.
    /// </summary>
    public class WidgetEvents : global::ElmSharp.EvasObjectEvents
    {
        private readonly global::ElmSharp.Widget _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Widget"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WidgetEvents(global::ElmSharp.Widget data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Widget.Focused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Focused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Focused += x, x => _data.Focused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Widget.Unfocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Unfocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unfocused += x, x => _data.Unfocused -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Window"/> class as observables.
    /// </summary>
    public class WindowEvents : global::ElmSharp.WidgetEvents
    {
        private readonly global::ElmSharp.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WindowEvents(global::ElmSharp.Window data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Window.CloseRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CloseRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CloseRequested += x, x => _data.CloseRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Window.RotationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RotationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RotationChanged += x, x => _data.RotationChanged -= x);
    }
}

namespace ElmSharp.Wearable
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "ElmSharp.Wearable"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Wearable.CircleSlider"/> class.
        /// </summary>
        public static CircleSliderEvents Events(this global::ElmSharp.Wearable.CircleSlider item) => new CircleSliderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Wearable.MoreOption"/> class.
        /// </summary>
        public static MoreOptionEvents Events(this global::ElmSharp.Wearable.MoreOption item) => new MoreOptionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Wearable.RotarySelector"/> class.
        /// </summary>
        public static RotarySelectorEvents Events(this global::ElmSharp.Wearable.RotarySelector item) => new RotarySelectorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Wearable.CircleSlider"/> class as observables.
    /// </summary>
    public class CircleSliderEvents : global::ElmSharp.WidgetEvents
    {
        private readonly global::ElmSharp.Wearable.CircleSlider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Wearable.CircleSlider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CircleSliderEvents(global::ElmSharp.Wearable.CircleSlider data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.CircleSlider.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Wearable.MoreOption"/> class as observables.
    /// </summary>
    public class MoreOptionEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Wearable.MoreOption _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Wearable.MoreOption"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MoreOptionEvents(global::ElmSharp.Wearable.MoreOption data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.MoreOption.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.Wearable.MoreOptionItemEventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.Wearable.MoreOptionItemEventArgs>, global::ElmSharp.Wearable.MoreOptionItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.Wearable.MoreOptionItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.MoreOption.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.MoreOption.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Opened += x, x => _data.Opened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.MoreOption.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.Wearable.MoreOptionItemEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.Wearable.MoreOptionItemEventArgs>, global::ElmSharp.Wearable.MoreOptionItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.Wearable.MoreOptionItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Wearable.RotarySelector"/> class as observables.
    /// </summary>
    public class RotarySelectorEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::ElmSharp.Wearable.RotarySelector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Wearable.RotarySelector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RotarySelectorEvents(global::ElmSharp.Wearable.RotarySelector data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.RotarySelector.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.Wearable.RotarySelectorItemEventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.Wearable.RotarySelectorItemEventArgs>, global::ElmSharp.Wearable.RotarySelectorItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.Wearable.RotarySelectorItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.RotarySelector.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.Wearable.RotarySelectorItemEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.Wearable.RotarySelectorItemEventArgs>, global::ElmSharp.Wearable.RotarySelectorItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.Wearable.RotarySelectorItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }
}

namespace Tizen.Applications
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Applications"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.CoreApplication"/> class.
        /// </summary>
        public static CoreApplicationEvents Events(this global::Tizen.Applications.CoreApplication item) => new CoreApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.CoreUIApplication"/> class.
        /// </summary>
        public static CoreUIApplicationEvents Events(this global::Tizen.Applications.CoreUIApplication item) => new CoreUIApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.Preference.EventContext"/> class.
        /// </summary>
        public static EventContextEvents Events(this global::Tizen.Applications.Preference.EventContext item) => new EventContextEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.WatchApplication"/> class.
        /// </summary>
        public static WatchApplicationEvents Events(this global::Tizen.Applications.WatchApplication item) => new WatchApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.WidgetControl"/> class.
        /// </summary>
        public static WidgetControlEvents Events(this global::Tizen.Applications.WidgetControl item) => new WidgetControlEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.CoreApplication"/> class as observables.
    /// </summary>
    public class CoreApplicationEvents
    {
        private readonly global::Tizen.Applications.CoreApplication _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.CoreApplication"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CoreApplicationEvents(global::Tizen.Applications.CoreApplication data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.AppControlReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.AppControlReceivedEventArgs> AppControlReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.AppControlReceivedEventArgs>, global::Tizen.Applications.AppControlReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.AppControlReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AppControlReceived += x, x => _data.AppControlReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.Created"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Created => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Created += x, x => _data.Created -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.DeviceOrientationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.DeviceOrientationEventArgs> DeviceOrientationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.DeviceOrientationEventArgs>, global::Tizen.Applications.DeviceOrientationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.DeviceOrientationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DeviceOrientationChanged += x, x => _data.DeviceOrientationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.LocaleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.LocaleChangedEventArgs> LocaleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.LocaleChangedEventArgs>, global::Tizen.Applications.LocaleChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.LocaleChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LocaleChanged += x, x => _data.LocaleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.LowBattery"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.LowBatteryEventArgs> LowBattery => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.LowBatteryEventArgs>, global::Tizen.Applications.LowBatteryEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.LowBatteryEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LowBattery += x, x => _data.LowBattery -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.LowMemory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.LowMemoryEventArgs> LowMemory => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.LowMemoryEventArgs>, global::Tizen.Applications.LowMemoryEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.LowMemoryEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LowMemory += x, x => _data.LowMemory -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.RegionFormatChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.RegionFormatChangedEventArgs> RegionFormatChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.RegionFormatChangedEventArgs>, global::Tizen.Applications.RegionFormatChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.RegionFormatChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RegionFormatChanged += x, x => _data.RegionFormatChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreApplication.Terminated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Terminated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Terminated += x, x => _data.Terminated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.CoreUIApplication"/> class as observables.
    /// </summary>
    public class CoreUIApplicationEvents : global::Tizen.Applications.CoreApplicationEvents
    {
        private readonly global::Tizen.Applications.CoreUIApplication _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.CoreUIApplication"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CoreUIApplicationEvents(global::Tizen.Applications.CoreUIApplication data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreUIApplication.Paused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Paused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paused += x, x => _data.Paused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.CoreUIApplication.Resumed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resumed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resumed += x, x => _data.Resumed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.Preference.EventContext"/> class as observables.
    /// </summary>
    public class EventContextEvents
    {
        private readonly global::Tizen.Applications.Preference.EventContext _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.Preference.EventContext"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EventContextEvents(global::Tizen.Applications.Preference.EventContext data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.Preference.EventContext.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.PreferenceChangedEventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.PreferenceChangedEventArgs>, global::Tizen.Applications.PreferenceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.PreferenceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.WatchApplication"/> class as observables.
    /// </summary>
    public class WatchApplicationEvents : global::Tizen.Applications.CoreApplicationEvents
    {
        private readonly global::Tizen.Applications.WatchApplication _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.WatchApplication"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WatchApplicationEvents(global::Tizen.Applications.WatchApplication data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WatchApplication.AmbientChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.AmbientEventArgs> AmbientChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.AmbientEventArgs>, global::Tizen.Applications.AmbientEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.AmbientEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AmbientChanged += x, x => _data.AmbientChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WatchApplication.AmbientTick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.TimeEventArgs> AmbientTick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.TimeEventArgs>, global::Tizen.Applications.TimeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.TimeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AmbientTick += x, x => _data.AmbientTick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WatchApplication.Paused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Paused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paused += x, x => _data.Paused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WatchApplication.Resumed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resumed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resumed += x, x => _data.Resumed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WatchApplication.TimeTick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.TimeEventArgs> TimeTick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.TimeEventArgs>, global::Tizen.Applications.TimeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.TimeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TimeTick += x, x => _data.TimeTick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.WidgetControl"/> class as observables.
    /// </summary>
    public class WidgetControlEvents
    {
        private readonly global::Tizen.Applications.WidgetControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.WidgetControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WidgetControlEvents(global::Tizen.Applications.WidgetControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WidgetControl.Created"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.WidgetLifecycleEventArgs> Created => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.WidgetLifecycleEventArgs>, global::Tizen.Applications.WidgetLifecycleEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.WidgetLifecycleEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Created += x, x => _data.Created -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WidgetControl.Destroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.WidgetLifecycleEventArgs> Destroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.WidgetLifecycleEventArgs>, global::Tizen.Applications.WidgetLifecycleEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.WidgetLifecycleEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Destroyed += x, x => _data.Destroyed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WidgetControl.Paused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.WidgetLifecycleEventArgs> Paused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.WidgetLifecycleEventArgs>, global::Tizen.Applications.WidgetLifecycleEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.WidgetLifecycleEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paused += x, x => _data.Paused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.WidgetControl.Resumed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.WidgetLifecycleEventArgs> Resumed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.WidgetLifecycleEventArgs>, global::Tizen.Applications.WidgetLifecycleEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.WidgetLifecycleEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resumed += x, x => _data.Resumed -= x);
    }
}

namespace Tizen.Applications.AttachPanel
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Applications.AttachPanel"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.AttachPanel.AttachPanel"/> class.
        /// </summary>
        public static AttachPanelEvents Events(this global::Tizen.Applications.AttachPanel.AttachPanel item) => new AttachPanelEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.AttachPanel.AttachPanel"/> class as observables.
    /// </summary>
    public class AttachPanelEvents
    {
        private readonly global::Tizen.Applications.AttachPanel.AttachPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.AttachPanel.AttachPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AttachPanelEvents(global::Tizen.Applications.AttachPanel.AttachPanel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.AttachPanel.AttachPanel.EventChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.AttachPanel.StateEventArgs> EventChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.AttachPanel.StateEventArgs>, global::Tizen.Applications.AttachPanel.StateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.AttachPanel.StateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EventChanged += x, x => _data.EventChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.AttachPanel.AttachPanel.ResultCallback"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.AttachPanel.ResultEventArgs> ResultCallback => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.AttachPanel.ResultEventArgs>, global::Tizen.Applications.AttachPanel.ResultEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.AttachPanel.ResultEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResultCallback += x, x => _data.ResultCallback -= x);
    }
}

namespace Tizen.Applications.Messages
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Applications.Messages"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.Messages.MessagePort"/> class.
        /// </summary>
        public static MessagePortEvents Events(this global::Tizen.Applications.Messages.MessagePort item) => new MessagePortEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Applications.Messages.RemotePort"/> class.
        /// </summary>
        public static RemotePortEvents Events(this global::Tizen.Applications.Messages.RemotePort item) => new RemotePortEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.Messages.MessagePort"/> class as observables.
    /// </summary>
    public class MessagePortEvents
    {
        private readonly global::Tizen.Applications.Messages.MessagePort _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.Messages.MessagePort"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MessagePortEvents(global::Tizen.Applications.Messages.MessagePort data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.Messages.MessagePort.MessageReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.Messages.MessageReceivedEventArgs> MessageReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.Messages.MessageReceivedEventArgs>, global::Tizen.Applications.Messages.MessageReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.Messages.MessageReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MessageReceived += x, x => _data.MessageReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Applications.Messages.RemotePort"/> class as observables.
    /// </summary>
    public class RemotePortEvents
    {
        private readonly global::Tizen.Applications.Messages.RemotePort _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Applications.Messages.RemotePort"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RemotePortEvents(global::Tizen.Applications.Messages.RemotePort data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.Messages.RemotePort.RemotePortStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Applications.Messages.RemotePortStateChangedEventArgs> RemotePortStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.Messages.RemotePortStateChangedEventArgs>, global::Tizen.Applications.Messages.RemotePortStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.Messages.RemotePortStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemotePortStateChanged += x, x => _data.RemotePortStateChanged -= x);
    }
}

namespace Tizen.Content.Download
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Content.Download"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Content.Download.Request"/> class.
        /// </summary>
        public static RequestEvents Events(this global::Tizen.Content.Download.Request item) => new RequestEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Content.Download.Request"/> class as observables.
    /// </summary>
    public class RequestEvents
    {
        private readonly global::Tizen.Content.Download.Request _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Content.Download.Request"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RequestEvents(global::Tizen.Content.Download.Request data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Content.Download.Request.ProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Content.Download.ProgressChangedEventArgs> ProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Content.Download.ProgressChangedEventArgs>, global::Tizen.Content.Download.ProgressChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Content.Download.ProgressChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ProgressChanged += x, x => _data.ProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Content.Download.Request.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Content.Download.StateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Content.Download.StateChangedEventArgs>, global::Tizen.Content.Download.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Content.Download.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Tizen.Location
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Location"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Location.GpsSatellite"/> class.
        /// </summary>
        public static GpsSatelliteEvents Events(this global::Tizen.Location.GpsSatellite item) => new GpsSatelliteEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Location.Locator"/> class.
        /// </summary>
        public static LocatorEvents Events(this global::Tizen.Location.Locator item) => new LocatorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Location.GpsSatellite"/> class as observables.
    /// </summary>
    public class GpsSatelliteEvents
    {
        private readonly global::Tizen.Location.GpsSatellite _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Location.GpsSatellite"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GpsSatelliteEvents(global::Tizen.Location.GpsSatellite data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.GpsSatellite.SatelliteStatusUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.SatelliteStatusChangedEventArgs> SatelliteStatusUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.SatelliteStatusChangedEventArgs>, global::Tizen.Location.SatelliteStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.SatelliteStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SatelliteStatusUpdated += x, x => _data.SatelliteStatusUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Location.Locator"/> class as observables.
    /// </summary>
    public class LocatorEvents
    {
        private readonly global::Tizen.Location.Locator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Location.Locator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LocatorEvents(global::Tizen.Location.Locator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Locator.DistanceBasedLocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.LocationChangedEventArgs> DistanceBasedLocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.LocationChangedEventArgs>, global::Tizen.Location.LocationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.LocationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DistanceBasedLocationChanged += x, x => _data.DistanceBasedLocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Locator.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.LocationChangedEventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.LocationChangedEventArgs>, global::Tizen.Location.LocationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.LocationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Locator.ServiceStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.ServiceStateChangedEventArgs> ServiceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.ServiceStateChangedEventArgs>, global::Tizen.Location.ServiceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.ServiceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServiceStateChanged += x, x => _data.ServiceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Locator.SettingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.SettingChangedEventArgs> SettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.SettingChangedEventArgs>, global::Tizen.Location.SettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.SettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SettingChanged += x, x => _data.SettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Locator.ZoneChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.ZoneChangedEventArgs> ZoneChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.ZoneChangedEventArgs>, global::Tizen.Location.ZoneChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.ZoneChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ZoneChanged += x, x => _data.ZoneChanged -= x);
    }
}

namespace Tizen.Location.Geofence
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Location.Geofence"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Location.Geofence.GeofenceManager"/> class.
        /// </summary>
        public static GeofenceManagerEvents Events(this global::Tizen.Location.Geofence.GeofenceManager item) => new GeofenceManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Location.Geofence.GeofenceManager"/> class as observables.
    /// </summary>
    public class GeofenceManagerEvents
    {
        private readonly global::Tizen.Location.Geofence.GeofenceManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Location.Geofence.GeofenceManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GeofenceManagerEvents(global::Tizen.Location.Geofence.GeofenceManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Geofence.GeofenceManager.GeofenceEventChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.Geofence.GeofenceResponseEventArgs> GeofenceEventChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.Geofence.GeofenceResponseEventArgs>, global::Tizen.Location.Geofence.GeofenceResponseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.Geofence.GeofenceResponseEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GeofenceEventChanged += x, x => _data.GeofenceEventChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Geofence.GeofenceManager.ProximityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.Geofence.ProximityStateEventArgs> ProximityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.Geofence.ProximityStateEventArgs>, global::Tizen.Location.Geofence.ProximityStateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.Geofence.ProximityStateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ProximityChanged += x, x => _data.ProximityChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Location.Geofence.GeofenceManager.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Location.Geofence.GeofenceStateEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Location.Geofence.GeofenceStateEventArgs>, global::Tizen.Location.Geofence.GeofenceStateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Location.Geofence.GeofenceStateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Tizen.Maps
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Maps"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Maps.MapView"/> class.
        /// </summary>
        public static MapViewEvents Events(this global::Tizen.Maps.MapView item) => new MapViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Maps.Marker"/> class.
        /// </summary>
        public static MarkerEvents Events(this global::Tizen.Maps.Marker item) => new MarkerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Maps.Polygon"/> class.
        /// </summary>
        public static PolygonEvents Events(this global::Tizen.Maps.Polygon item) => new PolygonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Maps.Polyline"/> class.
        /// </summary>
        public static PolylineEvents Events(this global::Tizen.Maps.Polyline item) => new PolylineEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Maps.MapView"/> class as observables.
    /// </summary>
    public class MapViewEvents : global::ElmSharp.LayoutEvents
    {
        private readonly global::Tizen.Maps.MapView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Maps.MapView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MapViewEvents(global::Tizen.Maps.MapView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Maps.MapGestureEventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Maps.MapGestureEventArgs>, global::Tizen.Maps.MapGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Maps.MapGestureEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.DoubleClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Maps.MapGestureEventArgs> DoubleClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Maps.MapGestureEventArgs>, global::Tizen.Maps.MapGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Maps.MapGestureEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DoubleClicked += x, x => _data.DoubleClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.LongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Maps.MapGestureEventArgs> LongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Maps.MapGestureEventArgs>, global::Tizen.Maps.MapGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Maps.MapGestureEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LongPressed += x, x => _data.LongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Maps.MapGestureEventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Maps.MapGestureEventArgs>, global::Tizen.Maps.MapGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Maps.MapGestureEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.TwoFingerClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Maps.MapGestureEventArgs> TwoFingerClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Maps.MapGestureEventArgs>, global::Tizen.Maps.MapGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Maps.MapGestureEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TwoFingerClicked += x, x => _data.TwoFingerClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.TwoFingerRotated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Maps.MapGestureEventArgs> TwoFingerRotated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Maps.MapGestureEventArgs>, global::Tizen.Maps.MapGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Maps.MapGestureEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TwoFingerRotated += x, x => _data.TwoFingerRotated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.TwoFingerZoomed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Maps.MapGestureEventArgs> TwoFingerZoomed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Maps.MapGestureEventArgs>, global::Tizen.Maps.MapGestureEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Maps.MapGestureEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TwoFingerZoomed += x, x => _data.TwoFingerZoomed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.MapView.ViewReady"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ViewReady => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ViewReady += x, x => _data.ViewReady -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Maps.Marker"/> class as observables.
    /// </summary>
    public class MarkerEvents
    {
        private readonly global::Tizen.Maps.Marker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Maps.Marker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MarkerEvents(global::Tizen.Maps.Marker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.Marker.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Maps.Polygon"/> class as observables.
    /// </summary>
    public class PolygonEvents
    {
        private readonly global::Tizen.Maps.Polygon _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Maps.Polygon"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PolygonEvents(global::Tizen.Maps.Polygon data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.Polygon.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Maps.Polyline"/> class as observables.
    /// </summary>
    public class PolylineEvents
    {
        private readonly global::Tizen.Maps.Polyline _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Maps.Polyline"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PolylineEvents(global::Tizen.Maps.Polyline data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Maps.Polyline.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }
}

namespace Tizen.Multimedia
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Multimedia"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.AsyncAudioCapture"/> class.
        /// </summary>
        public static AsyncAudioCaptureEvents Events(this global::Tizen.Multimedia.AsyncAudioCapture item) => new AsyncAudioCaptureEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.AudioCaptureBase"/> class.
        /// </summary>
        public static AudioCaptureBaseEvents Events(this global::Tizen.Multimedia.AudioCaptureBase item) => new AudioCaptureBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.AudioPlayback"/> class.
        /// </summary>
        public static AudioPlaybackEvents Events(this global::Tizen.Multimedia.AudioPlayback item) => new AudioPlaybackEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.AudioStreamPolicy"/> class.
        /// </summary>
        public static AudioStreamPolicyEvents Events(this global::Tizen.Multimedia.AudioStreamPolicy item) => new AudioStreamPolicyEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.AudioVolume"/> class.
        /// </summary>
        public static AudioVolumeEvents Events(this global::Tizen.Multimedia.AudioVolume item) => new AudioVolumeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Camera"/> class.
        /// </summary>
        public static CameraEvents Events(this global::Tizen.Multimedia.Camera item) => new CameraEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.MediaStreamConfiguration"/> class.
        /// </summary>
        public static MediaStreamConfigurationEvents Events(this global::Tizen.Multimedia.MediaStreamConfiguration item) => new MediaStreamConfigurationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Player"/> class.
        /// </summary>
        public static PlayerEvents Events(this global::Tizen.Multimedia.Player item) => new PlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Radio"/> class.
        /// </summary>
        public static RadioEvents Events(this global::Tizen.Multimedia.Radio item) => new RadioEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Recorder"/> class.
        /// </summary>
        public static RecorderEvents Events(this global::Tizen.Multimedia.Recorder item) => new RecorderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.StreamRecorder"/> class.
        /// </summary>
        public static StreamRecorderEvents Events(this global::Tizen.Multimedia.StreamRecorder item) => new StreamRecorderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.AsyncAudioCapture"/> class as observables.
    /// </summary>
    public class AsyncAudioCaptureEvents : global::Tizen.Multimedia.AudioCaptureBaseEvents
    {
        private readonly global::Tizen.Multimedia.AsyncAudioCapture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.AsyncAudioCapture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AsyncAudioCaptureEvents(global::Tizen.Multimedia.AsyncAudioCapture data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AsyncAudioCapture.DataAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.AudioDataAvailableEventArgs> DataAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioDataAvailableEventArgs>, global::Tizen.Multimedia.AudioDataAvailableEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioDataAvailableEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataAvailable += x, x => _data.DataAvailable -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.AudioCaptureBase"/> class as observables.
    /// </summary>
    public class AudioCaptureBaseEvents
    {
        private readonly global::Tizen.Multimedia.AudioCaptureBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.AudioCaptureBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioCaptureBaseEvents(global::Tizen.Multimedia.AudioCaptureBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioCaptureBase.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.AudioIOStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioIOStateChangedEventArgs>, global::Tizen.Multimedia.AudioIOStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioIOStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.AudioPlayback"/> class as observables.
    /// </summary>
    public class AudioPlaybackEvents
    {
        private readonly global::Tizen.Multimedia.AudioPlayback _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.AudioPlayback"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioPlaybackEvents(global::Tizen.Multimedia.AudioPlayback data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioPlayback.BufferAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.AudioPlaybackBufferAvailableEventArgs> BufferAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioPlaybackBufferAvailableEventArgs>, global::Tizen.Multimedia.AudioPlaybackBufferAvailableEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioPlaybackBufferAvailableEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BufferAvailable += x, x => _data.BufferAvailable -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioPlayback.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.AudioIOStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioIOStateChangedEventArgs>, global::Tizen.Multimedia.AudioIOStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioIOStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.AudioStreamPolicy"/> class as observables.
    /// </summary>
    public class AudioStreamPolicyEvents
    {
        private readonly global::Tizen.Multimedia.AudioStreamPolicy _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.AudioStreamPolicy"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioStreamPolicyEvents(global::Tizen.Multimedia.AudioStreamPolicy data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioStreamPolicy.FocusStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.AudioStreamPolicyFocusStateChangedEventArgs> FocusStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioStreamPolicyFocusStateChangedEventArgs>, global::Tizen.Multimedia.AudioStreamPolicyFocusStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioStreamPolicyFocusStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusStateChanged += x, x => _data.FocusStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.AudioVolume"/> class as observables.
    /// </summary>
    public class AudioVolumeEvents
    {
        private readonly global::Tizen.Multimedia.AudioVolume _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.AudioVolume"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioVolumeEvents(global::Tizen.Multimedia.AudioVolume data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioVolume.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.VolumeChangedEventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.VolumeChangedEventArgs>, global::Tizen.Multimedia.VolumeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.VolumeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Camera"/> class as observables.
    /// </summary>
    public class CameraEvents
    {
        private readonly global::Tizen.Multimedia.Camera _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Camera"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CameraEvents(global::Tizen.Multimedia.Camera data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.CaptureCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CaptureCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CaptureCompleted += x, x => _data.CaptureCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.Capturing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.CameraCapturingEventArgs> Capturing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.CameraCapturingEventArgs>, global::Tizen.Multimedia.CameraCapturingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.CameraCapturingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Capturing += x, x => _data.Capturing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.CameraErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.CameraErrorOccurredEventArgs>, global::Tizen.Multimedia.CameraErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.CameraErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.FaceDetected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.FaceDetectedEventArgs> FaceDetected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.FaceDetectedEventArgs>, global::Tizen.Multimedia.FaceDetectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.FaceDetectedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FaceDetected += x, x => _data.FaceDetected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.FocusStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.CameraFocusStateChangedEventArgs> FocusStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.CameraFocusStateChangedEventArgs>, global::Tizen.Multimedia.CameraFocusStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.CameraFocusStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusStateChanged += x, x => _data.FocusStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.HdrCaptureProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.HdrCaptureProgressEventArgs> HdrCaptureProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.HdrCaptureProgressEventArgs>, global::Tizen.Multimedia.HdrCaptureProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.HdrCaptureProgressEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HdrCaptureProgress += x, x => _data.HdrCaptureProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.Interrupted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.CameraInterruptedEventArgs> Interrupted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.CameraInterruptedEventArgs>, global::Tizen.Multimedia.CameraInterruptedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.CameraInterruptedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Interrupted += x, x => _data.Interrupted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.InterruptStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.CameraInterruptStartedEventArgs> InterruptStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.CameraInterruptStartedEventArgs>, global::Tizen.Multimedia.CameraInterruptStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.CameraInterruptStartedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.InterruptStarted += x, x => _data.InterruptStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.MediaPacketPreview"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MediaPacketPreviewEventArgs> MediaPacketPreview => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MediaPacketPreviewEventArgs>, global::Tizen.Multimedia.MediaPacketPreviewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MediaPacketPreviewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MediaPacketPreview += x, x => _data.MediaPacketPreview -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.Preview"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.PreviewEventArgs> Preview => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.PreviewEventArgs>, global::Tizen.Multimedia.PreviewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.PreviewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Preview += x, x => _data.Preview -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.CameraStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.CameraStateChangedEventArgs>, global::Tizen.Multimedia.CameraStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.CameraStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.MediaStreamConfiguration"/> class as observables.
    /// </summary>
    public class MediaStreamConfigurationEvents
    {
        private readonly global::Tizen.Multimedia.MediaStreamConfiguration _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.MediaStreamConfiguration"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaStreamConfigurationEvents(global::Tizen.Multimedia.MediaStreamConfiguration data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.MediaStreamConfiguration.BufferStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MediaStreamBufferStatusChangedEventArgs> BufferStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MediaStreamBufferStatusChangedEventArgs>, global::Tizen.Multimedia.MediaStreamBufferStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MediaStreamBufferStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BufferStatusChanged += x, x => _data.BufferStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.MediaStreamConfiguration.SeekingOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MediaStreamSeekingOccurredEventArgs> SeekingOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MediaStreamSeekingOccurredEventArgs>, global::Tizen.Multimedia.MediaStreamSeekingOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MediaStreamSeekingOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SeekingOccurred += x, x => _data.SeekingOccurred -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Player"/> class as observables.
    /// </summary>
    public class PlayerEvents
    {
        private readonly global::Tizen.Multimedia.Player _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Player"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PlayerEvents(global::Tizen.Multimedia.Player data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Player.BufferingProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.BufferingProgressChangedEventArgs> BufferingProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.BufferingProgressChangedEventArgs>, global::Tizen.Multimedia.BufferingProgressChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.BufferingProgressChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BufferingProgressChanged += x, x => _data.BufferingProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Player.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.PlayerErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.PlayerErrorOccurredEventArgs>, global::Tizen.Multimedia.PlayerErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.PlayerErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Player.PlaybackCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PlaybackCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PlaybackCompleted += x, x => _data.PlaybackCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Player.PlaybackInterrupted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.PlaybackInterruptedEventArgs> PlaybackInterrupted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.PlaybackInterruptedEventArgs>, global::Tizen.Multimedia.PlaybackInterruptedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.PlaybackInterruptedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PlaybackInterrupted += x, x => _data.PlaybackInterrupted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Player.SubtitleUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.SubtitleUpdatedEventArgs> SubtitleUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.SubtitleUpdatedEventArgs>, global::Tizen.Multimedia.SubtitleUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.SubtitleUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SubtitleUpdated += x, x => _data.SubtitleUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Player.VideoFrameDecoded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.VideoFrameDecodedEventArgs> VideoFrameDecoded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.VideoFrameDecodedEventArgs>, global::Tizen.Multimedia.VideoFrameDecodedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.VideoFrameDecodedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VideoFrameDecoded += x, x => _data.VideoFrameDecoded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Player.VideoStreamChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.VideoStreamChangedEventArgs> VideoStreamChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.VideoStreamChangedEventArgs>, global::Tizen.Multimedia.VideoStreamChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.VideoStreamChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VideoStreamChanged += x, x => _data.VideoStreamChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Radio"/> class as observables.
    /// </summary>
    public class RadioEvents
    {
        private readonly global::Tizen.Multimedia.Radio _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Radio"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RadioEvents(global::Tizen.Multimedia.Radio data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Radio.Interrupted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RadioInterruptedEventArgs> Interrupted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RadioInterruptedEventArgs>, global::Tizen.Multimedia.RadioInterruptedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RadioInterruptedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Interrupted += x, x => _data.Interrupted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Radio.ScanCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScanCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScanCompleted += x, x => _data.ScanCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Radio.ScanStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScanStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScanStopped += x, x => _data.ScanStopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Radio.ScanUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.ScanUpdatedEventArgs> ScanUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.ScanUpdatedEventArgs>, global::Tizen.Multimedia.ScanUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.ScanUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScanUpdated += x, x => _data.ScanUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Recorder"/> class as observables.
    /// </summary>
    public class RecorderEvents
    {
        private readonly global::Tizen.Multimedia.Recorder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Recorder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RecorderEvents(global::Tizen.Multimedia.Recorder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.AudioStreamStoring"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.AudioStreamStoringEventArgs> AudioStreamStoring => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioStreamStoringEventArgs>, global::Tizen.Multimedia.AudioStreamStoringEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioStreamStoringEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AudioStreamStoring += x, x => _data.AudioStreamStoring -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecordingErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecordingErrorOccurredEventArgs>, global::Tizen.Multimedia.RecordingErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecordingErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.Interrupted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecorderInterruptedEventArgs> Interrupted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecorderInterruptedEventArgs>, global::Tizen.Multimedia.RecorderInterruptedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecorderInterruptedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Interrupted += x, x => _data.Interrupted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.Interrupting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecorderInterruptingEventArgs> Interrupting => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecorderInterruptingEventArgs>, global::Tizen.Multimedia.RecorderInterruptingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecorderInterruptingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Interrupting += x, x => _data.Interrupting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.MuxedStreamDelivered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MuxedStreamDeliveredEventArgs> MuxedStreamDelivered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MuxedStreamDeliveredEventArgs>, global::Tizen.Multimedia.MuxedStreamDeliveredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MuxedStreamDeliveredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MuxedStreamDelivered += x, x => _data.MuxedStreamDelivered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.RecordingLimitReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecordingLimitReachedEventArgs> RecordingLimitReached => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecordingLimitReachedEventArgs>, global::Tizen.Multimedia.RecordingLimitReachedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecordingLimitReachedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RecordingLimitReached += x, x => _data.RecordingLimitReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.RecordingStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecordingStatusChangedEventArgs> RecordingStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecordingStatusChangedEventArgs>, global::Tizen.Multimedia.RecordingStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecordingStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RecordingStatusChanged += x, x => _data.RecordingStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecorderStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecorderStateChangedEventArgs>, global::Tizen.Multimedia.RecorderStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecorderStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.StreamRecorder"/> class as observables.
    /// </summary>
    public class StreamRecorderEvents
    {
        private readonly global::Tizen.Multimedia.StreamRecorder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.StreamRecorder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StreamRecorderEvents(global::Tizen.Multimedia.StreamRecorder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.StreamRecorder.BufferConsumed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.StreamRecorderBufferConsumedEventArgs> BufferConsumed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.StreamRecorderBufferConsumedEventArgs>, global::Tizen.Multimedia.StreamRecorderBufferConsumedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.StreamRecorderBufferConsumedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BufferConsumed += x, x => _data.BufferConsumed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.StreamRecorder.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.StreamRecorderErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.StreamRecorderErrorOccurredEventArgs>, global::Tizen.Multimedia.StreamRecorderErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.StreamRecorderErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.StreamRecorder.RecordingLimitReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecordingLimitReachedEventArgs> RecordingLimitReached => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecordingLimitReachedEventArgs>, global::Tizen.Multimedia.RecordingLimitReachedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecordingLimitReachedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RecordingLimitReached += x, x => _data.RecordingLimitReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.StreamRecorder.RecordingStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.RecordingStatusChangedEventArgs> RecordingStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecordingStatusChangedEventArgs>, global::Tizen.Multimedia.RecordingStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecordingStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RecordingStatusChanged += x, x => _data.RecordingStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.StreamRecorder.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.StreamRecorderStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.StreamRecorderStateChangedEventArgs>, global::Tizen.Multimedia.StreamRecorderStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.StreamRecorderStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Tizen.Multimedia.MediaCodec
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Multimedia.MediaCodec"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.MediaCodec.MediaCodec"/> class.
        /// </summary>
        public static MediaCodecEvents Events(this global::Tizen.Multimedia.MediaCodec.MediaCodec item) => new MediaCodecEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.MediaCodec.MediaCodec"/> class as observables.
    /// </summary>
    public class MediaCodecEvents
    {
        private readonly global::Tizen.Multimedia.MediaCodec.MediaCodec _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.MediaCodec.MediaCodec"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaCodecEvents(global::Tizen.Multimedia.MediaCodec.MediaCodec data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.MediaCodec.MediaCodec.BufferStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MediaCodec.BufferStatusChangedEventArgs> BufferStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MediaCodec.BufferStatusChangedEventArgs>, global::Tizen.Multimedia.MediaCodec.BufferStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MediaCodec.BufferStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BufferStatusChanged += x, x => _data.BufferStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.MediaCodec.MediaCodec.EosReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EosReached => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EosReached += x, x => _data.EosReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.MediaCodec.MediaCodec.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MediaCodec.MediaCodecErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MediaCodec.MediaCodecErrorOccurredEventArgs>, global::Tizen.Multimedia.MediaCodec.MediaCodecErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MediaCodec.MediaCodecErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.MediaCodec.MediaCodec.InputProcessed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MediaCodec.InputProcessedEventArgs> InputProcessed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MediaCodec.InputProcessedEventArgs>, global::Tizen.Multimedia.MediaCodec.InputProcessedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MediaCodec.InputProcessedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.InputProcessed += x, x => _data.InputProcessed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.MediaCodec.MediaCodec.OutputAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.MediaCodec.OutputAvailableEventArgs> OutputAvailable => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.MediaCodec.OutputAvailableEventArgs>, global::Tizen.Multimedia.MediaCodec.OutputAvailableEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.MediaCodec.OutputAvailableEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OutputAvailable += x, x => _data.OutputAvailable -= x);
    }
}

namespace Tizen.Multimedia.Remoting
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Multimedia.Remoting"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Remoting.MediaController"/> class.
        /// </summary>
        public static MediaControllerEvents Events(this global::Tizen.Multimedia.Remoting.MediaController item) => new MediaControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Remoting.MediaControllerManager"/> class.
        /// </summary>
        public static MediaControllerManagerEvents Events(this global::Tizen.Multimedia.Remoting.MediaControllerManager item) => new MediaControllerManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Remoting.ScreenMirroring"/> class.
        /// </summary>
        public static ScreenMirroringEvents Events(this global::Tizen.Multimedia.Remoting.ScreenMirroring item) => new ScreenMirroringEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Remoting.MediaController"/> class as observables.
    /// </summary>
    public class MediaControllerEvents
    {
        private readonly global::Tizen.Multimedia.Remoting.MediaController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Remoting.MediaController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaControllerEvents(global::Tizen.Multimedia.Remoting.MediaController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaController.MetadataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs> MetadataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs>, global::Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MetadataUpdated += x, x => _data.MetadataUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaController.PlaybackStateUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs> PlaybackStateUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs>, global::Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PlaybackStateUpdated += x, x => _data.PlaybackStateUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaController.RepeatModeUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs> RepeatModeUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs>, global::Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RepeatModeUpdated += x, x => _data.RepeatModeUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaController.ServerStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ServerStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServerStopped += x, x => _data.ServerStopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaController.ShuffleModeUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs> ShuffleModeUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs>, global::Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ShuffleModeUpdated += x, x => _data.ShuffleModeUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Remoting.MediaControllerManager"/> class as observables.
    /// </summary>
    public class MediaControllerManagerEvents
    {
        private readonly global::Tizen.Multimedia.Remoting.MediaControllerManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Remoting.MediaControllerManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaControllerManagerEvents(global::Tizen.Multimedia.Remoting.MediaControllerManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaControllerManager.ServerStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs> ServerStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs>, global::Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServerStarted += x, x => _data.ServerStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaControllerManager.ServerStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs> ServerStopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs>, global::Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServerStopped += x, x => _data.ServerStopped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Remoting.ScreenMirroring"/> class as observables.
    /// </summary>
    public class ScreenMirroringEvents
    {
        private readonly global::Tizen.Multimedia.Remoting.ScreenMirroring _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Remoting.ScreenMirroring"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScreenMirroringEvents(global::Tizen.Multimedia.Remoting.ScreenMirroring data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.ScreenMirroring.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.ScreenMirroringErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.ScreenMirroringErrorOccurredEventArgs>, global::Tizen.Multimedia.Remoting.ScreenMirroringErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.ScreenMirroringErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.ScreenMirroring.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Remoting.ScreenMirroringStateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.ScreenMirroringStateChangedEventArgs>, global::Tizen.Multimedia.Remoting.ScreenMirroringStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.ScreenMirroringStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Tizen.Multimedia.Vision
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Multimedia.Vision"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Vision.MovementDetector"/> class.
        /// </summary>
        public static MovementDetectorEvents Events(this global::Tizen.Multimedia.Vision.MovementDetector item) => new MovementDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Vision.PersonAppearanceDetector"/> class.
        /// </summary>
        public static PersonAppearanceDetectorEvents Events(this global::Tizen.Multimedia.Vision.PersonAppearanceDetector item) => new PersonAppearanceDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Multimedia.Vision.PersonRecognizer"/> class.
        /// </summary>
        public static PersonRecognizerEvents Events(this global::Tizen.Multimedia.Vision.PersonRecognizer item) => new PersonRecognizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Vision.MovementDetector"/> class as observables.
    /// </summary>
    public class MovementDetectorEvents
    {
        private readonly global::Tizen.Multimedia.Vision.MovementDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Vision.MovementDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MovementDetectorEvents(global::Tizen.Multimedia.Vision.MovementDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Vision.MovementDetector.Detected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Vision.MovementDetectedEventArgs> Detected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Vision.MovementDetectedEventArgs>, global::Tizen.Multimedia.Vision.MovementDetectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Vision.MovementDetectedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Detected += x, x => _data.Detected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Vision.PersonAppearanceDetector"/> class as observables.
    /// </summary>
    public class PersonAppearanceDetectorEvents
    {
        private readonly global::Tizen.Multimedia.Vision.PersonAppearanceDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Vision.PersonAppearanceDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PersonAppearanceDetectorEvents(global::Tizen.Multimedia.Vision.PersonAppearanceDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Vision.PersonAppearanceDetector.Detected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Vision.PersonAppearanceDetectedEventArgs> Detected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Vision.PersonAppearanceDetectedEventArgs>, global::Tizen.Multimedia.Vision.PersonAppearanceDetectedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Vision.PersonAppearanceDetectedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Detected += x, x => _data.Detected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Multimedia.Vision.PersonRecognizer"/> class as observables.
    /// </summary>
    public class PersonRecognizerEvents
    {
        private readonly global::Tizen.Multimedia.Vision.PersonRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Multimedia.Vision.PersonRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PersonRecognizerEvents(global::Tizen.Multimedia.Vision.PersonRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Vision.PersonRecognizer.Recognized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Multimedia.Vision.PersonRecognizedEventArgs> Recognized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Vision.PersonRecognizedEventArgs>, global::Tizen.Multimedia.Vision.PersonRecognizedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Vision.PersonRecognizedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Recognized += x, x => _data.Recognized -= x);
    }
}

namespace Tizen.Network.Bluetooth
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Network.Bluetooth"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothAudio"/> class.
        /// </summary>
        public static BluetoothAudioEvents Events(this global::Tizen.Network.Bluetooth.BluetoothAudio item) => new BluetoothAudioEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothAvrcp"/> class.
        /// </summary>
        public static BluetoothAvrcpEvents Events(this global::Tizen.Network.Bluetooth.BluetoothAvrcp item) => new BluetoothAvrcpEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothDevice"/> class.
        /// </summary>
        public static BluetoothDeviceEvents Events(this global::Tizen.Network.Bluetooth.BluetoothDevice item) => new BluetoothDeviceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattAttribute"/> class.
        /// </summary>
        public static BluetoothGattAttributeEvents Events(this global::Tizen.Network.Bluetooth.BluetoothGattAttribute item) => new BluetoothGattAttributeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattCharacteristic"/> class.
        /// </summary>
        public static BluetoothGattCharacteristicEvents Events(this global::Tizen.Network.Bluetooth.BluetoothGattCharacteristic item) => new BluetoothGattCharacteristicEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattServer"/> class.
        /// </summary>
        public static BluetoothGattServerEvents Events(this global::Tizen.Network.Bluetooth.BluetoothGattServer item) => new BluetoothGattServerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothHid"/> class.
        /// </summary>
        public static BluetoothHidEvents Events(this global::Tizen.Network.Bluetooth.BluetoothHid item) => new BluetoothHidEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothLeAdvertiser"/> class.
        /// </summary>
        public static BluetoothLeAdvertiserEvents Events(this global::Tizen.Network.Bluetooth.BluetoothLeAdvertiser item) => new BluetoothLeAdvertiserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothLeDevice"/> class.
        /// </summary>
        public static BluetoothLeDeviceEvents Events(this global::Tizen.Network.Bluetooth.BluetoothLeDevice item) => new BluetoothLeDeviceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothOppClient"/> class.
        /// </summary>
        public static BluetoothOppClientEvents Events(this global::Tizen.Network.Bluetooth.BluetoothOppClient item) => new BluetoothOppClientEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothOppServer"/> class.
        /// </summary>
        public static BluetoothOppServerEvents Events(this global::Tizen.Network.Bluetooth.BluetoothOppServer item) => new BluetoothOppServerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothServerSocket"/> class.
        /// </summary>
        public static BluetoothServerSocketEvents Events(this global::Tizen.Network.Bluetooth.BluetoothServerSocket item) => new BluetoothServerSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Bluetooth.IBluetoothServerSocket"/> class.
        /// </summary>
        public static IBluetoothServerSocketEvents Events(this global::Tizen.Network.Bluetooth.IBluetoothServerSocket item) => new IBluetoothServerSocketEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothAudio"/> class as observables.
    /// </summary>
    public class BluetoothAudioEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothAudio _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothAudio"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothAudioEvents(global::Tizen.Network.Bluetooth.BluetoothAudio data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAudio.AudioConnectionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.AudioConnectionStateChangedEventArgs> AudioConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.AudioConnectionStateChangedEventArgs>, global::Tizen.Network.Bluetooth.AudioConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.AudioConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AudioConnectionStateChanged += x, x => _data.AudioConnectionStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothAvrcp"/> class as observables.
    /// </summary>
    public class BluetoothAvrcpEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothAvrcp _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothAvrcp"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothAvrcpEvents(global::Tizen.Network.Bluetooth.BluetoothAvrcp data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAvrcp.EqualizerStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.EqualizerStateChangedEventArgs> EqualizerStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.EqualizerStateChangedEventArgs>, global::Tizen.Network.Bluetooth.EqualizerStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.EqualizerStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EqualizerStateChanged += x, x => _data.EqualizerStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAvrcp.RepeatModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.RepeatModeChangedEventArgs> RepeatModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.RepeatModeChangedEventArgs>, global::Tizen.Network.Bluetooth.RepeatModeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.RepeatModeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RepeatModeChanged += x, x => _data.RepeatModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAvrcp.ScanModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.ScanModeChangedEventArgs> ScanModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.ScanModeChangedEventArgs>, global::Tizen.Network.Bluetooth.ScanModeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.ScanModeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScanModeChanged += x, x => _data.ScanModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAvrcp.ShuffleModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.ShuffleModeChangedeventArgs> ShuffleModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.ShuffleModeChangedeventArgs>, global::Tizen.Network.Bluetooth.ShuffleModeChangedeventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.ShuffleModeChangedeventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ShuffleModeChanged += x, x => _data.ShuffleModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAvrcp.TargetConnectionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.TargetConnectionStateChangedEventArgs> TargetConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.TargetConnectionStateChangedEventArgs>, global::Tizen.Network.Bluetooth.TargetConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.TargetConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TargetConnectionStateChanged += x, x => _data.TargetConnectionStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothDevice"/> class as observables.
    /// </summary>
    public class BluetoothDeviceEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothDeviceEvents(global::Tizen.Network.Bluetooth.BluetoothDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothDevice.AuthorizationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.AuthorizationChangedEventArgs> AuthorizationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.AuthorizationChangedEventArgs>, global::Tizen.Network.Bluetooth.AuthorizationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.AuthorizationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AuthorizationChanged += x, x => _data.AuthorizationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothDevice.BondCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.BondCreatedEventArgs> BondCreated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.BondCreatedEventArgs>, global::Tizen.Network.Bluetooth.BondCreatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.BondCreatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BondCreated += x, x => _data.BondCreated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothDevice.BondDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.BondDestroyedEventArgs> BondDestroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.BondDestroyedEventArgs>, global::Tizen.Network.Bluetooth.BondDestroyedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.BondDestroyedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BondDestroyed += x, x => _data.BondDestroyed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothDevice.ConnectionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.DeviceConnectionStateChangedEventArgs> ConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.DeviceConnectionStateChangedEventArgs>, global::Tizen.Network.Bluetooth.DeviceConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.DeviceConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ConnectionStateChanged += x, x => _data.ConnectionStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothDevice.ServiceSearched"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.ServiceSearchedEventArgs> ServiceSearched => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.ServiceSearchedEventArgs>, global::Tizen.Network.Bluetooth.ServiceSearchedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.ServiceSearchedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServiceSearched += x, x => _data.ServiceSearched -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattAttribute"/> class as observables.
    /// </summary>
    public class BluetoothGattAttributeEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothGattAttribute _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattAttribute"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothGattAttributeEvents(global::Tizen.Network.Bluetooth.BluetoothGattAttribute data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothGattAttribute.ReadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.ReadRequestedEventArgs> ReadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.ReadRequestedEventArgs>, global::Tizen.Network.Bluetooth.ReadRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.ReadRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ReadRequested += x, x => _data.ReadRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothGattAttribute.WriteRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.WriteRequestedEventArgs> WriteRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.WriteRequestedEventArgs>, global::Tizen.Network.Bluetooth.WriteRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.WriteRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WriteRequested += x, x => _data.WriteRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattCharacteristic"/> class as observables.
    /// </summary>
    public class BluetoothGattCharacteristicEvents : global::Tizen.Network.Bluetooth.BluetoothGattAttributeEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothGattCharacteristic _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattCharacteristic"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothGattCharacteristicEvents(global::Tizen.Network.Bluetooth.BluetoothGattCharacteristic data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothGattCharacteristic.NotificationStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.NotificationStateChangedEventArg> NotificationStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.NotificationStateChangedEventArg>, global::Tizen.Network.Bluetooth.NotificationStateChangedEventArg>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.NotificationStateChangedEventArg e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NotificationStateChanged += x, x => _data.NotificationStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothGattCharacteristic.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.ValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.ValueChangedEventArgs>, global::Tizen.Network.Bluetooth.ValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.ValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattServer"/> class as observables.
    /// </summary>
    public class BluetoothGattServerEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothGattServer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothGattServer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothGattServerEvents(global::Tizen.Network.Bluetooth.BluetoothGattServer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothGattServer.NotificationSent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.NotificationSentEventArg> NotificationSent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.NotificationSentEventArg>, global::Tizen.Network.Bluetooth.NotificationSentEventArg>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.NotificationSentEventArg e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NotificationSent += x, x => _data.NotificationSent -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothHid"/> class as observables.
    /// </summary>
    public class BluetoothHidEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothHid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothHid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothHidEvents(global::Tizen.Network.Bluetooth.BluetoothHid data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothHid.HidConnectionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.HidConnectionStateChangedEventArgs> HidConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.HidConnectionStateChangedEventArgs>, global::Tizen.Network.Bluetooth.HidConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.HidConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HidConnectionStateChanged += x, x => _data.HidConnectionStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothLeAdvertiser"/> class as observables.
    /// </summary>
    public class BluetoothLeAdvertiserEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothLeAdvertiser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothLeAdvertiser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothLeAdvertiserEvents(global::Tizen.Network.Bluetooth.BluetoothLeAdvertiser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothLeAdvertiser.AdvertisingStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.AdvertisingStateChangedEventArgs> AdvertisingStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.AdvertisingStateChangedEventArgs>, global::Tizen.Network.Bluetooth.AdvertisingStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.AdvertisingStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AdvertisingStateChanged += x, x => _data.AdvertisingStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothLeDevice"/> class as observables.
    /// </summary>
    public class BluetoothLeDeviceEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothLeDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothLeDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothLeDeviceEvents(global::Tizen.Network.Bluetooth.BluetoothLeDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothLeDevice.GattConnectionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.GattConnectionStateChangedEventArgs> GattConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.GattConnectionStateChangedEventArgs>, global::Tizen.Network.Bluetooth.GattConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.GattConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GattConnectionStateChanged += x, x => _data.GattConnectionStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothOppClient"/> class as observables.
    /// </summary>
    public class BluetoothOppClientEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothOppClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothOppClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothOppClientEvents(global::Tizen.Network.Bluetooth.BluetoothOppClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothOppClient.PushFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.PushFinishedEventArgs> PushFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.PushFinishedEventArgs>, global::Tizen.Network.Bluetooth.PushFinishedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.PushFinishedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PushFinished += x, x => _data.PushFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothOppClient.PushProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.PushProgressEventArgs> PushProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.PushProgressEventArgs>, global::Tizen.Network.Bluetooth.PushProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.PushProgressEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PushProgress += x, x => _data.PushProgress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothOppClient.PushResponded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.PushRespondedEventArgs> PushResponded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.PushRespondedEventArgs>, global::Tizen.Network.Bluetooth.PushRespondedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.PushRespondedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PushResponded += x, x => _data.PushResponded -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothOppServer"/> class as observables.
    /// </summary>
    public class BluetoothOppServerEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothOppServer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothOppServer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothOppServerEvents(global::Tizen.Network.Bluetooth.BluetoothOppServer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothOppServer.ConnectionRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.ConnectionRequestedEventArgs> ConnectionRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.ConnectionRequestedEventArgs>, global::Tizen.Network.Bluetooth.ConnectionRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.ConnectionRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ConnectionRequested += x, x => _data.ConnectionRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothOppServer.TransferFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.TransferFinishedEventArgs> TransferFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.TransferFinishedEventArgs>, global::Tizen.Network.Bluetooth.TransferFinishedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.TransferFinishedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TransferFinished += x, x => _data.TransferFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothOppServer.TransferProgress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.TransferProgressEventArgs> TransferProgress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.TransferProgressEventArgs>, global::Tizen.Network.Bluetooth.TransferProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.TransferProgressEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TransferProgress += x, x => _data.TransferProgress -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.BluetoothServerSocket"/> class as observables.
    /// </summary>
    public class BluetoothServerSocketEvents
    {
        private readonly global::Tizen.Network.Bluetooth.BluetoothServerSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.BluetoothServerSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BluetoothServerSocketEvents(global::Tizen.Network.Bluetooth.BluetoothServerSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothServerSocket.AcceptStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.AcceptStateChangedEventArgs> AcceptStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.AcceptStateChangedEventArgs>, global::Tizen.Network.Bluetooth.AcceptStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.AcceptStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AcceptStateChanged += x, x => _data.AcceptStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Bluetooth.IBluetoothServerSocket"/> class as observables.
    /// </summary>
    public class IBluetoothServerSocketEvents
    {
        private readonly global::Tizen.Network.Bluetooth.IBluetoothServerSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Bluetooth.IBluetoothServerSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IBluetoothServerSocketEvents(global::Tizen.Network.Bluetooth.IBluetoothServerSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.IBluetoothServerSocket.ConnectionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.SocketConnectionStateChangedEventArgs> ConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.SocketConnectionStateChangedEventArgs>, global::Tizen.Network.Bluetooth.SocketConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.SocketConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ConnectionStateChanged += x, x => _data.ConnectionStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.IBluetoothServerSocket.DataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Bluetooth.SocketDataReceivedEventArgs> DataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.SocketDataReceivedEventArgs>, global::Tizen.Network.Bluetooth.SocketDataReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.SocketDataReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataReceived += x, x => _data.DataReceived -= x);
    }
}

namespace Tizen.Network.Connection
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Network.Connection"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Connection.ConnectionProfile"/> class.
        /// </summary>
        public static ConnectionProfileEvents Events(this global::Tizen.Network.Connection.ConnectionProfile item) => new ConnectionProfileEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Connection.ConnectionProfile"/> class as observables.
    /// </summary>
    public class ConnectionProfileEvents
    {
        private readonly global::Tizen.Network.Connection.ConnectionProfile _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Connection.ConnectionProfile"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ConnectionProfileEvents(global::Tizen.Network.Connection.ConnectionProfile data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Connection.ConnectionProfile.ProfileStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Connection.ProfileStateEventArgs> ProfileStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Connection.ProfileStateEventArgs>, global::Tizen.Network.Connection.ProfileStateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Connection.ProfileStateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ProfileStateChanged += x, x => _data.ProfileStateChanged -= x);
    }
}

namespace Tizen.Network.IoTConnectivity
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Network.IoTConnectivity"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.IoTConnectivity.RemoteResource"/> class.
        /// </summary>
        public static RemoteResourceEvents Events(this global::Tizen.Network.IoTConnectivity.RemoteResource item) => new RemoteResourceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.IoTConnectivity.RemoteResource"/> class as observables.
    /// </summary>
    public class RemoteResourceEvents
    {
        private readonly global::Tizen.Network.IoTConnectivity.RemoteResource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.IoTConnectivity.RemoteResource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RemoteResourceEvents(global::Tizen.Network.IoTConnectivity.RemoteResource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.RemoteResource.CacheUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.IoTConnectivity.CacheUpdatedEventArgs> CacheUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.CacheUpdatedEventArgs>, global::Tizen.Network.IoTConnectivity.CacheUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.CacheUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CacheUpdated += x, x => _data.CacheUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.RemoteResource.ObserverNotified"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.IoTConnectivity.ObserverNotifiedEventArgs> ObserverNotified => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.ObserverNotifiedEventArgs>, global::Tizen.Network.IoTConnectivity.ObserverNotifiedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.ObserverNotifiedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ObserverNotified += x, x => _data.ObserverNotified -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.RemoteResource.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.IoTConnectivity.StateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.StateChangedEventArgs>, global::Tizen.Network.IoTConnectivity.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Tizen.Network.Nfc
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Network.Nfc"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcCardEmulationAdapter"/> class.
        /// </summary>
        public static NfcCardEmulationAdapterEvents Events(this global::Tizen.Network.Nfc.NfcCardEmulationAdapter item) => new NfcCardEmulationAdapterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcP2p"/> class.
        /// </summary>
        public static NfcP2pEvents Events(this global::Tizen.Network.Nfc.NfcP2p item) => new NfcP2pEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcP2pAdapter"/> class.
        /// </summary>
        public static NfcP2pAdapterEvents Events(this global::Tizen.Network.Nfc.NfcP2pAdapter item) => new NfcP2pAdapterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcTagAdapter"/> class.
        /// </summary>
        public static NfcTagAdapterEvents Events(this global::Tizen.Network.Nfc.NfcTagAdapter item) => new NfcTagAdapterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcCardEmulationAdapter"/> class as observables.
    /// </summary>
    public class NfcCardEmulationAdapterEvents
    {
        private readonly global::Tizen.Network.Nfc.NfcCardEmulationAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Nfc.NfcCardEmulationAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NfcCardEmulationAdapterEvents(global::Tizen.Network.Nfc.NfcCardEmulationAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcCardEmulationAdapter.EseSecureElementTransactionEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nfc.SecureElementTranscationEventArgs> EseSecureElementTransactionEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.SecureElementTranscationEventArgs>, global::Tizen.Network.Nfc.SecureElementTranscationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.SecureElementTranscationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EseSecureElementTransactionEvent += x, x => _data.EseSecureElementTransactionEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcCardEmulationAdapter.HostCardEmulationEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nfc.HostCardEmulationEventArgs> HostCardEmulationEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.HostCardEmulationEventArgs>, global::Tizen.Network.Nfc.HostCardEmulationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.HostCardEmulationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.HostCardEmulationEvent += x, x => _data.HostCardEmulationEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcCardEmulationAdapter.SecureElementEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nfc.SecureElementEventArgs> SecureElementEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.SecureElementEventArgs>, global::Tizen.Network.Nfc.SecureElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.SecureElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SecureElementEvent += x, x => _data.SecureElementEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcCardEmulationAdapter.UiccSecureElementTransactionEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nfc.SecureElementTranscationEventArgs> UiccSecureElementTransactionEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.SecureElementTranscationEventArgs>, global::Tizen.Network.Nfc.SecureElementTranscationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.SecureElementTranscationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.UiccSecureElementTransactionEvent += x, x => _data.UiccSecureElementTransactionEvent -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcP2p"/> class as observables.
    /// </summary>
    public class NfcP2pEvents
    {
        private readonly global::Tizen.Network.Nfc.NfcP2p _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Nfc.NfcP2p"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NfcP2pEvents(global::Tizen.Network.Nfc.NfcP2p data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcP2p.P2pDataReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nfc.P2pDataReceivedEventArgs> P2pDataReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.P2pDataReceivedEventArgs>, global::Tizen.Network.Nfc.P2pDataReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.P2pDataReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.P2pDataReceived += x, x => _data.P2pDataReceived -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcP2pAdapter"/> class as observables.
    /// </summary>
    public class NfcP2pAdapterEvents
    {
        private readonly global::Tizen.Network.Nfc.NfcP2pAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Nfc.NfcP2pAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NfcP2pAdapterEvents(global::Tizen.Network.Nfc.NfcP2pAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcP2pAdapter.P2pTargetDiscovered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nfc.P2pTargetDiscoveredEventArgs> P2pTargetDiscovered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.P2pTargetDiscoveredEventArgs>, global::Tizen.Network.Nfc.P2pTargetDiscoveredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.P2pTargetDiscoveredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.P2pTargetDiscovered += x, x => _data.P2pTargetDiscovered -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Nfc.NfcTagAdapter"/> class as observables.
    /// </summary>
    public class NfcTagAdapterEvents
    {
        private readonly global::Tizen.Network.Nfc.NfcTagAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Nfc.NfcTagAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NfcTagAdapterEvents(global::Tizen.Network.Nfc.NfcTagAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcTagAdapter.TagDiscovered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nfc.TagDiscoveredEventArgs> TagDiscovered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.TagDiscoveredEventArgs>, global::Tizen.Network.Nfc.TagDiscoveredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.TagDiscoveredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TagDiscovered += x, x => _data.TagDiscovered -= x);
    }
}

namespace Tizen.Network.Nsd
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Network.Nsd"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Nsd.DnssdBrowser"/> class.
        /// </summary>
        public static DnssdBrowserEvents Events(this global::Tizen.Network.Nsd.DnssdBrowser item) => new DnssdBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.Nsd.SsdpBrowser"/> class.
        /// </summary>
        public static SsdpBrowserEvents Events(this global::Tizen.Network.Nsd.SsdpBrowser item) => new SsdpBrowserEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Nsd.DnssdBrowser"/> class as observables.
    /// </summary>
    public class DnssdBrowserEvents
    {
        private readonly global::Tizen.Network.Nsd.DnssdBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Nsd.DnssdBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DnssdBrowserEvents(global::Tizen.Network.Nsd.DnssdBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nsd.DnssdBrowser.ServiceFound"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nsd.DnssdServiceFoundEventArgs> ServiceFound => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nsd.DnssdServiceFoundEventArgs>, global::Tizen.Network.Nsd.DnssdServiceFoundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nsd.DnssdServiceFoundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServiceFound += x, x => _data.ServiceFound -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.Nsd.SsdpBrowser"/> class as observables.
    /// </summary>
    public class SsdpBrowserEvents
    {
        private readonly global::Tizen.Network.Nsd.SsdpBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.Nsd.SsdpBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SsdpBrowserEvents(global::Tizen.Network.Nsd.SsdpBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nsd.SsdpBrowser.ServiceFound"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.Nsd.SsdpServiceFoundEventArgs> ServiceFound => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nsd.SsdpServiceFoundEventArgs>, global::Tizen.Network.Nsd.SsdpServiceFoundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nsd.SsdpServiceFoundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServiceFound += x, x => _data.ServiceFound -= x);
    }
}

namespace Tizen.Network.WiFiDirect
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Network.WiFiDirect"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Network.WiFiDirect.WiFiDirectPeer"/> class.
        /// </summary>
        public static WiFiDirectPeerEvents Events(this global::Tizen.Network.WiFiDirect.WiFiDirectPeer item) => new WiFiDirectPeerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Network.WiFiDirect.WiFiDirectPeer"/> class as observables.
    /// </summary>
    public class WiFiDirectPeerEvents
    {
        private readonly global::Tizen.Network.WiFiDirect.WiFiDirectPeer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Network.WiFiDirect.WiFiDirectPeer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WiFiDirectPeerEvents(global::Tizen.Network.WiFiDirect.WiFiDirectPeer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectPeer.ConnectionStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.WiFiDirect.ConnectionStateChangedEventArgs> ConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.ConnectionStateChangedEventArgs>, global::Tizen.Network.WiFiDirect.ConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.ConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ConnectionStateChanged += x, x => _data.ConnectionStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectPeer.IpAddressAssigned"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.WiFiDirect.IpAddressAssignedEventArgs> IpAddressAssigned => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.IpAddressAssignedEventArgs>, global::Tizen.Network.WiFiDirect.IpAddressAssignedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.IpAddressAssignedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.IpAddressAssigned += x, x => _data.IpAddressAssigned -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectPeer.ServiceStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Network.WiFiDirect.ServiceStateChangedEventArgs> ServiceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.ServiceStateChangedEventArgs>, global::Tizen.Network.WiFiDirect.ServiceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.ServiceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ServiceStateChanged += x, x => _data.ServiceStateChanged -= x);
    }
}

namespace Tizen.NUI
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.NUI"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.Animation"/> class.
        /// </summary>
        public static AnimationEvents Events(this global::Tizen.NUI.Animation item) => new AnimationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.FocusManager"/> class.
        /// </summary>
        public static FocusManagerEvents Events(this global::Tizen.NUI.FocusManager item) => new FocusManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.ImfManager"/> class.
        /// </summary>
        public static ImfManagerEvents Events(this global::Tizen.NUI.ImfManager item) => new ImfManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.NUIApplication"/> class.
        /// </summary>
        public static NUIApplicationEvents Events(this global::Tizen.NUI.NUIApplication item) => new NUIApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.PropertyNotification"/> class.
        /// </summary>
        public static PropertyNotificationEvents Events(this global::Tizen.NUI.PropertyNotification item) => new PropertyNotificationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.ScrollView"/> class.
        /// </summary>
        public static ScrollViewEvents Events(this global::Tizen.NUI.ScrollView item) => new ScrollViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.StyleManager"/> class.
        /// </summary>
        public static StyleManagerEvents Events(this global::Tizen.NUI.StyleManager item) => new StyleManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.TTSPlayer"/> class.
        /// </summary>
        public static TTSPlayerEvents Events(this global::Tizen.NUI.TTSPlayer item) => new TTSPlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.WidgetView"/> class.
        /// </summary>
        public static WidgetViewEvents Events(this global::Tizen.NUI.WidgetView item) => new WidgetViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.Window"/> class.
        /// </summary>
        public static WindowEvents Events(this global::Tizen.NUI.Window item) => new WindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.Animation"/> class as observables.
    /// </summary>
    public class AnimationEvents
    {
        private readonly global::Tizen.NUI.Animation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.Animation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AnimationEvents(global::Tizen.NUI.Animation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Animation.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Finished += x, x => _data.Finished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Animation.ProgressReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ProgressReached => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ProgressReached += x, x => _data.ProgressReached -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.FocusManager"/> class as observables.
    /// </summary>
    public class FocusManagerEvents
    {
        private readonly global::Tizen.NUI.FocusManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.FocusManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FocusManagerEvents(global::Tizen.NUI.FocusManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.FocusManager.FocusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.FocusManager.FocusChangedEventArgs> FocusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.FocusManager.FocusChangedEventArgs>, global::Tizen.NUI.FocusManager.FocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.FocusManager.FocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChanged += x, x => _data.FocusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.FocusManager.FocusedViewActivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.FocusManager.FocusedViewActivatedEventArgs> FocusedViewActivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.FocusManager.FocusedViewActivatedEventArgs>, global::Tizen.NUI.FocusManager.FocusedViewActivatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.FocusManager.FocusedViewActivatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusedViewActivated += x, x => _data.FocusedViewActivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.FocusManager.FocusedViewEnterKeyPressed"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Please do not use! This will be deprecated! Please use FocusManager.FocusedViewActivated instead! Like: FocusManager.Instance.FocusedViewActivated = OnFocusedViewActivated; private void OnFocusedViewActivated(object source, FocusManager.FocusedViewActivatedEventArgs args) {...}", false)]
        public global::System.IObservable<global::Tizen.NUI.FocusManager.FocusedViewEnterKeyEventArgs> FocusedViewEnterKeyPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.FocusManager.FocusedViewEnterKeyEventArgs>, global::Tizen.NUI.FocusManager.FocusedViewEnterKeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.FocusManager.FocusedViewEnterKeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusedViewEnterKeyPressed += x, x => _data.FocusedViewEnterKeyPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.FocusManager.FocusGroupChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.FocusManager.FocusGroupChangedEventArgs> FocusGroupChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.FocusManager.FocusGroupChangedEventArgs>, global::Tizen.NUI.FocusManager.FocusGroupChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.FocusManager.FocusGroupChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusGroupChanged += x, x => _data.FocusGroupChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.ImfManager"/> class as observables.
    /// </summary>
    public class ImfManagerEvents
    {
        private readonly global::Tizen.NUI.ImfManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.ImfManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImfManagerEvents(global::Tizen.NUI.ImfManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.ImfManager.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.ImfManager.ActivatedEventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.ImfManager.ActivatedEventArgs>, global::Tizen.NUI.ImfManager.ActivatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.ImfManager.ActivatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.ImfManager.KeyboardTypeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.ImfManager.KeyboardTypeChangedEventArgs> KeyboardTypeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.ImfManager.KeyboardTypeChangedEventArgs>, global::Tizen.NUI.ImfManager.KeyboardTypeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.ImfManager.KeyboardTypeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyboardTypeChanged += x, x => _data.KeyboardTypeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.ImfManager.LanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.ImfManager.LanguageChangedEventArgs> LanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.ImfManager.LanguageChangedEventArgs>, global::Tizen.NUI.ImfManager.LanguageChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.ImfManager.LanguageChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LanguageChanged += x, x => _data.LanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.ImfManager.Resized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.ImfManager.ResizedEventArgs> Resized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.ImfManager.ResizedEventArgs>, global::Tizen.NUI.ImfManager.ResizedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.ImfManager.ResizedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resized += x, x => _data.Resized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.ImfManager.StatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.ImfManager.StatusChangedEventArgs> StatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.ImfManager.StatusChangedEventArgs>, global::Tizen.NUI.ImfManager.StatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.ImfManager.StatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StatusChanged += x, x => _data.StatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.NUIApplication"/> class as observables.
    /// </summary>
    public class NUIApplicationEvents : global::Tizen.Applications.CoreApplicationEvents
    {
        private readonly global::Tizen.NUI.NUIApplication _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.NUIApplication"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NUIApplicationEvents(global::Tizen.NUI.NUIApplication data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.NUIApplication.Paused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Paused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Paused += x, x => _data.Paused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.NUIApplication.Resumed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resumed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resumed += x, x => _data.Resumed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.PropertyNotification"/> class as observables.
    /// </summary>
    public class PropertyNotificationEvents
    {
        private readonly global::Tizen.NUI.PropertyNotification _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.PropertyNotification"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PropertyNotificationEvents(global::Tizen.NUI.PropertyNotification data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.PropertyNotification.Notified"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.PropertyNotification.NotifyEventArgs> Notified => global::System.Reactive.Linq.Observable.FromEvent<global::Tizen.NUI.DaliEventHandler<object, global::Tizen.NUI.PropertyNotification.NotifyEventArgs>, global::Tizen.NUI.PropertyNotification.NotifyEventArgs>(eventHandler =>
        {
            void Handler(object source, global::Tizen.NUI.PropertyNotification.NotifyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Notified += x, x => _data.Notified -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.ScrollView"/> class as observables.
    /// </summary>
    public class ScrollViewEvents : global::Tizen.NUI.BaseComponents.ScrollableEvents
    {
        private readonly global::Tizen.NUI.ScrollView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.ScrollView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollViewEvents(global::Tizen.NUI.ScrollView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.ScrollView.SnapStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.ScrollView.SnapStartedEventArgs> SnapStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Tizen.NUI.DaliEventHandler<object, global::Tizen.NUI.ScrollView.SnapStartedEventArgs>, global::Tizen.NUI.ScrollView.SnapStartedEventArgs>(eventHandler =>
        {
            void Handler(object source, global::Tizen.NUI.ScrollView.SnapStartedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SnapStarted += x, x => _data.SnapStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.StyleManager"/> class as observables.
    /// </summary>
    public class StyleManagerEvents
    {
        private readonly global::Tizen.NUI.StyleManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.StyleManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StyleManagerEvents(global::Tizen.NUI.StyleManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.StyleManager.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.StyleManager.StyleChangedEventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.StyleManager.StyleChangedEventArgs>, global::Tizen.NUI.StyleManager.StyleChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.StyleManager.StyleChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.TTSPlayer"/> class as observables.
    /// </summary>
    public class TTSPlayerEvents
    {
        private readonly global::Tizen.NUI.TTSPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.TTSPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TTSPlayerEvents(global::Tizen.NUI.TTSPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.TTSPlayer.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.TTSPlayer.StateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.TTSPlayer.StateChangedEventArgs>, global::Tizen.NUI.TTSPlayer.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.TTSPlayer.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.WidgetView"/> class as observables.
    /// </summary>
    public class WidgetViewEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.WidgetView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.WidgetView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WidgetViewEvents(global::Tizen.NUI.WidgetView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.WidgetView.WidgetAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.WidgetView.WidgetViewEventArgs> WidgetAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.WidgetView.WidgetViewEventArgs>, global::Tizen.NUI.WidgetView.WidgetViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.WidgetView.WidgetViewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WidgetAdded += x, x => _data.WidgetAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.WidgetView.WidgetContentUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.WidgetView.WidgetViewEventArgs> WidgetContentUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.WidgetView.WidgetViewEventArgs>, global::Tizen.NUI.WidgetView.WidgetViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.WidgetView.WidgetViewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WidgetContentUpdated += x, x => _data.WidgetContentUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.WidgetView.WidgetCreationAborted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.WidgetView.WidgetViewEventArgs> WidgetCreationAborted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.WidgetView.WidgetViewEventArgs>, global::Tizen.NUI.WidgetView.WidgetViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.WidgetView.WidgetViewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WidgetCreationAborted += x, x => _data.WidgetCreationAborted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.WidgetView.WidgetDeleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.WidgetView.WidgetViewEventArgs> WidgetDeleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.WidgetView.WidgetViewEventArgs>, global::Tizen.NUI.WidgetView.WidgetViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.WidgetView.WidgetViewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WidgetDeleted += x, x => _data.WidgetDeleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.WidgetView.WidgetFaulted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.WidgetView.WidgetViewEventArgs> WidgetFaulted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.WidgetView.WidgetViewEventArgs>, global::Tizen.NUI.WidgetView.WidgetViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.WidgetView.WidgetViewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WidgetFaulted += x, x => _data.WidgetFaulted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.WidgetView.WidgetUpdatePeriodChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.WidgetView.WidgetViewEventArgs> WidgetUpdatePeriodChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.WidgetView.WidgetViewEventArgs>, global::Tizen.NUI.WidgetView.WidgetViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.WidgetView.WidgetViewEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WidgetUpdatePeriodChanged += x, x => _data.WidgetUpdatePeriodChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.Window"/> class as observables.
    /// </summary>
    public class WindowEvents
    {
        private readonly global::Tizen.NUI.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WindowEvents(global::Tizen.NUI.Window data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Window.FocusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.Window.FocusChangedEventArgs> FocusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.Window.FocusChangedEventArgs>, global::Tizen.NUI.Window.FocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.Window.FocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChanged += x, x => _data.FocusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Window.KeyEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.Window.KeyEventArgs> KeyEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.Window.KeyEventArgs>, global::Tizen.NUI.Window.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.Window.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyEvent += x, x => _data.KeyEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Window.Resized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.Window.ResizedEventArgs> Resized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.Window.ResizedEventArgs>, global::Tizen.NUI.Window.ResizedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.Window.ResizedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resized += x, x => _data.Resized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Window.TouchEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.Window.TouchEventArgs> TouchEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.Window.TouchEventArgs>, global::Tizen.NUI.Window.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.Window.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TouchEvent += x, x => _data.TouchEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Window.WheelEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.Window.WheelEventArgs> WheelEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.Window.WheelEventArgs>, global::Tizen.NUI.Window.WheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.Window.WheelEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WheelEvent += x, x => _data.WheelEvent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.Window.WindowFocusChanged"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Please do not use! This will be deprecated! Please use FocusChanged instead! Like: Window.Instance.FocusChanged = OnFocusChanged; private void OnFocusChanged(object source, Window.FocusChangedEventArgs args) {...}", false)]
        public global::System.IObservable<global::Tizen.NUI.Window.WindowFocusChangedEventArgs> WindowFocusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.Window.WindowFocusChangedEventArgs>, global::Tizen.NUI.Window.WindowFocusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.Window.WindowFocusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.WindowFocusChanged += x, x => _data.WindowFocusChanged -= x);
    }
}

namespace Tizen.NUI.BaseComponents
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.NUI.BaseComponents"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.ImageView"/> class.
        /// </summary>
        public static ImageViewEvents Events(this global::Tizen.NUI.BaseComponents.ImageView item) => new ImageViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.Scrollable"/> class.
        /// </summary>
        public static ScrollableEvents Events(this global::Tizen.NUI.BaseComponents.Scrollable item) => new ScrollableEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.TextEditor"/> class.
        /// </summary>
        public static TextEditorEvents Events(this global::Tizen.NUI.BaseComponents.TextEditor item) => new TextEditorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.TextField"/> class.
        /// </summary>
        public static TextFieldEvents Events(this global::Tizen.NUI.BaseComponents.TextField item) => new TextFieldEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.VideoView"/> class.
        /// </summary>
        public static VideoViewEvents Events(this global::Tizen.NUI.BaseComponents.VideoView item) => new VideoViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.View"/> class.
        /// </summary>
        public static ViewEvents Events(this global::Tizen.NUI.BaseComponents.View item) => new ViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.ImageView"/> class as observables.
    /// </summary>
    public class ImageViewEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.BaseComponents.ImageView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.BaseComponents.ImageView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageViewEvents(global::Tizen.NUI.BaseComponents.ImageView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.ImageView.ResourceReady"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.ImageView.ResourceReadyEventArgs> ResourceReady => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.ImageView.ResourceReadyEventArgs>, global::Tizen.NUI.BaseComponents.ImageView.ResourceReadyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.ImageView.ResourceReadyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourceReady += x, x => _data.ResourceReady -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.Scrollable"/> class as observables.
    /// </summary>
    public class ScrollableEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.BaseComponents.Scrollable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.BaseComponents.Scrollable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollableEvents(global::Tizen.NUI.BaseComponents.Scrollable data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.Scrollable.ScrollCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.Scrollable.CompletedEventArgs> ScrollCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Tizen.NUI.DaliEventHandler<object, global::Tizen.NUI.BaseComponents.Scrollable.CompletedEventArgs>, global::Tizen.NUI.BaseComponents.Scrollable.CompletedEventArgs>(eventHandler =>
        {
            void Handler(object source, global::Tizen.NUI.BaseComponents.Scrollable.CompletedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollCompleted += x, x => _data.ScrollCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.Scrollable.ScrollStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.Scrollable.StartedEventArgs> ScrollStarted => global::System.Reactive.Linq.Observable.FromEvent<global::Tizen.NUI.DaliEventHandler<object, global::Tizen.NUI.BaseComponents.Scrollable.StartedEventArgs>, global::Tizen.NUI.BaseComponents.Scrollable.StartedEventArgs>(eventHandler =>
        {
            void Handler(object source, global::Tizen.NUI.BaseComponents.Scrollable.StartedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollStarted += x, x => _data.ScrollStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.Scrollable.ScrollUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.Scrollable.UpdatedEventArgs> ScrollUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Tizen.NUI.DaliEventHandler<object, global::Tizen.NUI.BaseComponents.Scrollable.UpdatedEventArgs>, global::Tizen.NUI.BaseComponents.Scrollable.UpdatedEventArgs>(eventHandler =>
        {
            void Handler(object source, global::Tizen.NUI.BaseComponents.Scrollable.UpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollUpdated += x, x => _data.ScrollUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.TextEditor"/> class as observables.
    /// </summary>
    public class TextEditorEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.BaseComponents.TextEditor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.BaseComponents.TextEditor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextEditorEvents(global::Tizen.NUI.BaseComponents.TextEditor data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.TextEditor.ScrollStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.TextEditor.ScrollStateChangedEventArgs> ScrollStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.TextEditor.ScrollStateChangedEventArgs>, global::Tizen.NUI.BaseComponents.TextEditor.ScrollStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.TextEditor.ScrollStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollStateChanged += x, x => _data.ScrollStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.TextEditor.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.TextEditor.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.TextEditor.TextChangedEventArgs>, global::Tizen.NUI.BaseComponents.TextEditor.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.TextEditor.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.TextField"/> class as observables.
    /// </summary>
    public class TextFieldEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.BaseComponents.TextField _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.BaseComponents.TextField"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextFieldEvents(global::Tizen.NUI.BaseComponents.TextField data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.TextField.MaxLengthReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.TextField.MaxLengthReachedEventArgs> MaxLengthReached => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.TextField.MaxLengthReachedEventArgs>, global::Tizen.NUI.BaseComponents.TextField.MaxLengthReachedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.TextField.MaxLengthReachedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MaxLengthReached += x, x => _data.MaxLengthReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.TextField.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.TextField.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.TextField.TextChangedEventArgs>, global::Tizen.NUI.BaseComponents.TextField.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.TextField.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.VideoView"/> class as observables.
    /// </summary>
    public class VideoViewEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.BaseComponents.VideoView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.BaseComponents.VideoView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VideoViewEvents(global::Tizen.NUI.BaseComponents.VideoView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.VideoView.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.VideoView.FinishedEventArgs> Finished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.VideoView.FinishedEventArgs>, global::Tizen.NUI.BaseComponents.VideoView.FinishedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.VideoView.FinishedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Finished += x, x => _data.Finished -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.BaseComponents.View"/> class as observables.
    /// </summary>
    public class ViewEvents
    {
        private readonly global::Tizen.NUI.BaseComponents.View _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.BaseComponents.View"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewEvents(global::Tizen.NUI.BaseComponents.View data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.AddedToWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AddedToWindow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AddedToWindow += x, x => _data.AddedToWindow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.FocusGained"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FocusGained => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusGained += x, x => _data.FocusGained -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.FocusLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FocusLost => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusLost += x, x => _data.FocusLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.LayoutDirectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.View.LayoutDirectionChangedEventArgs> LayoutDirectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.View.LayoutDirectionChangedEventArgs>, global::Tizen.NUI.BaseComponents.View.LayoutDirectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.View.LayoutDirectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutDirectionChanged += x, x => _data.LayoutDirectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.Relayout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Relayout => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Relayout += x, x => _data.Relayout -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.RemovedFromWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemovedFromWindow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemovedFromWindow += x, x => _data.RemovedFromWindow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.ResourcesLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ResourcesLoaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResourcesLoaded += x, x => _data.ResourcesLoaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.BaseComponents.View.VisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs> VisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs>, global::Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.VisibilityChanged += x, x => _data.VisibilityChanged -= x);
    }
}

namespace Tizen.NUI.UIComponents
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.NUI.UIComponents"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.UIComponents.Popup"/> class.
        /// </summary>
        public static PopupEvents Events(this global::Tizen.NUI.UIComponents.Popup item) => new PopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.UIComponents.ProgressBar"/> class.
        /// </summary>
        public static ProgressBarEvents Events(this global::Tizen.NUI.UIComponents.ProgressBar item) => new ProgressBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.NUI.UIComponents.ScrollBar"/> class.
        /// </summary>
        public static ScrollBarEvents Events(this global::Tizen.NUI.UIComponents.ScrollBar item) => new ScrollBarEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.UIComponents.Popup"/> class as observables.
    /// </summary>
    public class PopupEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.UIComponents.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.UIComponents.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PopupEvents(global::Tizen.NUI.UIComponents.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.Popup.Hidden"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.Popup.HiddenEventArgs> Hidden => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.Popup.HiddenEventArgs>, global::Tizen.NUI.UIComponents.Popup.HiddenEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.Popup.HiddenEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Hidden += x, x => _data.Hidden -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.Popup.Hiding"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.Popup.HidingEventArgs> Hiding => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.Popup.HidingEventArgs>, global::Tizen.NUI.UIComponents.Popup.HidingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.Popup.HidingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Hiding += x, x => _data.Hiding -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.Popup.Showing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.Popup.ShowingEventArgs> Showing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.Popup.ShowingEventArgs>, global::Tizen.NUI.UIComponents.Popup.ShowingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.Popup.ShowingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Showing += x, x => _data.Showing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.Popup.Shown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.Popup.ShownEventArgs> Shown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.Popup.ShownEventArgs>, global::Tizen.NUI.UIComponents.Popup.ShownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.Popup.ShownEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Shown += x, x => _data.Shown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.Popup.TouchedOutside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.Popup.TouchedOutsideEventArgs> TouchedOutside => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.Popup.TouchedOutsideEventArgs>, global::Tizen.NUI.UIComponents.Popup.TouchedOutsideEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.Popup.TouchedOutsideEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TouchedOutside += x, x => _data.TouchedOutside -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.UIComponents.ProgressBar"/> class as observables.
    /// </summary>
    public class ProgressBarEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.UIComponents.ProgressBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.UIComponents.ProgressBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ProgressBarEvents(global::Tizen.NUI.UIComponents.ProgressBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.ProgressBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs>, global::Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.NUI.UIComponents.ScrollBar"/> class as observables.
    /// </summary>
    public class ScrollBarEvents : global::Tizen.NUI.BaseComponents.ViewEvents
    {
        private readonly global::Tizen.NUI.UIComponents.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.NUI.UIComponents.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollBarEvents(global::Tizen.NUI.UIComponents.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.ScrollBar.PanFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.ScrollBar.PanFinishedEventArgs> PanFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.ScrollBar.PanFinishedEventArgs>, global::Tizen.NUI.UIComponents.ScrollBar.PanFinishedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.ScrollBar.PanFinishedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PanFinished += x, x => _data.PanFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.NUI.UIComponents.ScrollBar.ScrollInterval"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.NUI.UIComponents.ScrollBar.ScrollIntervalEventArgs> ScrollInterval => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.NUI.UIComponents.ScrollBar.ScrollIntervalEventArgs>, global::Tizen.NUI.UIComponents.ScrollBar.ScrollIntervalEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.NUI.UIComponents.ScrollBar.ScrollIntervalEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollInterval += x, x => _data.ScrollInterval -= x);
    }
}

namespace Tizen.Pims.Contacts
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Pims.Contacts"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Pims.Contacts.ContactsDatabase"/> class.
        /// </summary>
        public static ContactsDatabaseEvents Events(this global::Tizen.Pims.Contacts.ContactsDatabase item) => new ContactsDatabaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Pims.Contacts.ContactsManager"/> class.
        /// </summary>
        public static ContactsManagerEvents Events(this global::Tizen.Pims.Contacts.ContactsManager item) => new ContactsManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Pims.Contacts.ContactsDatabase"/> class as observables.
    /// </summary>
    public class ContactsDatabaseEvents
    {
        private readonly global::Tizen.Pims.Contacts.ContactsDatabase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Pims.Contacts.ContactsDatabase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContactsDatabaseEvents(global::Tizen.Pims.Contacts.ContactsDatabase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Pims.Contacts.ContactsDatabase.DBStatusChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Pims.Contacts.DBStatusChangedEventArgs> DBStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Pims.Contacts.DBStatusChangedEventArgs>, global::Tizen.Pims.Contacts.DBStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Pims.Contacts.DBStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DBStatusChanged += x, x => _data.DBStatusChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Pims.Contacts.ContactsManager"/> class as observables.
    /// </summary>
    public class ContactsManagerEvents
    {
        private readonly global::Tizen.Pims.Contacts.ContactsManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Pims.Contacts.ContactsManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ContactsManagerEvents(global::Tizen.Pims.Contacts.ContactsManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Pims.Contacts.ContactsManager.NameDisplayOrderChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Pims.Contacts.NameDisplayOrderChangedEventArgs> NameDisplayOrderChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Pims.Contacts.NameDisplayOrderChangedEventArgs>, global::Tizen.Pims.Contacts.NameDisplayOrderChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Pims.Contacts.NameDisplayOrderChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NameDisplayOrderChanged += x, x => _data.NameDisplayOrderChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Pims.Contacts.ContactsManager.NameSortingOrderChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Pims.Contacts.NameSortingOrderChangedEventArgs> NameSortingOrderChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Pims.Contacts.NameSortingOrderChangedEventArgs>, global::Tizen.Pims.Contacts.NameSortingOrderChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Pims.Contacts.NameSortingOrderChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NameSortingOrderChanged += x, x => _data.NameSortingOrderChanged -= x);
    }
}

namespace Tizen.Security
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Security"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Security.PrivacyPrivilegeManager.ResponseContext"/> class.
        /// </summary>
        public static ResponseContextEvents Events(this global::Tizen.Security.PrivacyPrivilegeManager.ResponseContext item) => new ResponseContextEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Security.PrivacyPrivilegeManager.ResponseContext"/> class as observables.
    /// </summary>
    public class ResponseContextEvents
    {
        private readonly global::Tizen.Security.PrivacyPrivilegeManager.ResponseContext _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Security.PrivacyPrivilegeManager.ResponseContext"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ResponseContextEvents(global::Tizen.Security.PrivacyPrivilegeManager.ResponseContext data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Security.PrivacyPrivilegeManager.ResponseContext.ResponseFetched"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Security.RequestResponseEventArgs> ResponseFetched => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Security.RequestResponseEventArgs>, global::Tizen.Security.RequestResponseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Security.RequestResponseEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ResponseFetched += x, x => _data.ResponseFetched -= x);
    }
}

namespace Tizen.Sensor
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Sensor"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.Accelerometer"/> class.
        /// </summary>
        public static AccelerometerEvents Events(this global::Tizen.Sensor.Accelerometer item) => new AccelerometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.FaceDownGestureDetector"/> class.
        /// </summary>
        public static FaceDownGestureDetectorEvents Events(this global::Tizen.Sensor.FaceDownGestureDetector item) => new FaceDownGestureDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.GravitySensor"/> class.
        /// </summary>
        public static GravitySensorEvents Events(this global::Tizen.Sensor.GravitySensor item) => new GravitySensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.Gyroscope"/> class.
        /// </summary>
        public static GyroscopeEvents Events(this global::Tizen.Sensor.Gyroscope item) => new GyroscopeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.GyroscopeRotationVectorSensor"/> class.
        /// </summary>
        public static GyroscopeRotationVectorSensorEvents Events(this global::Tizen.Sensor.GyroscopeRotationVectorSensor item) => new GyroscopeRotationVectorSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.HeartRateMonitor"/> class.
        /// </summary>
        public static HeartRateMonitorEvents Events(this global::Tizen.Sensor.HeartRateMonitor item) => new HeartRateMonitorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.HumiditySensor"/> class.
        /// </summary>
        public static HumiditySensorEvents Events(this global::Tizen.Sensor.HumiditySensor item) => new HumiditySensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.InVehicleActivityDetector"/> class.
        /// </summary>
        public static InVehicleActivityDetectorEvents Events(this global::Tizen.Sensor.InVehicleActivityDetector item) => new InVehicleActivityDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.LightSensor"/> class.
        /// </summary>
        public static LightSensorEvents Events(this global::Tizen.Sensor.LightSensor item) => new LightSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.LinearAccelerationSensor"/> class.
        /// </summary>
        public static LinearAccelerationSensorEvents Events(this global::Tizen.Sensor.LinearAccelerationSensor item) => new LinearAccelerationSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.Magnetometer"/> class.
        /// </summary>
        public static MagnetometerEvents Events(this global::Tizen.Sensor.Magnetometer item) => new MagnetometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.MagnetometerRotationVectorSensor"/> class.
        /// </summary>
        public static MagnetometerRotationVectorSensorEvents Events(this global::Tizen.Sensor.MagnetometerRotationVectorSensor item) => new MagnetometerRotationVectorSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.OrientationSensor"/> class.
        /// </summary>
        public static OrientationSensorEvents Events(this global::Tizen.Sensor.OrientationSensor item) => new OrientationSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.Pedometer"/> class.
        /// </summary>
        public static PedometerEvents Events(this global::Tizen.Sensor.Pedometer item) => new PedometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.PickUpGestureDetector"/> class.
        /// </summary>
        public static PickUpGestureDetectorEvents Events(this global::Tizen.Sensor.PickUpGestureDetector item) => new PickUpGestureDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.PressureSensor"/> class.
        /// </summary>
        public static PressureSensorEvents Events(this global::Tizen.Sensor.PressureSensor item) => new PressureSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.ProximitySensor"/> class.
        /// </summary>
        public static ProximitySensorEvents Events(this global::Tizen.Sensor.ProximitySensor item) => new ProximitySensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.RotationVectorSensor"/> class.
        /// </summary>
        public static RotationVectorSensorEvents Events(this global::Tizen.Sensor.RotationVectorSensor item) => new RotationVectorSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.RunningActivityDetector"/> class.
        /// </summary>
        public static RunningActivityDetectorEvents Events(this global::Tizen.Sensor.RunningActivityDetector item) => new RunningActivityDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.SleepMonitor"/> class.
        /// </summary>
        public static SleepMonitorEvents Events(this global::Tizen.Sensor.SleepMonitor item) => new SleepMonitorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.StationaryActivityDetector"/> class.
        /// </summary>
        public static StationaryActivityDetectorEvents Events(this global::Tizen.Sensor.StationaryActivityDetector item) => new StationaryActivityDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.TemperatureSensor"/> class.
        /// </summary>
        public static TemperatureSensorEvents Events(this global::Tizen.Sensor.TemperatureSensor item) => new TemperatureSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.UltravioletSensor"/> class.
        /// </summary>
        public static UltravioletSensorEvents Events(this global::Tizen.Sensor.UltravioletSensor item) => new UltravioletSensorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.UncalibratedGyroscope"/> class.
        /// </summary>
        public static UncalibratedGyroscopeEvents Events(this global::Tizen.Sensor.UncalibratedGyroscope item) => new UncalibratedGyroscopeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.UncalibratedMagnetometer"/> class.
        /// </summary>
        public static UncalibratedMagnetometerEvents Events(this global::Tizen.Sensor.UncalibratedMagnetometer item) => new UncalibratedMagnetometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.WalkingActivityDetector"/> class.
        /// </summary>
        public static WalkingActivityDetectorEvents Events(this global::Tizen.Sensor.WalkingActivityDetector item) => new WalkingActivityDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Sensor.WristUpGestureDetector"/> class.
        /// </summary>
        public static WristUpGestureDetectorEvents Events(this global::Tizen.Sensor.WristUpGestureDetector item) => new WristUpGestureDetectorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.Accelerometer"/> class as observables.
    /// </summary>
    public class AccelerometerEvents
    {
        private readonly global::Tizen.Sensor.Accelerometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.Accelerometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AccelerometerEvents(global::Tizen.Sensor.Accelerometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.Accelerometer.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.AccelerometerDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.AccelerometerDataUpdatedEventArgs>, global::Tizen.Sensor.AccelerometerDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.AccelerometerDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.FaceDownGestureDetector"/> class as observables.
    /// </summary>
    public class FaceDownGestureDetectorEvents
    {
        private readonly global::Tizen.Sensor.FaceDownGestureDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.FaceDownGestureDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FaceDownGestureDetectorEvents(global::Tizen.Sensor.FaceDownGestureDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.FaceDownGestureDetector.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.FaceDownGestureDetectorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.FaceDownGestureDetectorDataUpdatedEventArgs>, global::Tizen.Sensor.FaceDownGestureDetectorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.FaceDownGestureDetectorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.GravitySensor"/> class as observables.
    /// </summary>
    public class GravitySensorEvents
    {
        private readonly global::Tizen.Sensor.GravitySensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.GravitySensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GravitySensorEvents(global::Tizen.Sensor.GravitySensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.GravitySensor.AccuracyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SensorAccuracyChangedEventArgs> AccuracyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SensorAccuracyChangedEventArgs>, global::Tizen.Sensor.SensorAccuracyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SensorAccuracyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AccuracyChanged += x, x => _data.AccuracyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.GravitySensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.GravitySensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.GravitySensorDataUpdatedEventArgs>, global::Tizen.Sensor.GravitySensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.GravitySensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.Gyroscope"/> class as observables.
    /// </summary>
    public class GyroscopeEvents
    {
        private readonly global::Tizen.Sensor.Gyroscope _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.Gyroscope"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GyroscopeEvents(global::Tizen.Sensor.Gyroscope data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.Gyroscope.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.GyroscopeDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.GyroscopeDataUpdatedEventArgs>, global::Tizen.Sensor.GyroscopeDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.GyroscopeDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.GyroscopeRotationVectorSensor"/> class as observables.
    /// </summary>
    public class GyroscopeRotationVectorSensorEvents
    {
        private readonly global::Tizen.Sensor.GyroscopeRotationVectorSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.GyroscopeRotationVectorSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GyroscopeRotationVectorSensorEvents(global::Tizen.Sensor.GyroscopeRotationVectorSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.GyroscopeRotationVectorSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.GyroscopeRotationVectorSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.GyroscopeRotationVectorSensorDataUpdatedEventArgs>, global::Tizen.Sensor.GyroscopeRotationVectorSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.GyroscopeRotationVectorSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.HeartRateMonitor"/> class as observables.
    /// </summary>
    public class HeartRateMonitorEvents
    {
        private readonly global::Tizen.Sensor.HeartRateMonitor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.HeartRateMonitor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HeartRateMonitorEvents(global::Tizen.Sensor.HeartRateMonitor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.HeartRateMonitor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.HeartRateMonitorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.HeartRateMonitorDataUpdatedEventArgs>, global::Tizen.Sensor.HeartRateMonitorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.HeartRateMonitorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.HumiditySensor"/> class as observables.
    /// </summary>
    public class HumiditySensorEvents
    {
        private readonly global::Tizen.Sensor.HumiditySensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.HumiditySensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HumiditySensorEvents(global::Tizen.Sensor.HumiditySensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.HumiditySensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.HumiditySensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.HumiditySensorDataUpdatedEventArgs>, global::Tizen.Sensor.HumiditySensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.HumiditySensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.InVehicleActivityDetector"/> class as observables.
    /// </summary>
    public class InVehicleActivityDetectorEvents
    {
        private readonly global::Tizen.Sensor.InVehicleActivityDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.InVehicleActivityDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public InVehicleActivityDetectorEvents(global::Tizen.Sensor.InVehicleActivityDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.InVehicleActivityDetector.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.InVehicleActivityDetectorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.InVehicleActivityDetectorDataUpdatedEventArgs>, global::Tizen.Sensor.InVehicleActivityDetectorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.InVehicleActivityDetectorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.LightSensor"/> class as observables.
    /// </summary>
    public class LightSensorEvents
    {
        private readonly global::Tizen.Sensor.LightSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.LightSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LightSensorEvents(global::Tizen.Sensor.LightSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.LightSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.LightSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.LightSensorDataUpdatedEventArgs>, global::Tizen.Sensor.LightSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.LightSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.LinearAccelerationSensor"/> class as observables.
    /// </summary>
    public class LinearAccelerationSensorEvents
    {
        private readonly global::Tizen.Sensor.LinearAccelerationSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.LinearAccelerationSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LinearAccelerationSensorEvents(global::Tizen.Sensor.LinearAccelerationSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.LinearAccelerationSensor.AccuracyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SensorAccuracyChangedEventArgs> AccuracyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SensorAccuracyChangedEventArgs>, global::Tizen.Sensor.SensorAccuracyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SensorAccuracyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AccuracyChanged += x, x => _data.AccuracyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.LinearAccelerationSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.LinearAccelerationSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.LinearAccelerationSensorDataUpdatedEventArgs>, global::Tizen.Sensor.LinearAccelerationSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.LinearAccelerationSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.Magnetometer"/> class as observables.
    /// </summary>
    public class MagnetometerEvents
    {
        private readonly global::Tizen.Sensor.Magnetometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.Magnetometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MagnetometerEvents(global::Tizen.Sensor.Magnetometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.Magnetometer.AccuracyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SensorAccuracyChangedEventArgs> AccuracyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SensorAccuracyChangedEventArgs>, global::Tizen.Sensor.SensorAccuracyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SensorAccuracyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AccuracyChanged += x, x => _data.AccuracyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.Magnetometer.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.MagnetometerDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.MagnetometerDataUpdatedEventArgs>, global::Tizen.Sensor.MagnetometerDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.MagnetometerDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.MagnetometerRotationVectorSensor"/> class as observables.
    /// </summary>
    public class MagnetometerRotationVectorSensorEvents
    {
        private readonly global::Tizen.Sensor.MagnetometerRotationVectorSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.MagnetometerRotationVectorSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MagnetometerRotationVectorSensorEvents(global::Tizen.Sensor.MagnetometerRotationVectorSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.MagnetometerRotationVectorSensor.AccuracyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SensorAccuracyChangedEventArgs> AccuracyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SensorAccuracyChangedEventArgs>, global::Tizen.Sensor.SensorAccuracyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SensorAccuracyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AccuracyChanged += x, x => _data.AccuracyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.MagnetometerRotationVectorSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.MagnetometerRotationVectorSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.MagnetometerRotationVectorSensorDataUpdatedEventArgs>, global::Tizen.Sensor.MagnetometerRotationVectorSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.MagnetometerRotationVectorSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.OrientationSensor"/> class as observables.
    /// </summary>
    public class OrientationSensorEvents
    {
        private readonly global::Tizen.Sensor.OrientationSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.OrientationSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public OrientationSensorEvents(global::Tizen.Sensor.OrientationSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.OrientationSensor.AccuracyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SensorAccuracyChangedEventArgs> AccuracyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SensorAccuracyChangedEventArgs>, global::Tizen.Sensor.SensorAccuracyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SensorAccuracyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AccuracyChanged += x, x => _data.AccuracyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.OrientationSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.OrientationSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.OrientationSensorDataUpdatedEventArgs>, global::Tizen.Sensor.OrientationSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.OrientationSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.Pedometer"/> class as observables.
    /// </summary>
    public class PedometerEvents
    {
        private readonly global::Tizen.Sensor.Pedometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.Pedometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PedometerEvents(global::Tizen.Sensor.Pedometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.Pedometer.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.PedometerDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.PedometerDataUpdatedEventArgs>, global::Tizen.Sensor.PedometerDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.PedometerDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.PickUpGestureDetector"/> class as observables.
    /// </summary>
    public class PickUpGestureDetectorEvents
    {
        private readonly global::Tizen.Sensor.PickUpGestureDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.PickUpGestureDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PickUpGestureDetectorEvents(global::Tizen.Sensor.PickUpGestureDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.PickUpGestureDetector.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.PickUpGestureDetectorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.PickUpGestureDetectorDataUpdatedEventArgs>, global::Tizen.Sensor.PickUpGestureDetectorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.PickUpGestureDetectorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.PressureSensor"/> class as observables.
    /// </summary>
    public class PressureSensorEvents
    {
        private readonly global::Tizen.Sensor.PressureSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.PressureSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PressureSensorEvents(global::Tizen.Sensor.PressureSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.PressureSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.PressureSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.PressureSensorDataUpdatedEventArgs>, global::Tizen.Sensor.PressureSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.PressureSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.ProximitySensor"/> class as observables.
    /// </summary>
    public class ProximitySensorEvents
    {
        private readonly global::Tizen.Sensor.ProximitySensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.ProximitySensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ProximitySensorEvents(global::Tizen.Sensor.ProximitySensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.ProximitySensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.ProximitySensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.ProximitySensorDataUpdatedEventArgs>, global::Tizen.Sensor.ProximitySensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.ProximitySensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.RotationVectorSensor"/> class as observables.
    /// </summary>
    public class RotationVectorSensorEvents
    {
        private readonly global::Tizen.Sensor.RotationVectorSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.RotationVectorSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RotationVectorSensorEvents(global::Tizen.Sensor.RotationVectorSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.RotationVectorSensor.AccuracyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SensorAccuracyChangedEventArgs> AccuracyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SensorAccuracyChangedEventArgs>, global::Tizen.Sensor.SensorAccuracyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SensorAccuracyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AccuracyChanged += x, x => _data.AccuracyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.RotationVectorSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.RotationVectorSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.RotationVectorSensorDataUpdatedEventArgs>, global::Tizen.Sensor.RotationVectorSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.RotationVectorSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.RunningActivityDetector"/> class as observables.
    /// </summary>
    public class RunningActivityDetectorEvents
    {
        private readonly global::Tizen.Sensor.RunningActivityDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.RunningActivityDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RunningActivityDetectorEvents(global::Tizen.Sensor.RunningActivityDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.RunningActivityDetector.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.RunningActivityDetectorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.RunningActivityDetectorDataUpdatedEventArgs>, global::Tizen.Sensor.RunningActivityDetectorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.RunningActivityDetectorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.SleepMonitor"/> class as observables.
    /// </summary>
    public class SleepMonitorEvents
    {
        private readonly global::Tizen.Sensor.SleepMonitor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.SleepMonitor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SleepMonitorEvents(global::Tizen.Sensor.SleepMonitor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.SleepMonitor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SleepMonitorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SleepMonitorDataUpdatedEventArgs>, global::Tizen.Sensor.SleepMonitorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SleepMonitorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.StationaryActivityDetector"/> class as observables.
    /// </summary>
    public class StationaryActivityDetectorEvents
    {
        private readonly global::Tizen.Sensor.StationaryActivityDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.StationaryActivityDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StationaryActivityDetectorEvents(global::Tizen.Sensor.StationaryActivityDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.StationaryActivityDetector.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.StationaryActivityDetectorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.StationaryActivityDetectorDataUpdatedEventArgs>, global::Tizen.Sensor.StationaryActivityDetectorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.StationaryActivityDetectorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.TemperatureSensor"/> class as observables.
    /// </summary>
    public class TemperatureSensorEvents
    {
        private readonly global::Tizen.Sensor.TemperatureSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.TemperatureSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TemperatureSensorEvents(global::Tizen.Sensor.TemperatureSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.TemperatureSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.TemperatureSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.TemperatureSensorDataUpdatedEventArgs>, global::Tizen.Sensor.TemperatureSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.TemperatureSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.UltravioletSensor"/> class as observables.
    /// </summary>
    public class UltravioletSensorEvents
    {
        private readonly global::Tizen.Sensor.UltravioletSensor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.UltravioletSensor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UltravioletSensorEvents(global::Tizen.Sensor.UltravioletSensor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.UltravioletSensor.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.UltravioletSensorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.UltravioletSensorDataUpdatedEventArgs>, global::Tizen.Sensor.UltravioletSensorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.UltravioletSensorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.UncalibratedGyroscope"/> class as observables.
    /// </summary>
    public class UncalibratedGyroscopeEvents
    {
        private readonly global::Tizen.Sensor.UncalibratedGyroscope _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.UncalibratedGyroscope"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UncalibratedGyroscopeEvents(global::Tizen.Sensor.UncalibratedGyroscope data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.UncalibratedGyroscope.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.UncalibratedGyroscopeDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.UncalibratedGyroscopeDataUpdatedEventArgs>, global::Tizen.Sensor.UncalibratedGyroscopeDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.UncalibratedGyroscopeDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.UncalibratedMagnetometer"/> class as observables.
    /// </summary>
    public class UncalibratedMagnetometerEvents
    {
        private readonly global::Tizen.Sensor.UncalibratedMagnetometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.UncalibratedMagnetometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UncalibratedMagnetometerEvents(global::Tizen.Sensor.UncalibratedMagnetometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.UncalibratedMagnetometer.AccuracyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.SensorAccuracyChangedEventArgs> AccuracyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.SensorAccuracyChangedEventArgs>, global::Tizen.Sensor.SensorAccuracyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.SensorAccuracyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AccuracyChanged += x, x => _data.AccuracyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.UncalibratedMagnetometer.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.UncalibratedMagnetometerDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.UncalibratedMagnetometerDataUpdatedEventArgs>, global::Tizen.Sensor.UncalibratedMagnetometerDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.UncalibratedMagnetometerDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.WalkingActivityDetector"/> class as observables.
    /// </summary>
    public class WalkingActivityDetectorEvents
    {
        private readonly global::Tizen.Sensor.WalkingActivityDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.WalkingActivityDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WalkingActivityDetectorEvents(global::Tizen.Sensor.WalkingActivityDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.WalkingActivityDetector.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.WalkingActivityDetectorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.WalkingActivityDetectorDataUpdatedEventArgs>, global::Tizen.Sensor.WalkingActivityDetectorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.WalkingActivityDetectorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Sensor.WristUpGestureDetector"/> class as observables.
    /// </summary>
    public class WristUpGestureDetectorEvents
    {
        private readonly global::Tizen.Sensor.WristUpGestureDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Sensor.WristUpGestureDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WristUpGestureDetectorEvents(global::Tizen.Sensor.WristUpGestureDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Sensor.WristUpGestureDetector.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Sensor.WristUpGestureDetectorDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Sensor.WristUpGestureDetectorDataUpdatedEventArgs>, global::Tizen.Sensor.WristUpGestureDetectorDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Sensor.WristUpGestureDetectorDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
    }
}

namespace Tizen.System
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.System"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.System.Storage"/> class.
        /// </summary>
        public static StorageEvents Events(this global::Tizen.System.Storage item) => new StorageEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.System.Storage"/> class as observables.
    /// </summary>
    public class StorageEvents
    {
        private readonly global::Tizen.System.Storage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.System.Storage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StorageEvents(global::Tizen.System.Storage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.Storage.StorageStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StorageStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StorageStateChanged += x, x => _data.StorageStateChanged -= x);
    }
}

namespace Tizen.System.Usb
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.System.Usb"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.System.Usb.UsbManager"/> class.
        /// </summary>
        public static UsbManagerEvents Events(this global::Tizen.System.Usb.UsbManager item) => new UsbManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.System.Usb.UsbManager"/> class as observables.
    /// </summary>
    public class UsbManagerEvents
    {
        private readonly global::Tizen.System.Usb.UsbManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.System.Usb.UsbManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UsbManagerEvents(global::Tizen.System.Usb.UsbManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.Usb.UsbManager.DeviceHotPlugged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.System.Usb.HotPluggedEventArgs> DeviceHotPlugged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.Usb.HotPluggedEventArgs>, global::Tizen.System.Usb.HotPluggedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.Usb.HotPluggedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DeviceHotPlugged += x, x => _data.DeviceHotPlugged -= x);
    }
}

namespace Tizen.Telephony
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Telephony"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Telephony.SlotHandle"/> class.
        /// </summary>
        public static SlotHandleEvents Events(this global::Tizen.Telephony.SlotHandle item) => new SlotHandleEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Telephony.SlotHandle"/> class as observables.
    /// </summary>
    public class SlotHandleEvents
    {
        private readonly global::Tizen.Telephony.SlotHandle _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Telephony.SlotHandle"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SlotHandleEvents(global::Tizen.Telephony.SlotHandle data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Telephony.SlotHandle.ChangeNotification"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Telephony.ChangeNotificationEventArgs> ChangeNotification => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Telephony.ChangeNotificationEventArgs>, global::Tizen.Telephony.ChangeNotificationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Telephony.ChangeNotificationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChangeNotification += x, x => _data.ChangeNotification -= x);
    }
}

namespace Tizen.Uix.Stt
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Uix.Stt"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Uix.Stt.SttClient"/> class.
        /// </summary>
        public static SttClientEvents Events(this global::Tizen.Uix.Stt.SttClient item) => new SttClientEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Uix.Stt.SttClient"/> class as observables.
    /// </summary>
    public class SttClientEvents
    {
        private readonly global::Tizen.Uix.Stt.SttClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Uix.Stt.SttClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SttClientEvents(global::Tizen.Uix.Stt.SttClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Stt.SttClient.DefaultLanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Stt.DefaultLanguageChangedEventArgs> DefaultLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Stt.DefaultLanguageChangedEventArgs>, global::Tizen.Uix.Stt.DefaultLanguageChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Stt.DefaultLanguageChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DefaultLanguageChanged += x, x => _data.DefaultLanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Stt.SttClient.EngineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Stt.EngineChangedEventArgs> EngineChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Stt.EngineChangedEventArgs>, global::Tizen.Uix.Stt.EngineChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Stt.EngineChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EngineChanged += x, x => _data.EngineChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Stt.SttClient.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Stt.ErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Stt.ErrorOccurredEventArgs>, global::Tizen.Uix.Stt.ErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Stt.ErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Stt.SttClient.RecognitionResult"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Stt.RecognitionResultEventArgs> RecognitionResult => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Stt.RecognitionResultEventArgs>, global::Tizen.Uix.Stt.RecognitionResultEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Stt.RecognitionResultEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RecognitionResult += x, x => _data.RecognitionResult -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Stt.SttClient.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Stt.StateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Stt.StateChangedEventArgs>, global::Tizen.Uix.Stt.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Stt.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
    }
}

namespace Tizen.Uix.Tts
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.Uix.Tts"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.Uix.Tts.TtsClient"/> class.
        /// </summary>
        public static TtsClientEvents Events(this global::Tizen.Uix.Tts.TtsClient item) => new TtsClientEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.Uix.Tts.TtsClient"/> class as observables.
    /// </summary>
    public class TtsClientEvents
    {
        private readonly global::Tizen.Uix.Tts.TtsClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.Uix.Tts.TtsClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TtsClientEvents(global::Tizen.Uix.Tts.TtsClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Tts.TtsClient.DefaultVoiceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Tts.DefaultVoiceChangedEventArgs> DefaultVoiceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Tts.DefaultVoiceChangedEventArgs>, global::Tizen.Uix.Tts.DefaultVoiceChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Tts.DefaultVoiceChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DefaultVoiceChanged += x, x => _data.DefaultVoiceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Tts.TtsClient.EngineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Tts.EngineChangedEventArgs> EngineChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Tts.EngineChangedEventArgs>, global::Tizen.Uix.Tts.EngineChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Tts.EngineChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EngineChanged += x, x => _data.EngineChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Tts.TtsClient.ErrorOccurred"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Tts.ErrorOccurredEventArgs> ErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Tts.ErrorOccurredEventArgs>, global::Tizen.Uix.Tts.ErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Tts.ErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ErrorOccurred += x, x => _data.ErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Tts.TtsClient.StateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Tts.StateChangedEventArgs> StateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Tts.StateChangedEventArgs>, global::Tizen.Uix.Tts.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Tts.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StateChanged += x, x => _data.StateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Tts.TtsClient.UtteranceCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Tts.UtteranceEventArgs> UtteranceCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Tts.UtteranceEventArgs>, global::Tizen.Uix.Tts.UtteranceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Tts.UtteranceEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.UtteranceCompleted += x, x => _data.UtteranceCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.Tts.TtsClient.UtteranceStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.Uix.Tts.UtteranceEventArgs> UtteranceStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.Tts.UtteranceEventArgs>, global::Tizen.Uix.Tts.UtteranceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.Tts.UtteranceEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.UtteranceStarted += x, x => _data.UtteranceStarted -= x);
    }
}

namespace Tizen.WebView
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Tizen.WebView"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Tizen.WebView.WebView"/> class.
        /// </summary>
        public static WebViewEvents Events(this global::Tizen.WebView.WebView item) => new WebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Tizen.WebView.WebView"/> class as observables.
    /// </summary>
    public class WebViewEvents : global::ElmSharp.EvasObjectEvents
    {
        private readonly global::Tizen.WebView.WebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Tizen.WebView.WebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebViewEvents(global::Tizen.WebView.WebView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.WebView.WebView.LoadError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.WebView.SmartCallbackLoadErrorArgs> LoadError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.WebView.SmartCallbackLoadErrorArgs>, global::Tizen.WebView.SmartCallbackLoadErrorArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.WebView.SmartCallbackLoadErrorArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LoadError += x, x => _data.LoadError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.WebView.WebView.LoadFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LoadFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LoadFinished += x, x => _data.LoadFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.WebView.WebView.LoadStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LoadStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LoadStarted += x, x => _data.LoadStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.WebView.WebView.TitleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.WebView.SmartCallbackArgs> TitleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.WebView.SmartCallbackArgs>, global::Tizen.WebView.SmartCallbackArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.WebView.SmartCallbackArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TitleChanged += x, x => _data.TitleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.WebView.WebView.UrlChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Tizen.WebView.SmartCallbackArgs> UrlChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.WebView.SmartCallbackArgs>, global::Tizen.WebView.SmartCallbackArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.WebView.SmartCallbackArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.UrlChanged += x, x => _data.UrlChanged -= x);
    }
}

namespace ElmSharp.Wearable
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "ElmSharp.Wearable"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ElmSharp.Wearable.RotaryEventManager.Rotated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ElmSharp.Wearable.RotaryEventArgs> RotaryEventManagerRotated => global::System.Reactive.Linq.Observable.FromEvent<global::ElmSharp.Wearable.RotaryEventHandler, global::ElmSharp.Wearable.RotaryEventArgs>(eventHandler =>
        {
            void Handler(global::ElmSharp.Wearable.RotaryEventArgs args) => eventHandler(args);
            return Handler;
        }

        , x => global::ElmSharp.Wearable.RotaryEventManager.Rotated += x, x => global::ElmSharp.Wearable.RotaryEventManager.Rotated -= x);
    }
}

namespace Tizen.Account.AccountManager
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Account.AccountManager"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Account.AccountManager.AccountService.AccountUpdated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Account.AccountManager.AccountSubscriberEventArgs> AccountServiceAccountUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Account.AccountManager.AccountSubscriberEventArgs>, global::Tizen.Account.AccountManager.AccountSubscriberEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Account.AccountManager.AccountSubscriberEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Account.AccountManager.AccountService.AccountUpdated += x, x => global::Tizen.Account.AccountManager.AccountService.AccountUpdated -= x);
    }
}

namespace Tizen.Applications
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Applications"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.ApplicationManager.ApplicationDisabled"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.ApplicationDisabledEventArgs> ApplicationManagerApplicationDisabled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.ApplicationDisabledEventArgs>, global::Tizen.Applications.ApplicationDisabledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.ApplicationDisabledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.ApplicationManager.ApplicationDisabled += x, x => global::Tizen.Applications.ApplicationManager.ApplicationDisabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.ApplicationManager.ApplicationEnabled"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.ApplicationEnabledEventArgs> ApplicationManagerApplicationEnabled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.ApplicationEnabledEventArgs>, global::Tizen.Applications.ApplicationEnabledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.ApplicationEnabledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.ApplicationManager.ApplicationEnabled += x, x => global::Tizen.Applications.ApplicationManager.ApplicationEnabled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.ApplicationManager.ApplicationLaunched"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.ApplicationLaunchedEventArgs> ApplicationManagerApplicationLaunched => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.ApplicationLaunchedEventArgs>, global::Tizen.Applications.ApplicationLaunchedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.ApplicationLaunchedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.ApplicationManager.ApplicationLaunched += x, x => global::Tizen.Applications.ApplicationManager.ApplicationLaunched -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.ApplicationManager.ApplicationTerminated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.ApplicationTerminatedEventArgs> ApplicationManagerApplicationTerminated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.ApplicationTerminatedEventArgs>, global::Tizen.Applications.ApplicationTerminatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.ApplicationTerminatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.ApplicationManager.ApplicationTerminated += x, x => global::Tizen.Applications.ApplicationManager.ApplicationTerminated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.BadgeControl.Changed"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.BadgeEventArgs> BadgeControlChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.BadgeEventArgs>, global::Tizen.Applications.BadgeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.BadgeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.BadgeControl.Changed += x, x => global::Tizen.Applications.BadgeControl.Changed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.PackageManager.ClearDataProgressChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.PackageManagerEventArgs> PackageManagerClearDataProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.PackageManagerEventArgs>, global::Tizen.Applications.PackageManagerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.PackageManagerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.PackageManager.ClearDataProgressChanged += x, x => global::Tizen.Applications.PackageManager.ClearDataProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.PackageManager.InstallProgressChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.PackageManagerEventArgs> PackageManagerInstallProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.PackageManagerEventArgs>, global::Tizen.Applications.PackageManagerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.PackageManagerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.PackageManager.InstallProgressChanged += x, x => global::Tizen.Applications.PackageManager.InstallProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.PackageManager.MoveProgressChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.PackageManagerEventArgs> PackageManagerMoveProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.PackageManagerEventArgs>, global::Tizen.Applications.PackageManagerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.PackageManagerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.PackageManager.MoveProgressChanged += x, x => global::Tizen.Applications.PackageManager.MoveProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.PackageManager.UninstallProgressChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.PackageManagerEventArgs> PackageManagerUninstallProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.PackageManagerEventArgs>, global::Tizen.Applications.PackageManagerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.PackageManagerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.PackageManager.UninstallProgressChanged += x, x => global::Tizen.Applications.PackageManager.UninstallProgressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.PackageManager.UpdateProgressChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.PackageManagerEventArgs> PackageManagerUpdateProgressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.PackageManagerEventArgs>, global::Tizen.Applications.PackageManagerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.PackageManagerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.PackageManager.UpdateProgressChanged += x, x => global::Tizen.Applications.PackageManager.UpdateProgressChanged -= x);
    }
}

namespace Tizen.Applications.NotificationEventListener
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Applications.NotificationEventListener"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.NotificationEventListener.NotificationListenerManager.Added"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.NotificationEventListener.NotificationEventArgs> NotificationListenerManagerAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.NotificationEventListener.NotificationEventArgs>, global::Tizen.Applications.NotificationEventListener.NotificationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.NotificationEventListener.NotificationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.NotificationEventListener.NotificationListenerManager.Added += x, x => global::Tizen.Applications.NotificationEventListener.NotificationListenerManager.Added -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.NotificationEventListener.NotificationListenerManager.Deleted"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.NotificationEventListener.NotificationDeleteEventArgs> NotificationListenerManagerDeleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.NotificationEventListener.NotificationDeleteEventArgs>, global::Tizen.Applications.NotificationEventListener.NotificationDeleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.NotificationEventListener.NotificationDeleteEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.NotificationEventListener.NotificationListenerManager.Deleted += x, x => global::Tizen.Applications.NotificationEventListener.NotificationListenerManager.Deleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Applications.NotificationEventListener.NotificationListenerManager.Updated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Applications.NotificationEventListener.NotificationEventArgs> NotificationListenerManagerUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Applications.NotificationEventListener.NotificationEventArgs>, global::Tizen.Applications.NotificationEventListener.NotificationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Applications.NotificationEventListener.NotificationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Applications.NotificationEventListener.NotificationListenerManager.Updated += x, x => global::Tizen.Applications.NotificationEventListener.NotificationListenerManager.Updated -= x);
    }
}

namespace Tizen.Content.MediaContent
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Content.MediaContent"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Content.MediaContent.MediaDatabase.FolderUpdated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Content.MediaContent.FolderUpdatedEventArgs> MediaDatabaseFolderUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Content.MediaContent.FolderUpdatedEventArgs>, global::Tizen.Content.MediaContent.FolderUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Content.MediaContent.FolderUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Content.MediaContent.MediaDatabase.FolderUpdated += x, x => global::Tizen.Content.MediaContent.MediaDatabase.FolderUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Content.MediaContent.MediaDatabase.MediaInfoUpdated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs> MediaDatabaseMediaInfoUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs>, global::Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Content.MediaContent.MediaDatabase.MediaInfoUpdated += x, x => global::Tizen.Content.MediaContent.MediaDatabase.MediaInfoUpdated -= x);
    }
}

namespace Tizen.Messaging.Messages
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Messaging.Messages"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Messaging.Messages.MessagesManager.MessageReceived"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Messaging.Messages.MessageReceivedEventArgs> MessagesManagerMessageReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Messaging.Messages.MessageReceivedEventArgs>, global::Tizen.Messaging.Messages.MessageReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Messaging.Messages.MessageReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Messaging.Messages.MessagesManager.MessageReceived += x, x => global::Tizen.Messaging.Messages.MessagesManager.MessageReceived -= x);
    }
}

namespace Tizen.Messaging.Push
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Messaging.Push"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Messaging.Push.PushClient.NotificationReceived"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Messaging.Push.PushMessageEventArgs> PushClientNotificationReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Messaging.Push.PushMessageEventArgs>, global::Tizen.Messaging.Push.PushMessageEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Messaging.Push.PushMessageEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Messaging.Push.PushClient.NotificationReceived += x, x => global::Tizen.Messaging.Push.PushClient.NotificationReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Messaging.Push.PushClient.StateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Messaging.Push.PushConnectionStateEventArgs> PushClientStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Messaging.Push.PushConnectionStateEventArgs>, global::Tizen.Messaging.Push.PushConnectionStateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Messaging.Push.PushConnectionStateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Messaging.Push.PushClient.StateChanged += x, x => global::Tizen.Messaging.Push.PushClient.StateChanged -= x);
    }
}

namespace Tizen.Multimedia
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Multimedia"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioManager.DeviceConnectionChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Multimedia.AudioDeviceConnectionChangedEventArgs> AudioManagerDeviceConnectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioDeviceConnectionChangedEventArgs>, global::Tizen.Multimedia.AudioDeviceConnectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioDeviceConnectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Multimedia.AudioManager.DeviceConnectionChanged += x, x => global::Tizen.Multimedia.AudioManager.DeviceConnectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioManager.DeviceStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Multimedia.AudioDeviceStateChangedEventArgs> AudioManagerDeviceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.AudioDeviceStateChangedEventArgs>, global::Tizen.Multimedia.AudioDeviceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.AudioDeviceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Multimedia.AudioManager.DeviceStateChanged += x, x => global::Tizen.Multimedia.AudioManager.DeviceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.AudioStreamPolicy.StreamFocusStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Multimedia.StreamFocusStateChangedEventArgs> AudioStreamPolicyStreamFocusStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.StreamFocusStateChangedEventArgs>, global::Tizen.Multimedia.StreamFocusStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.StreamFocusStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Multimedia.AudioStreamPolicy.StreamFocusStateChanged += x, x => global::Tizen.Multimedia.AudioStreamPolicy.StreamFocusStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Camera.DeviceStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Multimedia.CameraDeviceStateChangedEventArgs> CameraDeviceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.CameraDeviceStateChangedEventArgs>, global::Tizen.Multimedia.CameraDeviceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.CameraDeviceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Multimedia.Camera.DeviceStateChanged += x, x => global::Tizen.Multimedia.Camera.DeviceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Recorder.DeviceStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Multimedia.RecorderDeviceStateChangedEventArgs> RecorderDeviceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.RecorderDeviceStateChangedEventArgs>, global::Tizen.Multimedia.RecorderDeviceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.RecorderDeviceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Multimedia.Recorder.DeviceStateChanged += x, x => global::Tizen.Multimedia.Recorder.DeviceStateChanged -= x);
    }
}

namespace Tizen.Multimedia.Remoting
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Multimedia.Remoting"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Multimedia.Remoting.MediaControlServer.PlaybackCommandReceived"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs> MediaControlServerPlaybackCommandReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs>, global::Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Multimedia.Remoting.MediaControlServer.PlaybackCommandReceived += x, x => global::Tizen.Multimedia.Remoting.MediaControlServer.PlaybackCommandReceived -= x);
    }
}

namespace Tizen.Network.Bluetooth
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Network.Bluetooth"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAdapter.DiscoveryStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Bluetooth.DiscoveryStateChangedEventArgs> BluetoothAdapterDiscoveryStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.DiscoveryStateChangedEventArgs>, global::Tizen.Network.Bluetooth.DiscoveryStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.DiscoveryStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Bluetooth.BluetoothAdapter.DiscoveryStateChanged += x, x => global::Tizen.Network.Bluetooth.BluetoothAdapter.DiscoveryStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAdapter.NameChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Bluetooth.NameChangedEventArgs> BluetoothAdapterNameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.NameChangedEventArgs>, global::Tizen.Network.Bluetooth.NameChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.NameChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Bluetooth.BluetoothAdapter.NameChanged += x, x => global::Tizen.Network.Bluetooth.BluetoothAdapter.NameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAdapter.ScanResultChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Bluetooth.AdapterLeScanResultChangedEventArgs> BluetoothAdapterScanResultChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.AdapterLeScanResultChangedEventArgs>, global::Tizen.Network.Bluetooth.AdapterLeScanResultChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.AdapterLeScanResultChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Bluetooth.BluetoothAdapter.ScanResultChanged += x, x => global::Tizen.Network.Bluetooth.BluetoothAdapter.ScanResultChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAdapter.StateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Bluetooth.StateChangedEventArgs> BluetoothAdapterStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.StateChangedEventArgs>, global::Tizen.Network.Bluetooth.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Bluetooth.BluetoothAdapter.StateChanged += x, x => global::Tizen.Network.Bluetooth.BluetoothAdapter.StateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAdapter.VisibilityDurationChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Bluetooth.VisibilityDurationChangedEventArgs> BluetoothAdapterVisibilityDurationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.VisibilityDurationChangedEventArgs>, global::Tizen.Network.Bluetooth.VisibilityDurationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.VisibilityDurationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Bluetooth.BluetoothAdapter.VisibilityDurationChanged += x, x => global::Tizen.Network.Bluetooth.BluetoothAdapter.VisibilityDurationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Bluetooth.BluetoothAdapter.VisibilityModeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Bluetooth.VisibilityModeChangedEventArgs> BluetoothAdapterVisibilityModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Bluetooth.VisibilityModeChangedEventArgs>, global::Tizen.Network.Bluetooth.VisibilityModeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Bluetooth.VisibilityModeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Bluetooth.BluetoothAdapter.VisibilityModeChanged += x, x => global::Tizen.Network.Bluetooth.BluetoothAdapter.VisibilityModeChanged -= x);
    }
}

namespace Tizen.Network.Connection
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Network.Connection"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Connection.ConnectionManager.ConnectionTypeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Connection.ConnectionTypeEventArgs> ConnectionManagerConnectionTypeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Connection.ConnectionTypeEventArgs>, global::Tizen.Network.Connection.ConnectionTypeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Connection.ConnectionTypeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Connection.ConnectionManager.ConnectionTypeChanged += x, x => global::Tizen.Network.Connection.ConnectionManager.ConnectionTypeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Connection.ConnectionManager.EthernetCableStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Connection.EthernetCableStateEventArgs> ConnectionManagerEthernetCableStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Connection.EthernetCableStateEventArgs>, global::Tizen.Network.Connection.EthernetCableStateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Connection.EthernetCableStateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Connection.ConnectionManager.EthernetCableStateChanged += x, x => global::Tizen.Network.Connection.ConnectionManager.EthernetCableStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Connection.ConnectionManager.IPAddressChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Connection.AddressEventArgs> ConnectionManagerIPAddressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Connection.AddressEventArgs>, global::Tizen.Network.Connection.AddressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Connection.AddressEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Connection.ConnectionManager.IPAddressChanged += x, x => global::Tizen.Network.Connection.ConnectionManager.IPAddressChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Connection.ConnectionManager.ProxyAddressChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Connection.AddressEventArgs> ConnectionManagerProxyAddressChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Connection.AddressEventArgs>, global::Tizen.Network.Connection.AddressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Connection.AddressEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Connection.ConnectionManager.ProxyAddressChanged += x, x => global::Tizen.Network.Connection.ConnectionManager.ProxyAddressChanged -= x);
    }
}

namespace Tizen.Network.IoTConnectivity
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Network.IoTConnectivity"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.DeviceInformationFound"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.IoTConnectivity.DeviceInformationFoundEventArgs> IoTConnectivityClientManagerDeviceInformationFound => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.DeviceInformationFoundEventArgs>, global::Tizen.Network.IoTConnectivity.DeviceInformationFoundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.DeviceInformationFoundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.DeviceInformationFound += x, x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.DeviceInformationFound -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.FindingErrorOccurred"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.IoTConnectivity.FindingErrorOccurredEventArgs> IoTConnectivityClientManagerFindingErrorOccurred => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.FindingErrorOccurredEventArgs>, global::Tizen.Network.IoTConnectivity.FindingErrorOccurredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.FindingErrorOccurredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.FindingErrorOccurred += x, x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.FindingErrorOccurred -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.PlatformInformationFound"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.IoTConnectivity.PlatformInformationFoundEventArgs> IoTConnectivityClientManagerPlatformInformationFound => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.PlatformInformationFoundEventArgs>, global::Tizen.Network.IoTConnectivity.PlatformInformationFoundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.PlatformInformationFoundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.PlatformInformationFound += x, x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.PlatformInformationFound -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.PresenceReceived"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.IoTConnectivity.PresenceReceivedEventArgs> IoTConnectivityClientManagerPresenceReceived => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.PresenceReceivedEventArgs>, global::Tizen.Network.IoTConnectivity.PresenceReceivedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.PresenceReceivedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.PresenceReceived += x, x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.PresenceReceived -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.ResourceFound"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.IoTConnectivity.ResourceFoundEventArgs> IoTConnectivityClientManagerResourceFound => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.IoTConnectivity.ResourceFoundEventArgs>, global::Tizen.Network.IoTConnectivity.ResourceFoundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.IoTConnectivity.ResourceFoundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.ResourceFound += x, x => global::Tizen.Network.IoTConnectivity.IoTConnectivityClientManager.ResourceFound -= x);
    }
}

namespace Tizen.Network.Nfc
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Network.Nfc"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcManager.ActivationChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Nfc.ActivationChangedEventArgs> NfcManagerActivationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.ActivationChangedEventArgs>, global::Tizen.Network.Nfc.ActivationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.ActivationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Nfc.NfcManager.ActivationChanged += x, x => global::Tizen.Network.Nfc.NfcManager.ActivationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.Nfc.NfcManager.NdefMessageDiscovered"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.Nfc.NdefMessageDiscoveredEventArgs> NfcManagerNdefMessageDiscovered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.Nfc.NdefMessageDiscoveredEventArgs>, global::Tizen.Network.Nfc.NdefMessageDiscoveredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.Nfc.NdefMessageDiscoveredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.Nfc.NfcManager.NdefMessageDiscovered += x, x => global::Tizen.Network.Nfc.NfcManager.NdefMessageDiscovered -= x);
    }
}

namespace Tizen.Network.WiFi
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Network.WiFi"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFi.WiFiManager.BackgroundScanFinished"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> WiFiManagerBackgroundScanFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFi.WiFiManager.BackgroundScanFinished += x, x => global::Tizen.Network.WiFi.WiFiManager.BackgroundScanFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFi.WiFiManager.ConnectionStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFi.ConnectionStateChangedEventArgs> WiFiManagerConnectionStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFi.ConnectionStateChangedEventArgs>, global::Tizen.Network.WiFi.ConnectionStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFi.ConnectionStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFi.WiFiManager.ConnectionStateChanged += x, x => global::Tizen.Network.WiFi.WiFiManager.ConnectionStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFi.WiFiManager.DeviceStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFi.DeviceStateChangedEventArgs> WiFiManagerDeviceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFi.DeviceStateChangedEventArgs>, global::Tizen.Network.WiFi.DeviceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFi.DeviceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFi.WiFiManager.DeviceStateChanged += x, x => global::Tizen.Network.WiFi.WiFiManager.DeviceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFi.WiFiManager.RssiLevelChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFi.RssiLevelChangedEventArgs> WiFiManagerRssiLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFi.RssiLevelChangedEventArgs>, global::Tizen.Network.WiFi.RssiLevelChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFi.RssiLevelChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFi.WiFiManager.RssiLevelChanged += x, x => global::Tizen.Network.WiFi.WiFiManager.RssiLevelChanged -= x);
    }
}

namespace Tizen.Network.WiFiDirect
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Network.WiFiDirect"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectManager.ConnectionStatusChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFiDirect.ConnectionStatusChangedEventArgs> WiFiDirectManagerConnectionStatusChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.ConnectionStatusChangedEventArgs>, global::Tizen.Network.WiFiDirect.ConnectionStatusChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.ConnectionStatusChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.ConnectionStatusChanged += x, x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.ConnectionStatusChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectManager.DeviceStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFiDirect.DeviceStateChangedEventArgs> WiFiDirectManagerDeviceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.DeviceStateChangedEventArgs>, global::Tizen.Network.WiFiDirect.DeviceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.DeviceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.DeviceStateChanged += x, x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.DeviceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectManager.DiscoveryStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFiDirect.DiscoveryStateChangedEventArgs> WiFiDirectManagerDiscoveryStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.DiscoveryStateChangedEventArgs>, global::Tizen.Network.WiFiDirect.DiscoveryStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.DiscoveryStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.DiscoveryStateChanged += x, x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.DiscoveryStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectManager.PeerFound"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFiDirect.PeerFoundEventArgs> WiFiDirectManagerPeerFound => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.PeerFoundEventArgs>, global::Tizen.Network.WiFiDirect.PeerFoundEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.PeerFoundEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.PeerFound += x, x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.PeerFound -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Network.WiFiDirect.WiFiDirectManager.StateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Network.WiFiDirect.StateChangedEventArgs> WiFiDirectManagerStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Network.WiFiDirect.StateChangedEventArgs>, global::Tizen.Network.WiFiDirect.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Network.WiFiDirect.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.StateChanged += x, x => global::Tizen.Network.WiFiDirect.WiFiDirectManager.StateChanged -= x);
    }
}

namespace Tizen.Pims.Calendar
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Pims.Calendar"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Pims.Calendar.CalendarReminder.ReminderAlerted"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Pims.Calendar.ReminderAlertedEventArgs> CalendarReminderReminderAlerted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Pims.Calendar.ReminderAlertedEventArgs>, global::Tizen.Pims.Calendar.ReminderAlertedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Pims.Calendar.ReminderAlertedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Pims.Calendar.CalendarReminder.ReminderAlerted += x, x => global::Tizen.Pims.Calendar.CalendarReminder.ReminderAlerted -= x);
    }
}

namespace Tizen.System
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.System"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.Battery.ChargingStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.BatteryChargingStateChangedEventArgs> BatteryChargingStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.BatteryChargingStateChangedEventArgs>, global::Tizen.System.BatteryChargingStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.BatteryChargingStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.Battery.ChargingStateChanged += x, x => global::Tizen.System.Battery.ChargingStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.Battery.LevelChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.BatteryLevelChangedEventArgs> BatteryLevelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.BatteryLevelChangedEventArgs>, global::Tizen.System.BatteryLevelChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.BatteryLevelChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.Battery.LevelChanged += x, x => global::Tizen.System.Battery.LevelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.Battery.PercentChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.BatteryPercentChangedEventArgs> BatteryPercentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.BatteryPercentChangedEventArgs>, global::Tizen.System.BatteryPercentChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.BatteryPercentChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.Battery.PercentChanged += x, x => global::Tizen.System.Battery.PercentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.Display.StateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.DisplayStateChangedEventArgs> DisplayStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.DisplayStateChangedEventArgs>, global::Tizen.System.DisplayStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.DisplayStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.Display.StateChanged += x, x => global::Tizen.System.Display.StateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.Led.BrightnessChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.LedBrightnessChangedEventArgs> LedBrightnessChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.LedBrightnessChangedEventArgs>, global::Tizen.System.LedBrightnessChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.LedBrightnessChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.Led.BrightnessChanged += x, x => global::Tizen.System.Led.BrightnessChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.MediaKey.Event"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.MediaKeyEventArgs> MediaKeyEvent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.MediaKeyEventArgs>, global::Tizen.System.MediaKeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.MediaKeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.MediaKey.Event += x, x => global::Tizen.System.MediaKey.Event -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.AccessibilityTtsSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.AccessibilityTtsSettingChangedEventArgs> SystemSettingsAccessibilityTtsSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.AccessibilityTtsSettingChangedEventArgs>, global::Tizen.System.AccessibilityTtsSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.AccessibilityTtsSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.AccessibilityTtsSettingChanged += x, x => global::Tizen.System.SystemSettings.AccessibilityTtsSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.AdsIdChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.AdsIdChangedEventArgs> SystemSettingsAdsIdChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.AdsIdChangedEventArgs>, global::Tizen.System.AdsIdChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.AdsIdChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.AdsIdChanged += x, x => global::Tizen.System.SystemSettings.AdsIdChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.Data3GNetworkSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.Data3GNetworkSettingChangedEventArgs> SystemSettingsData3GNetworkSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.Data3GNetworkSettingChangedEventArgs>, global::Tizen.System.Data3GNetworkSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.Data3GNetworkSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.Data3GNetworkSettingChanged += x, x => global::Tizen.System.SystemSettings.Data3GNetworkSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.DeviceNameChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.DeviceNameChangedEventArgs> SystemSettingsDeviceNameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.DeviceNameChangedEventArgs>, global::Tizen.System.DeviceNameChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.DeviceNameChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.DeviceNameChanged += x, x => global::Tizen.System.SystemSettings.DeviceNameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.DisplayScreenRotationAutoSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.DisplayScreenRotationAutoSettingChangedEventArgs> SystemSettingsDisplayScreenRotationAutoSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.DisplayScreenRotationAutoSettingChangedEventArgs>, global::Tizen.System.DisplayScreenRotationAutoSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.DisplayScreenRotationAutoSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.DisplayScreenRotationAutoSettingChanged += x, x => global::Tizen.System.SystemSettings.DisplayScreenRotationAutoSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.EmailAlertRingtoneChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.EmailAlertRingtoneChangedEventArgs> SystemSettingsEmailAlertRingtoneChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.EmailAlertRingtoneChangedEventArgs>, global::Tizen.System.EmailAlertRingtoneChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.EmailAlertRingtoneChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.EmailAlertRingtoneChanged += x, x => global::Tizen.System.SystemSettings.EmailAlertRingtoneChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.FontSizeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.FontSizeChangedEventArgs> SystemSettingsFontSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.FontSizeChangedEventArgs>, global::Tizen.System.FontSizeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.FontSizeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.FontSizeChanged += x, x => global::Tizen.System.SystemSettings.FontSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.FontTypeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.FontTypeChangedEventArgs> SystemSettingsFontTypeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.FontTypeChangedEventArgs>, global::Tizen.System.FontTypeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.FontTypeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.FontTypeChanged += x, x => global::Tizen.System.SystemSettings.FontTypeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.IncomingCallRingtoneChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.IncomingCallRingtoneChangedEventArgs> SystemSettingsIncomingCallRingtoneChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.IncomingCallRingtoneChangedEventArgs>, global::Tizen.System.IncomingCallRingtoneChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.IncomingCallRingtoneChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.IncomingCallRingtoneChanged += x, x => global::Tizen.System.SystemSettings.IncomingCallRingtoneChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.LocaleCountryChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.LocaleCountryChangedEventArgs> SystemSettingsLocaleCountryChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.LocaleCountryChangedEventArgs>, global::Tizen.System.LocaleCountryChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.LocaleCountryChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.LocaleCountryChanged += x, x => global::Tizen.System.SystemSettings.LocaleCountryChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.LocaleLanguageChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.LocaleLanguageChangedEventArgs> SystemSettingsLocaleLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.LocaleLanguageChangedEventArgs>, global::Tizen.System.LocaleLanguageChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.LocaleLanguageChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.LocaleLanguageChanged += x, x => global::Tizen.System.SystemSettings.LocaleLanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.LocaleTimeFormat24HourSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.LocaleTimeFormat24HourSettingChangedEventArgs> SystemSettingsLocaleTimeFormat24HourSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.LocaleTimeFormat24HourSettingChangedEventArgs>, global::Tizen.System.LocaleTimeFormat24HourSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.LocaleTimeFormat24HourSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.LocaleTimeFormat24HourSettingChanged += x, x => global::Tizen.System.SystemSettings.LocaleTimeFormat24HourSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.LocaleTimeZoneChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.LocaleTimeZoneChangedEventArgs> SystemSettingsLocaleTimeZoneChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.LocaleTimeZoneChangedEventArgs>, global::Tizen.System.LocaleTimeZoneChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.LocaleTimeZoneChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.LocaleTimeZoneChanged += x, x => global::Tizen.System.SystemSettings.LocaleTimeZoneChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.LockScreenAppChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.LockScreenAppChangedEventArgs> SystemSettingsLockScreenAppChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.LockScreenAppChangedEventArgs>, global::Tizen.System.LockScreenAppChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.LockScreenAppChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.LockScreenAppChanged += x, x => global::Tizen.System.SystemSettings.LockScreenAppChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.LockStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.LockStateChangedEventArgs> SystemSettingsLockStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.LockStateChangedEventArgs>, global::Tizen.System.LockStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.LockStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.LockStateChanged += x, x => global::Tizen.System.SystemSettings.LockStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.MotionActivationSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.MotionActivationSettingChangedEventArgs> SystemSettingsMotionActivationSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.MotionActivationSettingChangedEventArgs>, global::Tizen.System.MotionActivationSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.MotionActivationSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.MotionActivationSettingChanged += x, x => global::Tizen.System.SystemSettings.MotionActivationSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.MotionSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.MotionSettingChangedEventArgs> SystemSettingsMotionSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.MotionSettingChangedEventArgs>, global::Tizen.System.MotionSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.MotionSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.MotionSettingChanged += x, x => global::Tizen.System.SystemSettings.MotionSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.NetworkFlightModeSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.NetworkFlightModeSettingChangedEventArgs> SystemSettingsNetworkFlightModeSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.NetworkFlightModeSettingChangedEventArgs>, global::Tizen.System.NetworkFlightModeSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.NetworkFlightModeSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.NetworkFlightModeSettingChanged += x, x => global::Tizen.System.SystemSettings.NetworkFlightModeSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.NetworkWifiNotificationSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.NetworkWifiNotificationSettingChangedEventArgs> SystemSettingsNetworkWifiNotificationSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.NetworkWifiNotificationSettingChangedEventArgs>, global::Tizen.System.NetworkWifiNotificationSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.NetworkWifiNotificationSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.NetworkWifiNotificationSettingChanged += x, x => global::Tizen.System.SystemSettings.NetworkWifiNotificationSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.ScreenBacklightTimeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.ScreenBacklightTimeChangedEventArgs> SystemSettingsScreenBacklightTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.ScreenBacklightTimeChangedEventArgs>, global::Tizen.System.ScreenBacklightTimeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.ScreenBacklightTimeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.ScreenBacklightTimeChanged += x, x => global::Tizen.System.SystemSettings.ScreenBacklightTimeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.SoundLockSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.SoundLockSettingChangedEventArgs> SystemSettingsSoundLockSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.SoundLockSettingChangedEventArgs>, global::Tizen.System.SoundLockSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.SoundLockSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.SoundLockSettingChanged += x, x => global::Tizen.System.SystemSettings.SoundLockSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.SoundNotificationChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.SoundNotificationChangedEventArgs> SystemSettingsSoundNotificationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.SoundNotificationChangedEventArgs>, global::Tizen.System.SoundNotificationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.SoundNotificationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.SoundNotificationChanged += x, x => global::Tizen.System.SystemSettings.SoundNotificationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.SoundNotificationRepetitionPeriodChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.SoundNotificationRepetitionPeriodChangedEventArgs> SystemSettingsSoundNotificationRepetitionPeriodChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.SoundNotificationRepetitionPeriodChangedEventArgs>, global::Tizen.System.SoundNotificationRepetitionPeriodChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.SoundNotificationRepetitionPeriodChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.SoundNotificationRepetitionPeriodChanged += x, x => global::Tizen.System.SystemSettings.SoundNotificationRepetitionPeriodChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.SoundSilentModeSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.SoundSilentModeSettingChangedEventArgs> SystemSettingsSoundSilentModeSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.SoundSilentModeSettingChangedEventArgs>, global::Tizen.System.SoundSilentModeSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.SoundSilentModeSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.SoundSilentModeSettingChanged += x, x => global::Tizen.System.SystemSettings.SoundSilentModeSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.SoundTouchSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.SoundTouchSettingChangedEventArgs> SystemSettingsSoundTouchSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.SoundTouchSettingChangedEventArgs>, global::Tizen.System.SoundTouchSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.SoundTouchSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.SoundTouchSettingChanged += x, x => global::Tizen.System.SystemSettings.SoundTouchSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.TimeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.TimeChangedEventArgs> SystemSettingsTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.TimeChangedEventArgs>, global::Tizen.System.TimeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.TimeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.TimeChanged += x, x => global::Tizen.System.SystemSettings.TimeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.UltraDataSaveChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.UltraDataSaveChangedEventArgs> SystemSettingsUltraDataSaveChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.UltraDataSaveChangedEventArgs>, global::Tizen.System.UltraDataSaveChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.UltraDataSaveChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.UltraDataSaveChanged += x, x => global::Tizen.System.SystemSettings.UltraDataSaveChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.UltraDataSavePackageListChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.UltraDataSavePackageListChangedEventArgs> SystemSettingsUltraDataSavePackageListChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.UltraDataSavePackageListChangedEventArgs>, global::Tizen.System.UltraDataSavePackageListChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.UltraDataSavePackageListChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.UltraDataSavePackageListChanged += x, x => global::Tizen.System.SystemSettings.UltraDataSavePackageListChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.UsbDebuggingSettingChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.UsbDebuggingSettingChangedEventArgs> SystemSettingsUsbDebuggingSettingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.UsbDebuggingSettingChangedEventArgs>, global::Tizen.System.UsbDebuggingSettingChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.UsbDebuggingSettingChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.UsbDebuggingSettingChanged += x, x => global::Tizen.System.SystemSettings.UsbDebuggingSettingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.WallpaperHomeScreenChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.WallpaperHomeScreenChangedEventArgs> SystemSettingsWallpaperHomeScreenChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.WallpaperHomeScreenChangedEventArgs>, global::Tizen.System.WallpaperHomeScreenChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.WallpaperHomeScreenChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.WallpaperHomeScreenChanged += x, x => global::Tizen.System.SystemSettings.WallpaperHomeScreenChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.System.SystemSettings.WallpaperLockScreenChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.System.WallpaperLockScreenChangedEventArgs> SystemSettingsWallpaperLockScreenChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.System.WallpaperLockScreenChangedEventArgs>, global::Tizen.System.WallpaperLockScreenChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.System.WallpaperLockScreenChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.System.SystemSettings.WallpaperLockScreenChanged += x, x => global::Tizen.System.SystemSettings.WallpaperLockScreenChanged -= x);
    }
}

namespace Tizen.Telephony
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Telephony"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Telephony.Manager.StateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Telephony.StateEventArgs> ManagerStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Telephony.StateEventArgs>, global::Tizen.Telephony.StateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Telephony.StateEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Telephony.Manager.StateChanged += x, x => global::Tizen.Telephony.Manager.StateChanged -= x);
    }
}

namespace Tizen.Uix.InputMethod
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Uix.InputMethod"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.AccessibilityStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.AccessibilityStateChangedEventArgs> InputMethodEditorAccessibilityStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.AccessibilityStateChangedEventArgs>, global::Tizen.Uix.InputMethod.AccessibilityStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.AccessibilityStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.AccessibilityStateChanged += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.AccessibilityStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.CursorPositionUpdated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.CursorPositionUpdatedEventArgs> InputMethodEditorCursorPositionUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.CursorPositionUpdatedEventArgs>, global::Tizen.Uix.InputMethod.CursorPositionUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.CursorPositionUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.CursorPositionUpdated += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.CursorPositionUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.DataSet"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.SetDataEventArgs> InputMethodEditorDataSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.SetDataEventArgs>, global::Tizen.Uix.InputMethod.SetDataEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.SetDataEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.DataSet += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.DataSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.DisplayLanguageChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.DisplayLanguageChangedEventArgs> InputMethodEditorDisplayLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.DisplayLanguageChangedEventArgs>, global::Tizen.Uix.InputMethod.DisplayLanguageChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.DisplayLanguageChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.DisplayLanguageChanged += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.DisplayLanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.FocusedIn"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.FocusedInEventArgs> InputMethodEditorFocusedIn => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.FocusedInEventArgs>, global::Tizen.Uix.InputMethod.FocusedInEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.FocusedInEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.FocusedIn += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.FocusedIn -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.FocusedOut"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.FocusedOutEventArgs> InputMethodEditorFocusedOut => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.FocusedOutEventArgs>, global::Tizen.Uix.InputMethod.FocusedOutEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.FocusedOutEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.FocusedOut += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.FocusedOut -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.InputContextReset"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> InputMethodEditorInputContextReset => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.InputContextReset += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.InputContextReset -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.LanguageSet"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.LanguageSetEventArgs> InputMethodEditorLanguageSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.LanguageSetEventArgs>, global::Tizen.Uix.InputMethod.LanguageSetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.LanguageSetEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.LanguageSet += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.LanguageSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.LayoutSet"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.LayoutSetEventArgs> InputMethodEditorLayoutSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.LayoutSetEventArgs>, global::Tizen.Uix.InputMethod.LayoutSetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.LayoutSetEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.LayoutSet += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.LayoutSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.ReturnKeySet"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.ReturnKeySetEventArgs> InputMethodEditorReturnKeySet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.ReturnKeySetEventArgs>, global::Tizen.Uix.InputMethod.ReturnKeySetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.ReturnKeySetEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.ReturnKeySet += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.ReturnKeySet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.ReturnKeyStateSet"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.ReturnKeyStateSetEventArgs> InputMethodEditorReturnKeyStateSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.ReturnKeyStateSetEventArgs>, global::Tizen.Uix.InputMethod.ReturnKeyStateSetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.ReturnKeyStateSetEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.ReturnKeyStateSet += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.ReturnKeyStateSet -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.RotationChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.RotationChangedEventArgs> InputMethodEditorRotationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.RotationChangedEventArgs>, global::Tizen.Uix.InputMethod.RotationChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.RotationChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.RotationChanged += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.RotationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.InputMethod.InputMethodEditor.SurroundingTextUpdated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.InputMethod.SurroundingTextUpdatedEventArgs> InputMethodEditorSurroundingTextUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.InputMethod.SurroundingTextUpdatedEventArgs>, global::Tizen.Uix.InputMethod.SurroundingTextUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.InputMethod.SurroundingTextUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.InputMethod.InputMethodEditor.SurroundingTextUpdated += x, x => global::Tizen.Uix.InputMethod.InputMethodEditor.SurroundingTextUpdated -= x);
    }
}

namespace Tizen.Uix.VoiceControl
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Tizen.Uix.VoiceControl"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.VoiceControl.VoiceControlClient.CurrentLanguageChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.VoiceControl.CurrentLanguageChangedEventArgs> VoiceControlClientCurrentLanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.VoiceControl.CurrentLanguageChangedEventArgs>, global::Tizen.Uix.VoiceControl.CurrentLanguageChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.VoiceControl.CurrentLanguageChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.VoiceControl.VoiceControlClient.CurrentLanguageChanged += x, x => global::Tizen.Uix.VoiceControl.VoiceControlClient.CurrentLanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.VoiceControl.VoiceControlClient.ErrorOccured"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.VoiceControl.ErrorOccuredEventArgs> VoiceControlClientErrorOccured => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.VoiceControl.ErrorOccuredEventArgs>, global::Tizen.Uix.VoiceControl.ErrorOccuredEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.VoiceControl.ErrorOccuredEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.VoiceControl.VoiceControlClient.ErrorOccured += x, x => global::Tizen.Uix.VoiceControl.VoiceControlClient.ErrorOccured -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.VoiceControl.VoiceControlClient.RecognitionResult"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.VoiceControl.RecognitionResultEventArgs> VoiceControlClientRecognitionResult => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.VoiceControl.RecognitionResultEventArgs>, global::Tizen.Uix.VoiceControl.RecognitionResultEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.VoiceControl.RecognitionResultEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.VoiceControl.VoiceControlClient.RecognitionResult += x, x => global::Tizen.Uix.VoiceControl.VoiceControlClient.RecognitionResult -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.VoiceControl.VoiceControlClient.ServiceStateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.VoiceControl.ServiceStateChangedEventArgs> VoiceControlClientServiceStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.VoiceControl.ServiceStateChangedEventArgs>, global::Tizen.Uix.VoiceControl.ServiceStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.VoiceControl.ServiceStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.VoiceControl.VoiceControlClient.ServiceStateChanged += x, x => global::Tizen.Uix.VoiceControl.VoiceControlClient.ServiceStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Tizen.Uix.VoiceControl.VoiceControlClient.StateChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Tizen.Uix.VoiceControl.StateChangedEventArgs> VoiceControlClientStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Tizen.Uix.VoiceControl.StateChangedEventArgs>, global::Tizen.Uix.VoiceControl.StateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Tizen.Uix.VoiceControl.StateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Tizen.Uix.VoiceControl.VoiceControlClient.StateChanged += x, x => global::Tizen.Uix.VoiceControl.VoiceControlClient.StateChanged -= x);
    }
}