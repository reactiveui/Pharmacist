
using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Avalonia
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Application"/> class.
        /// </summary>
        public static RxApplicationEvents Events(this global::Avalonia.Application item) => new RxApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.AvaloniaObject"/> class.
        /// </summary>
        public static RxAvaloniaObjectEvents Events(this global::Avalonia.AvaloniaObject item) => new RxAvaloniaObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.IAvaloniaObject"/> class.
        /// </summary>
        public static RxIAvaloniaObjectEvents Events(this global::Avalonia.IAvaloniaObject item) => new RxIAvaloniaObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.IStyledElement"/> class.
        /// </summary>
        public static RxIStyledElementEvents Events(this global::Avalonia.IStyledElement item) => new RxIStyledElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.StyledElement"/> class.
        /// </summary>
        public static RxStyledElementEvents Events(this global::Avalonia.StyledElement item) => new RxStyledElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Visual"/> class.
        /// </summary>
        public static RxVisualEvents Events(this global::Avalonia.Visual item) => new RxVisualEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Application"/> class as observables.
    /// </summary>
    public class RxApplicationEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationEvents(global::Avalonia.Application data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Application.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.AvaloniaObject"/> class as observables.
    /// </summary>
    public class RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.AvaloniaObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.AvaloniaObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAvaloniaObjectEvents(global::Avalonia.AvaloniaObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.AvaloniaObject.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.AvaloniaPropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.AvaloniaPropertyChangedEventArgs>, global::Avalonia.AvaloniaPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.AvaloniaPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.IAvaloniaObject"/> class as observables.
    /// </summary>
    public class RxIAvaloniaObjectEvents
    {
        private readonly global::Avalonia.IAvaloniaObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.IAvaloniaObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIAvaloniaObjectEvents(global::Avalonia.IAvaloniaObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.IAvaloniaObject.InheritablePropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.AvaloniaPropertyChangedEventArgs> InheritablePropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.AvaloniaPropertyChangedEventArgs>, global::Avalonia.AvaloniaPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.AvaloniaPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InheritablePropertyChanged += x, x => _data.InheritablePropertyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.IAvaloniaObject.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.AvaloniaPropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.AvaloniaPropertyChangedEventArgs>, global::Avalonia.AvaloniaPropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.AvaloniaPropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.IStyledElement"/> class as observables.
    /// </summary>
    public class RxIStyledElementEvents
    {
        private readonly global::Avalonia.IStyledElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.IStyledElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIStyledElementEvents(global::Avalonia.IStyledElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.IStyledElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Initialized += x, x => _data.Initialized -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.StyledElement"/> class as observables.
    /// </summary>
    public class RxStyledElementEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.StyledElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.StyledElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStyledElementEvents(global::Avalonia.StyledElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.AttachedToLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> AttachedToLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AttachedToLogicalTree += x, x => _data.AttachedToLogicalTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.DataContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataContextChanged += x, x => _data.DataContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.DetachedFromLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> DetachedFromLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DetachedFromLogicalTree += x, x => _data.DetachedFromLogicalTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.Initialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Initialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Initialized += x, x => _data.Initialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.StyledElement.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Visual"/> class as observables.
    /// </summary>
    public class RxVisualEvents : global::Avalonia.RxStyledElementEvents
    {
        private readonly global::Avalonia.Visual _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Visual"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualEvents(global::Avalonia.Visual data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Visual.AttachedToVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> AttachedToVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AttachedToVisualTree += x, x => _data.AttachedToVisualTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Visual.DetachedFromVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> DetachedFromVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DetachedFromVisualTree += x, x => _data.DetachedFromVisualTree -= x);
    }
}

namespace Avalonia.Collections
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Collections"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{TKey, TValue}"/> class.
        /// </summary>
        public static RxAvaloniaDictionaryEvents<TKey, TValue> Events<TKey, TValue>(this global::Avalonia.Collections.AvaloniaDictionary<TKey, TValue> item) => new RxAvaloniaDictionaryEvents<TKey, TValue>(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{TKey, TValue}"/> class as observables.
    /// </summary>
    public class RxAvaloniaDictionaryEvents<TKey, TValue>
    {
        private readonly global::Avalonia.Collections.AvaloniaDictionary<TKey, TValue> _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{TKey, TValue}"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAvaloniaDictionaryEvents(global::Avalonia.Collections.AvaloniaDictionary<TKey, TValue> data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{TKey, TValue}.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Collections.AvaloniaDictionary{TKey, TValue}.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }
}

namespace Avalonia.Controls
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.AutoCompleteBox"/> class.
        /// </summary>
        public static RxAutoCompleteBoxEvents Events(this global::Avalonia.Controls.AutoCompleteBox item) => new RxAutoCompleteBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Button"/> class.
        /// </summary>
        public static RxButtonEvents Events(this global::Avalonia.Controls.Button item) => new RxButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Calendar"/> class.
        /// </summary>
        public static RxCalendarEvents Events(this global::Avalonia.Controls.Calendar item) => new RxCalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ContextMenu"/> class.
        /// </summary>
        public static RxContextMenuEvents Events(this global::Avalonia.Controls.ContextMenu item) => new RxContextMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.DatePicker"/> class.
        /// </summary>
        public static RxDatePickerEvents Events(this global::Avalonia.Controls.DatePicker item) => new RxDatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.IResourceProvider"/> class.
        /// </summary>
        public static RxIResourceProviderEvents Events(this global::Avalonia.Controls.IResourceProvider item) => new RxIResourceProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ItemsRepeater"/> class.
        /// </summary>
        public static RxItemsRepeaterEvents Events(this global::Avalonia.Controls.ItemsRepeater item) => new RxItemsRepeaterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ItemsSourceView"/> class.
        /// </summary>
        public static RxItemsSourceViewEvents Events(this global::Avalonia.Controls.ItemsSourceView item) => new RxItemsSourceViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.MenuBase"/> class.
        /// </summary>
        public static RxMenuBaseEvents Events(this global::Avalonia.Controls.MenuBase item) => new RxMenuBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.MenuItem"/> class.
        /// </summary>
        public static RxMenuItemEvents Events(this global::Avalonia.Controls.MenuItem item) => new RxMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.NativeMenuItem"/> class.
        /// </summary>
        public static RxNativeMenuItemEvents Events(this global::Avalonia.Controls.NativeMenuItem item) => new RxNativeMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.NumericUpDown"/> class.
        /// </summary>
        public static RxNumericUpDownEvents Events(this global::Avalonia.Controls.NumericUpDown item) => new RxNumericUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ResourceDictionary"/> class.
        /// </summary>
        public static RxResourceDictionaryEvents Events(this global::Avalonia.Controls.ResourceDictionary item) => new RxResourceDictionaryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Spinner"/> class.
        /// </summary>
        public static RxSpinnerEvents Events(this global::Avalonia.Controls.Spinner item) => new RxSpinnerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.TopLevel"/> class.
        /// </summary>
        public static RxTopLevelEvents Events(this global::Avalonia.Controls.TopLevel item) => new RxTopLevelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.TreeView"/> class.
        /// </summary>
        public static RxTreeViewEvents Events(this global::Avalonia.Controls.TreeView item) => new RxTreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Window"/> class.
        /// </summary>
        public static RxWindowEvents Events(this global::Avalonia.Controls.Window item) => new RxWindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.WindowBase"/> class.
        /// </summary>
        public static RxWindowBaseEvents Events(this global::Avalonia.Controls.WindowBase item) => new RxWindowBaseEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.AutoCompleteBox"/> class as observables.
    /// </summary>
    public class RxAutoCompleteBoxEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.AutoCompleteBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.AutoCompleteBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAutoCompleteBoxEvents(global::Avalonia.Controls.AutoCompleteBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> DropDownClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.CancelEventArgs>, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosing += x, x => _data.DropDownClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownOpened += x, x => _data.DropDownOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.DropDownOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> DropDownOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.CancelEventArgs>, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownOpening += x, x => _data.DropDownOpening -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.Populated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.PopulatedEventArgs> Populated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.PopulatedEventArgs>, global::Avalonia.Controls.PopulatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.PopulatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Populated += x, x => _data.Populated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.Populating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.PopulatingEventArgs> Populating => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.PopulatingEventArgs>, global::Avalonia.Controls.PopulatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.PopulatingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Populating += x, x => _data.Populating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.AutoCompleteBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Button"/> class as observables.
    /// </summary>
    public class RxButtonEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonEvents(global::Avalonia.Controls.Button data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Button.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Calendar"/> class as observables.
    /// </summary>
    public class RxCalendarEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Calendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Calendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarEvents(global::Avalonia.Controls.Calendar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Calendar.DisplayDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.CalendarDateChangedEventArgs> DisplayDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.CalendarDateChangedEventArgs>, global::Avalonia.Controls.CalendarDateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.CalendarDateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayDateChanged += x, x => _data.DisplayDateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Calendar.DisplayModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.CalendarModeChangedEventArgs> DisplayModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.CalendarModeChangedEventArgs>, global::Avalonia.Controls.CalendarModeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.CalendarModeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayModeChanged += x, x => _data.DisplayModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Calendar.SelectedDatesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectedDatesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedDatesChanged += x, x => _data.SelectedDatesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ContextMenu"/> class as observables.
    /// </summary>
    public class RxContextMenuEvents : global::Avalonia.Controls.RxMenuBaseEvents
    {
        private readonly global::Avalonia.Controls.ContextMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ContextMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContextMenuEvents(global::Avalonia.Controls.ContextMenu data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ContextMenu.ContextMenuClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> ContextMenuClosing => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuClosing += x, x => _data.ContextMenuClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ContextMenu.ContextMenuOpening"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> ContextMenuOpening => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.CancelEventHandler, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuOpening += x, x => _data.ContextMenuOpening -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.DatePicker"/> class as observables.
    /// </summary>
    public class RxDatePickerEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickerEvents(global::Avalonia.Controls.DatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.CalendarClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CalendarClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarClosed += x, x => _data.CalendarClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.CalendarOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CalendarOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarOpened += x, x => _data.CalendarOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.DateValidationError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs> DateValidationError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs>, global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.DatePickerDateValidationErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DateValidationError += x, x => _data.DateValidationError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.DatePicker.SelectedDateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectedDateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedDateChanged += x, x => _data.SelectedDateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.IResourceProvider"/> class as observables.
    /// </summary>
    public class RxIResourceProviderEvents
    {
        private readonly global::Avalonia.Controls.IResourceProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.IResourceProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIResourceProviderEvents(global::Avalonia.Controls.IResourceProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.IResourceProvider.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ItemsRepeater"/> class as observables.
    /// </summary>
    public class RxItemsRepeaterEvents : global::Avalonia.Input.RxInputElementEvents
    {
        private readonly global::Avalonia.Controls.ItemsRepeater _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ItemsRepeater"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemsRepeaterEvents(global::Avalonia.Controls.ItemsRepeater data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ItemsRepeater.ElementClearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ItemsRepeaterElementClearingEventArgs> ElementClearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ItemsRepeaterElementClearingEventArgs>, global::Avalonia.Controls.ItemsRepeaterElementClearingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ItemsRepeaterElementClearingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ElementClearing += x, x => _data.ElementClearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ItemsRepeater.ElementIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs> ElementIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs>, global::Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ElementIndexChanged += x, x => _data.ElementIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ItemsRepeater.ElementPrepared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs> ElementPrepared => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs>, global::Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ElementPrepared += x, x => _data.ElementPrepared -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ItemsSourceView"/> class as observables.
    /// </summary>
    public class RxItemsSourceViewEvents
    {
        private readonly global::Avalonia.Controls.ItemsSourceView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ItemsSourceView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemsSourceViewEvents(global::Avalonia.Controls.ItemsSourceView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ItemsSourceView.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.MenuBase"/> class as observables.
    /// </summary>
    public class RxMenuBaseEvents : global::Avalonia.Controls.Primitives.RxSelectingItemsControlEvents
    {
        private readonly global::Avalonia.Controls.MenuBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.MenuBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuBaseEvents(global::Avalonia.Controls.MenuBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuBase.MenuClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> MenuClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuClosed += x, x => _data.MenuClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuBase.MenuOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> MenuOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuOpened += x, x => _data.MenuOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.MenuItem"/> class as observables.
    /// </summary>
    public class RxMenuItemEvents : global::Avalonia.Controls.Primitives.RxSelectingItemsControlEvents
    {
        private readonly global::Avalonia.Controls.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuItemEvents(global::Avalonia.Controls.MenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.PointerEnterItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerEnterItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerEnterItem += x, x => _data.PointerEnterItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.PointerLeaveItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerLeaveItem => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerLeaveItem += x, x => _data.PointerLeaveItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.MenuItem.SubmenuOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> SubmenuOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SubmenuOpened += x, x => _data.SubmenuOpened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.NativeMenuItem"/> class as observables.
    /// </summary>
    public class RxNativeMenuItemEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Controls.NativeMenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.NativeMenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNativeMenuItemEvents(global::Avalonia.Controls.NativeMenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.NativeMenuItem.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.NumericUpDown"/> class as observables.
    /// </summary>
    public class RxNumericUpDownEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.NumericUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.NumericUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNumericUpDownEvents(global::Avalonia.Controls.NumericUpDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.NumericUpDown.Spinned"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SpinEventArgs> Spinned => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SpinEventArgs>, global::Avalonia.Controls.SpinEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SpinEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Spinned += x, x => _data.Spinned -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.NumericUpDown.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.NumericUpDownValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.NumericUpDownValueChangedEventArgs>, global::Avalonia.Controls.NumericUpDownValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.NumericUpDownValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ResourceDictionary"/> class as observables.
    /// </summary>
    public class RxResourceDictionaryEvents : global::Avalonia.Collections.RxAvaloniaDictionaryEvents<object, object>
    {
        private readonly global::Avalonia.Controls.ResourceDictionary _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ResourceDictionary"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxResourceDictionaryEvents(global::Avalonia.Controls.ResourceDictionary data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ResourceDictionary.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Spinner"/> class as observables.
    /// </summary>
    public class RxSpinnerEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Spinner _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Spinner"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpinnerEvents(global::Avalonia.Controls.Spinner data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Spinner.Spin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SpinEventArgs> Spin => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SpinEventArgs>, global::Avalonia.Controls.SpinEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SpinEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Spin += x, x => _data.Spin -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.TopLevel"/> class as observables.
    /// </summary>
    public class RxTopLevelEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.TopLevel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.TopLevel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTopLevelEvents(global::Avalonia.Controls.TopLevel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.TopLevel.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.TopLevel.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.TreeView"/> class as observables.
    /// </summary>
    public class RxTreeViewEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewEvents(global::Avalonia.Controls.TreeView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.TreeView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Window"/> class as observables.
    /// </summary>
    public class RxWindowEvents : global::Avalonia.Controls.RxWindowBaseEvents
    {
        private readonly global::Avalonia.Controls.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWindowEvents(global::Avalonia.Controls.Window data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Window.Closing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.CancelEventArgs> Closing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.CancelEventArgs>, global::System.ComponentModel.CancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.CancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closing += x, x => _data.Closing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.WindowBase"/> class as observables.
    /// </summary>
    public class RxWindowBaseEvents : global::Avalonia.Controls.RxTopLevelEvents
    {
        private readonly global::Avalonia.Controls.WindowBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.WindowBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWindowBaseEvents(global::Avalonia.Controls.WindowBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.WindowBase.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.WindowBase.Deactivated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivated += x, x => _data.Deactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.WindowBase.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.PixelPointEventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.PixelPointEventArgs>, global::Avalonia.Controls.PixelPointEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.PixelPointEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }
}

namespace Avalonia.Controls.ApplicationLifetimes
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.ApplicationLifetimes"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime"/> class.
        /// </summary>
        public static RxClassicDesktopStyleApplicationLifetimeEvents Events(this global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime item) => new RxClassicDesktopStyleApplicationLifetimeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime"/> class.
        /// </summary>
        public static RxIControlledApplicationLifetimeEvents Events(this global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime item) => new RxIControlledApplicationLifetimeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime"/> class as observables.
    /// </summary>
    public class RxClassicDesktopStyleApplicationLifetimeEvents
    {
        private readonly global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClassicDesktopStyleApplicationLifetimeEvents(global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.Exit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs> Exit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs>, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Exit += x, x => _data.Exit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.Startup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs> Startup => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs>, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Startup += x, x => _data.Startup -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime"/> class as observables.
    /// </summary>
    public class RxIControlledApplicationLifetimeEvents
    {
        private readonly global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIControlledApplicationLifetimeEvents(global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime.Exit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs> Exit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs>, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Exit += x, x => _data.Exit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime.Startup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs> Startup => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs>, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Startup += x, x => _data.Startup -= x);
    }
}

namespace Avalonia.Controls.Generators
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Generators"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator"/> class.
        /// </summary>
        public static RxIItemContainerGeneratorEvents Events(this global::Avalonia.Controls.Generators.IItemContainerGenerator item) => new RxIItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator"/> class.
        /// </summary>
        public static RxItemContainerGeneratorEvents Events(this global::Avalonia.Controls.Generators.ItemContainerGenerator item) => new RxItemContainerGeneratorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex"/> class.
        /// </summary>
        public static RxTreeContainerIndexEvents Events(this global::Avalonia.Controls.Generators.TreeContainerIndex item) => new RxTreeContainerIndexEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator"/> class as observables.
    /// </summary>
    public class RxIItemContainerGeneratorEvents
    {
        private readonly global::Avalonia.Controls.Generators.IItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIItemContainerGeneratorEvents(global::Avalonia.Controls.Generators.IItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Dematerialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Dematerialized += x, x => _data.Dematerialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator.Materialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Materialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Materialized += x, x => _data.Materialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.IItemContainerGenerator.Recycled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Recycled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Recycled += x, x => _data.Recycled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator"/> class as observables.
    /// </summary>
    public class RxItemContainerGeneratorEvents
    {
        private readonly global::Avalonia.Controls.Generators.ItemContainerGenerator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemContainerGeneratorEvents(global::Avalonia.Controls.Generators.ItemContainerGenerator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator.Dematerialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Dematerialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Dematerialized += x, x => _data.Dematerialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator.Materialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Materialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Materialized += x, x => _data.Materialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.ItemContainerGenerator.Recycled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Recycled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Recycled += x, x => _data.Recycled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex"/> class as observables.
    /// </summary>
    public class RxTreeContainerIndexEvents
    {
        private readonly global::Avalonia.Controls.Generators.TreeContainerIndex _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeContainerIndexEvents(global::Avalonia.Controls.Generators.TreeContainerIndex data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex.Dematerialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Dematerialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Dematerialized += x, x => _data.Dematerialized -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Generators.TreeContainerIndex.Materialized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Generators.ItemContainerEventArgs> Materialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Generators.ItemContainerEventArgs>, global::Avalonia.Controls.Generators.ItemContainerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Generators.ItemContainerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Materialized += x, x => _data.Materialized -= x);
    }
}

namespace Avalonia.Controls.Notifications
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Notifications"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Notifications.NotificationCard"/> class.
        /// </summary>
        public static RxNotificationCardEvents Events(this global::Avalonia.Controls.Notifications.NotificationCard item) => new RxNotificationCardEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Notifications.NotificationCard"/> class as observables.
    /// </summary>
    public class RxNotificationCardEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Notifications.NotificationCard _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Notifications.NotificationCard"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNotificationCardEvents(global::Avalonia.Controls.Notifications.NotificationCard data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Notifications.NotificationCard.NotificationClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> NotificationClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NotificationClosed += x, x => _data.NotificationClosed -= x);
    }
}

namespace Avalonia.Controls.Platform
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Platform"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface"/> class.
        /// </summary>
        public static RxInternalPlatformThreadingInterfaceEvents Events(this global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface item) => new RxInternalPlatformThreadingInterfaceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Platform.ITopLevelNativeMenuExporter"/> class.
        /// </summary>
        public static RxITopLevelNativeMenuExporterEvents Events(this global::Avalonia.Controls.Platform.ITopLevelNativeMenuExporter item) => new RxITopLevelNativeMenuExporterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface"/> class as observables.
    /// </summary>
    public class RxInternalPlatformThreadingInterfaceEvents
    {
        private readonly global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInternalPlatformThreadingInterfaceEvents(global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface.Signaled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>> Signaled => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>, global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>(eventHandler =>
        {
            void Handler(global::System.Nullable<global::Avalonia.Threading.DispatcherPriority> obj) => eventHandler(obj);
            return Handler;
        }, x => _data.Signaled += x, x => _data.Signaled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Platform.InternalPlatformThreadingInterface.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.TimeSpan> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.TimeSpan>, global::System.TimeSpan>(eventHandler =>
        {
            void Handler(global::System.TimeSpan obj) => eventHandler(obj);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Platform.ITopLevelNativeMenuExporter"/> class as observables.
    /// </summary>
    public class RxITopLevelNativeMenuExporterEvents
    {
        private readonly global::Avalonia.Controls.Platform.ITopLevelNativeMenuExporter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Platform.ITopLevelNativeMenuExporter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxITopLevelNativeMenuExporterEvents(global::Avalonia.Controls.Platform.ITopLevelNativeMenuExporter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Platform.ITopLevelNativeMenuExporter.OnIsNativeMenuExportedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnIsNativeMenuExportedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OnIsNativeMenuExportedChanged += x, x => _data.OnIsNativeMenuExportedChanged -= x);
    }
}

namespace Avalonia.Controls.Primitives
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Primitives"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton"/> class.
        /// </summary>
        public static RxCalendarButtonEvents Events(this global::Avalonia.Controls.Primitives.CalendarButton item) => new RxCalendarButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton"/> class.
        /// </summary>
        public static RxCalendarDayButtonEvents Events(this global::Avalonia.Controls.Primitives.CalendarDayButton item) => new RxCalendarDayButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.IPopupHost"/> class.
        /// </summary>
        public static RxIPopupHostEvents Events(this global::Avalonia.Controls.Primitives.IPopupHost item) => new RxIPopupHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Popup"/> class.
        /// </summary>
        public static RxPopupEvents Events(this global::Avalonia.Controls.Primitives.Popup item) => new RxPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        public static RxScrollBarEvents Events(this global::Avalonia.Controls.Primitives.ScrollBar item) => new RxScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl"/> class.
        /// </summary>
        public static RxSelectingItemsControlEvents Events(this global::Avalonia.Controls.Primitives.SelectingItemsControl item) => new RxSelectingItemsControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl"/> class.
        /// </summary>
        public static RxTemplatedControlEvents Events(this global::Avalonia.Controls.Primitives.TemplatedControl item) => new RxTemplatedControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Thumb"/> class.
        /// </summary>
        public static RxThumbEvents Events(this global::Avalonia.Controls.Primitives.Thumb item) => new RxThumbEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        public static RxToggleButtonEvents Events(this global::Avalonia.Controls.Primitives.ToggleButton item) => new RxToggleButtonEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton"/> class as observables.
    /// </summary>
    public class RxCalendarButtonEvents : global::Avalonia.Controls.RxButtonEvents
    {
        private readonly global::Avalonia.Controls.Primitives.CalendarButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarButtonEvents(global::Avalonia.Controls.Primitives.CalendarButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> CalendarLeftMouseButtonDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarLeftMouseButtonDown += x, x => _data.CalendarLeftMouseButtonDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> CalendarLeftMouseButtonUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarLeftMouseButtonUp += x, x => _data.CalendarLeftMouseButtonUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton"/> class as observables.
    /// </summary>
    public class RxCalendarDayButtonEvents : global::Avalonia.Controls.RxButtonEvents
    {
        private readonly global::Avalonia.Controls.Primitives.CalendarDayButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCalendarDayButtonEvents(global::Avalonia.Controls.Primitives.CalendarDayButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> CalendarDayButtonMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarDayButtonMouseDown += x, x => _data.CalendarDayButtonMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> CalendarDayButtonMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CalendarDayButtonMouseUp += x, x => _data.CalendarDayButtonMouseUp -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.IPopupHost"/> class as observables.
    /// </summary>
    public class RxIPopupHostEvents
    {
        private readonly global::Avalonia.Controls.Primitives.IPopupHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.IPopupHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIPopupHostEvents(global::Avalonia.Controls.Primitives.IPopupHost data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.IPopupHost.TemplateApplied"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs> TemplateApplied => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs>, global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TemplateApplied += x, x => _data.TemplateApplied -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Popup"/> class as observables.
    /// </summary>
    public class RxPopupEvents : global::Avalonia.Input.RxInputElementEvents
    {
        private readonly global::Avalonia.Controls.Primitives.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPopupEvents(global::Avalonia.Controls.Primitives.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Popup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Popup.Opened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Opened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Opened += x, x => _data.Opened -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar"/> class as observables.
    /// </summary>
    public class RxScrollBarEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Primitives.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollBarEvents(global::Avalonia.Controls.Primitives.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Primitives.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Primitives.ScrollEventArgs>, global::Avalonia.Controls.Primitives.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Primitives.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl"/> class as observables.
    /// </summary>
    public class RxSelectingItemsControlEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Primitives.SelectingItemsControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSelectingItemsControlEvents(global::Avalonia.Controls.Primitives.SelectingItemsControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl"/> class as observables.
    /// </summary>
    public class RxTemplatedControlEvents : global::Avalonia.Input.RxInputElementEvents
    {
        private readonly global::Avalonia.Controls.Primitives.TemplatedControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTemplatedControlEvents(global::Avalonia.Controls.Primitives.TemplatedControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs> TemplateApplied => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs>, global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TemplateApplied += x, x => _data.TemplateApplied -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.Thumb"/> class as observables.
    /// </summary>
    public class RxThumbEvents : global::Avalonia.Controls.Primitives.RxTemplatedControlEvents
    {
        private readonly global::Avalonia.Controls.Primitives.Thumb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.Thumb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxThumbEvents(global::Avalonia.Controls.Primitives.Thumb data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Thumb.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.VectorEventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.VectorEventArgs>, global::Avalonia.Input.VectorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.VectorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragCompleted += x, x => _data.DragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Thumb.DragDelta"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.VectorEventArgs> DragDelta => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.VectorEventArgs>, global::Avalonia.Input.VectorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.VectorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDelta += x, x => _data.DragDelta -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.Thumb.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.VectorEventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.VectorEventArgs>, global::Avalonia.Input.VectorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.VectorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragStarted += x, x => _data.DragStarted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Primitives.ToggleButton"/> class as observables.
    /// </summary>
    public class RxToggleButtonEvents : global::Avalonia.Controls.RxButtonEvents
    {
        private readonly global::Avalonia.Controls.Primitives.ToggleButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Primitives.ToggleButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToggleButtonEvents(global::Avalonia.Controls.Primitives.ToggleButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.ToggleButton.Checked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Checked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Checked += x, x => _data.Checked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.ToggleButton.Indeterminate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Indeterminate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Indeterminate += x, x => _data.Indeterminate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Primitives.ToggleButton.Unchecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Unchecked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Unchecked += x, x => _data.Unchecked -= x);
    }
}

namespace Avalonia.Controls.Utils
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Controls.Utils"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter"/> class.
        /// </summary>
        public static RxISelectionAdapterEvents Events(this global::Avalonia.Controls.Utils.ISelectionAdapter item) => new RxISelectionAdapterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter"/> class.
        /// </summary>
        public static RxSelectingItemsControlSelectionAdapterEvents Events(this global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter item) => new RxSelectingItemsControlSelectionAdapterEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter"/> class as observables.
    /// </summary>
    public class RxISelectionAdapterEvents
    {
        private readonly global::Avalonia.Controls.Utils.ISelectionAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxISelectionAdapterEvents(global::Avalonia.Controls.Utils.ISelectionAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter.Cancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Cancel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Cancel += x, x => _data.Cancel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter.Commit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Commit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Commit += x, x => _data.Commit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.ISelectionAdapter.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter"/> class as observables.
    /// </summary>
    public class RxSelectingItemsControlSelectionAdapterEvents
    {
        private readonly global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSelectingItemsControlSelectionAdapterEvents(global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Cancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Cancel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Cancel += x, x => _data.Cancel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Commit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Commit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Commit += x, x => _data.Commit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.SelectionChangedEventArgs>, global::Avalonia.Controls.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }
}

namespace Avalonia.Input
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Input"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.ICloseable"/> class.
        /// </summary>
        public static RxICloseableEvents Events(this global::Avalonia.Input.ICloseable item) => new RxICloseableEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.IInputElement"/> class.
        /// </summary>
        public static RxIInputElementEvents Events(this global::Avalonia.Input.IInputElement item) => new RxIInputElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.IMainMenu"/> class.
        /// </summary>
        public static RxIMainMenuEvents Events(this global::Avalonia.Input.IMainMenu item) => new RxIMainMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.InputElement"/> class.
        /// </summary>
        public static RxInputElementEvents Events(this global::Avalonia.Input.InputElement item) => new RxInputElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Input.KeyboardDevice"/> class.
        /// </summary>
        public static RxKeyboardDeviceEvents Events(this global::Avalonia.Input.KeyboardDevice item) => new RxKeyboardDeviceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.ICloseable"/> class as observables.
    /// </summary>
    public class RxICloseableEvents
    {
        private readonly global::Avalonia.Input.ICloseable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.ICloseable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICloseableEvents(global::Avalonia.Input.ICloseable data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.ICloseable.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.IInputElement"/> class as observables.
    /// </summary>
    public class RxIInputElementEvents
    {
        private readonly global::Avalonia.Input.IInputElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.IInputElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIInputElementEvents(global::Avalonia.Input.IInputElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.GotFocusEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.GotFocusEventArgs>, global::Avalonia.Input.GotFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.GotFocusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerEnter += x, x => _data.PointerEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerLeave += x, x => _data.PointerLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerWheelEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerWheelEventArgs>, global::Avalonia.Input.PointerWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IInputElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.TextInputEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.TextInputEventArgs>, global::Avalonia.Input.TextInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.TextInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.IMainMenu"/> class as observables.
    /// </summary>
    public class RxIMainMenuEvents
    {
        private readonly global::Avalonia.Input.IMainMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.IMainMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIMainMenuEvents(global::Avalonia.Input.IMainMenu data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.IMainMenu.MenuClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> MenuClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuClosed += x, x => _data.MenuClosed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.InputElement"/> class as observables.
    /// </summary>
    public class RxInputElementEvents : global::Avalonia.Layout.RxLayoutableEvents
    {
        private readonly global::Avalonia.Input.InputElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.InputElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxInputElementEvents(global::Avalonia.Input.InputElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.DoubleTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> DoubleTapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleTapped += x, x => _data.DoubleTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.GotFocusEventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.GotFocusEventArgs>, global::Avalonia.Input.GotFocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.GotFocusEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.KeyEventArgs>, global::Avalonia.Input.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerCaptureLost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerCaptureLostEventArgs> PointerCaptureLost => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerCaptureLostEventArgs>, global::Avalonia.Input.PointerCaptureLostEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerCaptureLostEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerCaptureLost += x, x => _data.PointerCaptureLost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerEnter += x, x => _data.PointerEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerLeave += x, x => _data.PointerLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerEventArgs> PointerMoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerEventArgs>, global::Avalonia.Input.PointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerMoved += x, x => _data.PointerMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerPressedEventArgs> PointerPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerPressedEventArgs>, global::Avalonia.Input.PointerPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerPressedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerPressed += x, x => _data.PointerPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerReleased"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerReleasedEventArgs> PointerReleased => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerReleasedEventArgs>, global::Avalonia.Input.PointerReleasedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerReleasedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerReleased += x, x => _data.PointerReleased -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.PointerWheelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.PointerWheelEventArgs> PointerWheelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.PointerWheelEventArgs>, global::Avalonia.Input.PointerWheelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.PointerWheelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PointerWheelChanged += x, x => _data.PointerWheelChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Interactivity.RoutedEventArgs> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Interactivity.RoutedEventArgs>, global::Avalonia.Interactivity.RoutedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tapped += x, x => _data.Tapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.InputElement.TextInput"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Input.TextInputEventArgs> TextInput => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Input.TextInputEventArgs>, global::Avalonia.Input.TextInputEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Input.TextInputEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextInput += x, x => _data.TextInput -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Input.KeyboardDevice"/> class as observables.
    /// </summary>
    public class RxKeyboardDeviceEvents
    {
        private readonly global::Avalonia.Input.KeyboardDevice _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Input.KeyboardDevice"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxKeyboardDeviceEvents(global::Avalonia.Input.KeyboardDevice data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Input.KeyboardDevice.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }
}

namespace Avalonia.Layout
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Layout"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Layout.AttachedLayout"/> class.
        /// </summary>
        public static RxAttachedLayoutEvents Events(this global::Avalonia.Layout.AttachedLayout item) => new RxAttachedLayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Layout.Layoutable"/> class.
        /// </summary>
        public static RxLayoutableEvents Events(this global::Avalonia.Layout.Layoutable item) => new RxLayoutableEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Layout.AttachedLayout"/> class as observables.
    /// </summary>
    public class RxAttachedLayoutEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Layout.AttachedLayout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Layout.AttachedLayout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAttachedLayoutEvents(global::Avalonia.Layout.AttachedLayout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Layout.AttachedLayout.ArrangeInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ArrangeInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ArrangeInvalidated += x, x => _data.ArrangeInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Layout.AttachedLayout.MeasureInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MeasureInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MeasureInvalidated += x, x => _data.MeasureInvalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Layout.Layoutable"/> class as observables.
    /// </summary>
    public class RxLayoutableEvents : global::Avalonia.RxVisualEvents
    {
        private readonly global::Avalonia.Layout.Layoutable _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Layout.Layoutable"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLayoutableEvents(global::Avalonia.Layout.Layoutable data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Layout.Layoutable.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
    }
}

namespace Avalonia.LogicalTree
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.LogicalTree"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.LogicalTree.ILogical"/> class.
        /// </summary>
        public static RxILogicalEvents Events(this global::Avalonia.LogicalTree.ILogical item) => new RxILogicalEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.LogicalTree.ILogical"/> class as observables.
    /// </summary>
    public class RxILogicalEvents
    {
        private readonly global::Avalonia.LogicalTree.ILogical _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.LogicalTree.ILogical"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxILogicalEvents(global::Avalonia.LogicalTree.ILogical data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.LogicalTree.ILogical.AttachedToLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> AttachedToLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AttachedToLogicalTree += x, x => _data.AttachedToLogicalTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.LogicalTree.ILogical.DetachedFromLogicalTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> DetachedFromLogicalTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DetachedFromLogicalTree += x, x => _data.DetachedFromLogicalTree -= x);
    }
}

namespace Avalonia.Markup.Xaml.MarkupExtensions
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Markup.Xaml.MarkupExtensions"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude"/> class.
        /// </summary>
        public static RxResourceIncludeEvents Events(this global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude item) => new RxResourceIncludeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude"/> class as observables.
    /// </summary>
    public class RxResourceIncludeEvents
    {
        private readonly global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxResourceIncludeEvents(global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Markup.Xaml.MarkupExtensions.ResourceInclude.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }
}

namespace Avalonia.Markup.Xaml.Styling
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Markup.Xaml.Styling"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude"/> class.
        /// </summary>
        public static RxStyleIncludeEvents Events(this global::Avalonia.Markup.Xaml.Styling.StyleInclude item) => new RxStyleIncludeEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude"/> class as observables.
    /// </summary>
    public class RxStyleIncludeEvents
    {
        private readonly global::Avalonia.Markup.Xaml.Styling.StyleInclude _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStyleIncludeEvents(global::Avalonia.Markup.Xaml.Styling.StyleInclude data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Markup.Xaml.Styling.StyleInclude.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }
}

namespace Avalonia.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.Brush"/> class.
        /// </summary>
        public static RxBrushEvents Events(this global::Avalonia.Media.Brush item) => new RxBrushEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.DashStyle"/> class.
        /// </summary>
        public static RxDashStyleEvents Events(this global::Avalonia.Media.DashStyle item) => new RxDashStyleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.Geometry"/> class.
        /// </summary>
        public static RxGeometryEvents Events(this global::Avalonia.Media.Geometry item) => new RxGeometryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.IAffectsRender"/> class.
        /// </summary>
        public static RxIAffectsRenderEvents Events(this global::Avalonia.Media.IAffectsRender item) => new RxIAffectsRenderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.Pen"/> class.
        /// </summary>
        public static RxPenEvents Events(this global::Avalonia.Media.Pen item) => new RxPenEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Media.Transform"/> class.
        /// </summary>
        public static RxTransformEvents Events(this global::Avalonia.Media.Transform item) => new RxTransformEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.Brush"/> class as observables.
    /// </summary>
    public class RxBrushEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.Brush _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.Brush"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBrushEvents(global::Avalonia.Media.Brush data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.Brush.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Invalidated += x, x => _data.Invalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.DashStyle"/> class as observables.
    /// </summary>
    public class RxDashStyleEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.DashStyle _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.DashStyle"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDashStyleEvents(global::Avalonia.Media.DashStyle data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.DashStyle.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Invalidated += x, x => _data.Invalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.Geometry"/> class as observables.
    /// </summary>
    public class RxGeometryEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.Geometry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.Geometry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGeometryEvents(global::Avalonia.Media.Geometry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.Geometry.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.IAffectsRender"/> class as observables.
    /// </summary>
    public class RxIAffectsRenderEvents
    {
        private readonly global::Avalonia.Media.IAffectsRender _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.IAffectsRender"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIAffectsRenderEvents(global::Avalonia.Media.IAffectsRender data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.IAffectsRender.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Invalidated += x, x => _data.Invalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.Pen"/> class as observables.
    /// </summary>
    public class RxPenEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.Pen _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.Pen"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPenEvents(global::Avalonia.Media.Pen data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.Pen.Invalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Invalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Invalidated += x, x => _data.Invalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Media.Transform"/> class as observables.
    /// </summary>
    public class RxTransformEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Media.Transform _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Media.Transform"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTransformEvents(global::Avalonia.Media.Transform data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Media.Transform.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Changed += x, x => _data.Changed -= x);
    }
}

namespace Avalonia.Platform
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Platform"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl"/> class.
        /// </summary>
        public static RxIEmbeddableWindowImplEvents Events(this global::Avalonia.Platform.IEmbeddableWindowImpl item) => new RxIEmbeddableWindowImplEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface"/> class.
        /// </summary>
        public static RxIPlatformThreadingInterfaceEvents Events(this global::Avalonia.Platform.IPlatformThreadingInterface item) => new RxIPlatformThreadingInterfaceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl"/> class as observables.
    /// </summary>
    public class RxIEmbeddableWindowImplEvents
    {
        private readonly global::Avalonia.Platform.IEmbeddableWindowImpl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIEmbeddableWindowImplEvents(global::Avalonia.Platform.IEmbeddableWindowImpl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Platform.IEmbeddableWindowImpl.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Reactive.Unit> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action, global::System.Reactive.Unit>(eventHandler =>
        {
            void Handler() => eventHandler(global::System.Reactive.Unit.Default);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface"/> class as observables.
    /// </summary>
    public class RxIPlatformThreadingInterfaceEvents
    {
        private readonly global::Avalonia.Platform.IPlatformThreadingInterface _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIPlatformThreadingInterfaceEvents(global::Avalonia.Platform.IPlatformThreadingInterface data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Platform.IPlatformThreadingInterface.Signaled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>> Signaled => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>, global::System.Nullable<global::Avalonia.Threading.DispatcherPriority>>(eventHandler =>
        {
            void Handler(global::System.Nullable<global::Avalonia.Threading.DispatcherPriority> obj) => eventHandler(obj);
            return Handler;
        }, x => _data.Signaled += x, x => _data.Signaled -= x);
    }
}

namespace Avalonia.Rendering
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Rendering"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer"/> class.
        /// </summary>
        public static RxDefaultRenderTimerEvents Events(this global::Avalonia.Rendering.DefaultRenderTimer item) => new RxDefaultRenderTimerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.DeferredRenderer"/> class.
        /// </summary>
        public static RxDeferredRendererEvents Events(this global::Avalonia.Rendering.DeferredRenderer item) => new RxDeferredRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.ImmediateRenderer"/> class.
        /// </summary>
        public static RxImmediateRendererEvents Events(this global::Avalonia.Rendering.ImmediateRenderer item) => new RxImmediateRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.IRenderer"/> class.
        /// </summary>
        public static RxIRendererEvents Events(this global::Avalonia.Rendering.IRenderer item) => new RxIRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Rendering.IRenderTimer"/> class.
        /// </summary>
        public static RxIRenderTimerEvents Events(this global::Avalonia.Rendering.IRenderTimer item) => new RxIRenderTimerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer"/> class as observables.
    /// </summary>
    public class RxDefaultRenderTimerEvents
    {
        private readonly global::Avalonia.Rendering.DefaultRenderTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDefaultRenderTimerEvents(global::Avalonia.Rendering.DefaultRenderTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.DefaultRenderTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.TimeSpan> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.TimeSpan>, global::System.TimeSpan>(eventHandler =>
        {
            void Handler(global::System.TimeSpan obj) => eventHandler(obj);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.DeferredRenderer"/> class as observables.
    /// </summary>
    public class RxDeferredRendererEvents
    {
        private readonly global::Avalonia.Rendering.DeferredRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.DeferredRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDeferredRendererEvents(global::Avalonia.Rendering.DeferredRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.DeferredRenderer.SceneInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Rendering.SceneInvalidatedEventArgs> SceneInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Rendering.SceneInvalidatedEventArgs>, global::Avalonia.Rendering.SceneInvalidatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Rendering.SceneInvalidatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SceneInvalidated += x, x => _data.SceneInvalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.ImmediateRenderer"/> class as observables.
    /// </summary>
    public class RxImmediateRendererEvents
    {
        private readonly global::Avalonia.Rendering.ImmediateRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.ImmediateRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImmediateRendererEvents(global::Avalonia.Rendering.ImmediateRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.ImmediateRenderer.SceneInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Rendering.SceneInvalidatedEventArgs> SceneInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Rendering.SceneInvalidatedEventArgs>, global::Avalonia.Rendering.SceneInvalidatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Rendering.SceneInvalidatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SceneInvalidated += x, x => _data.SceneInvalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.IRenderer"/> class as observables.
    /// </summary>
    public class RxIRendererEvents
    {
        private readonly global::Avalonia.Rendering.IRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.IRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIRendererEvents(global::Avalonia.Rendering.IRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.IRenderer.SceneInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Rendering.SceneInvalidatedEventArgs> SceneInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Rendering.SceneInvalidatedEventArgs>, global::Avalonia.Rendering.SceneInvalidatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Rendering.SceneInvalidatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SceneInvalidated += x, x => _data.SceneInvalidated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Rendering.IRenderTimer"/> class as observables.
    /// </summary>
    public class RxIRenderTimerEvents
    {
        private readonly global::Avalonia.Rendering.IRenderTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Rendering.IRenderTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIRenderTimerEvents(global::Avalonia.Rendering.IRenderTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Rendering.IRenderTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.TimeSpan> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.Action<global::System.TimeSpan>, global::System.TimeSpan>(eventHandler =>
        {
            void Handler(global::System.TimeSpan obj) => eventHandler(obj);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }
}

namespace Avalonia.Styling
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Styling"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Styling.Style"/> class.
        /// </summary>
        public static RxStyleEvents Events(this global::Avalonia.Styling.Style item) => new RxStyleEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Styling.Styles"/> class.
        /// </summary>
        public static RxStylesEvents Events(this global::Avalonia.Styling.Styles item) => new RxStylesEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Styling.Style"/> class as observables.
    /// </summary>
    public class RxStyleEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Styling.Style _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Styling.Style"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStyleEvents(global::Avalonia.Styling.Style data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Styling.Style.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Styling.Styles"/> class as observables.
    /// </summary>
    public class RxStylesEvents : global::Avalonia.RxAvaloniaObjectEvents
    {
        private readonly global::Avalonia.Styling.Styles _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Styling.Styles"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStylesEvents(global::Avalonia.Styling.Styles data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Styling.Styles.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Styling.Styles.ResourcesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.Controls.ResourcesChangedEventArgs> ResourcesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.Controls.ResourcesChangedEventArgs>, global::Avalonia.Controls.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.Controls.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResourcesChanged += x, x => _data.ResourcesChanged -= x);
    }
}

namespace Avalonia.Threading
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.Threading"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.Threading.DispatcherTimer"/> class.
        /// </summary>
        public static RxDispatcherTimerEvents Events(this global::Avalonia.Threading.DispatcherTimer item) => new RxDispatcherTimerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.Threading.DispatcherTimer"/> class as observables.
    /// </summary>
    public class RxDispatcherTimerEvents
    {
        private readonly global::Avalonia.Threading.DispatcherTimer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.Threading.DispatcherTimer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDispatcherTimerEvents(global::Avalonia.Threading.DispatcherTimer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.Threading.DispatcherTimer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }
}

namespace Avalonia.VisualTree
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Avalonia.VisualTree"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Avalonia.VisualTree.IVisual"/> class.
        /// </summary>
        public static RxIVisualEvents Events(this global::Avalonia.VisualTree.IVisual item) => new RxIVisualEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Avalonia.VisualTree.IVisual"/> class as observables.
    /// </summary>
    public class RxIVisualEvents
    {
        private readonly global::Avalonia.VisualTree.IVisual _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Avalonia.VisualTree.IVisual"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIVisualEvents(global::Avalonia.VisualTree.IVisual data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.VisualTree.IVisual.AttachedToVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> AttachedToVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AttachedToVisualTree += x, x => _data.AttachedToVisualTree -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Avalonia.VisualTree.IVisual.DetachedFromVisualTree"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Avalonia.VisualTreeAttachmentEventArgs> DetachedFromVisualTree => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Avalonia.VisualTreeAttachmentEventArgs>, global::Avalonia.VisualTreeAttachmentEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Avalonia.VisualTreeAttachmentEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DetachedFromVisualTree += x, x => _data.DetachedFromVisualTree -= x);
    }
}