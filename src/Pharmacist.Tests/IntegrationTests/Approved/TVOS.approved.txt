// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;

using global::Pharmacist.Common;

namespace AudioToolbox
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AudioToolbox"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.AudioConverter"/> class.
        /// </summary>
        public static AudioConverterEvents Events(this global::AudioToolbox.AudioConverter item) => new AudioConverterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.InputAudioQueue"/> class.
        /// </summary>
        public static InputAudioQueueEvents Events(this global::AudioToolbox.InputAudioQueue item) => new InputAudioQueueEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class.
        /// </summary>
        public static OutputAudioQueueEvents Events(this global::AudioToolbox.OutputAudioQueue item) => new OutputAudioQueueEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.AudioConverter"/> class as observables.
    /// </summary>
    public class AudioConverterEvents
    {
        private readonly global::AudioToolbox.AudioConverter _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.AudioConverter"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioConverterEvents(global::AudioToolbox.AudioConverter data)
        {
            _data = data;
        }
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.InputAudioQueue"/> class as observables.
    /// </summary>
    public class InputAudioQueueEvents
    {
        private readonly global::AudioToolbox.InputAudioQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.InputAudioQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public InputAudioQueueEvents(global::AudioToolbox.InputAudioQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.InputAudioQueue.InputCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AudioToolbox.InputCompletedEventArgs> InputCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AudioToolbox.InputCompletedEventArgs>, global::AudioToolbox.InputCompletedEventArgs>(x => _data.InputCompleted += x, x => _data.InputCompleted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class as observables.
    /// </summary>
    public class OutputAudioQueueEvents
    {
        private readonly global::AudioToolbox.OutputAudioQueue _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AudioToolbox.OutputAudioQueue"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public OutputAudioQueueEvents(global::AudioToolbox.OutputAudioQueue data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AudioToolbox.OutputAudioQueue.BufferCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AudioToolbox.BufferCompletedEventArgs> BufferCompleted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AudioToolbox.BufferCompletedEventArgs>, global::AudioToolbox.BufferCompletedEventArgs>(x => _data.BufferCompleted += x, x => _data.BufferCompleted -= x).Select(x => x.EventArgs);
    }
}

namespace AVFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "AVFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVAudioPlayer"/> class.
        /// </summary>
        public static AVAudioPlayerEvents Events(this global::AVFoundation.AVAudioPlayer item) => new AVAudioPlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class.
        /// </summary>
        public static AVSpeechSynthesizerEvents Events(this global::AVFoundation.AVSpeechSynthesizer item) => new AVSpeechSynthesizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVAudioPlayer"/> class as observables.
    /// </summary>
    public class AVAudioPlayerEvents
    {
        private readonly global::AVFoundation.AVAudioPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVAudioPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVAudioPlayerEvents(global::AVFoundation.AVAudioPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.BeginInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginInterruption += x, x => _data.BeginInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.DecoderError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVErrorEventArgs> DecoderError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVErrorEventArgs>, global::AVFoundation.AVErrorEventArgs>(x => _data.DecoderError += x, x => _data.DecoderError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.EndInterruption"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndInterruption => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndInterruption += x, x => _data.EndInterruption -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayer.FinishedPlaying"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVStatusEventArgs> FinishedPlaying => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVStatusEventArgs>, global::AVFoundation.AVStatusEventArgs>(x => _data.FinishedPlaying += x, x => _data.FinishedPlaying -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class as observables.
    /// </summary>
    public class AVSpeechSynthesizerEvents
    {
        private readonly global::AVFoundation.AVSpeechSynthesizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::AVFoundation.AVSpeechSynthesizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AVSpeechSynthesizerEvents(global::AVFoundation.AVSpeechSynthesizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidCancelSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidCancelSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidCancelSpeechUtterance += x, x => _data.DidCancelSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidContinueSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidContinueSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidContinueSpeechUtterance += x, x => _data.DidContinueSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidFinishSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidFinishSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidFinishSpeechUtterance += x, x => _data.DidFinishSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidPauseSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidPauseSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidPauseSpeechUtterance += x, x => _data.DidPauseSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.DidStartSpeechUtterance"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs> DidStartSpeechUtterance => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>, global::AVFoundation.AVSpeechSynthesizerUteranceEventArgs>(x => _data.DidStartSpeechUtterance += x, x => _data.DidStartSpeechUtterance -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizer.WillSpeakRangeOfSpeechString"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs> WillSpeakRangeOfSpeechString => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs>, global::AVFoundation.AVSpeechSynthesizerWillSpeakEventArgs>(x => _data.WillSpeakRangeOfSpeechString += x, x => _data.WillSpeakRangeOfSpeechString -= x).Select(x => x.EventArgs);
    }
}

namespace CoreAnimation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreAnimation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreAnimation.CAAnimation"/> class.
        /// </summary>
        public static CAAnimationEvents Events(this global::CoreAnimation.CAAnimation item) => new CAAnimationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreAnimation.CAAnimation"/> class as observables.
    /// </summary>
    public class CAAnimationEvents
    {
        private readonly global::CoreAnimation.CAAnimation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreAnimation.CAAnimation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CAAnimationEvents(global::CoreAnimation.CAAnimation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimation.AnimationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationStarted += x, x => _data.AnimationStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimation.AnimationStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CAAnimationStateEventArgs> AnimationStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreAnimation.CAAnimationStateEventArgs>, global::CoreAnimation.CAAnimationStateEventArgs>(x => _data.AnimationStopped += x, x => _data.AnimationStopped -= x).Select(x => x.EventArgs);
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreBluetooth"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        public static CBCentralManagerEvents Events(this global::CoreBluetooth.CBCentralManager item) => new CBCentralManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        public static CBPeripheralEvents Events(this global::CoreBluetooth.CBPeripheral item) => new CBPeripheralEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        public static CBPeripheralManagerEvents Events(this global::CoreBluetooth.CBPeripheralManager item) => new CBPeripheralManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBCentralManager"/> class as observables.
    /// </summary>
    public class CBCentralManagerEvents
    {
        private readonly global::CoreBluetooth.CBCentralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBCentralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBCentralManagerEvents(global::CoreBluetooth.CBCentralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.ConnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralEventArgs> ConnectedPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralEventArgs>, global::CoreBluetooth.CBPeripheralEventArgs>(x => _data.ConnectedPeripheral += x, x => _data.ConnectedPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.DisconnectedPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> DisconnectedPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(x => _data.DisconnectedPeripheral += x, x => _data.DisconnectedPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.DiscoveredPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs> DiscoveredPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>, global::CoreBluetooth.CBDiscoveredPeripheralEventArgs>(x => _data.DiscoveredPeripheral += x, x => _data.DiscoveredPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.FailedToConnectPeripheral"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralErrorEventArgs> FailedToConnectPeripheral => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralErrorEventArgs>, global::CoreBluetooth.CBPeripheralErrorEventArgs>(x => _data.FailedToConnectPeripheral += x, x => _data.FailedToConnectPeripheral -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.UpdatedState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UpdatedState += x, x => _data.UpdatedState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheral"/> class as observables.
    /// </summary>
    public class CBPeripheralEvents
    {
        private readonly global::CoreBluetooth.CBPeripheral _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheral"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBPeripheralEvents(global::CoreBluetooth.CBPeripheral data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralOpenL2CapChannelEventArgs>(x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredCharacteristic"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredCharacteristic => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(x => _data.DiscoveredCharacteristic += x, x => _data.DiscoveredCharacteristic -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredDescriptor"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> DiscoveredDescriptor => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.DiscoveredDescriptor += x, x => _data.DiscoveredDescriptor -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredIncludedService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBServiceEventArgs> DiscoveredIncludedService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBServiceEventArgs>, global::CoreBluetooth.CBServiceEventArgs>(x => _data.DiscoveredIncludedService += x, x => _data.DiscoveredIncludedService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.DiscoveredService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DiscoveredService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DiscoveredService += x, x => _data.DiscoveredService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.IsReadyToSendWriteWithoutResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsReadyToSendWriteWithoutResponse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.IsReadyToSendWriteWithoutResponse += x, x => _data.IsReadyToSendWriteWithoutResponse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.ModifiedServices"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralServicesEventArgs> ModifiedServices => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralServicesEventArgs>, global::CoreBluetooth.CBPeripheralServicesEventArgs>(x => _data.ModifiedServices += x, x => _data.ModifiedServices -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.RssiRead"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBRssiEventArgs> RssiRead => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBRssiEventArgs>, global::CoreBluetooth.CBRssiEventArgs>(x => _data.RssiRead += x, x => _data.RssiRead -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.RssiUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> RssiUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.RssiUpdated += x, x => _data.RssiUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedCharacterteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedCharacterteristicValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.UpdatedCharacterteristicValue += x, x => _data.UpdatedCharacterteristicValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedName"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UpdatedName => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.UpdatedName += x, x => _data.UpdatedName -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedNotificationState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> UpdatedNotificationState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.UpdatedNotificationState += x, x => _data.UpdatedNotificationState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.UpdatedValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> UpdatedValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(x => _data.UpdatedValue += x, x => _data.UpdatedValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.WroteCharacteristicValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCharacteristicEventArgs> WroteCharacteristicValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBCharacteristicEventArgs>, global::CoreBluetooth.CBCharacteristicEventArgs>(x => _data.WroteCharacteristicValue += x, x => _data.WroteCharacteristicValue -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheral.WroteDescriptorValue"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBDescriptorEventArgs> WroteDescriptorValue => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBDescriptorEventArgs>, global::CoreBluetooth.CBDescriptorEventArgs>(x => _data.WroteDescriptorValue += x, x => _data.WroteDescriptorValue -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class as observables.
    /// </summary>
    public class CBPeripheralManagerEvents
    {
        private readonly global::CoreBluetooth.CBPeripheralManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreBluetooth.CBPeripheralManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CBPeripheralManagerEvents(global::CoreBluetooth.CBPeripheralManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.AdvertisingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> AdvertisingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.AdvertisingStarted += x, x => _data.AdvertisingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.CharacteristicSubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicSubscribed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(x => _data.CharacteristicSubscribed += x, x => _data.CharacteristicSubscribed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.CharacteristicUnsubscribed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs> CharacteristicUnsubscribed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>, global::CoreBluetooth.CBPeripheralManagerSubscriptionEventArgs>(x => _data.CharacteristicUnsubscribed += x, x => _data.CharacteristicUnsubscribed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidOpenL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs> DidOpenL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>, global::CoreBluetooth.CBPeripheralManagerOpenL2CapChannelEventArgs>(x => _data.DidOpenL2CapChannel += x, x => _data.DidOpenL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidPublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidPublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(x => _data.DidPublishL2CapChannel += x, x => _data.DidPublishL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.DidUnpublishL2CapChannel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs> DidUnpublishL2CapChannel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>, global::CoreBluetooth.CBPeripheralManagerL2CapChannelOperationEventArgs>(x => _data.DidUnpublishL2CapChannel += x, x => _data.DidUnpublishL2CapChannel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ReadRequestReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestEventArgs> ReadRequestReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBATTRequestEventArgs>, global::CoreBluetooth.CBATTRequestEventArgs>(x => _data.ReadRequestReceived += x, x => _data.ReadRequestReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ReadyToUpdateSubscribers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadyToUpdateSubscribers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ReadyToUpdateSubscribers += x, x => _data.ReadyToUpdateSubscribers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.ServiceAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs> ServiceAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>, global::CoreBluetooth.CBPeripheralManagerServiceEventArgs>(x => _data.ServiceAdded += x, x => _data.ServiceAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.StateUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StateUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.StateUpdated += x, x => _data.StateUpdated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.WillRestoreState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBWillRestoreEventArgs> WillRestoreState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBWillRestoreEventArgs>, global::CoreBluetooth.CBWillRestoreEventArgs>(x => _data.WillRestoreState += x, x => _data.WillRestoreState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManager.WriteRequestsReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBATTRequestsEventArgs> WriteRequestsReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreBluetooth.CBATTRequestsEventArgs>, global::CoreBluetooth.CBATTRequestsEventArgs>(x => _data.WriteRequestsReceived += x, x => _data.WriteRequestsReceived -= x).Select(x => x.EventArgs);
    }
}

namespace CoreFoundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreFoundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        public static CFSocketEvents Events(this global::CoreFoundation.CFSocket item) => new CFSocketEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        public static CFStreamEvents Events(this global::CoreFoundation.CFStream item) => new CFStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFSocket"/> class as observables.
    /// </summary>
    public class CFSocketEvents
    {
        private readonly global::CoreFoundation.CFSocket _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFSocket"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CFSocketEvents(global::CoreFoundation.CFSocket data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.AcceptEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs> AcceptEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>, global::CoreFoundation.CFSocket.CFSocketAcceptEventArgs>(x => _data.AcceptEvent += x, x => _data.AcceptEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.ConnectEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs> ConnectEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>, global::CoreFoundation.CFSocket.CFSocketConnectEventArgs>(x => _data.ConnectEvent += x, x => _data.ConnectEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.DataEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketDataEventArgs> DataEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketDataEventArgs>, global::CoreFoundation.CFSocket.CFSocketDataEventArgs>(x => _data.DataEvent += x, x => _data.DataEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.ReadEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketReadEventArgs> ReadEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketReadEventArgs>, global::CoreFoundation.CFSocket.CFSocketReadEventArgs>(x => _data.ReadEvent += x, x => _data.ReadEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFSocket.WriteEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs> WriteEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>, global::CoreFoundation.CFSocket.CFSocketWriteEventArgs>(x => _data.WriteEvent += x, x => _data.WriteEvent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreFoundation.CFStream"/> class as observables.
    /// </summary>
    public class CFStreamEvents
    {
        private readonly global::CoreFoundation.CFStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreFoundation.CFStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CFStreamEvents(global::CoreFoundation.CFStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.CanAcceptBytesEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> CanAcceptBytesEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.CanAcceptBytesEvent += x, x => _data.CanAcceptBytesEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.ClosedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ClosedEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.ClosedEvent += x, x => _data.ClosedEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.ErrorEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> ErrorEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.ErrorEvent += x, x => _data.ErrorEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.HasBytesAvailableEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> HasBytesAvailableEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.HasBytesAvailableEvent += x, x => _data.HasBytesAvailableEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreFoundation.CFStream.OpenCompletedEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreFoundation.CFStream.StreamEventArgs> OpenCompletedEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreFoundation.CFStream.StreamEventArgs>, global::CoreFoundation.CFStream.StreamEventArgs>(x => _data.OpenCompletedEvent += x, x => _data.OpenCompletedEvent -= x).Select(x => x.EventArgs);
    }
}

namespace CoreLocation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "CoreLocation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        public static CLLocationManagerEvents Events(this global::CoreLocation.CLLocationManager item) => new CLLocationManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::CoreLocation.CLLocationManager"/> class as observables.
    /// </summary>
    public class CLLocationManagerEvents
    {
        private readonly global::CoreLocation.CLLocationManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::CoreLocation.CLLocationManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CLLocationManagerEvents(global::CoreLocation.CLLocationManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.AuthorizationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLAuthorizationChangedEventArgs> AuthorizationChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLAuthorizationChangedEventArgs>, global::CoreLocation.CLAuthorizationChangedEventArgs>(x => _data.AuthorizationChanged += x, x => _data.AuthorizationChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManager.LocationsUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::CoreLocation.CLLocationsUpdatedEventArgs> LocationsUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::CoreLocation.CLLocationsUpdatedEventArgs>, global::CoreLocation.CLLocationsUpdatedEventArgs>(x => _data.LocationsUpdated += x, x => _data.LocationsUpdated -= x).Select(x => x.EventArgs);
    }
}

namespace ExternalAccessory
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "ExternalAccessory"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ExternalAccessory.EAAccessory"/> class.
        /// </summary>
        public static EAAccessoryEvents Events(this global::ExternalAccessory.EAAccessory item) => new EAAccessoryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ExternalAccessory.EAAccessory"/> class as observables.
    /// </summary>
    public class EAAccessoryEvents
    {
        private readonly global::ExternalAccessory.EAAccessory _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ExternalAccessory.EAAccessory"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EAAccessoryEvents(global::ExternalAccessory.EAAccessory data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAAccessory.Disconnected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disconnected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Disconnected += x, x => _data.Disconnected -= x).Select(x => x.EventArgs);
    }
}

namespace Foundation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Foundation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        public static NSCacheEvents Events(this global::Foundation.NSCache item) => new NSCacheEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        public static NSKeyedArchiverEvents Events(this global::Foundation.NSKeyedArchiver item) => new NSKeyedArchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        public static NSKeyedUnarchiverEvents Events(this global::Foundation.NSKeyedUnarchiver item) => new NSKeyedUnarchiverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSNetService"/> class.
        /// </summary>
        public static NSNetServiceEvents Events(this global::Foundation.NSNetService item) => new NSNetServiceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSNetServiceBrowser"/> class.
        /// </summary>
        public static NSNetServiceBrowserEvents Events(this global::Foundation.NSNetServiceBrowser item) => new NSNetServiceBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        public static NSStreamEvents Events(this global::Foundation.NSStream item) => new NSStreamEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSCache"/> class as observables.
    /// </summary>
    public class NSCacheEvents
    {
        private readonly global::Foundation.NSCache _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSCache"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSCacheEvents(global::Foundation.NSCache data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSCache.WillEvictObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> WillEvictObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(x => _data.WillEvictObject += x, x => _data.WillEvictObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedArchiver"/> class as observables.
    /// </summary>
    public class NSKeyedArchiverEvents
    {
        private readonly global::Foundation.NSKeyedArchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedArchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSKeyedArchiverEvents(global::Foundation.NSKeyedArchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.EncodedObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSObjectEventArgs> EncodedObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSObjectEventArgs>, global::Foundation.NSObjectEventArgs>(x => _data.EncodedObject += x, x => _data.EncodedObject -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finishing += x, x => _data.Finishing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class as observables.
    /// </summary>
    public class NSKeyedUnarchiverEvents
    {
        private readonly global::Foundation.NSKeyedUnarchiver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSKeyedUnarchiver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSKeyedUnarchiverEvents(global::Foundation.NSKeyedUnarchiver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.Finishing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finishing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finishing += x, x => _data.Finishing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiver.ReplacingObject"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSArchiveReplaceEventArgs> ReplacingObject => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSArchiveReplaceEventArgs>, global::Foundation.NSArchiveReplaceEventArgs>(x => _data.ReplacingObject += x, x => _data.ReplacingObject -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSNetService"/> class as observables.
    /// </summary>
    public class NSNetServiceEvents
    {
        private readonly global::Foundation.NSNetService _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSNetService"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSNetServiceEvents(global::Foundation.NSNetService data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.AddressResolved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AddressResolved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AddressResolved += x, x => _data.AddressResolved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.DidAcceptConnection"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceConnectionEventArgs> DidAcceptConnection => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceConnectionEventArgs>, global::Foundation.NSNetServiceConnectionEventArgs>(x => _data.DidAcceptConnection += x, x => _data.DidAcceptConnection -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.Published"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Published => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Published += x, x => _data.Published -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.PublishFailure"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> PublishFailure => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.PublishFailure += x, x => _data.PublishFailure -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.ResolveFailure"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> ResolveFailure => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.ResolveFailure += x, x => _data.ResolveFailure -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.Stopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Stopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Stopped += x, x => _data.Stopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.UpdatedTxtRecordData"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceDataEventArgs> UpdatedTxtRecordData => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceDataEventArgs>, global::Foundation.NSNetServiceDataEventArgs>(x => _data.UpdatedTxtRecordData += x, x => _data.UpdatedTxtRecordData -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.WillPublish"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillPublish => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillPublish += x, x => _data.WillPublish -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetService.WillResolve"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillResolve => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillResolve += x, x => _data.WillResolve -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSNetServiceBrowser"/> class as observables.
    /// </summary>
    public class NSNetServiceBrowserEvents
    {
        private readonly global::Foundation.NSNetServiceBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSNetServiceBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSNetServiceBrowserEvents(global::Foundation.NSNetServiceBrowser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.DomainRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetDomainEventArgs> DomainRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetDomainEventArgs>, global::Foundation.NSNetDomainEventArgs>(x => _data.DomainRemoved += x, x => _data.DomainRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.FoundDomain"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetDomainEventArgs> FoundDomain => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetDomainEventArgs>, global::Foundation.NSNetDomainEventArgs>(x => _data.FoundDomain += x, x => _data.FoundDomain -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.FoundService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceEventArgs> FoundService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceEventArgs>, global::Foundation.NSNetServiceEventArgs>(x => _data.FoundService += x, x => _data.FoundService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.NotSearched"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceErrorEventArgs> NotSearched => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceErrorEventArgs>, global::Foundation.NSNetServiceErrorEventArgs>(x => _data.NotSearched += x, x => _data.NotSearched -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.SearchStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchStarted += x, x => _data.SearchStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.SearchStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchStopped += x, x => _data.SearchStopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowser.ServiceRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceEventArgs> ServiceRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSNetServiceEventArgs>, global::Foundation.NSNetServiceEventArgs>(x => _data.ServiceRemoved += x, x => _data.ServiceRemoved -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Foundation.NSStream"/> class as observables.
    /// </summary>
    public class NSStreamEvents
    {
        private readonly global::Foundation.NSStream _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Foundation.NSStream"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSStreamEvents(global::Foundation.NSStream data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSStream.OnEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSStreamEventArgs> OnEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSStreamEventArgs>, global::Foundation.NSStreamEventArgs>(x => _data.OnEvent += x, x => _data.OnEvent -= x).Select(x => x.EventArgs);
    }
}

namespace GameKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "GameKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKGameCenterViewController"/> class.
        /// </summary>
        public static GKGameCenterViewControllerEvents Events(this global::GameKit.GKGameCenterViewController item) => new GKGameCenterViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKMatch"/> class.
        /// </summary>
        public static GKMatchEvents Events(this global::GameKit.GKMatch item) => new GKMatchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GameKit.GKMatchmakerViewController"/> class.
        /// </summary>
        public static GKMatchmakerViewControllerEvents Events(this global::GameKit.GKMatchmakerViewController item) => new GKMatchmakerViewControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKGameCenterViewController"/> class as observables.
    /// </summary>
    public class GKGameCenterViewControllerEvents
    {
        private readonly global::GameKit.GKGameCenterViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKGameCenterViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKGameCenterViewControllerEvents(global::GameKit.GKGameCenterViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKGameCenterViewController.Finished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Finished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Finished += x, x => _data.Finished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKMatch"/> class as observables.
    /// </summary>
    public class GKMatchEvents
    {
        private readonly global::GameKit.GKMatch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKMatch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKMatchEvents(global::GameKit.GKMatch data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceivedForRecipient"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKDataReceivedForRecipientEventArgs> DataReceivedForRecipient => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKDataReceivedForRecipientEventArgs>, global::GameKit.GKDataReceivedForRecipientEventArgs>(x => _data.DataReceivedForRecipient += x, x => _data.DataReceivedForRecipient -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.DataReceivedFromPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs> DataReceivedFromPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs>, global::GameKit.GKMatchReceivedDataFromRemotePlayerEventArgs>(x => _data.DataReceivedFromPlayer += x, x => _data.DataReceivedFromPlayer -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.Failed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKErrorEventArgs> Failed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKErrorEventArgs>, global::GameKit.GKErrorEventArgs>(x => _data.Failed += x, x => _data.Failed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatch.StateChangedForPlayer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchConnectionChangedEventArgs> StateChangedForPlayer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchConnectionChangedEventArgs>, global::GameKit.GKMatchConnectionChangedEventArgs>(x => _data.StateChangedForPlayer += x, x => _data.StateChangedForPlayer -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GameKit.GKMatchmakerViewController"/> class as observables.
    /// </summary>
    public class GKMatchmakerViewControllerEvents
    {
        private readonly global::GameKit.GKMatchmakerViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GameKit.GKMatchmakerViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GKMatchmakerViewControllerEvents(global::GameKit.GKMatchmakerViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFailWithError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKErrorEventArgs> DidFailWithError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKErrorEventArgs>, global::GameKit.GKErrorEventArgs>(x => _data.DidFailWithError += x, x => _data.DidFailWithError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindHostedPlayers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakingPlayersEventArgs> DidFindHostedPlayers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchmakingPlayersEventArgs>, global::GameKit.GKMatchmakingPlayersEventArgs>(x => _data.DidFindHostedPlayers += x, x => _data.DidFindHostedPlayers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.DidFindMatch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchEventArgs> DidFindMatch => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchEventArgs>, global::GameKit.GKMatchEventArgs>(x => _data.DidFindMatch += x, x => _data.DidFindMatch -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.HostedPlayerDidAccept"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakingPlayerEventArgs> HostedPlayerDidAccept => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GameKit.GKMatchmakingPlayerEventArgs>, global::GameKit.GKMatchmakingPlayerEventArgs>(x => _data.HostedPlayerDidAccept += x, x => _data.HostedPlayerDidAccept -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewController.WasCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WasCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WasCancelled += x, x => _data.WasCancelled -= x).Select(x => x.EventArgs);
    }
}

namespace GLKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "GLKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::GLKit.GLKView"/> class.
        /// </summary>
        public static GLKViewEvents Events(this global::GLKit.GLKView item) => new GLKViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::GLKit.GLKView"/> class as observables.
    /// </summary>
    public class GLKViewEvents
    {
        private readonly global::GLKit.GLKView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::GLKit.GLKView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GLKViewEvents(global::GLKit.GLKView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKView.DrawInRect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::GLKit.GLKViewDrawEventArgs> DrawInRect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::GLKit.GLKViewDrawEventArgs>, global::GLKit.GLKViewDrawEventArgs>(x => _data.DrawInRect += x, x => _data.DrawInRect -= x).Select(x => x.EventArgs);
    }
}

namespace HomeKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "HomeKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMAccessory"/> class.
        /// </summary>
        public static HMAccessoryEvents Events(this global::HomeKit.HMAccessory item) => new HMAccessoryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMHome"/> class.
        /// </summary>
        public static HMHomeEvents Events(this global::HomeKit.HMHome item) => new HMHomeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::HomeKit.HMHomeManager"/> class.
        /// </summary>
        public static HMHomeManagerEvents Events(this global::HomeKit.HMHomeManager item) => new HMHomeManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMAccessory"/> class as observables.
    /// </summary>
    public class HMAccessoryEvents
    {
        private readonly global::HomeKit.HMAccessory _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMAccessory"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HMAccessoryEvents(global::HomeKit.HMAccessory data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidAddProfile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryProfileEventArgs> DidAddProfile => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryProfileEventArgs>, global::HomeKit.HMAccessoryProfileEventArgs>(x => _data.DidAddProfile += x, x => _data.DidAddProfile -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidRemoveProfile"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryProfileEventArgs> DidRemoveProfile => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryProfileEventArgs>, global::HomeKit.HMAccessoryProfileEventArgs>(x => _data.DidRemoveProfile += x, x => _data.DidRemoveProfile -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateAssociatedServiceType"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryUpdateEventArgs> DidUpdateAssociatedServiceType => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryUpdateEventArgs>, global::HomeKit.HMAccessoryUpdateEventArgs>(x => _data.DidUpdateAssociatedServiceType += x, x => _data.DidUpdateAssociatedServiceType -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateFirmwareVersion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryFirmwareVersionEventArgs> DidUpdateFirmwareVersion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryFirmwareVersionEventArgs>, global::HomeKit.HMAccessoryFirmwareVersionEventArgs>(x => _data.DidUpdateFirmwareVersion += x, x => _data.DidUpdateFirmwareVersion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateName"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateName => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateName += x, x => _data.DidUpdateName -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateNameForService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryUpdateEventArgs> DidUpdateNameForService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryUpdateEventArgs>, global::HomeKit.HMAccessoryUpdateEventArgs>(x => _data.DidUpdateNameForService += x, x => _data.DidUpdateNameForService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateReachability"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateReachability => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateReachability += x, x => _data.DidUpdateReachability -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateServices"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateServices => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateServices += x, x => _data.DidUpdateServices -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessory.DidUpdateValueForCharacteristic"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs> DidUpdateValueForCharacteristic => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs>, global::HomeKit.HMAccessoryServiceUpdateCharacteristicEventArgs>(x => _data.DidUpdateValueForCharacteristic += x, x => _data.DidUpdateValueForCharacteristic -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMHome"/> class as observables.
    /// </summary>
    public class HMHomeEvents
    {
        private readonly global::HomeKit.HMHome _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMHome"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HMHomeEvents(global::HomeKit.HMHome data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidAddAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(x => _data.DidAddAccessory += x, x => _data.DidAddAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidAddActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidAddActionSet += x, x => _data.DidAddActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidAddRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(x => _data.DidAddRoom += x, x => _data.DidAddRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddRoomToZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomZoneEventArgs> DidAddRoomToZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomZoneEventArgs>, global::HomeKit.HMHomeRoomZoneEventArgs>(x => _data.DidAddRoomToZone += x, x => _data.DidAddRoomToZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceServiceGroupEventArgs> DidAddService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceServiceGroupEventArgs>, global::HomeKit.HMHomeServiceServiceGroupEventArgs>(x => _data.DidAddService += x, x => _data.DidAddService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidAddServiceGroup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(x => _data.DidAddServiceGroup += x, x => _data.DidAddServiceGroup -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidAddTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidAddTrigger += x, x => _data.DidAddTrigger -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeUserEventArgs> DidAddUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeUserEventArgs>, global::HomeKit.HMHomeUserEventArgs>(x => _data.DidAddUser += x, x => _data.DidAddUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidAddZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidAddZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(x => _data.DidAddZone += x, x => _data.DidAddZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidEncounterError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeErrorAccessoryEventArgs> DidEncounterError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeErrorAccessoryEventArgs>, global::HomeKit.HMHomeErrorAccessoryEventArgs>(x => _data.DidEncounterError += x, x => _data.DidEncounterError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidRemoveAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(x => _data.DidRemoveAccessory += x, x => _data.DidRemoveAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidRemoveActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidRemoveActionSet += x, x => _data.DidRemoveActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidRemoveRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(x => _data.DidRemoveRoom += x, x => _data.DidRemoveRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveRoomFromZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomZoneEventArgs> DidRemoveRoomFromZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomZoneEventArgs>, global::HomeKit.HMHomeRoomZoneEventArgs>(x => _data.DidRemoveRoomFromZone += x, x => _data.DidRemoveRoomFromZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveService"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceServiceGroupEventArgs> DidRemoveService => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceServiceGroupEventArgs>, global::HomeKit.HMHomeServiceServiceGroupEventArgs>(x => _data.DidRemoveService += x, x => _data.DidRemoveService -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidRemoveServiceGroup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(x => _data.DidRemoveServiceGroup += x, x => _data.DidRemoveServiceGroup -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidRemoveTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidRemoveTrigger += x, x => _data.DidRemoveTrigger -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeUserEventArgs> DidRemoveUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeUserEventArgs>, global::HomeKit.HMHomeUserEventArgs>(x => _data.DidRemoveUser += x, x => _data.DidRemoveUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidRemoveZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidRemoveZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(x => _data.DidRemoveZone += x, x => _data.DidRemoveZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUnblockAccessory"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeAccessoryEventArgs> DidUnblockAccessory => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeAccessoryEventArgs>, global::HomeKit.HMHomeAccessoryEventArgs>(x => _data.DidUnblockAccessory += x, x => _data.DidUnblockAccessory -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateAccessControlForCurrentUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateAccessControlForCurrentUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateAccessControlForCurrentUser += x, x => _data.DidUpdateAccessControlForCurrentUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateActionsForActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidUpdateActionsForActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidUpdateActionsForActionSet += x, x => _data.DidUpdateActionsForActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateHomeHubState"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeHubStateEventArgs> DidUpdateHomeHubState => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeHubStateEventArgs>, global::HomeKit.HMHomeHubStateEventArgs>(x => _data.DidUpdateHomeHubState += x, x => _data.DidUpdateHomeHubState -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForActionSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeActionSetEventArgs> DidUpdateNameForActionSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeActionSetEventArgs>, global::HomeKit.HMHomeActionSetEventArgs>(x => _data.DidUpdateNameForActionSet += x, x => _data.DidUpdateNameForActionSet -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateNameForHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateNameForHome += x, x => _data.DidUpdateNameForHome -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomEventArgs> DidUpdateNameForRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomEventArgs>, global::HomeKit.HMHomeRoomEventArgs>(x => _data.DidUpdateNameForRoom += x, x => _data.DidUpdateNameForRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForServiceGroup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeServiceGroupEventArgs> DidUpdateNameForServiceGroup => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeServiceGroupEventArgs>, global::HomeKit.HMHomeServiceGroupEventArgs>(x => _data.DidUpdateNameForServiceGroup += x, x => _data.DidUpdateNameForServiceGroup -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidUpdateNameForTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidUpdateNameForTrigger += x, x => _data.DidUpdateNameForTrigger -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateNameForZone"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeZoneEventArgs> DidUpdateNameForZone => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeZoneEventArgs>, global::HomeKit.HMHomeZoneEventArgs>(x => _data.DidUpdateNameForZone += x, x => _data.DidUpdateNameForZone -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateRoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeRoomAccessoryEventArgs> DidUpdateRoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeRoomAccessoryEventArgs>, global::HomeKit.HMHomeRoomAccessoryEventArgs>(x => _data.DidUpdateRoom += x, x => _data.DidUpdateRoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHome.DidUpdateTrigger"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeTriggerEventArgs> DidUpdateTrigger => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeTriggerEventArgs>, global::HomeKit.HMHomeTriggerEventArgs>(x => _data.DidUpdateTrigger += x, x => _data.DidUpdateTrigger -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::HomeKit.HMHomeManager"/> class as observables.
    /// </summary>
    public class HMHomeManagerEvents
    {
        private readonly global::HomeKit.HMHomeManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::HomeKit.HMHomeManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public HMHomeManagerEvents(global::HomeKit.HMHomeManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidAddHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManagerEventArgs> DidAddHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeManagerEventArgs>, global::HomeKit.HMHomeManagerEventArgs>(x => _data.DidAddHome += x, x => _data.DidAddHome -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidRemoveHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManagerEventArgs> DidRemoveHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::HomeKit.HMHomeManagerEventArgs>, global::HomeKit.HMHomeManagerEventArgs>(x => _data.DidRemoveHome += x, x => _data.DidRemoveHome -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidUpdateHomes"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdateHomes => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdateHomes += x, x => _data.DidUpdateHomes -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManager.DidUpdatePrimaryHome"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidUpdatePrimaryHome => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidUpdatePrimaryHome += x, x => _data.DidUpdatePrimaryHome -= x).Select(x => x.EventArgs);
    }
}

namespace MapKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "MapKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::MapKit.MKMapView"/> class.
        /// </summary>
        public static MKMapViewEvents Events(this global::MapKit.MKMapView item) => new MKMapViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::MapKit.MKMapView"/> class as observables.
    /// </summary>
    public class MKMapViewEvents
    {
        private readonly global::MapKit.MKMapView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::MapKit.MKMapView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MKMapViewEvents(global::MapKit.MKMapView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidAddAnnotationViews"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewAnnotationEventArgs> DidAddAnnotationViews => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewAnnotationEventArgs>, global::MapKit.MKMapViewAnnotationEventArgs>(x => _data.DidAddAnnotationViews += x, x => _data.DidAddAnnotationViews -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidAddOverlayRenderers"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKDidAddOverlayRenderersEventArgs> DidAddOverlayRenderers => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKDidAddOverlayRenderersEventArgs>, global::MapKit.MKDidAddOverlayRenderersEventArgs>(x => _data.DidAddOverlayRenderers += x, x => _data.DidAddOverlayRenderers -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidChangeUserTrackingMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MMapViewUserTrackingEventArgs> DidChangeUserTrackingMode => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MMapViewUserTrackingEventArgs>, global::MapKit.MMapViewUserTrackingEventArgs>(x => _data.DidChangeUserTrackingMode += x, x => _data.DidChangeUserTrackingMode -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidChangeVisibleRegion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeVisibleRegion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeVisibleRegion += x, x => _data.DidChangeVisibleRegion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidDeselectAnnotationView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKAnnotationViewEventArgs> DidDeselectAnnotationView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKAnnotationViewEventArgs>, global::MapKit.MKAnnotationViewEventArgs>(x => _data.DidDeselectAnnotationView += x, x => _data.DidDeselectAnnotationView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidFailToLocateUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> DidFailToLocateUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.DidFailToLocateUser += x, x => _data.DidFailToLocateUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidFinishRenderingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKDidFinishRenderingMapEventArgs> DidFinishRenderingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKDidFinishRenderingMapEventArgs>, global::MapKit.MKDidFinishRenderingMapEventArgs>(x => _data.DidFinishRenderingMap += x, x => _data.DidFinishRenderingMap -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidSelectAnnotationView"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKAnnotationViewEventArgs> DidSelectAnnotationView => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKAnnotationViewEventArgs>, global::MapKit.MKAnnotationViewEventArgs>(x => _data.DidSelectAnnotationView += x, x => _data.DidSelectAnnotationView -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidStopLocatingUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidStopLocatingUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidStopLocatingUser += x, x => _data.DidStopLocatingUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.DidUpdateUserLocation"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKUserLocationEventArgs> DidUpdateUserLocation => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKUserLocationEventArgs>, global::MapKit.MKUserLocationEventArgs>(x => _data.DidUpdateUserLocation += x, x => _data.DidUpdateUserLocation -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.LoadingMapFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSErrorEventArgs> LoadingMapFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Foundation.NSErrorEventArgs>, global::Foundation.NSErrorEventArgs>(x => _data.LoadingMapFailed += x, x => _data.LoadingMapFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.MapLoaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MapLoaded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.MapLoaded += x, x => _data.MapLoaded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewChangeEventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewChangeEventArgs>, global::MapKit.MKMapViewChangeEventArgs>(x => _data.RegionChanged += x, x => _data.RegionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.RegionWillChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapViewChangeEventArgs> RegionWillChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::MapKit.MKMapViewChangeEventArgs>, global::MapKit.MKMapViewChangeEventArgs>(x => _data.RegionWillChange += x, x => _data.RegionWillChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartLoadingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLoadingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLoadingMap += x, x => _data.WillStartLoadingMap -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartLocatingUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartLocatingUser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartLocatingUser += x, x => _data.WillStartLocatingUser -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapView.WillStartRenderingMap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WillStartRenderingMap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WillStartRenderingMap += x, x => _data.WillStartRenderingMap -= x).Select(x => x.EventArgs);
    }
}

namespace SceneKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SceneKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        public static SCNPhysicsWorldEvents Events(this global::SceneKit.SCNPhysicsWorld item) => new SCNPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class as observables.
    /// </summary>
    public class SCNPhysicsWorldEvents
    {
        private readonly global::SceneKit.SCNPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SceneKit.SCNPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SCNPhysicsWorldEvents(global::SceneKit.SCNPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidEndContact += x, x => _data.DidEndContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsWorld.DidUpdateContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNPhysicsContactEventArgs> DidUpdateContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::SceneKit.SCNPhysicsContactEventArgs>, global::SceneKit.SCNPhysicsContactEventArgs>(x => _data.DidUpdateContact += x, x => _data.DidUpdateContact -= x).Select(x => x.EventArgs);
    }
}

namespace SpriteKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "SpriteKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        public static SKPhysicsWorldEvents Events(this global::SpriteKit.SKPhysicsWorld item) => new SKPhysicsWorldEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class as observables.
    /// </summary>
    public class SKPhysicsWorldEvents
    {
        private readonly global::SpriteKit.SKPhysicsWorld _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::SpriteKit.SKPhysicsWorld"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKPhysicsWorldEvents(global::SpriteKit.SKPhysicsWorld data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsWorld.DidBeginContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidBeginContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidBeginContact += x, x => _data.DidBeginContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsWorld.DidEndContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidEndContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidEndContact += x, x => _data.DidEndContact -= x).Select(x => x.EventArgs);
    }
}

namespace StoreKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "StoreKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        public static SKProductsRequestEvents Events(this global::StoreKit.SKProductsRequest item) => new SKProductsRequestEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        public static SKRequestEvents Events(this global::StoreKit.SKRequest item) => new SKRequestEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKProductsRequest"/> class as observables.
    /// </summary>
    public class SKProductsRequestEvents
    {
        private readonly global::StoreKit.SKProductsRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKProductsRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKProductsRequestEvents(global::StoreKit.SKProductsRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKProductsRequest.ReceivedResponse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKProductsRequestResponseEventArgs> ReceivedResponse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::StoreKit.SKProductsRequestResponseEventArgs>, global::StoreKit.SKProductsRequestResponseEventArgs>(x => _data.ReceivedResponse += x, x => _data.ReceivedResponse -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::StoreKit.SKRequest"/> class as observables.
    /// </summary>
    public class SKRequestEvents
    {
        private readonly global::StoreKit.SKRequest _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::StoreKit.SKRequest"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SKRequestEvents(global::StoreKit.SKRequest data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequest.RequestFailed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequestErrorEventArgs> RequestFailed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::StoreKit.SKRequestErrorEventArgs>, global::StoreKit.SKRequestErrorEventArgs>(x => _data.RequestFailed += x, x => _data.RequestFailed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequest.RequestFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RequestFinished => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.RequestFinished += x, x => _data.RequestFinished -= x).Select(x => x.EventArgs);
    }
}

namespace UIKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "UIKit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.NSTextStorage"/> class.
        /// </summary>
        public static NSTextStorageEvents Events(this global::UIKit.NSTextStorage item) => new NSTextStorageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIBarButtonItem"/> class.
        /// </summary>
        public static UIBarButtonItemEvents Events(this global::UIKit.UIBarButtonItem item) => new UIBarButtonItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UICollisionBehavior"/> class.
        /// </summary>
        public static UICollisionBehaviorEvents Events(this global::UIKit.UICollisionBehavior item) => new UICollisionBehaviorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIControl"/> class.
        /// </summary>
        public static UIControlEvents Events(this global::UIKit.UIControl item) => new UIControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIPageViewController"/> class.
        /// </summary>
        public static UIPageViewControllerEvents Events(this global::UIKit.UIPageViewController item) => new UIPageViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIPopoverController"/> class.
        /// </summary>
        public static UIPopoverControllerEvents Events(this global::UIKit.UIPopoverController item) => new UIPopoverControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UIScrollView"/> class.
        /// </summary>
        public static UIScrollViewEvents Events(this global::UIKit.UIScrollView item) => new UIScrollViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UISearchBar"/> class.
        /// </summary>
        public static UISearchBarEvents Events(this global::UIKit.UISearchBar item) => new UISearchBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UISplitViewController"/> class.
        /// </summary>
        public static UISplitViewControllerEvents Events(this global::UIKit.UISplitViewController item) => new UISplitViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITabBar"/> class.
        /// </summary>
        public static UITabBarEvents Events(this global::UIKit.UITabBar item) => new UITabBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITabBarController"/> class.
        /// </summary>
        public static UITabBarControllerEvents Events(this global::UIKit.UITabBarController item) => new UITabBarControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITextField"/> class.
        /// </summary>
        public static UITextFieldEvents Events(this global::UIKit.UITextField item) => new UITextFieldEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::UIKit.UITextView"/> class.
        /// </summary>
        public static UITextViewEvents Events(this global::UIKit.UITextView item) => new UITextViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.NSTextStorage"/> class as observables.
    /// </summary>
    public class NSTextStorageEvents
    {
        private readonly global::UIKit.NSTextStorage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.NSTextStorage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NSTextStorageEvents(global::UIKit.NSTextStorage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorage.DidProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSTextStorageEventArgs> DidProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.NSTextStorageEventArgs>, global::UIKit.NSTextStorageEventArgs>(x => _data.DidProcessEditing += x, x => _data.DidProcessEditing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorage.WillProcessEditing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSTextStorageEventArgs> WillProcessEditing => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.NSTextStorageEventArgs>, global::UIKit.NSTextStorageEventArgs>(x => _data.WillProcessEditing += x, x => _data.WillProcessEditing -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIBarButtonItem"/> class as observables.
    /// </summary>
    public class UIBarButtonItemEvents
    {
        private readonly global::UIKit.UIBarButtonItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIBarButtonItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIBarButtonItemEvents(global::UIKit.UIBarButtonItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIBarButtonItem.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UICollisionBehavior"/> class as observables.
    /// </summary>
    public class UICollisionBehaviorEvents
    {
        private readonly global::UIKit.UICollisionBehavior _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UICollisionBehavior"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UICollisionBehaviorEvents(global::UIKit.UICollisionBehavior data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.BeganBoundaryContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionBeganBoundaryContactEventArgs> BeganBoundaryContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionBeganBoundaryContactEventArgs>, global::UIKit.UICollisionBeganBoundaryContactEventArgs>(x => _data.BeganBoundaryContact += x, x => _data.BeganBoundaryContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.BeganContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionBeganContactEventArgs> BeganContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionBeganContactEventArgs>, global::UIKit.UICollisionBeganContactEventArgs>(x => _data.BeganContact += x, x => _data.BeganContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.EndedBoundaryContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionEndedBoundaryContactEventArgs> EndedBoundaryContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionEndedBoundaryContactEventArgs>, global::UIKit.UICollisionEndedBoundaryContactEventArgs>(x => _data.EndedBoundaryContact += x, x => _data.EndedBoundaryContact -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehavior.EndedContact"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UICollisionEndedContactEventArgs> EndedContact => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UICollisionEndedContactEventArgs>, global::UIKit.UICollisionEndedContactEventArgs>(x => _data.EndedContact += x, x => _data.EndedContact -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIControl"/> class as observables.
    /// </summary>
    public class UIControlEvents
    {
        private readonly global::UIKit.UIControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIControlEvents(global::UIKit.UIControl data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.AllEditingEvents"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllEditingEvents => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllEditingEvents += x, x => _data.AllEditingEvents -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.AllEvents"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllEvents => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllEvents += x, x => _data.AllEvents -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.AllTouchEvents"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllTouchEvents => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AllTouchEvents += x, x => _data.AllTouchEvents -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingChanged += x, x => _data.EditingChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingDidBegin"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingDidBegin => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingDidBegin += x, x => _data.EditingDidBegin -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingDidEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingDidEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingDidEnd += x, x => _data.EditingDidEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.EditingDidEndOnExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditingDidEndOnExit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EditingDidEndOnExit += x, x => _data.EditingDidEndOnExit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.PrimaryActionTriggered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PrimaryActionTriggered => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PrimaryActionTriggered += x, x => _data.PrimaryActionTriggered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchCancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchCancel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchCancel += x, x => _data.TouchCancel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDown => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDown += x, x => _data.TouchDown -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDownRepeat"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDownRepeat => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDownRepeat += x, x => _data.TouchDownRepeat -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragEnter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragEnter += x, x => _data.TouchDragEnter -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragExit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragExit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragExit += x, x => _data.TouchDragExit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragInside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragInside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragInside += x, x => _data.TouchDragInside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchDragOutside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchDragOutside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchDragOutside += x, x => _data.TouchDragOutside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchUpInside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchUpInside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchUpInside += x, x => _data.TouchUpInside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.TouchUpOutside"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchUpOutside => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.TouchUpOutside += x, x => _data.TouchUpOutside -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIControl.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIPageViewController"/> class as observables.
    /// </summary>
    public class UIPageViewControllerEvents
    {
        private readonly global::UIKit.UIPageViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIPageViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIPageViewControllerEvents(global::UIKit.UIPageViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewController.DidFinishAnimating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPageViewFinishedAnimationEventArgs> DidFinishAnimating => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPageViewFinishedAnimationEventArgs>, global::UIKit.UIPageViewFinishedAnimationEventArgs>(x => _data.DidFinishAnimating += x, x => _data.DidFinishAnimating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewController.WillTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPageViewControllerTransitionEventArgs> WillTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPageViewControllerTransitionEventArgs>, global::UIKit.UIPageViewControllerTransitionEventArgs>(x => _data.WillTransition += x, x => _data.WillTransition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIPopoverController"/> class as observables.
    /// </summary>
    public class UIPopoverControllerEvents
    {
        private readonly global::UIKit.UIPopoverController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIPopoverController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIPopoverControllerEvents(global::UIKit.UIPopoverController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverController.DidDismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidDismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidDismiss += x, x => _data.DidDismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverController.WillReposition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPopoverControllerRepositionEventArgs> WillReposition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIPopoverControllerRepositionEventArgs>, global::UIKit.UIPopoverControllerRepositionEventArgs>(x => _data.WillReposition += x, x => _data.WillReposition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UIScrollView"/> class as observables.
    /// </summary>
    public class UIScrollViewEvents
    {
        private readonly global::UIKit.UIScrollView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UIScrollView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UIScrollViewEvents(global::UIKit.UIScrollView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DecelerationEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DecelerationEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DecelerationEnded += x, x => _data.DecelerationEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DecelerationStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DecelerationStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DecelerationStarted += x, x => _data.DecelerationStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DidChangeAdjustedContentInset"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidChangeAdjustedContentInset => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidChangeAdjustedContentInset += x, x => _data.DidChangeAdjustedContentInset -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DidZoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DidZoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DidZoom += x, x => _data.DidZoom -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DraggingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.DraggingEventArgs> DraggingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.DraggingEventArgs>, global::UIKit.DraggingEventArgs>(x => _data.DraggingEnded += x, x => _data.DraggingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.DraggingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DraggingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DraggingStarted += x, x => _data.DraggingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ScrollAnimationEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollAnimationEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScrollAnimationEnded += x, x => _data.ScrollAnimationEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Scrolled += x, x => _data.Scrolled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ScrolledToTop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrolledToTop => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScrolledToTop += x, x => _data.ScrolledToTop -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.WillEndDragging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.WillEndDraggingEventArgs> WillEndDragging => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.WillEndDraggingEventArgs>, global::UIKit.WillEndDraggingEventArgs>(x => _data.WillEndDragging += x, x => _data.WillEndDragging -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ZoomingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.ZoomingEndedEventArgs> ZoomingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.ZoomingEndedEventArgs>, global::UIKit.ZoomingEndedEventArgs>(x => _data.ZoomingEnded += x, x => _data.ZoomingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollView.ZoomingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollViewZoomingEventArgs> ZoomingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UIScrollViewZoomingEventArgs>, global::UIKit.UIScrollViewZoomingEventArgs>(x => _data.ZoomingStarted += x, x => _data.ZoomingStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UISearchBar"/> class as observables.
    /// </summary>
    public class UISearchBarEvents
    {
        private readonly global::UIKit.UISearchBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UISearchBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UISearchBarEvents(global::UIKit.UISearchBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.OnEditingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnEditingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OnEditingStarted += x, x => _data.OnEditingStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.OnEditingStopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OnEditingStopped => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.OnEditingStopped += x, x => _data.OnEditingStopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.SearchButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchButtonClicked => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchButtonClicked += x, x => _data.SearchButtonClicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.SelectedScopeButtonIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBarButtonIndexEventArgs> SelectedScopeButtonIndexChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISearchBarButtonIndexEventArgs>, global::UIKit.UISearchBarButtonIndexEventArgs>(x => _data.SelectedScopeButtonIndexChanged += x, x => _data.SelectedScopeButtonIndexChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBarTextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISearchBarTextChangedEventArgs>, global::UIKit.UISearchBarTextChangedEventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UISplitViewController"/> class as observables.
    /// </summary>
    public class UISplitViewControllerEvents
    {
        private readonly global::UIKit.UISplitViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UISplitViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UISplitViewControllerEvents(global::UIKit.UISplitViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewController.WillChangeDisplayMode"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISplitViewControllerDisplayModeEventArgs> WillChangeDisplayMode => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UISplitViewControllerDisplayModeEventArgs>, global::UIKit.UISplitViewControllerDisplayModeEventArgs>(x => _data.WillChangeDisplayMode += x, x => _data.WillChangeDisplayMode -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITabBar"/> class as observables.
    /// </summary>
    public class UITabBarEvents
    {
        private readonly global::UIKit.UITabBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITabBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITabBarEvents(global::UIKit.UITabBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBar.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarItemEventArgs>, global::UIKit.UITabBarItemEventArgs>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITabBarController"/> class as observables.
    /// </summary>
    public class UITabBarControllerEvents
    {
        private readonly global::UIKit.UITabBarController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITabBarController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITabBarControllerEvents(global::UIKit.UITabBarController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarController.ViewControllerSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITabBarSelectionEventArgs> ViewControllerSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITabBarSelectionEventArgs>, global::UIKit.UITabBarSelectionEventArgs>(x => _data.ViewControllerSelected += x, x => _data.ViewControllerSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITextField"/> class as observables.
    /// </summary>
    public class UITextFieldEvents
    {
        private readonly global::UIKit.UITextField _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITextField"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITextFieldEvents(global::UIKit.UITextField data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextField.Ended"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Ended => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Ended += x, x => _data.Ended -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextField.EndedWithReason"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextFieldEditingEndedEventArgs> EndedWithReason => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::UIKit.UITextFieldEditingEndedEventArgs>, global::UIKit.UITextFieldEditingEndedEventArgs>(x => _data.EndedWithReason += x, x => _data.EndedWithReason -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextField.Started"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Started => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Started += x, x => _data.Started -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::UIKit.UITextView"/> class as observables.
    /// </summary>
    public class UITextViewEvents
    {
        private readonly global::UIKit.UITextView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::UIKit.UITextView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UITextViewEvents(global::UIKit.UITextView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.Changed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Changed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Changed += x, x => _data.Changed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.Ended"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Ended => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Ended += x, x => _data.Ended -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextView.Started"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Started => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Started += x, x => _data.Started -= x).Select(x => x.EventArgs);
    }
}

namespace ObjCRuntime
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "ObjCRuntime"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ObjCRuntime.Runtime.MarshalManagedException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalManagedExceptionEventArgs> RuntimeMarshalManagedException => global::System.Reactive.Linq.Observable.FromEventPattern<global::ObjCRuntime.MarshalManagedExceptionHandler, global::ObjCRuntime.MarshalManagedExceptionEventArgs>(x => global::ObjCRuntime.Runtime.MarshalManagedException += x, x => global::ObjCRuntime.Runtime.MarshalManagedException -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ObjCRuntime.Runtime.MarshalObjectiveCException"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs> RuntimeMarshalObjectiveCException => global::System.Reactive.Linq.Observable.FromEventPattern<global::ObjCRuntime.MarshalObjectiveCExceptionHandler, global::ObjCRuntime.MarshalObjectiveCExceptionEventArgs>(x => global::ObjCRuntime.Runtime.MarshalObjectiveCException += x, x => global::ObjCRuntime.Runtime.MarshalObjectiveCException -= x).Select(x => x.EventArgs);
    }
}

namespace UIKit
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "UIKit"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIView.AnimationWillEnd"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Reactive.Unit> UIViewAnimationWillEnd => global::System.Reactive.Linq.Observable.FromEvent(x => global::UIKit.UIView.AnimationWillEnd += x, x => global::UIKit.UIView.AnimationWillEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIView.AnimationWillStart"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.Reactive.Unit> UIViewAnimationWillStart => global::System.Reactive.Linq.Observable.FromEvent(x => global::UIKit.UIView.AnimationWillStart += x, x => global::UIKit.UIView.AnimationWillStart -= x);
    }
}

namespace AVFoundation
{
    [global::System.ObsoleteAttribute("Removed in tvOS 10.", false)]
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAssetDownloadDelegate"/> into Observables.
    /// </summary>
    public partial class AVAssetDownloadDelegateRx : global::AVFoundation.AVAssetDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> _didCompleteWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> _didFinishCollectingMetrics = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location)> _didFinishDownloadingToUrl = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad)> _didLoadTimeRange = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection)> _didResolveMediaSelection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> _didSendBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> _needNewBodyStream = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> _willPerformHttpRedirection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidCompleteWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> DidCompleteWithErrorObs => _didCompleteWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidFinishCollectingMetrics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> DidFinishCollectingMetricsObs => _didFinishCollectingMetrics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidFinishDownloadingToUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location)> DidFinishDownloadingToUrlObs => _didFinishDownloadingToUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidLoadTimeRange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad)> DidLoadTimeRangeObs => _didLoadTimeRange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidResolveMediaSelection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection)> DidResolveMediaSelectionObs => _didResolveMediaSelection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.DidSendBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> DidSendBodyDataObs => _didSendBodyData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.NeedNewBodyStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> NeedNewBodyStreamObs => _needNewBodyStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetDownloadDelegate.WillPerformHttpRedirection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> WillPerformHttpRedirectionObs => _willPerformHttpRedirection;
        /// <inheritdoc/>
        public override void DidCompleteWithError(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error) => _didCompleteWithError.OnNext((session, task, error));
        /// <inheritdoc/>
        public override void DidFinishCollectingMetrics(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics) => _didFinishCollectingMetrics.OnNext((session, task, metrics));
        /// <inheritdoc/>
        public override void DidFinishDownloadingToUrl(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::Foundation.NSUrl location) => _didFinishDownloadingToUrl.OnNext((session, assetDownloadTask, location));
        /// <inheritdoc/>
        public override void DidLoadTimeRange(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::CoreMedia.CMTimeRange timeRange, global::Foundation.NSValue[] loadedTimeRanges, global::CoreMedia.CMTimeRange timeRangeExpectedToLoad) => _didLoadTimeRange.OnNext((session, assetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad));
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, task, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidResolveMediaSelection(global::Foundation.NSUrlSession session, global::AVFoundation.AVAssetDownloadTask assetDownloadTask, global::AVFoundation.AVMediaSelection resolvedMediaSelection) => _didResolveMediaSelection.OnNext((session, assetDownloadTask, resolvedMediaSelection));
        /// <inheritdoc/>
        public override void DidSendBodyData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend) => _didSendBodyData.OnNext((session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend));
        /// <inheritdoc/>
        public override void NeedNewBodyStream(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler) => _needNewBodyStream.OnNext((session, task, completionHandler));
        /// <inheritdoc/>
        public override void WillPerformHttpRedirection(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler) => _willPerformHttpRedirection.OnNext((session, task, response, newRequest, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAssetResourceLoaderDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVAssetResourceLoaderDelegateRx : global::AVFoundation.AVAssetResourceLoaderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)> _didCancelAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)> _didCancelLoadingRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetResourceLoaderDelegate.DidCancelAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge)> DidCancelAuthenticationChallengeObs => _didCancelAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAssetResourceLoaderDelegate.DidCancelLoadingRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest)> DidCancelLoadingRequestObs => _didCancelLoadingRequest;
        /// <inheritdoc/>
        public override void DidCancelAuthenticationChallenge(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::Foundation.NSUrlAuthenticationChallenge authenticationChallenge) => _didCancelAuthenticationChallenge.OnNext((resourceLoader, authenticationChallenge));
        /// <inheritdoc/>
        public override void DidCancelLoadingRequest(global::AVFoundation.AVAssetResourceLoader resourceLoader, global::AVFoundation.AVAssetResourceLoadingRequest loadingRequest) => _didCancelLoadingRequest.OnNext((resourceLoader, loadingRequest));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVAudioPlayerDelegate"/> into Observables.
    /// </summary>
    public partial class AVAudioPlayerDelegateRx : global::AVFoundation.AVAudioPlayerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioPlayer> _beginInterruption = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVAudioPlayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> _decoderError = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> _endInterruption = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)> _finishedPlaying = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVAudioPlayer player, bool flag)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.BeginInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVAudioPlayer> BeginInterruptionObs => _beginInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.DecoderError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error)> DecoderErrorObs => _decoderError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.EndInterruption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags)> EndInterruptionObs => _endInterruption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVAudioPlayerDelegate.FinishedPlaying"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVAudioPlayer player, bool flag)> FinishedPlayingObs => _finishedPlaying;
        /// <inheritdoc/>
        public override void BeginInterruption(global::AVFoundation.AVAudioPlayer player) => _beginInterruption.OnNext(player);
        /// <inheritdoc/>
        public override void DecoderError(global::AVFoundation.AVAudioPlayer player, global::Foundation.NSError error) => _decoderError.OnNext((player, error));
        /// <inheritdoc/>
        public override void EndInterruption(global::AVFoundation.AVAudioPlayer player, global::AVFoundation.AVAudioSessionInterruptionFlags flags) => _endInterruption.OnNext((player, flags));
        /// <inheritdoc/>
        public override void FinishedPlaying(global::AVFoundation.AVAudioPlayer player, bool flag) => _finishedPlaying.OnNext((player, flag));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVContentKeySessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVContentKeySessionDelegateRx : global::AVFoundation.AVContentKeySessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession> _didGenerateExpiredSessionReport = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVContentKeySession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> _didProvidePersistableContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didProvideRenewingContentKeyRequest = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> _didSucceed = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidChangeObs => _didChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidGenerateExpiredSessionReport"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVContentKeySession> DidGenerateExpiredSessionReportObs => _didGenerateExpiredSessionReport;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvideContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideContentKeyRequestObs => _didProvideContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvidePersistableContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest)> DidProvidePersistableContentKeyRequestObs => _didProvidePersistableContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidProvideRenewingContentKeyRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidProvideRenewingContentKeyRequestObs => _didProvideRenewingContentKeyRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVContentKeySessionDelegate.DidSucceed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest)> DidSucceedObs => _didSucceed;
        /// <inheritdoc/>
        public override void DidChange(global::AVFoundation.AVContentKeySession session) => _didChange.OnNext(session);
        /// <inheritdoc/>
        public override void DidFail(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest, global::Foundation.NSError err) => _didFail.OnNext((session, keyRequest, err));
        /// <inheritdoc/>
        public override void DidGenerateExpiredSessionReport(global::AVFoundation.AVContentKeySession session) => _didGenerateExpiredSessionReport.OnNext(session);
        /// <inheritdoc/>
        public override void DidProvideContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvidePersistableContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVPersistableContentKeyRequest keyRequest) => _didProvidePersistableContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidProvideRenewingContentKeyRequest(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didProvideRenewingContentKeyRequest.OnNext((session, keyRequest));
        /// <inheritdoc/>
        public override void DidSucceed(global::AVFoundation.AVContentKeySession session, global::AVFoundation.AVContentKeyRequest keyRequest) => _didSucceed.OnNext((session, keyRequest));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate"/> into Observables.
    /// </summary>
    public abstract partial class AVPlayerItemMetadataCollectorPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataCollectorPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> _didCollectDateRange = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataCollectorPushDelegate.DidCollectDateRange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups)> DidCollectDateRangeObs => _didCollectDateRange;
        /// <inheritdoc/>
        public override void DidCollectDateRange(global::AVFoundation.AVPlayerItemMetadataCollector metadataCollector, global::AVFoundation.AVDateRangeMetadataGroup[] metadataGroups, global::Foundation.NSIndexSet indexesOfNewGroups, global::Foundation.NSIndexSet indexesOfModifiedGroups) => _didCollectDateRange.OnNext((metadataCollector, metadataGroups, indexesOfNewGroups, indexesOfModifiedGroups));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemMetadataOutputPushDelegateRx : global::AVFoundation.AVPlayerItemMetadataOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> _didOutputTimedMetadataGroups = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataOutputPushDelegate.DidOutputTimedMetadataGroups"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track)> DidOutputTimedMetadataGroupsObs => _didOutputTimedMetadataGroups;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemMetadataOutputPushDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void DidOutputTimedMetadataGroups(global::AVFoundation.AVPlayerItemMetadataOutput output, global::AVFoundation.AVTimedMetadataGroup[] groups, global::AVFoundation.AVPlayerItemTrack track) => _didOutputTimedMetadataGroups.OnNext((output, groups, track));
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPullDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPullDelegateRx : global::AVFoundation.AVPlayerItemOutputPullDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputMediaDataWillChange = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPullDelegate.OutputMediaDataWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputMediaDataWillChangeObs => _outputMediaDataWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPullDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputMediaDataWillChange(global::AVFoundation.AVPlayerItemOutput sender) => _outputMediaDataWillChange.OnNext(sender);
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVPlayerItemOutputPushDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerItemOutputPushDelegateRx : global::AVFoundation.AVPlayerItemOutputPushDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput> _outputSequenceWasFlushed = new Pharmacist.Common.SingleAwaitSubject<global::AVFoundation.AVPlayerItemOutput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVPlayerItemOutputPushDelegate.OutputSequenceWasFlushed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVFoundation.AVPlayerItemOutput> OutputSequenceWasFlushedObs => _outputSequenceWasFlushed;
        /// <inheritdoc/>
        public override void OutputSequenceWasFlushed(global::AVFoundation.AVPlayerItemOutput output) => _outputSequenceWasFlushed.OnNext(output);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVFoundation.AVSpeechSynthesizerDelegate"/> into Observables.
    /// </summary>
    public partial class AVSpeechSynthesizerDelegateRx : global::AVFoundation.AVSpeechSynthesizerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didCancelSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didContinueSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didFinishSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didPauseSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> _didStartSpeechUtterance = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)> _willSpeakRangeOfSpeechString = new Pharmacist.Common.SingleAwaitSubject<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidCancelSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidCancelSpeechUtteranceObs => _didCancelSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidContinueSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidContinueSpeechUtteranceObs => _didContinueSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidFinishSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidFinishSpeechUtteranceObs => _didFinishSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidPauseSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidPauseSpeechUtteranceObs => _didPauseSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.DidStartSpeechUtterance"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance)> DidStartSpeechUtteranceObs => _didStartSpeechUtterance;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVFoundation.AVSpeechSynthesizerDelegate.WillSpeakRangeOfSpeechString"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance)> WillSpeakRangeOfSpeechStringObs => _willSpeakRangeOfSpeechString;
        /// <inheritdoc/>
        public override void DidCancelSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didCancelSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidContinueSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didContinueSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidFinishSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didFinishSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidPauseSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didPauseSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void DidStartSpeechUtterance(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::AVFoundation.AVSpeechUtterance utterance) => _didStartSpeechUtterance.OnNext((synthesizer, utterance));
        /// <inheritdoc/>
        public override void WillSpeakRangeOfSpeechString(global::AVFoundation.AVSpeechSynthesizer synthesizer, global::Foundation.NSRange characterRange, global::AVFoundation.AVSpeechUtterance utterance) => _willSpeakRangeOfSpeechString.OnNext((synthesizer, characterRange, utterance));
    }
}

namespace AVKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVKit.AVPlayerViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class AVPlayerViewControllerDelegateRx : global::AVKit.AVPlayerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal)> _didAcceptContentProposal = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _didEndDismissalTransition = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial)> _didPresentInterstitialTimeRange = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal)> _didRejectContentProposal = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, string language)> _didSelectExternalSubtitleOptionLanguage = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, string language)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVMediaSelectionOption mediaSelectionOption, global::AVFoundation.AVMediaSelectionGroup mediaSelectionGroup)> _didSelectMediaSelectionOption = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVMediaSelectionOption mediaSelectionOption, global::AVFoundation.AVMediaSelectionGroup mediaSelectionGroup)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _skipToNextItem = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _skipToPreviousItem = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController> _willBeginDismissalTransition = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVPlayerViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial)> _willPresentInterstitialTimeRange = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::CoreMedia.CMTime oldTime, global::CoreMedia.CMTime targetTime)> _willResumePlaybackAfterUserNavigatedFromTime = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, global::CoreMedia.CMTime oldTime, global::CoreMedia.CMTime targetTime)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, bool visible, global::AVKit.IAVPlayerViewControllerAnimationCoordinator coordinator)> _willTransitionToVisibilityOfTransportBar = new Pharmacist.Common.SingleAwaitSubject<(global::AVKit.AVPlayerViewController playerViewController, bool visible, global::AVKit.IAVPlayerViewControllerAnimationCoordinator coordinator)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidAcceptContentProposal"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal)> DidAcceptContentProposalObs => _didAcceptContentProposal;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidEndDismissalTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> DidEndDismissalTransitionObs => _didEndDismissalTransition;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidPresentInterstitialTimeRange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial)> DidPresentInterstitialTimeRangeObs => _didPresentInterstitialTimeRange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidRejectContentProposal"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal)> DidRejectContentProposalObs => _didRejectContentProposal;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidSelectExternalSubtitleOptionLanguage"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, string language)> DidSelectExternalSubtitleOptionLanguageObs => _didSelectExternalSubtitleOptionLanguage;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.DidSelectMediaSelectionOption"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVMediaSelectionOption mediaSelectionOption, global::AVFoundation.AVMediaSelectionGroup mediaSelectionGroup)> DidSelectMediaSelectionOptionObs => _didSelectMediaSelectionOption;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.SkipToNextItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> SkipToNextItemObs => _skipToNextItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.SkipToPreviousItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> SkipToPreviousItemObs => _skipToPreviousItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.WillBeginDismissalTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVPlayerViewController> WillBeginDismissalTransitionObs => _willBeginDismissalTransition;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.WillPresentInterstitialTimeRange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial)> WillPresentInterstitialTimeRangeObs => _willPresentInterstitialTimeRange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.WillResumePlaybackAfterUserNavigatedFromTime"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, global::CoreMedia.CMTime oldTime, global::CoreMedia.CMTime targetTime)> WillResumePlaybackAfterUserNavigatedFromTimeObs => _willResumePlaybackAfterUserNavigatedFromTime;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVPlayerViewControllerDelegate.WillTransitionToVisibilityOfTransportBar"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::AVKit.AVPlayerViewController playerViewController, bool visible, global::AVKit.IAVPlayerViewControllerAnimationCoordinator coordinator)> WillTransitionToVisibilityOfTransportBarObs => _willTransitionToVisibilityOfTransportBar;
        /// <inheritdoc/>
        public override void DidAcceptContentProposal(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal) => _didAcceptContentProposal.OnNext((playerViewController, proposal));
        /// <inheritdoc/>
        public override void DidEndDismissalTransition(global::AVKit.AVPlayerViewController playerViewController) => _didEndDismissalTransition.OnNext(playerViewController);
        /// <inheritdoc/>
        public override void DidPresentInterstitialTimeRange(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial) => _didPresentInterstitialTimeRange.OnNext((playerViewController, interstitial));
        /// <inheritdoc/>
        public override void DidRejectContentProposal(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVContentProposal proposal) => _didRejectContentProposal.OnNext((playerViewController, proposal));
        /// <inheritdoc/>
        public override void DidSelectExternalSubtitleOptionLanguage(global::AVKit.AVPlayerViewController playerViewController, string language) => _didSelectExternalSubtitleOptionLanguage.OnNext((playerViewController, language));
        /// <inheritdoc/>
        public override void DidSelectMediaSelectionOption(global::AVKit.AVPlayerViewController playerViewController, global::AVFoundation.AVMediaSelectionOption mediaSelectionOption, global::AVFoundation.AVMediaSelectionGroup mediaSelectionGroup) => _didSelectMediaSelectionOption.OnNext((playerViewController, mediaSelectionOption, mediaSelectionGroup));
        /// <inheritdoc/>
        public override void SkipToNextItem(global::AVKit.AVPlayerViewController playerViewController) => _skipToNextItem.OnNext(playerViewController);
        /// <inheritdoc/>
        public override void SkipToPreviousItem(global::AVKit.AVPlayerViewController playerViewController) => _skipToPreviousItem.OnNext(playerViewController);
        /// <inheritdoc/>
        public override void WillBeginDismissalTransition(global::AVKit.AVPlayerViewController playerViewController) => _willBeginDismissalTransition.OnNext(playerViewController);
        /// <inheritdoc/>
        public override void WillPresentInterstitialTimeRange(global::AVKit.AVPlayerViewController playerViewController, global::AVKit.AVInterstitialTimeRange interstitial) => _willPresentInterstitialTimeRange.OnNext((playerViewController, interstitial));
        /// <inheritdoc/>
        public override void WillResumePlaybackAfterUserNavigatedFromTime(global::AVKit.AVPlayerViewController playerViewController, global::CoreMedia.CMTime oldTime, global::CoreMedia.CMTime targetTime) => _willResumePlaybackAfterUserNavigatedFromTime.OnNext((playerViewController, oldTime, targetTime));
        /// <inheritdoc/>
        public override void WillTransitionToVisibilityOfTransportBar(global::AVKit.AVPlayerViewController playerViewController, bool visible, global::AVKit.IAVPlayerViewControllerAnimationCoordinator coordinator) => _willTransitionToVisibilityOfTransportBar.OnNext((playerViewController, visible, coordinator));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::AVKit.AVRoutePickerViewDelegate"/> into Observables.
    /// </summary>
    public partial class AVRoutePickerViewDelegateRx : global::AVKit.AVRoutePickerViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView> _didEndPresentingRoutes = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView> _willBeginPresentingRoutes = new Pharmacist.Common.SingleAwaitSubject<global::AVKit.AVRoutePickerView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVRoutePickerViewDelegate.DidEndPresentingRoutes"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVRoutePickerView> DidEndPresentingRoutesObs => _didEndPresentingRoutes;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "AVKit.AVRoutePickerViewDelegate.WillBeginPresentingRoutes"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::AVKit.AVRoutePickerView> WillBeginPresentingRoutesObs => _willBeginPresentingRoutes;
        /// <inheritdoc/>
        public override void DidEndPresentingRoutes(global::AVKit.AVRoutePickerView routePickerView) => _didEndPresentingRoutes.OnNext(routePickerView);
        /// <inheritdoc/>
        public override void WillBeginPresentingRoutes(global::AVKit.AVRoutePickerView routePickerView) => _willBeginPresentingRoutes.OnNext(routePickerView);
    }
}

namespace CoreAnimation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreAnimation.CAAnimationDelegate"/> into Observables.
    /// </summary>
    public partial class CAAnimationDelegateRx : global::CoreAnimation.CAAnimationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CAAnimation> _animationStarted = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CAAnimation>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CAAnimation anim, bool finished)> _animationStopped = new Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CAAnimation anim, bool finished)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimationDelegate.AnimationStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CAAnimation> AnimationStartedObs => _animationStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CAAnimationDelegate.AnimationStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreAnimation.CAAnimation anim, bool finished)> AnimationStoppedObs => _animationStopped;
        /// <inheritdoc/>
        public override void AnimationStarted(global::CoreAnimation.CAAnimation anim) => _animationStarted.OnNext(anim);
        /// <inheritdoc/>
        public override void AnimationStopped(global::CoreAnimation.CAAnimation anim, bool finished) => _animationStopped.OnNext((anim, finished));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreAnimation.CALayerDelegate"/> into Observables.
    /// </summary>
    public partial class CALayerDelegateRx : global::CoreAnimation.CALayerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _displayLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)> _drawLayer = new Pharmacist.Common.SingleAwaitSubject<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _layoutSublayersOfLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer> _willDrawLayer = new Pharmacist.Common.SingleAwaitSubject<global::CoreAnimation.CALayer>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.DisplayLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> DisplayLayerObs => _displayLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.DrawLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context)> DrawLayerObs => _drawLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.LayoutSublayersOfLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> LayoutSublayersOfLayerObs => _layoutSublayersOfLayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreAnimation.CALayerDelegate.WillDrawLayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreAnimation.CALayer> WillDrawLayerObs => _willDrawLayer;
        /// <inheritdoc/>
        public override void DisplayLayer(global::CoreAnimation.CALayer layer) => _displayLayer.OnNext(layer);
        /// <inheritdoc/>
        public override void DrawLayer(global::CoreAnimation.CALayer layer, global::CoreGraphics.CGContext context) => _drawLayer.OnNext((layer, context));
        /// <inheritdoc/>
        public override void LayoutSublayersOfLayer(global::CoreAnimation.CALayer layer) => _layoutSublayersOfLayer.OnNext(layer);
        /// <inheritdoc/>
        public override void WillDrawLayer(global::CoreAnimation.CALayer layer) => _willDrawLayer.OnNext(layer);
    }
}

namespace CoreBluetooth
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBCentralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBCentralManagerDelegateRx : global::CoreBluetooth.CBCentralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> _connectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _disconnectedPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> _discoveredPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _failedToConnectPeripheral = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager> _updatedState = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBCentralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.ConnectedPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral)> ConnectedPeripheralObs => _connectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.DisconnectedPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DisconnectedPeripheralObs => _disconnectedPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.DiscoveredPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI)> DiscoveredPeripheralObs => _discoveredPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.FailedToConnectPeripheral"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> FailedToConnectPeripheralObs => _failedToConnectPeripheral;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.UpdatedState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBCentralManager> UpdatedStateObs => _updatedState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBCentralManagerDelegate.WillRestoreState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <inheritdoc/>
        public override void ConnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral) => _connectedPeripheral.OnNext((central, peripheral));
        /// <inheritdoc/>
        public override void DisconnectedPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _disconnectedPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void DiscoveredPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSDictionary advertisementData, global::Foundation.NSNumber RSSI) => _discoveredPeripheral.OnNext((central, peripheral, advertisementData, RSSI));
        /// <inheritdoc/>
        public override void FailedToConnectPeripheral(global::CoreBluetooth.CBCentralManager central, global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _failedToConnectPeripheral.OnNext((central, peripheral, error));
        /// <inheritdoc/>
        public override void UpdatedState(global::CoreBluetooth.CBCentralManager central) => _updatedState.OnNext(central);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBCentralManager central, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((central, dict));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralDelegate"/> into Observables.
    /// </summary>
    public partial class CBPeripheralDelegateRx : global::CoreBluetooth.CBPeripheralDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredCharacteristic = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _discoveredDescriptor = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _discoveredIncludedService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _discoveredService = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _isReadyToSendWriteWithoutResponse = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> _modifiedServices = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> _rssiRead = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> _rssiUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedCharacterteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral> _updatedName = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheral>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _updatedNotificationState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _updatedValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> _wroteCharacteristicValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> _wroteDescriptorValue = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DidOpenL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredCharacteristic"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredCharacteristicObs => _discoveredCharacteristic;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredDescriptor"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> DiscoveredDescriptorObs => _discoveredDescriptor;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredIncludedService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> DiscoveredIncludedServiceObs => _discoveredIncludedService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.DiscoveredService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> DiscoveredServiceObs => _discoveredService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.IsReadyToSendWriteWithoutResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> IsReadyToSendWriteWithoutResponseObs => _isReadyToSendWriteWithoutResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.ModifiedServices"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services)> ModifiedServicesObs => _modifiedServices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.RssiRead"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error)> RssiReadObs => _rssiRead;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.RssiUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error)> RssiUpdatedObs => _rssiUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedCharacterteristicValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedCharacterteristicValueObs => _updatedCharacterteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheral> UpdatedNameObs => _updatedName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedNotificationState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> UpdatedNotificationStateObs => _updatedNotificationState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.UpdatedValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> UpdatedValueObs => _updatedValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.WroteCharacteristicValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error)> WroteCharacteristicValueObs => _wroteCharacteristicValue;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralDelegate.WroteDescriptorValue"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error)> WroteDescriptorValueObs => _wroteDescriptorValue;
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DiscoveredCharacteristic(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredCharacteristic.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredDescriptor(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _discoveredDescriptor.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void DiscoveredIncludedService(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _discoveredIncludedService.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void DiscoveredService(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _discoveredService.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void IsReadyToSendWriteWithoutResponse(global::CoreBluetooth.CBPeripheral peripheral) => _isReadyToSendWriteWithoutResponse.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ModifiedServices(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBService[] services) => _modifiedServices.OnNext((peripheral, services));
        /// <inheritdoc/>
        public override void RssiRead(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSNumber rssi, global::Foundation.NSError error) => _rssiRead.OnNext((peripheral, rssi, error));
        /// <inheritdoc/>
        public override void RssiUpdated(global::CoreBluetooth.CBPeripheral peripheral, global::Foundation.NSError error) => _rssiUpdated.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void UpdatedCharacterteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedCharacterteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedName(global::CoreBluetooth.CBPeripheral peripheral) => _updatedName.OnNext(peripheral);
        /// <inheritdoc/>
        public override void UpdatedNotificationState(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _updatedNotificationState.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void UpdatedValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _updatedValue.OnNext((peripheral, descriptor, error));
        /// <inheritdoc/>
        public override void WroteCharacteristicValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBCharacteristic characteristic, global::Foundation.NSError error) => _wroteCharacteristicValue.OnNext((peripheral, characteristic, error));
        /// <inheritdoc/>
        public override void WroteDescriptorValue(global::CoreBluetooth.CBPeripheral peripheral, global::CoreBluetooth.CBDescriptor descriptor, global::Foundation.NSError error) => _wroteDescriptorValue.OnNext((peripheral, descriptor, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreBluetooth.CBPeripheralManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class CBPeripheralManagerDelegateRx : global::CoreBluetooth.CBPeripheralManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> _advertisingStarted = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicSubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> _characteristicUnsubscribed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> _didOpenL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didPublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> _didUnpublishL2CapChannel = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> _readRequestReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _readyToUpdateSubscribers = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> _serviceAdded = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager> _stateUpdated = new Pharmacist.Common.SingleAwaitSubject<global::CoreBluetooth.CBPeripheralManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> _willRestoreState = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> _writeRequestsReceived = new Pharmacist.Common.SingleAwaitSubject<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.AdvertisingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error)> AdvertisingStartedObs => _advertisingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicSubscribed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicSubscribedObs => _characteristicSubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicUnsubscribed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic)> CharacteristicUnsubscribedObs => _characteristicUnsubscribed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidOpenL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error)> DidOpenL2CapChannelObs => _didOpenL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidPublishL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidPublishL2CapChannelObs => _didPublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.DidUnpublishL2CapChannel"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error)> DidUnpublishL2CapChannelObs => _didUnpublishL2CapChannel;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ReadRequestReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request)> ReadRequestReceivedObs => _readRequestReceived;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ReadyToUpdateSubscribers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> ReadyToUpdateSubscribersObs => _readyToUpdateSubscribers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.ServiceAdded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error)> ServiceAddedObs => _serviceAdded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.StateUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreBluetooth.CBPeripheralManager> StateUpdatedObs => _stateUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict)> WillRestoreStateObs => _willRestoreState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreBluetooth.CBPeripheralManagerDelegate.WriteRequestsReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests)> WriteRequestsReceivedObs => _writeRequestsReceived;
        /// <inheritdoc/>
        public override void AdvertisingStarted(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSError error) => _advertisingStarted.OnNext((peripheral, error));
        /// <inheritdoc/>
        public override void CharacteristicSubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicSubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void CharacteristicUnsubscribed(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBCentral central, global::CoreBluetooth.CBCharacteristic characteristic) => _characteristicUnsubscribed.OnNext((peripheral, central, characteristic));
        /// <inheritdoc/>
        public override void DidOpenL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBL2CapChannel channel, global::Foundation.NSError error) => _didOpenL2CapChannel.OnNext((peripheral, channel, error));
        /// <inheritdoc/>
        public override void DidPublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didPublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void DidUnpublishL2CapChannel(global::CoreBluetooth.CBPeripheralManager peripheral, ushort psm, global::Foundation.NSError error) => _didUnpublishL2CapChannel.OnNext((peripheral, psm, error));
        /// <inheritdoc/>
        public override void ReadRequestReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest request) => _readRequestReceived.OnNext((peripheral, request));
        /// <inheritdoc/>
        public override void ReadyToUpdateSubscribers(global::CoreBluetooth.CBPeripheralManager peripheral) => _readyToUpdateSubscribers.OnNext(peripheral);
        /// <inheritdoc/>
        public override void ServiceAdded(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBService service, global::Foundation.NSError error) => _serviceAdded.OnNext((peripheral, service, error));
        /// <inheritdoc/>
        public override void StateUpdated(global::CoreBluetooth.CBPeripheralManager peripheral) => _stateUpdated.OnNext(peripheral);
        /// <inheritdoc/>
        public override void WillRestoreState(global::CoreBluetooth.CBPeripheralManager peripheral, global::Foundation.NSDictionary dict) => _willRestoreState.OnNext((peripheral, dict));
        /// <inheritdoc/>
        public override void WriteRequestsReceived(global::CoreBluetooth.CBPeripheralManager peripheral, global::CoreBluetooth.CBATTRequest[] requests) => _writeRequestsReceived.OnNext((peripheral, requests));
    }
}

namespace CoreData
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreData.NSFetchedResultsControllerDelegate"/> into Observables.
    /// </summary>
    public partial class NSFetchedResultsControllerDelegateRx : global::CoreData.NSFetchedResultsControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController> _didChangeContent = new Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)> _didChangeObject = new Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)> _didChangeSection = new Pharmacist.Common.SingleAwaitSubject<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController> _willChangeContent = new Pharmacist.Common.SingleAwaitSubject<global::CoreData.NSFetchedResultsController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.DidChangeContent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreData.NSFetchedResultsController> DidChangeContentObs => _didChangeContent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.DidChangeObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath)> DidChangeObjectObs => _didChangeObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.DidChangeSection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type)> DidChangeSectionObs => _didChangeSection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreData.NSFetchedResultsControllerDelegate.WillChangeContent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::CoreData.NSFetchedResultsController> WillChangeContentObs => _willChangeContent;
        /// <inheritdoc/>
        public override void DidChangeContent(global::CoreData.NSFetchedResultsController controller) => _didChangeContent.OnNext(controller);
        /// <inheritdoc/>
        public override void DidChangeObject(global::CoreData.NSFetchedResultsController controller, global::Foundation.NSObject anObject, global::Foundation.NSIndexPath indexPath, global::CoreData.NSFetchedResultsChangeType type, global::Foundation.NSIndexPath newIndexPath) => _didChangeObject.OnNext((controller, anObject, indexPath, type, newIndexPath));
        /// <inheritdoc/>
        public override void DidChangeSection(global::CoreData.NSFetchedResultsController controller, global::CoreData.INSFetchedResultsSectionInfo sectionInfo, global::System.nuint sectionIndex, global::CoreData.NSFetchedResultsChangeType type) => _didChangeSection.OnNext((controller, sectionInfo, sectionIndex, type));
        /// <inheritdoc/>
        public override void WillChangeContent(global::CoreData.NSFetchedResultsController controller) => _willChangeContent.OnNext(controller);
    }
}

namespace CoreLocation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::CoreLocation.CLLocationManagerDelegate"/> into Observables.
    /// </summary>
    public partial class CLLocationManagerDelegateRx : global::CoreLocation.CLLocationManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> _authorizationChanged = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> _locationsUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.AuthorizationChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status)> AuthorizationChangedObs => _authorizationChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.Failed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "CoreLocation.CLLocationManagerDelegate.LocationsUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations)> LocationsUpdatedObs => _locationsUpdated;
        /// <inheritdoc/>
        public override void AuthorizationChanged(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLAuthorizationStatus status) => _authorizationChanged.OnNext((manager, status));
        /// <inheritdoc/>
        public override void Failed(global::CoreLocation.CLLocationManager manager, global::Foundation.NSError error) => _failed.OnNext((manager, error));
        /// <inheritdoc/>
        public override void LocationsUpdated(global::CoreLocation.CLLocationManager manager, global::CoreLocation.CLLocation[] locations) => _locationsUpdated.OnNext((manager, locations));
    }
}

namespace ExternalAccessory
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ExternalAccessory.EAAccessoryDelegate"/> into Observables.
    /// </summary>
    public partial class EAAccessoryDelegateRx : global::ExternalAccessory.EAAccessoryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ExternalAccessory.EAAccessory> _disconnected = new Pharmacist.Common.SingleAwaitSubject<global::ExternalAccessory.EAAccessory>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ExternalAccessory.EAAccessoryDelegate.Disconnected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ExternalAccessory.EAAccessory> DisconnectedObs => _disconnected;
        /// <inheritdoc/>
        public override void Disconnected(global::ExternalAccessory.EAAccessory accessory) => _disconnected.OnNext(accessory);
    }
}

namespace Foundation
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSCacheDelegate"/> into Observables.
    /// </summary>
    public partial class NSCacheDelegateRx : global::Foundation.NSCacheDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> _willEvictObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSCacheDelegate.WillEvictObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSCache cache, global::Foundation.NSObject obj)> WillEvictObjectObs => _willEvictObject;
        /// <inheritdoc/>
        public override void WillEvictObject(global::Foundation.NSCache cache, global::Foundation.NSObject obj) => _willEvictObject.OnNext((cache, obj));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedArchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedArchiverDelegateRx : global::Foundation.NSKeyedArchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> _encodedObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedArchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.EncodedObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj)> EncodedObjectObs => _encodedObject;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.Finishing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedArchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedArchiverDelegate.ReplacingObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void EncodedObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject obj) => _encodedObject.OnNext((archiver, obj));
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedArchiver archiver) => _finished.OnNext(archiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedArchiver archiver) => _finishing.OnNext(archiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedArchiver archiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((archiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSKeyedUnarchiverDelegate"/> into Observables.
    /// </summary>
    public partial class NSKeyedUnarchiverDelegateRx : global::Foundation.NSKeyedUnarchiverDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finished = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver> _finishing = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSKeyedUnarchiver>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> _replacingObject = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishedObs => _finished;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.Finishing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSKeyedUnarchiver> FinishingObs => _finishing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSKeyedUnarchiverDelegate.ReplacingObject"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject)> ReplacingObjectObs => _replacingObject;
        /// <inheritdoc/>
        public override void Finished(global::Foundation.NSKeyedUnarchiver unarchiver) => _finished.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void Finishing(global::Foundation.NSKeyedUnarchiver unarchiver) => _finishing.OnNext(unarchiver);
        /// <inheritdoc/>
        public override void ReplacingObject(global::Foundation.NSKeyedUnarchiver unarchiver, global::Foundation.NSObject oldObject, global::Foundation.NSObject newObject) => _replacingObject.OnNext((unarchiver, oldObject, newObject));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSMachPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSMachPortDelegateRx : global::Foundation.NSMachPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr> _machMessageReceived = new Pharmacist.Common.SingleAwaitSubject<global::System.IntPtr>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSMachPortDelegate.MachMessageReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::System.IntPtr> MachMessageReceivedObs => _machMessageReceived;
        /// <inheritdoc/>
        public override void MachMessageReceived(global::System.IntPtr msgHeader) => _machMessageReceived.OnNext(msgHeader);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSNetServiceBrowserDelegate"/> into Observables.
    /// </summary>
    public partial class NSNetServiceBrowserDelegateRx : global::Foundation.NSNetServiceBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> _domainRemoved = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> _foundDomain = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> _foundService = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)> _notSearched = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser> _searchStarted = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser> _searchStopped = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetServiceBrowser>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> _serviceRemoved = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.DomainRemoved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> DomainRemovedObs => _domainRemoved;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.FoundDomain"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing)> FoundDomainObs => _foundDomain;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.FoundService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> FoundServiceObs => _foundService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.NotSearched"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors)> NotSearchedObs => _notSearched;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.SearchStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceBrowser> SearchStartedObs => _searchStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.SearchStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetServiceBrowser> SearchStoppedObs => _searchStopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceBrowserDelegate.ServiceRemoved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing)> ServiceRemovedObs => _serviceRemoved;
        /// <inheritdoc/>
        public override void DomainRemoved(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing) => _domainRemoved.OnNext((sender, domain, moreComing));
        /// <inheritdoc/>
        public override void FoundDomain(global::Foundation.NSNetServiceBrowser sender, string domain, bool moreComing) => _foundDomain.OnNext((sender, domain, moreComing));
        /// <inheritdoc/>
        public override void FoundService(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing) => _foundService.OnNext((sender, service, moreComing));
        /// <inheritdoc/>
        public override void NotSearched(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSDictionary errors) => _notSearched.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void SearchStarted(global::Foundation.NSNetServiceBrowser sender) => _searchStarted.OnNext(sender);
        /// <inheritdoc/>
        public override void SearchStopped(global::Foundation.NSNetServiceBrowser sender) => _searchStopped.OnNext(sender);
        /// <inheritdoc/>
        public override void ServiceRemoved(global::Foundation.NSNetServiceBrowser sender, global::Foundation.NSNetService service, bool moreComing) => _serviceRemoved.OnNext((sender, service, moreComing));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSNetServiceDelegate"/> into Observables.
    /// </summary>
    public partial class NSNetServiceDelegateRx : global::Foundation.NSNetServiceDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _addressResolved = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _didAcceptConnection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _published = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> _publishFailure = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> _resolveFailure = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _stopped = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSData data)> _updatedTxtRecordData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSNetService sender, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _willPublish = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService> _willResolve = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSNetService>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.AddressResolved"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> AddressResolvedObs => _addressResolved;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.DidAcceptConnection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> DidAcceptConnectionObs => _didAcceptConnection;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.Published"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> PublishedObs => _published;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.PublishFailure"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> PublishFailureObs => _publishFailure;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.ResolveFailure"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors)> ResolveFailureObs => _resolveFailure;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.Stopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> StoppedObs => _stopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.UpdatedTxtRecordData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSNetService sender, global::Foundation.NSData data)> UpdatedTxtRecordDataObs => _updatedTxtRecordData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.WillPublish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> WillPublishObs => _willPublish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSNetServiceDelegate.WillResolve"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSNetService> WillResolveObs => _willResolve;
        /// <inheritdoc/>
        public override void AddressResolved(global::Foundation.NSNetService sender) => _addressResolved.OnNext(sender);
        /// <inheritdoc/>
        public override void DidAcceptConnection(global::Foundation.NSNetService sender, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _didAcceptConnection.OnNext((sender, inputStream, outputStream));
        /// <inheritdoc/>
        public override void Published(global::Foundation.NSNetService sender) => _published.OnNext(sender);
        /// <inheritdoc/>
        public override void PublishFailure(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors) => _publishFailure.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void ResolveFailure(global::Foundation.NSNetService sender, global::Foundation.NSDictionary errors) => _resolveFailure.OnNext((sender, errors));
        /// <inheritdoc/>
        public override void Stopped(global::Foundation.NSNetService sender) => _stopped.OnNext(sender);
        /// <inheritdoc/>
        public override void UpdatedTxtRecordData(global::Foundation.NSNetService sender, global::Foundation.NSData data) => _updatedTxtRecordData.OnNext((sender, data));
        /// <inheritdoc/>
        public override void WillPublish(global::Foundation.NSNetService sender) => _willPublish.OnNext(sender);
        /// <inheritdoc/>
        public override void WillResolve(global::Foundation.NSNetService sender) => _willResolve.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSPortDelegate"/> into Observables.
    /// </summary>
    public partial class NSPortDelegateRx : global::Foundation.NSPortDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage> _messageReceived = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSPortMessage>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSPortDelegate.MessageReceived"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSPortMessage> MessageReceivedObs => _messageReceived;
        /// <inheritdoc/>
        public override void MessageReceived(global::Foundation.NSPortMessage message) => _messageReceived.OnNext(message);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSStreamDelegateRx : global::Foundation.NSStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> _handleEvent = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSStreamDelegate.HandleEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent)> HandleEventObs => _handleEvent;
        /// <inheritdoc/>
        public override void HandleEvent(global::Foundation.NSStream theStream, global::Foundation.NSStreamEvent streamEvent) => _handleEvent.OnNext((theStream, streamEvent));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDataDelegateRx : global::Foundation.NSUrlConnectionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection> _finishedLoading = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlConnection>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> _receivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> _sentBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.FinishedLoading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlConnection> FinishedLoadingObs => _finishedLoading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.ReceivedData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data)> ReceivedDataObs => _receivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.ReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDataDelegate.SentBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite)> SentBodyDataObs => _sentBodyData;
        /// <inheritdoc/>
        public override void FinishedLoading(global::Foundation.NSUrlConnection connection) => _finishedLoading.OnNext(connection);
        /// <inheritdoc/>
        public override void ReceivedData(global::Foundation.NSUrlConnection connection, global::Foundation.NSData data) => _receivedData.OnNext((connection, data));
        /// <inheritdoc/>
        public override void ReceivedResponse(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlResponse response) => _receivedResponse.OnNext((connection, response));
        /// <inheritdoc/>
        public override void SentBodyData(global::Foundation.NSUrlConnection connection, global::System.nint bytesWritten, global::System.nint totalBytesWritten, global::System.nint totalBytesExpectedToWrite) => _sentBodyData.OnNext((connection, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlConnectionDelegateRx : global::Foundation.NSUrlConnectionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _canceledAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _receivedAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> _willSendRequestForAuthenticationChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.CanceledAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> CanceledAuthenticationChallengeObs => _canceledAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.ReceivedAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> ReceivedAuthenticationChallengeObs => _receivedAuthenticationChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDelegate.WillSendRequestForAuthenticationChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge)> WillSendRequestForAuthenticationChallengeObs => _willSendRequestForAuthenticationChallenge;
        /// <inheritdoc/>
        public override void CanceledAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _canceledAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void FailedWithError(global::Foundation.NSUrlConnection connection, global::Foundation.NSError error) => _failedWithError.OnNext((connection, error));
        /// <inheritdoc/>
        public override void ReceivedAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _receivedAuthenticationChallenge.OnNext((connection, challenge));
        /// <inheritdoc/>
        public override void WillSendRequestForAuthenticationChallenge(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrlAuthenticationChallenge challenge) => _willSendRequestForAuthenticationChallenge.OnNext((connection, challenge));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlConnectionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlConnectionDownloadDelegateRx : global::Foundation.NSUrlConnectionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> _finishedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> _resumedDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> _wroteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.FinishedDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl)> FinishedDownloadingObs => _finishedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.ResumedDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes)> ResumedDownloadingObs => _resumedDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlConnectionDownloadDelegate.WroteData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes)> WroteDataObs => _wroteData;
        /// <inheritdoc/>
        public override void FinishedDownloading(global::Foundation.NSUrlConnection connection, global::Foundation.NSUrl destinationUrl) => _finishedDownloading.OnNext((connection, destinationUrl));
        /// <inheritdoc/>
        public override void ResumedDownloading(global::Foundation.NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes) => _resumedDownloading.OnNext((connection, totalBytesWritten, expectedTotalBytes));
        /// <inheritdoc/>
        public override void WroteData(global::Foundation.NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes) => _wroteData.OnNext((connection, bytesWritten, totalBytesWritten, expectedTotalBytes));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDataDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDataDelegateRx : global::Foundation.NSUrlSessionDataDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> _didBecomeDownloadTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> _didBecomeStreamTask = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> _didReceiveData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> _didReceiveResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> _willCacheResponse = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidBecomeDownloadTask"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask)> DidBecomeDownloadTaskObs => _didBecomeDownloadTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidBecomeStreamTask"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask)> DidBecomeStreamTaskObs => _didBecomeStreamTask;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidReceiveData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data)> DidReceiveDataObs => _didReceiveData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.DidReceiveResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler)> DidReceiveResponseObs => _didReceiveResponse;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDataDelegate.WillCacheResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler)> WillCacheResponseObs => _willCacheResponse;
        /// <inheritdoc/>
        public override void DidBecomeDownloadTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionDownloadTask downloadTask) => _didBecomeDownloadTask.OnNext((session, dataTask, downloadTask));
        /// <inheritdoc/>
        public override void DidBecomeStreamTask(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlSessionStreamTask streamTask) => _didBecomeStreamTask.OnNext((session, dataTask, streamTask));
        /// <inheritdoc/>
        public override void DidReceiveData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSData data) => _didReceiveData.OnNext((session, dataTask, data));
        /// <inheritdoc/>
        public override void DidReceiveResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSUrlResponse response, global::System.Action<global::Foundation.NSUrlSessionResponseDisposition> completionHandler) => _didReceiveResponse.OnNext((session, dataTask, response, completionHandler));
        /// <inheritdoc/>
        public override void WillCacheResponse(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDataTask dataTask, global::Foundation.NSCachedUrlResponse proposedResponse, global::System.Action<global::Foundation.NSCachedUrlResponse> completionHandler) => _willCacheResponse.OnNext((session, dataTask, proposedResponse, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionDelegateRx : global::Foundation.NSUrlSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> _didBecomeInvalid = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession> _didFinishEventsForBackgroundSession = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUrlSession>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidBecomeInvalid"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSError error)> DidBecomeInvalidObs => _didBecomeInvalid;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidFinishEventsForBackgroundSession"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUrlSession> DidFinishEventsForBackgroundSessionObs => _didFinishEventsForBackgroundSession;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <inheritdoc/>
        public override void DidBecomeInvalid(global::Foundation.NSUrlSession session, global::Foundation.NSError error) => _didBecomeInvalid.OnNext((session, error));
        /// <inheritdoc/>
        public override void DidFinishEventsForBackgroundSession(global::Foundation.NSUrlSession session) => _didFinishEventsForBackgroundSession.OnNext(session);
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, challenge, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionDownloadDelegate"/> into Observables.
    /// </summary>
    public abstract partial class NSUrlSessionDownloadDelegateRx : global::Foundation.NSUrlSessionDownloadDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> _didFinishDownloading = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> _didResume = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> _didWriteData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidFinishDownloading"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location)> DidFinishDownloadingObs => _didFinishDownloading;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidResume"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes)> DidResumeObs => _didResume;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionDownloadDelegate.DidWriteData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite)> DidWriteDataObs => _didWriteData;
        /// <inheritdoc/>
        public override void DidFinishDownloading(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, global::Foundation.NSUrl location) => _didFinishDownloading.OnNext((session, downloadTask, location));
        /// <inheritdoc/>
        public override void DidResume(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long resumeFileOffset, long expectedTotalBytes) => _didResume.OnNext((session, downloadTask, resumeFileOffset, expectedTotalBytes));
        /// <inheritdoc/>
        public override void DidWriteData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite) => _didWriteData.OnNext((session, downloadTask, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionStreamDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionStreamDelegateRx : global::Foundation.NSUrlSessionStreamDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _betterRouteDiscovered = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _completedTaskCaptureStreams = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _readClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> _writeClosed = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.BetterRouteDiscovered"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> BetterRouteDiscoveredObs => _betterRouteDiscovered;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.CompletedTaskCaptureStreams"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> CompletedTaskCaptureStreamsObs => _completedTaskCaptureStreams;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.ReadClosed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> ReadClosedObs => _readClosed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionStreamDelegate.WriteClosed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask)> WriteClosedObs => _writeClosed;
        /// <inheritdoc/>
        public override void BetterRouteDiscovered(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _betterRouteDiscovered.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void CompletedTaskCaptureStreams(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _completedTaskCaptureStreams.OnNext((session, streamTask, inputStream, outputStream));
        /// <inheritdoc/>
        public override void ReadClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _readClosed.OnNext((session, streamTask));
        /// <inheritdoc/>
        public override void WriteClosed(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionStreamTask streamTask) => _writeClosed.OnNext((session, streamTask));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUrlSessionTaskDelegate"/> into Observables.
    /// </summary>
    public partial class NSUrlSessionTaskDelegateRx : global::Foundation.NSUrlSessionTaskDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> _didCompleteWithError = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> _didFinishCollectingMetrics = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> _didReceiveChallenge = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> _didSendBodyData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> _needNewBodyStream = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> _taskIsWaitingForConnectivity = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> _willBeginDelayedRequest = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> _willPerformHttpRedirection = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidCompleteWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error)> DidCompleteWithErrorObs => _didCompleteWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidFinishCollectingMetrics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics)> DidFinishCollectingMetricsObs => _didFinishCollectingMetrics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidReceiveChallenge"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler)> DidReceiveChallengeObs => _didReceiveChallenge;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.DidSendBodyData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend)> DidSendBodyDataObs => _didSendBodyData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.NeedNewBodyStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler)> NeedNewBodyStreamObs => _needNewBodyStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.TaskIsWaitingForConnectivity"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task)> TaskIsWaitingForConnectivityObs => _taskIsWaitingForConnectivity;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.WillBeginDelayedRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler)> WillBeginDelayedRequestObs => _willBeginDelayedRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUrlSessionTaskDelegate.WillPerformHttpRedirection"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler)> WillPerformHttpRedirectionObs => _willPerformHttpRedirection;
        /// <inheritdoc/>
        public override void DidCompleteWithError(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSError error) => _didCompleteWithError.OnNext((session, task, error));
        /// <inheritdoc/>
        public override void DidFinishCollectingMetrics(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlSessionTaskMetrics metrics) => _didFinishCollectingMetrics.OnNext((session, task, metrics));
        /// <inheritdoc/>
        public override void DidReceiveChallenge(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlAuthenticationChallenge challenge, global::System.Action<global::Foundation.NSUrlSessionAuthChallengeDisposition, global::Foundation.NSUrlCredential> completionHandler) => _didReceiveChallenge.OnNext((session, task, challenge, completionHandler));
        /// <inheritdoc/>
        public override void DidSendBodyData(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend) => _didSendBodyData.OnNext((session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend));
        /// <inheritdoc/>
        public override void NeedNewBodyStream(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::System.Action<global::Foundation.NSInputStream> completionHandler) => _needNewBodyStream.OnNext((session, task, completionHandler));
        /// <inheritdoc/>
        public override void TaskIsWaitingForConnectivity(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task) => _taskIsWaitingForConnectivity.OnNext((session, task));
        /// <inheritdoc/>
        public override void WillBeginDelayedRequest(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSUrlRequest request, global::System.Action<global::Foundation.NSUrlSessionDelayedRequestDisposition, global::Foundation.NSUrlRequest> completionHandler) => _willBeginDelayedRequest.OnNext((session, task, request, completionHandler));
        /// <inheritdoc/>
        public override void WillPerformHttpRedirection(global::Foundation.NSUrlSession session, global::Foundation.NSUrlSessionTask task, global::Foundation.NSHttpUrlResponse response, global::Foundation.NSUrlRequest newRequest, global::System.Action<global::Foundation.NSUrlRequest> completionHandler) => _willPerformHttpRedirection.OnNext((session, task, response, newRequest, completionHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::Foundation.NSUserActivityDelegate"/> into Observables.
    /// </summary>
    public partial class NSUserActivityDelegateRx : global::Foundation.NSUserActivityDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> _userActivityReceivedData = new Pharmacist.Common.SingleAwaitSubject<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWasContinued = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity> _userActivityWillSave = new Pharmacist.Common.SingleAwaitSubject<global::Foundation.NSUserActivity>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityReceivedData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream)> UserActivityReceivedDataObs => _userActivityReceivedData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityWasContinued"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWasContinuedObs => _userActivityWasContinued;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Foundation.NSUserActivityDelegate.UserActivityWillSave"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::Foundation.NSUserActivity> UserActivityWillSaveObs => _userActivityWillSave;
        /// <inheritdoc/>
        public override void UserActivityReceivedData(global::Foundation.NSUserActivity userActivity, global::Foundation.NSInputStream inputStream, global::Foundation.NSOutputStream outputStream) => _userActivityReceivedData.OnNext((userActivity, inputStream, outputStream));
        /// <inheritdoc/>
        public override void UserActivityWasContinued(global::Foundation.NSUserActivity userActivity) => _userActivityWasContinued.OnNext(userActivity);
        /// <inheritdoc/>
        public override void UserActivityWillSave(global::Foundation.NSUserActivity userActivity) => _userActivityWillSave.OnNext(userActivity);
    }
}

namespace GameKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKGameCenterControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKGameCenterControllerDelegateRx : global::GameKit.GKGameCenterControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKGameCenterViewController> _finished = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKGameCenterViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKGameCenterControllerDelegate.Finished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKGameCenterViewController> FinishedObs => _finished;
        /// <inheritdoc/>
        public override void Finished(global::GameKit.GKGameCenterViewController controller) => _finished.OnNext(controller);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKGameSessionSharingViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKGameSessionSharingViewControllerDelegateRx : global::GameKit.GKGameSessionSharingViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKGameSessionSharingViewController viewController, global::Foundation.NSError error)> _didFinish = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKGameSessionSharingViewController viewController, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKGameSessionSharingViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKGameSessionSharingViewController viewController, global::Foundation.NSError error)> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::GameKit.GKGameSessionSharingViewController viewController, global::Foundation.NSError error) => _didFinish.OnNext((viewController, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKMatchDelegate"/> into Observables.
    /// </summary>
    public partial class GKMatchDelegateRx : global::GameKit.GKMatchDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)> _dataReceivedForRecipient = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)> _dataReceivedFromPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSError error)> _failed = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)> _stateChangedForPlayer = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceivedForRecipient"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player)> DataReceivedForRecipientObs => _dataReceivedForRecipient;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.DataReceivedFromPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player)> DataReceivedFromPlayerObs => _dataReceivedFromPlayer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.Failed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::Foundation.NSError error)> FailedObs => _failed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchDelegate.StateChangedForPlayer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state)> StateChangedForPlayerObs => _stateChangedForPlayer;
        /// <inheritdoc/>
        public override void DataReceivedForRecipient(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer recipient, global::GameKit.GKPlayer player) => _dataReceivedForRecipient.OnNext((match, data, recipient, player));
        /// <inheritdoc/>
        public override void DataReceivedFromPlayer(global::GameKit.GKMatch match, global::Foundation.NSData data, global::GameKit.GKPlayer player) => _dataReceivedFromPlayer.OnNext((match, data, player));
        /// <inheritdoc/>
        public override void Failed(global::GameKit.GKMatch match, global::Foundation.NSError error) => _failed.OnNext((match, error));
        /// <inheritdoc/>
        public override void StateChangedForPlayer(global::GameKit.GKMatch match, global::GameKit.GKPlayer player, global::GameKit.GKPlayerConnectionState state) => _stateChangedForPlayer.OnNext((match, player, state));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKMatchmakerViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKMatchmakerViewControllerDelegateRx : global::GameKit.GKMatchmakerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)> _didFailWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)> _didFindHostedPlayers = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)> _didFindMatch = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)> _hostedPlayerDidAccept = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKMatchmakerViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKMatchmakerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFailWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error)> DidFailWithErrorObs => _didFailWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindHostedPlayers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs)> DidFindHostedPlayersObs => _didFindHostedPlayers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.DidFindMatch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match)> DidFindMatchObs => _didFindMatch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.HostedPlayerDidAccept"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID)> HostedPlayerDidAcceptObs => _hostedPlayerDidAccept;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKMatchmakerViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKMatchmakerViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidFailWithError(global::GameKit.GKMatchmakerViewController viewController, global::Foundation.NSError error) => _didFailWithError.OnNext((viewController, error));
        /// <inheritdoc/>
        public override void DidFindHostedPlayers(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer[] playerIDs) => _didFindHostedPlayers.OnNext((viewController, playerIDs));
        /// <inheritdoc/>
        public override void DidFindMatch(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKMatch match) => _didFindMatch.OnNext((viewController, match));
        /// <inheritdoc/>
        public override void HostedPlayerDidAccept(global::GameKit.GKMatchmakerViewController viewController, global::GameKit.GKPlayer playerID) => _hostedPlayerDidAccept.OnNext((viewController, playerID));
        /// <inheritdoc/>
        public override void WasCancelled(global::GameKit.GKMatchmakerViewController viewController) => _wasCancelled.OnNext(viewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameKit.GKTurnBasedMatchmakerViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GKTurnBasedMatchmakerViewControllerDelegateRx : global::GameKit.GKTurnBasedMatchmakerViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)> _failedWithError = new Pharmacist.Common.SingleAwaitSubject<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatchmakerViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::GameKit.GKTurnBasedMatchmakerViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FailedWithError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error)> FailedWithErrorObs => _failedWithError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameKit.GKTurnBasedMatchmakerViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameKit.GKTurnBasedMatchmakerViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void FailedWithError(global::GameKit.GKTurnBasedMatchmakerViewController viewController, global::Foundation.NSError error) => _failedWithError.OnNext((viewController, error));
        /// <inheritdoc/>
        public override void WasCancelled(global::GameKit.GKTurnBasedMatchmakerViewController viewController) => _wasCancelled.OnNext(viewController);
    }
}

namespace GameplayKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GameplayKit.GKAgentDelegate"/> into Observables.
    /// </summary>
    public partial class GKAgentDelegateRx : global::GameplayKit.GKAgentDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent> _agentDidUpdate = new Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent> _agentWillUpdate = new Pharmacist.Common.SingleAwaitSubject<global::GameplayKit.GKAgent>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameplayKit.GKAgentDelegate.AgentDidUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameplayKit.GKAgent> AgentDidUpdateObs => _agentDidUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GameplayKit.GKAgentDelegate.AgentWillUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GameplayKit.GKAgent> AgentWillUpdateObs => _agentWillUpdate;
        /// <inheritdoc/>
        public override void AgentDidUpdate(global::GameplayKit.GKAgent agent) => _agentDidUpdate.OnNext(agent);
        /// <inheritdoc/>
        public override void AgentWillUpdate(global::GameplayKit.GKAgent agent) => _agentWillUpdate.OnNext(agent);
    }
}

namespace GLKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::GLKit.GLKViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GLKViewControllerDelegateRx : global::GLKit.GLKViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::GLKit.GLKViewController> _update = new Pharmacist.Common.SingleAwaitSubject<global::GLKit.GLKViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKViewController controller, bool pause)> _willPause = new Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKViewController controller, bool pause)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKViewControllerDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::GLKit.GLKViewController> UpdateObs => _update;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKViewControllerDelegate.WillPause"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GLKit.GLKViewController controller, bool pause)> WillPauseObs => _willPause;
        /// <inheritdoc/>
        public override void Update(global::GLKit.GLKViewController controller) => _update.OnNext(controller);
        /// <inheritdoc/>
        public override void WillPause(global::GLKit.GLKViewController controller, bool pause) => _willPause.OnNext((controller, pause));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::GLKit.GLKViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class GLKViewDelegateRx : global::GLKit.GLKViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect)> _drawInRect = new Pharmacist.Common.SingleAwaitSubject<(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "GLKit.GLKViewDelegate.DrawInRect"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect)> DrawInRectObs => _drawInRect;
        /// <inheritdoc/>
        public override void DrawInRect(global::GLKit.GLKView view, global::CoreGraphics.CGRect rect) => _drawInRect.OnNext((view, rect));
    }
}

namespace HomeKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMAccessoryDelegate"/> into Observables.
    /// </summary>
    public partial class HMAccessoryDelegateRx : global::HomeKit.HMAccessoryDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> _didAddProfile = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> _didRemoveProfile = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> _didUpdateAssociatedServiceType = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, string firmwareVersion)> _didUpdateFirmwareVersion = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, string firmwareVersion)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateName = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> _didUpdateNameForService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateReachability = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory> _didUpdateServices = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMAccessory>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)> _didUpdateValueForCharacteristic = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidAddProfile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> DidAddProfileObs => _didAddProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidRemoveProfile"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile)> DidRemoveProfileObs => _didRemoveProfile;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateAssociatedServiceType"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> DidUpdateAssociatedServiceTypeObs => _didUpdateAssociatedServiceType;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateFirmwareVersion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, string firmwareVersion)> DidUpdateFirmwareVersionObs => _didUpdateFirmwareVersion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateName"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateNameObs => _didUpdateName;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateNameForService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service)> DidUpdateNameForServiceObs => _didUpdateNameForService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateReachability"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateReachabilityObs => _didUpdateReachability;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateServices"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMAccessory> DidUpdateServicesObs => _didUpdateServices;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMAccessoryDelegate.DidUpdateValueForCharacteristic"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic)> DidUpdateValueForCharacteristicObs => _didUpdateValueForCharacteristic;
        /// <inheritdoc/>
        public override void DidAddProfile(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile) => _didAddProfile.OnNext((accessory, profile));
        /// <inheritdoc/>
        public override void DidRemoveProfile(global::HomeKit.HMAccessory accessory, global::HomeKit.HMAccessoryProfile profile) => _didRemoveProfile.OnNext((accessory, profile));
        /// <inheritdoc/>
        public override void DidUpdateAssociatedServiceType(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service) => _didUpdateAssociatedServiceType.OnNext((accessory, service));
        /// <inheritdoc/>
        public override void DidUpdateFirmwareVersion(global::HomeKit.HMAccessory accessory, string firmwareVersion) => _didUpdateFirmwareVersion.OnNext((accessory, firmwareVersion));
        /// <inheritdoc/>
        public override void DidUpdateName(global::HomeKit.HMAccessory accessory) => _didUpdateName.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateNameForService(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service) => _didUpdateNameForService.OnNext((accessory, service));
        /// <inheritdoc/>
        public override void DidUpdateReachability(global::HomeKit.HMAccessory accessory) => _didUpdateReachability.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateServices(global::HomeKit.HMAccessory accessory) => _didUpdateServices.OnNext(accessory);
        /// <inheritdoc/>
        public override void DidUpdateValueForCharacteristic(global::HomeKit.HMAccessory accessory, global::HomeKit.HMService service, global::HomeKit.HMCharacteristic characteristic) => _didUpdateValueForCharacteristic.OnNext((accessory, service, characteristic));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMCameraSnapshotControlDelegate"/> into Observables.
    /// </summary>
    public partial class HMCameraSnapshotControlDelegateRx : global::HomeKit.HMCameraSnapshotControlDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)> _didTakeSnapshot = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraSnapshotControl> _didUpdateMostRecentSnapshot = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraSnapshotControl>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraSnapshotControlDelegate.DidTakeSnapshot"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error)> DidTakeSnapshotObs => _didTakeSnapshot;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraSnapshotControlDelegate.DidUpdateMostRecentSnapshot"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMCameraSnapshotControl> DidUpdateMostRecentSnapshotObs => _didUpdateMostRecentSnapshot;
        /// <inheritdoc/>
        public override void DidTakeSnapshot(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl, global::HomeKit.HMCameraSnapshot snapshot, global::Foundation.NSError error) => _didTakeSnapshot.OnNext((cameraSnapshotControl, snapshot, error));
        /// <inheritdoc/>
        public override void DidUpdateMostRecentSnapshot(global::HomeKit.HMCameraSnapshotControl cameraSnapshotControl) => _didUpdateMostRecentSnapshot.OnNext(cameraSnapshotControl);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMCameraStreamControlDelegate"/> into Observables.
    /// </summary>
    public partial class HMCameraStreamControlDelegateRx : global::HomeKit.HMCameraStreamControlDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraStreamControl> _didStartStream = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMCameraStreamControl>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)> _didStopStream = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraStreamControlDelegate.DidStartStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMCameraStreamControl> DidStartStreamObs => _didStartStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMCameraStreamControlDelegate.DidStopStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error)> DidStopStreamObs => _didStopStream;
        /// <inheritdoc/>
        public override void DidStartStream(global::HomeKit.HMCameraStreamControl cameraStreamControl) => _didStartStream.OnNext(cameraStreamControl);
        /// <inheritdoc/>
        public override void DidStopStream(global::HomeKit.HMCameraStreamControl cameraStreamControl, global::Foundation.NSError error) => _didStopStream.OnNext((cameraStreamControl, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMHomeDelegate"/> into Observables.
    /// </summary>
    public partial class HMHomeDelegateRx : global::HomeKit.HMHomeDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didAddAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didAddActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didAddRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> _didAddRoomToZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> _didAddService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didAddServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didAddTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> _didAddUser = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didAddZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)> _didEncounterError = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didRemoveAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didRemoveActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didRemoveRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> _didRemoveRoomFromZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> _didRemoveService = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didRemoveServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didRemoveTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> _didRemoveUser = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didRemoveZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> _didUnblockAccessory = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome> _didUpdateAccessControlForCurrentUser = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didUpdateActionsForActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)> _didUpdateHomeHubState = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> _didUpdateNameForActionSet = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome> _didUpdateNameForHome = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHome>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> _didUpdateNameForRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> _didUpdateNameForServiceGroup = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didUpdateNameForTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> _didUpdateNameForZone = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)> _didUpdateRoom = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> _didUpdateTrigger = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidAddAccessoryObs => _didAddAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidAddActionSetObs => _didAddActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidAddRoomObs => _didAddRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddRoomToZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> DidAddRoomToZoneObs => _didAddRoomToZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> DidAddServiceObs => _didAddService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddServiceGroup"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidAddServiceGroupObs => _didAddServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidAddTriggerObs => _didAddTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> DidAddUserObs => _didAddUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidAddZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidAddZoneObs => _didAddZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidEncounterError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory)> DidEncounterErrorObs => _didEncounterError;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidRemoveAccessoryObs => _didRemoveAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidRemoveActionSetObs => _didRemoveActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidRemoveRoomObs => _didRemoveRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveRoomFromZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone)> DidRemoveRoomFromZoneObs => _didRemoveRoomFromZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveService"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group)> DidRemoveServiceObs => _didRemoveService;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveServiceGroup"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidRemoveServiceGroupObs => _didRemoveServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidRemoveTriggerObs => _didRemoveTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMUser user)> DidRemoveUserObs => _didRemoveUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidRemoveZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidRemoveZoneObs => _didRemoveZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUnblockAccessory"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory)> DidUnblockAccessoryObs => _didUnblockAccessory;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateAccessControlForCurrentUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHome> DidUpdateAccessControlForCurrentUserObs => _didUpdateAccessControlForCurrentUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateActionsForActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidUpdateActionsForActionSetObs => _didUpdateActionsForActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateHomeHubState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState)> DidUpdateHomeHubStateObs => _didUpdateHomeHubState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForActionSet"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet)> DidUpdateNameForActionSetObs => _didUpdateNameForActionSet;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHome> DidUpdateNameForHomeObs => _didUpdateNameForHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room)> DidUpdateNameForRoomObs => _didUpdateNameForRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForServiceGroup"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group)> DidUpdateNameForServiceGroupObs => _didUpdateNameForServiceGroup;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidUpdateNameForTriggerObs => _didUpdateNameForTrigger;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateNameForZone"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMZone zone)> DidUpdateNameForZoneObs => _didUpdateNameForZone;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateRoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory)> DidUpdateRoomObs => _didUpdateRoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeDelegate.DidUpdateTrigger"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger)> DidUpdateTriggerObs => _didUpdateTrigger;
        /// <inheritdoc/>
        public override void DidAddAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didAddAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidAddActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didAddActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidAddRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didAddRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidAddRoomToZone(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone) => _didAddRoomToZone.OnNext((home, room, zone));
        /// <inheritdoc/>
        public override void DidAddService(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group) => _didAddService.OnNext((home, service, group));
        /// <inheritdoc/>
        public override void DidAddServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didAddServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidAddTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didAddTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidAddUser(global::HomeKit.HMHome home, global::HomeKit.HMUser user) => _didAddUser.OnNext((home, user));
        /// <inheritdoc/>
        public override void DidAddZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didAddZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidEncounterError(global::HomeKit.HMHome home, global::Foundation.NSError error, global::HomeKit.HMAccessory accessory) => _didEncounterError.OnNext((home, error, accessory));
        /// <inheritdoc/>
        public override void DidRemoveAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didRemoveAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidRemoveActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didRemoveActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidRemoveRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didRemoveRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidRemoveRoomFromZone(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMZone zone) => _didRemoveRoomFromZone.OnNext((home, room, zone));
        /// <inheritdoc/>
        public override void DidRemoveService(global::HomeKit.HMHome home, global::HomeKit.HMService service, global::HomeKit.HMServiceGroup group) => _didRemoveService.OnNext((home, service, group));
        /// <inheritdoc/>
        public override void DidRemoveServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didRemoveServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidRemoveTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didRemoveTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidRemoveUser(global::HomeKit.HMHome home, global::HomeKit.HMUser user) => _didRemoveUser.OnNext((home, user));
        /// <inheritdoc/>
        public override void DidRemoveZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didRemoveZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidUnblockAccessory(global::HomeKit.HMHome home, global::HomeKit.HMAccessory accessory) => _didUnblockAccessory.OnNext((home, accessory));
        /// <inheritdoc/>
        public override void DidUpdateAccessControlForCurrentUser(global::HomeKit.HMHome home) => _didUpdateAccessControlForCurrentUser.OnNext(home);
        /// <inheritdoc/>
        public override void DidUpdateActionsForActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didUpdateActionsForActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidUpdateHomeHubState(global::HomeKit.HMHome home, global::HomeKit.HMHomeHubState homeHubState) => _didUpdateHomeHubState.OnNext((home, homeHubState));
        /// <inheritdoc/>
        public override void DidUpdateNameForActionSet(global::HomeKit.HMHome home, global::HomeKit.HMActionSet actionSet) => _didUpdateNameForActionSet.OnNext((home, actionSet));
        /// <inheritdoc/>
        public override void DidUpdateNameForHome(global::HomeKit.HMHome home) => _didUpdateNameForHome.OnNext(home);
        /// <inheritdoc/>
        public override void DidUpdateNameForRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room) => _didUpdateNameForRoom.OnNext((home, room));
        /// <inheritdoc/>
        public override void DidUpdateNameForServiceGroup(global::HomeKit.HMHome home, global::HomeKit.HMServiceGroup group) => _didUpdateNameForServiceGroup.OnNext((home, group));
        /// <inheritdoc/>
        public override void DidUpdateNameForTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didUpdateNameForTrigger.OnNext((home, trigger));
        /// <inheritdoc/>
        public override void DidUpdateNameForZone(global::HomeKit.HMHome home, global::HomeKit.HMZone zone) => _didUpdateNameForZone.OnNext((home, zone));
        /// <inheritdoc/>
        public override void DidUpdateRoom(global::HomeKit.HMHome home, global::HomeKit.HMRoom room, global::HomeKit.HMAccessory accessory) => _didUpdateRoom.OnNext((home, room, accessory));
        /// <inheritdoc/>
        public override void DidUpdateTrigger(global::HomeKit.HMHome home, global::HomeKit.HMTrigger trigger) => _didUpdateTrigger.OnNext((home, trigger));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::HomeKit.HMHomeManagerDelegate"/> into Observables.
    /// </summary>
    public partial class HMHomeManagerDelegateRx : global::HomeKit.HMHomeManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> _didAddHome = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> _didRemoveHome = new Pharmacist.Common.SingleAwaitSubject<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager> _didUpdateHomes = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager> _didUpdatePrimaryHome = new Pharmacist.Common.SingleAwaitSubject<global::HomeKit.HMHomeManager>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidAddHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> DidAddHomeObs => _didAddHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidRemoveHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home)> DidRemoveHomeObs => _didRemoveHome;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidUpdateHomes"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManager> DidUpdateHomesObs => _didUpdateHomes;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "HomeKit.HMHomeManagerDelegate.DidUpdatePrimaryHome"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::HomeKit.HMHomeManager> DidUpdatePrimaryHomeObs => _didUpdatePrimaryHome;
        /// <inheritdoc/>
        public override void DidAddHome(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home) => _didAddHome.OnNext((manager, home));
        /// <inheritdoc/>
        public override void DidRemoveHome(global::HomeKit.HMHomeManager manager, global::HomeKit.HMHome home) => _didRemoveHome.OnNext((manager, home));
        /// <inheritdoc/>
        public override void DidUpdateHomes(global::HomeKit.HMHomeManager manager) => _didUpdateHomes.OnNext(manager);
        /// <inheritdoc/>
        public override void DidUpdatePrimaryHome(global::HomeKit.HMHomeManager manager) => _didUpdatePrimaryHome.OnNext(manager);
    }
}

namespace MapKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MapKit.MKLocalSearchCompleterDelegate"/> into Observables.
    /// </summary>
    public partial class MKLocalSearchCompleterDelegateRx : global::MapKit.MKLocalSearchCompleterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKLocalSearchCompleter> _didUpdateResults = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKLocalSearchCompleter>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKLocalSearchCompleterDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKLocalSearchCompleterDelegate.DidUpdateResults"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKLocalSearchCompleter> DidUpdateResultsObs => _didUpdateResults;
        /// <inheritdoc/>
        public override void DidFail(global::MapKit.MKLocalSearchCompleter completer, global::Foundation.NSError error) => _didFail.OnNext((completer, error));
        /// <inheritdoc/>
        public override void DidUpdateResults(global::MapKit.MKLocalSearchCompleter completer) => _didUpdateResults.OnNext(completer);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MapKit.MKMapViewDelegate"/> into Observables.
    /// </summary>
    public partial class MKMapViewDelegateRx : global::MapKit.MKMapViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)> _didAddAnnotationViews = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)> _didAddOverlayRenderers = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated)> _didChangeUserTrackingMode = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _didChangeVisibleRegion = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> _didDeselectAnnotationView = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> _didFailToLocateUser = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool fullyRendered)> _didFinishRenderingMap = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool fullyRendered)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> _didSelectAnnotationView = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _didStopLocatingUser = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)> _didUpdateUserLocation = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> _loadingMapFailed = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _mapLoaded = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)> _regionChanged = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)> _regionWillChange = new Pharmacist.Common.SingleAwaitSubject<(global::MapKit.MKMapView mapView, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartLoadingMap = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartLocatingUser = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView> _willStartRenderingMap = new Pharmacist.Common.SingleAwaitSubject<global::MapKit.MKMapView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidAddAnnotationViews"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views)> DidAddAnnotationViewsObs => _didAddAnnotationViews;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidAddOverlayRenderers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers)> DidAddOverlayRenderersObs => _didAddOverlayRenderers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidChangeUserTrackingMode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated)> DidChangeUserTrackingModeObs => _didChangeUserTrackingMode;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidChangeVisibleRegion"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> DidChangeVisibleRegionObs => _didChangeVisibleRegion;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidDeselectAnnotationView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> DidDeselectAnnotationViewObs => _didDeselectAnnotationView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidFailToLocateUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> DidFailToLocateUserObs => _didFailToLocateUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidFinishRenderingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool fullyRendered)> DidFinishRenderingMapObs => _didFinishRenderingMap;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidSelectAnnotationView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view)> DidSelectAnnotationViewObs => _didSelectAnnotationView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidStopLocatingUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> DidStopLocatingUserObs => _didStopLocatingUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.DidUpdateUserLocation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation)> DidUpdateUserLocationObs => _didUpdateUserLocation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.LoadingMapFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, global::Foundation.NSError error)> LoadingMapFailedObs => _loadingMapFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.MapLoaded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> MapLoadedObs => _mapLoaded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.RegionChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool animated)> RegionChangedObs => _regionChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.RegionWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MapKit.MKMapView mapView, bool animated)> RegionWillChangeObs => _regionWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartLoadingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartLoadingMapObs => _willStartLoadingMap;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartLocatingUser"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartLocatingUserObs => _willStartLocatingUser;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MapKit.MKMapViewDelegate.WillStartRenderingMap"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MapKit.MKMapView> WillStartRenderingMapObs => _willStartRenderingMap;
        /// <inheritdoc/>
        public override void DidAddAnnotationViews(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView[] views) => _didAddAnnotationViews.OnNext((mapView, views));
        /// <inheritdoc/>
        public override void DidAddOverlayRenderers(global::MapKit.MKMapView mapView, global::MapKit.MKOverlayRenderer[] renderers) => _didAddOverlayRenderers.OnNext((mapView, renderers));
        /// <inheritdoc/>
        public override void DidChangeUserTrackingMode(global::MapKit.MKMapView mapView, global::MapKit.MKUserTrackingMode mode, bool animated) => _didChangeUserTrackingMode.OnNext((mapView, mode, animated));
        /// <inheritdoc/>
        public override void DidChangeVisibleRegion(global::MapKit.MKMapView mapView) => _didChangeVisibleRegion.OnNext(mapView);
        /// <inheritdoc/>
        public override void DidDeselectAnnotationView(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view) => _didDeselectAnnotationView.OnNext((mapView, view));
        /// <inheritdoc/>
        public override void DidFailToLocateUser(global::MapKit.MKMapView mapView, global::Foundation.NSError error) => _didFailToLocateUser.OnNext((mapView, error));
        /// <inheritdoc/>
        public override void DidFinishRenderingMap(global::MapKit.MKMapView mapView, bool fullyRendered) => _didFinishRenderingMap.OnNext((mapView, fullyRendered));
        /// <inheritdoc/>
        public override void DidSelectAnnotationView(global::MapKit.MKMapView mapView, global::MapKit.MKAnnotationView view) => _didSelectAnnotationView.OnNext((mapView, view));
        /// <inheritdoc/>
        public override void DidStopLocatingUser(global::MapKit.MKMapView mapView) => _didStopLocatingUser.OnNext(mapView);
        /// <inheritdoc/>
        public override void DidUpdateUserLocation(global::MapKit.MKMapView mapView, global::MapKit.MKUserLocation userLocation) => _didUpdateUserLocation.OnNext((mapView, userLocation));
        /// <inheritdoc/>
        public override void LoadingMapFailed(global::MapKit.MKMapView mapView, global::Foundation.NSError error) => _loadingMapFailed.OnNext((mapView, error));
        /// <inheritdoc/>
        public override void MapLoaded(global::MapKit.MKMapView mapView) => _mapLoaded.OnNext(mapView);
        /// <inheritdoc/>
        public override void RegionChanged(global::MapKit.MKMapView mapView, bool animated) => _regionChanged.OnNext((mapView, animated));
        /// <inheritdoc/>
        public override void RegionWillChange(global::MapKit.MKMapView mapView, bool animated) => _regionWillChange.OnNext((mapView, animated));
        /// <inheritdoc/>
        public override void WillStartLoadingMap(global::MapKit.MKMapView mapView) => _willStartLoadingMap.OnNext(mapView);
        /// <inheritdoc/>
        public override void WillStartLocatingUser(global::MapKit.MKMapView mapView) => _willStartLocatingUser.OnNext(mapView);
        /// <inheritdoc/>
        public override void WillStartRenderingMap(global::MapKit.MKMapView mapView) => _willStartRenderingMap.OnNext(mapView);
    }
}

namespace MetalKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MetalKit.MTKViewDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MTKViewDelegateRx : global::MetalKit.MTKViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MetalKit.MTKView> _draw = new Pharmacist.Common.SingleAwaitSubject<global::MetalKit.MTKView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)> _drawableSizeWillChange = new Pharmacist.Common.SingleAwaitSubject<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MetalKit.MTKViewDelegate.Draw"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MetalKit.MTKView> DrawObs => _draw;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MetalKit.MTKViewDelegate.DrawableSizeWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size)> DrawableSizeWillChangeObs => _drawableSizeWillChange;
        /// <inheritdoc/>
        public override void Draw(global::MetalKit.MTKView view) => _draw.OnNext(view);
        /// <inheritdoc/>
        public override void DrawableSizeWillChange(global::MetalKit.MTKView view, global::CoreGraphics.CGSize size) => _drawableSizeWillChange.OnNext((view, size));
    }
}

namespace MultipeerConnectivity
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCAdvertiserAssistantDelegate"/> into Observables.
    /// </summary>
    public partial class MCAdvertiserAssistantDelegateRx : global::MultipeerConnectivity.MCAdvertiserAssistantDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant> _didDismissInvitation = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant> _willPresentInvitation = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCAdvertiserAssistant>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCAdvertiserAssistantDelegate.DidDismissInvitation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCAdvertiserAssistant> DidDismissInvitationObs => _didDismissInvitation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCAdvertiserAssistantDelegate.WillPresentInvitation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCAdvertiserAssistant> WillPresentInvitationObs => _willPresentInvitation;
        /// <inheritdoc/>
        public override void DidDismissInvitation(global::MultipeerConnectivity.MCAdvertiserAssistant advertiserAssistant) => _didDismissInvitation.OnNext(advertiserAssistant);
        /// <inheritdoc/>
        public override void WillPresentInvitation(global::MultipeerConnectivity.MCAdvertiserAssistant advertiserAssistant) => _willPresentInvitation.OnNext(advertiserAssistant);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCBrowserViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCBrowserViewControllerDelegateRx : global::MultipeerConnectivity.MCBrowserViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController> _wasCancelled = new Pharmacist.Common.SingleAwaitSubject<global::MultipeerConnectivity.MCBrowserViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCBrowserViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCBrowserViewController> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCBrowserViewControllerDelegate.WasCancelled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::MultipeerConnectivity.MCBrowserViewController> WasCancelledObs => _wasCancelled;
        /// <inheritdoc/>
        public override void DidFinish(global::MultipeerConnectivity.MCBrowserViewController browserViewController) => _didFinish.OnNext(browserViewController);
        /// <inheritdoc/>
        public override void WasCancelled(global::MultipeerConnectivity.MCBrowserViewController browserViewController) => _wasCancelled.OnNext(browserViewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCNearbyServiceAdvertiserDelegateRx : global::MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)> _didNotStartAdvertisingPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)> _didReceiveInvitationFromPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidNotStartAdvertisingPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error)> DidNotStartAdvertisingPeerObs => _didNotStartAdvertisingPeer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler)> DidReceiveInvitationFromPeerObs => _didReceiveInvitationFromPeer;
        /// <inheritdoc/>
        public override void DidNotStartAdvertisingPeer(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::Foundation.NSError error) => _didNotStartAdvertisingPeer.OnNext((advertiser, error));
        /// <inheritdoc/>
        public override void DidReceiveInvitationFromPeer(global::MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSData context, global::MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler) => _didReceiveInvitationFromPeer.OnNext((advertiser, peerID, context, invitationHandler));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCNearbyServiceBrowserDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCNearbyServiceBrowserDelegateRx : global::MultipeerConnectivity.MCNearbyServiceBrowserDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)> _didNotStartBrowsingForPeers = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)> _foundPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)> _lostPeer = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.DidNotStartBrowsingForPeers"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error)> DidNotStartBrowsingForPeersObs => _didNotStartBrowsingForPeers;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info)> FoundPeerObs => _foundPeer;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCNearbyServiceBrowserDelegate.LostPeer"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID)> LostPeerObs => _lostPeer;
        /// <inheritdoc/>
        public override void DidNotStartBrowsingForPeers(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::Foundation.NSError error) => _didNotStartBrowsingForPeers.OnNext((browser, error));
        /// <inheritdoc/>
        public override void FoundPeer(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID, global::Foundation.NSDictionary info) => _foundPeer.OnNext((browser, peerID, info));
        /// <inheritdoc/>
        public override void LostPeer(global::MultipeerConnectivity.MCNearbyServiceBrowser browser, global::MultipeerConnectivity.MCPeerID peerID) => _lostPeer.OnNext((browser, peerID));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::MultipeerConnectivity.MCSessionDelegate"/> into Observables.
    /// </summary>
    public abstract partial class MCSessionDelegateRx : global::MultipeerConnectivity.MCSessionDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)> _didChangeState = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)> _didFinishReceivingResource = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)> _didReceiveData = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)> _didReceiveStream = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)> _didStartReceivingResource = new Pharmacist.Common.SingleAwaitSubject<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidChangeState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state)> DidChangeStateObs => _didChangeState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidFinishReceivingResource"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error)> DidFinishReceivingResourceObs => _didFinishReceivingResource;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidReceiveData"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID)> DidReceiveDataObs => _didReceiveData;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidReceiveStream"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID)> DidReceiveStreamObs => _didReceiveStream;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "MultipeerConnectivity.MCSessionDelegate.DidStartReceivingResource"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress)> DidStartReceivingResourceObs => _didStartReceivingResource;
        /// <inheritdoc/>
        public override void DidChangeState(global::MultipeerConnectivity.MCSession session, global::MultipeerConnectivity.MCPeerID peerID, global::MultipeerConnectivity.MCSessionState state) => _didChangeState.OnNext((session, peerID, state));
        /// <inheritdoc/>
        public override void DidFinishReceivingResource(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSUrl localUrl, global::Foundation.NSError error) => _didFinishReceivingResource.OnNext((session, resourceName, fromPeer, localUrl, error));
        /// <inheritdoc/>
        public override void DidReceiveData(global::MultipeerConnectivity.MCSession session, global::Foundation.NSData data, global::MultipeerConnectivity.MCPeerID peerID) => _didReceiveData.OnNext((session, data, peerID));
        /// <inheritdoc/>
        public override void DidReceiveStream(global::MultipeerConnectivity.MCSession session, global::Foundation.NSInputStream stream, string streamName, global::MultipeerConnectivity.MCPeerID peerID) => _didReceiveStream.OnNext((session, stream, streamName, peerID));
        /// <inheritdoc/>
        public override void DidStartReceivingResource(global::MultipeerConnectivity.MCSession session, string resourceName, global::MultipeerConnectivity.MCPeerID fromPeer, global::Foundation.NSProgress progress) => _didStartReceivingResource.OnNext((session, resourceName, fromPeer, progress));
    }
}

namespace PhotosUI
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::PhotosUI.PHLivePhotoViewDelegate"/> into Observables.
    /// </summary>
    public partial class PHLivePhotoViewDelegateRx : global::PhotosUI.PHLivePhotoViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> _didEndPlayback = new Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> _willBeginPlayback = new Pharmacist.Common.SingleAwaitSubject<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PhotosUI.PHLivePhotoViewDelegate.DidEndPlayback"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> DidEndPlaybackObs => _didEndPlayback;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "PhotosUI.PHLivePhotoViewDelegate.WillBeginPlayback"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle)> WillBeginPlaybackObs => _willBeginPlayback;
        /// <inheritdoc/>
        public override void DidEndPlayback(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle) => _didEndPlayback.OnNext((livePhotoView, playbackStyle));
        /// <inheritdoc/>
        public override void WillBeginPlayback(global::PhotosUI.PHLivePhotoView livePhotoView, global::PhotosUI.PHLivePhotoViewPlaybackStyle playbackStyle) => _willBeginPlayback.OnNext((livePhotoView, playbackStyle));
    }
}

namespace ReplayKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPBroadcastActivityViewControllerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class RPBroadcastActivityViewControllerDelegateRx : global::ReplayKit.RPBroadcastActivityViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> _didFinish = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastActivityViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::ReplayKit.RPBroadcastActivityViewController broadcastActivityViewController, global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error) => _didFinish.OnNext((broadcastActivityViewController, broadcastController, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPBroadcastControllerDelegate"/> into Observables.
    /// </summary>
    public partial class RPBroadcastControllerDelegateRx : global::ReplayKit.RPBroadcastControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> _didFinish = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl)> _didUpdateBroadcastUrl = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo)> _didUpdateServiceInfo = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error)> DidFinishObs => _didFinish;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastControllerDelegate.DidUpdateBroadcastUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl)> DidUpdateBroadcastUrlObs => _didUpdateBroadcastUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPBroadcastControllerDelegate.DidUpdateServiceInfo"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo)> DidUpdateServiceInfoObs => _didUpdateServiceInfo;
        /// <inheritdoc/>
        public override void DidFinish(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSError error) => _didFinish.OnNext((broadcastController, error));
        /// <inheritdoc/>
        public override void DidUpdateBroadcastUrl(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSUrl broadcastUrl) => _didUpdateBroadcastUrl.OnNext((broadcastController, broadcastUrl));
        /// <inheritdoc/>
        public override void DidUpdateServiceInfo(global::ReplayKit.RPBroadcastController broadcastController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.INSCoding> serviceInfo) => _didUpdateServiceInfo.OnNext((broadcastController, serviceInfo));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPPreviewViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class RPPreviewViewControllerDelegateRx : global::ReplayKit.RPPreviewViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ReplayKit.RPPreviewViewController> _didFinish = new Pharmacist.Common.SingleAwaitSubject<global::ReplayKit.RPPreviewViewController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPPreviewViewControllerDelegate.DidFinish"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ReplayKit.RPPreviewViewController> DidFinishObs => _didFinish;
        /// <inheritdoc/>
        public override void DidFinish(global::ReplayKit.RPPreviewViewController previewController) => _didFinish.OnNext(previewController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::ReplayKit.RPScreenRecorderDelegate"/> into Observables.
    /// </summary>
    public partial class RPScreenRecorderDelegateRx : global::ReplayKit.RPScreenRecorderDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::ReplayKit.RPScreenRecorder> _didChangeAvailability = new Pharmacist.Common.SingleAwaitSubject<global::ReplayKit.RPScreenRecorder>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController)> _didStopRecording = new Pharmacist.Common.SingleAwaitSubject<(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPScreenRecorderDelegate.DidChangeAvailability"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::ReplayKit.RPScreenRecorder> DidChangeAvailabilityObs => _didChangeAvailability;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "ReplayKit.RPScreenRecorderDelegate.DidStopRecording"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController)> DidStopRecordingObs => _didStopRecording;
        /// <inheritdoc/>
        public override void DidChangeAvailability(global::ReplayKit.RPScreenRecorder screenRecorder) => _didChangeAvailability.OnNext(screenRecorder);
        /// <inheritdoc/>
        public override void DidStopRecording(global::ReplayKit.RPScreenRecorder screenRecorder, global::Foundation.NSError error, global::ReplayKit.RPPreviewViewController previewViewController) => _didStopRecording.OnNext((screenRecorder, error, previewViewController));
    }
}

namespace SceneKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNAvoidOccluderConstraintDelegate"/> into Observables.
    /// </summary>
    public partial class SCNAvoidOccluderConstraintDelegateRx : global::SceneKit.SCNAvoidOccluderConstraintDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> _didAvoidOccluder = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNAvoidOccluderConstraintDelegate.DidAvoidOccluder"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node)> DidAvoidOccluderObs => _didAvoidOccluder;
        /// <inheritdoc/>
        public override void DidAvoidOccluder(global::SceneKit.SCNAvoidOccluderConstraint constraint, global::SceneKit.SCNNode occluder, global::SceneKit.SCNNode node) => _didAvoidOccluder.OnNext((constraint, occluder, node));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNCameraControllerDelegate"/> into Observables.
    /// </summary>
    public partial class SCNCameraControllerDelegateRx : global::SceneKit.SCNCameraControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaDidEnd = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController> _cameraInertiaWillStart = new Pharmacist.Common.SingleAwaitSubject<global::SceneKit.SCNCameraController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNCameraControllerDelegate.CameraInertiaDidEnd"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaDidEndObs => _cameraInertiaDidEnd;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNCameraControllerDelegate.CameraInertiaWillStart"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SceneKit.SCNCameraController> CameraInertiaWillStartObs => _cameraInertiaWillStart;
        /// <inheritdoc/>
        public override void CameraInertiaDidEnd(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaDidEnd.OnNext(cameraController);
        /// <inheritdoc/>
        public override void CameraInertiaWillStart(global::SceneKit.SCNCameraController cameraController) => _cameraInertiaWillStart.OnNext(cameraController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNNodeRendererDelegate"/> into Observables.
    /// </summary>
    public partial class SCNNodeRendererDelegateRx : global::SceneKit.SCNNodeRendererDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)> _render = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNNodeRendererDelegate.Render"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments)> RenderObs => _render;
        /// <inheritdoc/>
        public override void Render(global::SceneKit.SCNNode node, global::SceneKit.SCNRenderer renderer, global::Foundation.NSDictionary arguments) => _render.OnNext((node, renderer, arguments));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SCNPhysicsContactDelegateRx : global::SceneKit.SCNPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> _didUpdateContact = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidBeginContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidEndContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidEndContactObs => _didEndContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNPhysicsContactDelegate.DidUpdateContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact)> DidUpdateContactObs => _didUpdateContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didBeginContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidEndContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didEndContact.OnNext((world, contact));
        /// <inheritdoc/>
        public override void DidUpdateContact(global::SceneKit.SCNPhysicsWorld world, global::SceneKit.SCNPhysicsContact contact) => _didUpdateContact.OnNext((world, contact));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNProgramDelegate"/> into Observables.
    /// </summary>
    public partial class SCNProgramDelegateRx : global::SceneKit.SCNProgramDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)> _handleError = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNProgramDelegate.HandleError"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.SCNProgram program, global::Foundation.NSError error)> HandleErrorObs => _handleError;
        /// <inheritdoc/>
        public override void HandleError(global::SceneKit.SCNProgram program, global::Foundation.NSError error) => _handleError.OnNext((program, error));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SceneKit.SCNSceneRendererDelegate"/> into Observables.
    /// </summary>
    public partial class SCNSceneRendererDelegateRx : global::SceneKit.SCNSceneRendererDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didApplyAnimations = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _didRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> _update = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> _willRenderScene = new Pharmacist.Common.SingleAwaitSubject<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidApplyAnimations"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidApplyAnimationsObs => _didApplyAnimations;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidApplyConstraints"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double atTime)> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> DidRenderSceneObs => _didRenderScene;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.DidSimulatePhysics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds)> UpdateObs => _update;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SceneKit.SCNSceneRendererDelegate.WillRenderScene"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds)> WillRenderSceneObs => _willRenderScene;
        /// <inheritdoc/>
        public override void DidApplyAnimations(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didApplyAnimations.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SceneKit.ISCNSceneRenderer renderer, double atTime) => _didApplyConstraints.OnNext((renderer, atTime));
        /// <inheritdoc/>
        public override void DidRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _didRenderScene.OnNext((renderer, scene, timeInSeconds));
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _didSimulatePhysics.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void Update(global::SceneKit.ISCNSceneRenderer renderer, double timeInSeconds) => _update.OnNext((renderer, timeInSeconds));
        /// <inheritdoc/>
        public override void WillRenderScene(global::SceneKit.ISCNSceneRenderer renderer, global::SceneKit.SCNScene scene, double timeInSeconds) => _willRenderScene.OnNext((renderer, scene, timeInSeconds));
    }
}

namespace SpriteKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKPhysicsContactDelegate"/> into Observables.
    /// </summary>
    public partial class SKPhysicsContactDelegateRx : global::SpriteKit.SKPhysicsContactDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didBeginContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact> _didEndContact = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKPhysicsContact>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsContactDelegate.DidBeginContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidBeginContactObs => _didBeginContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKPhysicsContactDelegate.DidEndContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKPhysicsContact> DidEndContactObs => _didEndContact;
        /// <inheritdoc/>
        public override void DidBeginContact(global::SpriteKit.SKPhysicsContact contact) => _didBeginContact.OnNext(contact);
        /// <inheritdoc/>
        public override void DidEndContact(global::SpriteKit.SKPhysicsContact contact) => _didEndContact.OnNext(contact);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::SpriteKit.SKSceneDelegate"/> into Observables.
    /// </summary>
    public partial class SKSceneDelegateRx : global::SpriteKit.SKSceneDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didApplyConstraints = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didEvaluateActions = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didFinishUpdate = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene> _didSimulatePhysics = new Pharmacist.Common.SingleAwaitSubject<global::SpriteKit.SKScene>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)> _update = new Pharmacist.Common.SingleAwaitSubject<(double currentTime, global::SpriteKit.SKScene scene)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidApplyConstraints"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidApplyConstraintsObs => _didApplyConstraints;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidEvaluateActions"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidEvaluateActionsObs => _didEvaluateActions;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidFinishUpdate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidFinishUpdateObs => _didFinishUpdate;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.DidSimulatePhysics"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::SpriteKit.SKScene> DidSimulatePhysicsObs => _didSimulatePhysics;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "SpriteKit.SKSceneDelegate.Update"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(double currentTime, global::SpriteKit.SKScene scene)> UpdateObs => _update;
        /// <inheritdoc/>
        public override void DidApplyConstraints(global::SpriteKit.SKScene scene) => _didApplyConstraints.OnNext(scene);
        /// <inheritdoc/>
        public override void DidEvaluateActions(global::SpriteKit.SKScene scene) => _didEvaluateActions.OnNext(scene);
        /// <inheritdoc/>
        public override void DidFinishUpdate(global::SpriteKit.SKScene scene) => _didFinishUpdate.OnNext(scene);
        /// <inheritdoc/>
        public override void DidSimulatePhysics(global::SpriteKit.SKScene scene) => _didSimulatePhysics.OnNext(scene);
        /// <inheritdoc/>
        public override void Update(double currentTime, global::SpriteKit.SKScene scene) => _update.OnNext((currentTime, scene));
    }
}

namespace StoreKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKProductsRequestDelegate"/> into Observables.
    /// </summary>
    public abstract partial class SKProductsRequestDelegateRx : global::StoreKit.SKProductsRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> _receivedResponse = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKProductsRequestDelegate.ReceivedResponse"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response)> ReceivedResponseObs => _receivedResponse;
        /// <inheritdoc/>
        public override void ReceivedResponse(global::StoreKit.SKProductsRequest request, global::StoreKit.SKProductsResponse response) => _receivedResponse.OnNext((request, response));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::StoreKit.SKRequestDelegate"/> into Observables.
    /// </summary>
    public partial class SKRequestDelegateRx : global::StoreKit.SKRequestDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> _requestFailed = new Pharmacist.Common.SingleAwaitSubject<(global::StoreKit.SKRequest request, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest> _requestFinished = new Pharmacist.Common.SingleAwaitSubject<global::StoreKit.SKRequest>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequestDelegate.RequestFailed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::StoreKit.SKRequest request, global::Foundation.NSError error)> RequestFailedObs => _requestFailed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "StoreKit.SKRequestDelegate.RequestFinished"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::StoreKit.SKRequest> RequestFinishedObs => _requestFinished;
        /// <inheritdoc/>
        public override void RequestFailed(global::StoreKit.SKRequest request, global::Foundation.NSError error) => _requestFailed.OnNext((request, error));
        /// <inheritdoc/>
        public override void RequestFinished(global::StoreKit.SKRequest request) => _requestFinished.OnNext(request);
    }
}

namespace TVMLKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::TVMLKit.TVApplicationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class TVApplicationControllerDelegateRx : global::TVMLKit.TVApplicationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSError error)> _didFail = new Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options)> _didFinishLaunching = new Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options)> _didStop = new Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::JavaScriptCore.JSContext jsContext)> _evaluateAppJavaScript = new Pharmacist.Common.SingleAwaitSubject<(global::TVMLKit.TVApplicationController appController, global::JavaScriptCore.JSContext jsContext)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "TVMLKit.TVApplicationControllerDelegate.DidFail"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSError error)> DidFailObs => _didFail;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "TVMLKit.TVApplicationControllerDelegate.DidFinishLaunching"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options)> DidFinishLaunchingObs => _didFinishLaunching;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "TVMLKit.TVApplicationControllerDelegate.DidStop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options)> DidStopObs => _didStop;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "TVMLKit.TVApplicationControllerDelegate.EvaluateAppJavaScript"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::TVMLKit.TVApplicationController appController, global::JavaScriptCore.JSContext jsContext)> EvaluateAppJavaScriptObs => _evaluateAppJavaScript;
        /// <inheritdoc/>
        public override void DidFail(global::TVMLKit.TVApplicationController appController, global::Foundation.NSError error) => _didFail.OnNext((appController, error));
        /// <inheritdoc/>
        public override void DidFinishLaunching(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options) => _didFinishLaunching.OnNext((appController, options));
        /// <inheritdoc/>
        public override void DidStop(global::TVMLKit.TVApplicationController appController, global::Foundation.NSDictionary<global::Foundation.NSString, global::Foundation.NSObject> options) => _didStop.OnNext((appController, options));
        /// <inheritdoc/>
        public override void EvaluateAppJavaScript(global::TVMLKit.TVApplicationController appController, global::JavaScriptCore.JSContext jsContext) => _evaluateAppJavaScript.OnNext((appController, jsContext));
    }
}

namespace UIKit
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.NSLayoutManagerDelegate"/> into Observables.
    /// </summary>
    public partial class NSLayoutManagerDelegateRx : global::UIKit.NSLayoutManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)> _didChangeGeometry = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag)> _didCompleteLayout = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.NSLayoutManager> _didInvalidatedLayout = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.NSLayoutManager>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSLayoutManagerDelegate.DidChangeGeometry"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize)> DidChangeGeometryObs => _didChangeGeometry;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSLayoutManagerDelegate.DidCompleteLayout"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag)> DidCompleteLayoutObs => _didCompleteLayout;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSLayoutManagerDelegate.DidInvalidatedLayout"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.NSLayoutManager> DidInvalidatedLayoutObs => _didInvalidatedLayout;
        /// <inheritdoc/>
        public override void DidChangeGeometry(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, global::CoreGraphics.CGSize oldSize) => _didChangeGeometry.OnNext((layoutManager, textContainer, oldSize));
        /// <inheritdoc/>
        public override void DidCompleteLayout(global::UIKit.NSLayoutManager layoutManager, global::UIKit.NSTextContainer textContainer, bool layoutFinishedFlag) => _didCompleteLayout.OnNext((layoutManager, textContainer, layoutFinishedFlag));
        /// <inheritdoc/>
        public override void DidInvalidatedLayout(global::UIKit.NSLayoutManager sender) => _didInvalidatedLayout.OnNext(sender);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.NSTextStorageDelegate"/> into Observables.
    /// </summary>
    public partial class NSTextStorageDelegateRx : global::UIKit.NSTextStorageDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> _didProcessEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> _willProcessEditing = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorageDelegate.DidProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> DidProcessEditingObs => _didProcessEditing;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.NSTextStorageDelegate.WillProcessEditing"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta)> WillProcessEditingObs => _willProcessEditing;
        /// <inheritdoc/>
        public override void DidProcessEditing(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta) => _didProcessEditing.OnNext((textStorage, editedMask, editedRange, delta));
        /// <inheritdoc/>
        public override void WillProcessEditing(global::UIKit.NSTextStorage textStorage, global::UIKit.NSTextStorageEditActions editedMask, global::Foundation.NSRange editedRange, global::System.nint delta) => _willProcessEditing.OnNext((textStorage, editedMask, editedRange, delta));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIAdaptivePresentationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIAdaptivePresentationControllerDelegateRx : global::UIKit.UIAdaptivePresentationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator)> _willPresent = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIAdaptivePresentationControllerDelegate.WillPresent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator)> WillPresentObs => _willPresent;
        /// <inheritdoc/>
        public override void WillPresent(global::UIKit.UIPresentationController presentationController, global::UIKit.UIModalPresentationStyle style, global::UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator) => _willPresent.OnNext((presentationController, style, transitionCoordinator));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIApplicationDelegate"/> into Observables.
    /// </summary>
    public partial class UIApplicationDelegateRx : global::UIKit.UIApplicationDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _applicationSignificantTimeChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> _didDecodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _didEnterBackground = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)> _didFailToContinueUserActivitiy = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> _didReceiveRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSError error)> _failedToRegisterForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSError error)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _finishedLaunching = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)> _handleEventsForBackgroundUrl = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)> _handleWatchKitExtensionRequest = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _onActivated = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _onResignActivation = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> _performFetch = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _protectedDataDidBecomeAvailable = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _protectedDataWillBecomeUnavailable = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)> _receivedRemoteNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _receiveMemoryWarning = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)> _registeredForRemoteNotifications = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _shouldRequestHealthAuthorization = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)> _userActivityUpdated = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)> _userDidAcceptCloudKitShare = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> _willEncodeRestorableState = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _willEnterForeground = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication> _willTerminate = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIApplication>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ApplicationSignificantTimeChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ApplicationSignificantTimeChangeObs => _applicationSignificantTimeChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidDecodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> DidDecodeRestorableStateObs => _didDecodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidEnterBackground"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> DidEnterBackgroundObs => _didEnterBackground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidFailToContinueUserActivitiy"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error)> DidFailToContinueUserActivitiyObs => _didFailToContinueUserActivitiy;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.DidReceiveRemoteNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> DidReceiveRemoteNotificationObs => _didReceiveRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.FailedToRegisterForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSError error)> FailedToRegisterForRemoteNotificationsObs => _failedToRegisterForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.FinishedLaunching"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> FinishedLaunchingObs => _finishedLaunching;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.HandleEventsForBackgroundUrl"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler)> HandleEventsForBackgroundUrlObs => _handleEventsForBackgroundUrl;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.HandleWatchKitExtensionRequest"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply)> HandleWatchKitExtensionRequestObs => _handleWatchKitExtensionRequest;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.OnActivated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> OnActivatedObs => _onActivated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.OnResignActivation"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> OnResignActivationObs => _onResignActivation;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.PerformFetch"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler)> PerformFetchObs => _performFetch;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ProtectedDataDidBecomeAvailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ProtectedDataDidBecomeAvailableObs => _protectedDataDidBecomeAvailable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ProtectedDataWillBecomeUnavailable"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ProtectedDataWillBecomeUnavailableObs => _protectedDataWillBecomeUnavailable;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ReceivedRemoteNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo)> ReceivedRemoteNotificationObs => _receivedRemoteNotification;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ReceiveMemoryWarning"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ReceiveMemoryWarningObs => _receiveMemoryWarning;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.RegisteredForRemoteNotifications"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken)> RegisteredForRemoteNotificationsObs => _registeredForRemoteNotifications;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.ShouldRequestHealthAuthorization"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> ShouldRequestHealthAuthorizationObs => _shouldRequestHealthAuthorization;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.UserActivityUpdated"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity)> UserActivityUpdatedObs => _userActivityUpdated;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.UserDidAcceptCloudKitShare"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata)> UserDidAcceptCloudKitShareObs => _userDidAcceptCloudKitShare;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillEncodeRestorableState"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIApplication application, global::Foundation.NSCoder coder)> WillEncodeRestorableStateObs => _willEncodeRestorableState;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillEnterForeground"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> WillEnterForegroundObs => _willEnterForeground;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIApplicationDelegate.WillTerminate"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIApplication> WillTerminateObs => _willTerminate;
        /// <inheritdoc/>
        public override void ApplicationSignificantTimeChange(global::UIKit.UIApplication application) => _applicationSignificantTimeChange.OnNext(application);
        /// <inheritdoc/>
        public override void DidDecodeRestorableState(global::UIKit.UIApplication application, global::Foundation.NSCoder coder) => _didDecodeRestorableState.OnNext((application, coder));
        /// <inheritdoc/>
        public override void DidEnterBackground(global::UIKit.UIApplication application) => _didEnterBackground.OnNext(application);
        /// <inheritdoc/>
        public override void DidFailToContinueUserActivitiy(global::UIKit.UIApplication application, string userActivityType, global::Foundation.NSError error) => _didFailToContinueUserActivitiy.OnNext((application, userActivityType, error));
        /// <inheritdoc/>
        public override void DidReceiveRemoteNotification(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler) => _didReceiveRemoteNotification.OnNext((application, userInfo, completionHandler));
        /// <inheritdoc/>
        public override void FailedToRegisterForRemoteNotifications(global::UIKit.UIApplication application, global::Foundation.NSError error) => _failedToRegisterForRemoteNotifications.OnNext((application, error));
        /// <inheritdoc/>
        public override void FinishedLaunching(global::UIKit.UIApplication application) => _finishedLaunching.OnNext(application);
        /// <inheritdoc/>
        public override void HandleEventsForBackgroundUrl(global::UIKit.UIApplication application, string sessionIdentifier, global::System.Action completionHandler) => _handleEventsForBackgroundUrl.OnNext((application, sessionIdentifier, completionHandler));
        /// <inheritdoc/>
        public override void HandleWatchKitExtensionRequest(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo, global::System.Action<global::Foundation.NSDictionary> reply) => _handleWatchKitExtensionRequest.OnNext((application, userInfo, reply));
        /// <inheritdoc/>
        public override void OnActivated(global::UIKit.UIApplication application) => _onActivated.OnNext(application);
        /// <inheritdoc/>
        public override void OnResignActivation(global::UIKit.UIApplication application) => _onResignActivation.OnNext(application);
        /// <inheritdoc/>
        public override void PerformFetch(global::UIKit.UIApplication application, global::System.Action<global::UIKit.UIBackgroundFetchResult> completionHandler) => _performFetch.OnNext((application, completionHandler));
        /// <inheritdoc/>
        public override void ProtectedDataDidBecomeAvailable(global::UIKit.UIApplication application) => _protectedDataDidBecomeAvailable.OnNext(application);
        /// <inheritdoc/>
        public override void ProtectedDataWillBecomeUnavailable(global::UIKit.UIApplication application) => _protectedDataWillBecomeUnavailable.OnNext(application);
        /// <inheritdoc/>
        public override void ReceivedRemoteNotification(global::UIKit.UIApplication application, global::Foundation.NSDictionary userInfo) => _receivedRemoteNotification.OnNext((application, userInfo));
        /// <inheritdoc/>
        public override void ReceiveMemoryWarning(global::UIKit.UIApplication application) => _receiveMemoryWarning.OnNext(application);
        /// <inheritdoc/>
        public override void RegisteredForRemoteNotifications(global::UIKit.UIApplication application, global::Foundation.NSData deviceToken) => _registeredForRemoteNotifications.OnNext((application, deviceToken));
        /// <inheritdoc/>
        public override void ShouldRequestHealthAuthorization(global::UIKit.UIApplication application) => _shouldRequestHealthAuthorization.OnNext(application);
        /// <inheritdoc/>
        public override void UserActivityUpdated(global::UIKit.UIApplication application, global::Foundation.NSUserActivity userActivity) => _userActivityUpdated.OnNext((application, userActivity));
        /// <inheritdoc/>
        public override void UserDidAcceptCloudKitShare(global::UIKit.UIApplication application, global::CloudKit.CKShareMetadata cloudKitShareMetadata) => _userDidAcceptCloudKitShare.OnNext((application, cloudKitShareMetadata));
        /// <inheritdoc/>
        public override void WillEncodeRestorableState(global::UIKit.UIApplication application, global::Foundation.NSCoder coder) => _willEncodeRestorableState.OnNext((application, coder));
        /// <inheritdoc/>
        public override void WillEnterForeground(global::UIKit.UIApplication application) => _willEnterForeground.OnNext(application);
        /// <inheritdoc/>
        public override void WillTerminate(global::UIKit.UIApplication application) => _willTerminate.OnNext(application);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UICollectionViewDelegate"/> into Observables.
    /// </summary>
    public partial class UICollectionViewDelegateRx : global::UIKit.UICollectionViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> _cellDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> _didUpdateFocus = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemDeselected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemHighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> _itemUnhighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> _performAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)> _supplementaryViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> _willDisplayCell = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath)> _willDisplaySupplementaryView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.CellDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> CellDisplayingEndedObs => _cellDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.DidUpdateFocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> DidUpdateFocusObs => _didUpdateFocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemDeselected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemDeselectedObs => _itemDeselected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemHighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemHighlightedObs => _itemHighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemSelectedObs => _itemSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.ItemUnhighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath)> ItemUnhighlightedObs => _itemUnhighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.PerformAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> PerformActionObs => _performAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.SupplementaryViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath)> SupplementaryViewDisplayingEndedObs => _supplementaryViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.WillDisplayCell"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath)> WillDisplayCellObs => _willDisplayCell;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollectionViewDelegate.WillDisplaySupplementaryView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath)> WillDisplaySupplementaryViewObs => _willDisplaySupplementaryView;
        /// <inheritdoc/>
        public override void CellDisplayingEnded(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath) => _cellDisplayingEnded.OnNext((collectionView, cell, indexPath));
        /// <inheritdoc/>
        public override void DidUpdateFocus(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator) => _didUpdateFocus.OnNext((collectionView, context, coordinator));
        /// <inheritdoc/>
        public override void ItemDeselected(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemDeselected.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void ItemHighlighted(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemHighlighted.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void ItemSelected(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemSelected.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void ItemUnhighlighted(global::UIKit.UICollectionView collectionView, global::Foundation.NSIndexPath indexPath) => _itemUnhighlighted.OnNext((collectionView, indexPath));
        /// <inheritdoc/>
        public override void PerformAction(global::UIKit.UICollectionView collectionView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender) => _performAction.OnNext((collectionView, action, indexPath, sender));
        /// <inheritdoc/>
        public override void SupplementaryViewDisplayingEnded(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, global::Foundation.NSString elementKind, global::Foundation.NSIndexPath indexPath) => _supplementaryViewDisplayingEnded.OnNext((collectionView, view, elementKind, indexPath));
        /// <inheritdoc/>
        public override void WillDisplayCell(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionViewCell cell, global::Foundation.NSIndexPath indexPath) => _willDisplayCell.OnNext((collectionView, cell, indexPath));
        /// <inheritdoc/>
        public override void WillDisplaySupplementaryView(global::UIKit.UICollectionView collectionView, global::UIKit.UICollectionReusableView view, string elementKind, global::Foundation.NSIndexPath indexPath) => _willDisplaySupplementaryView.OnNext((collectionView, view, elementKind, indexPath));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UICollisionBehaviorDelegate"/> into Observables.
    /// </summary>
    public partial class UICollisionBehaviorDelegateRx : global::UIKit.UICollisionBehaviorDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint)> _beganBoundaryContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint)> _beganContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier)> _endedBoundaryContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem)> _endedContact = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.BeganBoundaryContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint)> BeganBoundaryContactObs => _beganBoundaryContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.BeganContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint)> BeganContactObs => _beganContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.EndedBoundaryContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier)> EndedBoundaryContactObs => _endedBoundaryContact;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UICollisionBehaviorDelegate.EndedContact"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem)> EndedContactObs => _endedContact;
        /// <inheritdoc/>
        public override void BeganBoundaryContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier, global::CoreGraphics.CGPoint atPoint) => _beganBoundaryContact.OnNext((behavior, dynamicItem, boundaryIdentifier, atPoint));
        /// <inheritdoc/>
        public override void BeganContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem, global::CoreGraphics.CGPoint atPoint) => _beganContact.OnNext((behavior, firstItem, secondItem, atPoint));
        /// <inheritdoc/>
        public override void EndedBoundaryContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem dynamicItem, global::Foundation.NSObject boundaryIdentifier) => _endedBoundaryContact.OnNext((behavior, dynamicItem, boundaryIdentifier));
        /// <inheritdoc/>
        public override void EndedContact(global::UIKit.UICollisionBehavior behavior, global::UIKit.IUIDynamicItem firstItem, global::UIKit.IUIDynamicItem secondItem) => _endedContact.OnNext((behavior, firstItem, secondItem));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIDynamicAnimatorDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIDynamicAnimatorDelegateRx : global::UIKit.UIDynamicAnimatorDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator> _didPause = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator> _willResume = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIDynamicAnimator>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDynamicAnimatorDelegate.DidPause"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDynamicAnimator> DidPauseObs => _didPause;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIDynamicAnimatorDelegate.WillResume"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIDynamicAnimator> WillResumeObs => _willResume;
        /// <inheritdoc/>
        public override void DidPause(global::UIKit.UIDynamicAnimator animator) => _didPause.OnNext(animator);
        /// <inheritdoc/>
        public override void WillResume(global::UIKit.UIDynamicAnimator animator) => _willResume.OnNext(animator);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UINavigationBarDelegate"/> into Observables.
    /// </summary>
    public partial class UINavigationBarDelegateRx : global::UIKit.UINavigationBarDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> _didPopItem = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> _didPushItem = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationBarDelegate.DidPopItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> DidPopItemObs => _didPopItem;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationBarDelegate.DidPushItem"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item)> DidPushItemObs => _didPushItem;
        /// <inheritdoc/>
        public override void DidPopItem(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item) => _didPopItem.OnNext((navigationBar, item));
        /// <inheritdoc/>
        public override void DidPushItem(global::UIKit.UINavigationBar navigationBar, global::UIKit.UINavigationItem item) => _didPushItem.OnNext((navigationBar, item));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UINavigationControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UINavigationControllerDelegateRx : global::UIKit.UINavigationControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> _didShowViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> _willShowViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationControllerDelegate.DidShowViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> DidShowViewControllerObs => _didShowViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UINavigationControllerDelegate.WillShowViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated)> WillShowViewControllerObs => _willShowViewController;
        /// <inheritdoc/>
        public override void DidShowViewController(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated) => _didShowViewController.OnNext((navigationController, viewController, animated));
        /// <inheritdoc/>
        public override void WillShowViewController(global::UIKit.UINavigationController navigationController, global::UIKit.UIViewController viewController, bool animated) => _willShowViewController.OnNext((navigationController, viewController, animated));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPageViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIPageViewControllerDelegateRx : global::UIKit.UIPageViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed)> _didFinishAnimating = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers)> _willTransition = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewControllerDelegate.DidFinishAnimating"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed)> DidFinishAnimatingObs => _didFinishAnimating;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPageViewControllerDelegate.WillTransition"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers)> WillTransitionObs => _willTransition;
        /// <inheritdoc/>
        public override void DidFinishAnimating(global::UIKit.UIPageViewController pageViewController, bool finished, global::UIKit.UIViewController[] previousViewControllers, bool completed) => _didFinishAnimating.OnNext((pageViewController, finished, previousViewControllers, completed));
        /// <inheritdoc/>
        public override void WillTransition(global::UIKit.UIPageViewController pageViewController, global::UIKit.UIViewController[] pendingViewControllers) => _willTransition.OnNext((pageViewController, pendingViewControllers));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIPopoverControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UIPopoverControllerDelegateRx : global::UIKit.UIPopoverControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverController> _didDismiss = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIPopoverController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIPopoverControllerDelegate.DidDismiss"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIPopoverController> DidDismissObs => _didDismiss;
        /// <inheritdoc/>
        public override void DidDismiss(global::UIKit.UIPopoverController popoverController) => _didDismiss.OnNext(popoverController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIScrollViewDelegate"/> into Observables.
    /// </summary>
    public partial class UIScrollViewDelegateRx : global::UIKit.UIScrollViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _decelerationEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _decelerationStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _didChangeAdjustedContentInset = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _didZoom = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, bool willDecelerate)> _draggingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, bool willDecelerate)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _draggingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrollAnimationEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrolled = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView> _scrolledToTop = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UIScrollView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)> _zoomingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)> _zoomingStarted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DecelerationEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DecelerationEndedObs => _decelerationEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DecelerationStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DecelerationStartedObs => _decelerationStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DidChangeAdjustedContentInset"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DidChangeAdjustedContentInsetObs => _didChangeAdjustedContentInset;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DidZoom"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DidZoomObs => _didZoom;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DraggingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, bool willDecelerate)> DraggingEndedObs => _draggingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.DraggingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> DraggingStartedObs => _draggingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ScrollAnimationEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrollAnimationEndedObs => _scrollAnimationEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.Scrolled"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrolledObs => _scrolled;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ScrolledToTop"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UIScrollView> ScrolledToTopObs => _scrolledToTop;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ZoomingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale)> ZoomingEndedObs => _zoomingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIScrollViewDelegate.ZoomingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view)> ZoomingStartedObs => _zoomingStarted;
        /// <inheritdoc/>
        public override void DecelerationEnded(global::UIKit.UIScrollView scrollView) => _decelerationEnded.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DecelerationStarted(global::UIKit.UIScrollView scrollView) => _decelerationStarted.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DidChangeAdjustedContentInset(global::UIKit.UIScrollView scrollView) => _didChangeAdjustedContentInset.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DidZoom(global::UIKit.UIScrollView scrollView) => _didZoom.OnNext(scrollView);
        /// <inheritdoc/>
        public override void DraggingEnded(global::UIKit.UIScrollView scrollView, bool willDecelerate) => _draggingEnded.OnNext((scrollView, willDecelerate));
        /// <inheritdoc/>
        public override void DraggingStarted(global::UIKit.UIScrollView scrollView) => _draggingStarted.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ScrollAnimationEnded(global::UIKit.UIScrollView scrollView) => _scrollAnimationEnded.OnNext(scrollView);
        /// <inheritdoc/>
        public override void Scrolled(global::UIKit.UIScrollView scrollView) => _scrolled.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ScrolledToTop(global::UIKit.UIScrollView scrollView) => _scrolledToTop.OnNext(scrollView);
        /// <inheritdoc/>
        public override void ZoomingEnded(global::UIKit.UIScrollView scrollView, global::UIKit.UIView withView, global::System.nfloat atScale) => _zoomingEnded.OnNext((scrollView, withView, atScale));
        /// <inheritdoc/>
        public override void ZoomingStarted(global::UIKit.UIScrollView scrollView, global::UIKit.UIView view) => _zoomingStarted.OnNext((scrollView, view));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UISearchBarDelegate"/> into Observables.
    /// </summary>
    public partial class UISearchBarDelegateRx : global::UIKit.UISearchBarDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _onEditingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _onEditingStopped = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar> _searchButtonClicked = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchBar>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope)> _selectedScopeButtonIndexChanged = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, string searchText)> _textChanged = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISearchBar searchBar, string searchText)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.OnEditingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> OnEditingStartedObs => _onEditingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.OnEditingStopped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> OnEditingStoppedObs => _onEditingStopped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.SearchButtonClicked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchBar> SearchButtonClickedObs => _searchButtonClicked;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.SelectedScopeButtonIndexChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope)> SelectedScopeButtonIndexChangedObs => _selectedScopeButtonIndexChanged;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchBarDelegate.TextChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISearchBar searchBar, string searchText)> TextChangedObs => _textChanged;
        /// <inheritdoc/>
        public override void OnEditingStarted(global::UIKit.UISearchBar searchBar) => _onEditingStarted.OnNext(searchBar);
        /// <inheritdoc/>
        public override void OnEditingStopped(global::UIKit.UISearchBar searchBar) => _onEditingStopped.OnNext(searchBar);
        /// <inheritdoc/>
        public override void SearchButtonClicked(global::UIKit.UISearchBar searchBar) => _searchButtonClicked.OnNext(searchBar);
        /// <inheritdoc/>
        public override void SelectedScopeButtonIndexChanged(global::UIKit.UISearchBar searchBar, global::System.nint selectedScope) => _selectedScopeButtonIndexChanged.OnNext((searchBar, selectedScope));
        /// <inheritdoc/>
        public override void TextChanged(global::UIKit.UISearchBar searchBar, string searchText) => _textChanged.OnNext((searchBar, searchText));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UISearchControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UISearchControllerDelegateRx : global::UIKit.UISearchControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _didDismissSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _didPresentSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _presentSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _willDismissSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController> _willPresentSearchController = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UISearchController>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.DidDismissSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> DidDismissSearchControllerObs => _didDismissSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.DidPresentSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> DidPresentSearchControllerObs => _didPresentSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.PresentSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> PresentSearchControllerObs => _presentSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.WillDismissSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> WillDismissSearchControllerObs => _willDismissSearchController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISearchControllerDelegate.WillPresentSearchController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UISearchController> WillPresentSearchControllerObs => _willPresentSearchController;
        /// <inheritdoc/>
        public override void DidDismissSearchController(global::UIKit.UISearchController searchController) => _didDismissSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void DidPresentSearchController(global::UIKit.UISearchController searchController) => _didPresentSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void PresentSearchController(global::UIKit.UISearchController searchController) => _presentSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void WillDismissSearchController(global::UIKit.UISearchController searchController) => _willDismissSearchController.OnNext(searchController);
        /// <inheritdoc/>
        public override void WillPresentSearchController(global::UIKit.UISearchController searchController) => _willPresentSearchController.OnNext(searchController);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UISplitViewControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UISplitViewControllerDelegateRx : global::UIKit.UISplitViewControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode)> _willChangeDisplayMode = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UISplitViewControllerDelegate.WillChangeDisplayMode"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode)> WillChangeDisplayModeObs => _willChangeDisplayMode;
        /// <inheritdoc/>
        public override void WillChangeDisplayMode(global::UIKit.UISplitViewController svc, global::UIKit.UISplitViewControllerDisplayMode displayMode) => _willChangeDisplayMode.OnNext((svc, displayMode));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITabBarControllerDelegate"/> into Observables.
    /// </summary>
    public partial class UITabBarControllerDelegateRx : global::UIKit.UITabBarControllerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController)> _viewControllerSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarControllerDelegate.ViewControllerSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController)> ViewControllerSelectedObs => _viewControllerSelected;
        /// <inheritdoc/>
        public override void ViewControllerSelected(global::UIKit.UITabBarController tabBarController, global::UIKit.UIViewController viewController) => _viewControllerSelected.OnNext((tabBarController, viewController));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITabBarDelegate"/> into Observables.
    /// </summary>
    public partial class UITabBarDelegateRx : global::UIKit.UITabBarDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item)> _itemSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITabBarDelegate.ItemSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item)> ItemSelectedObs => _itemSelected;
        /// <inheritdoc/>
        public override void ItemSelected(global::UIKit.UITabBar tabbar, global::UIKit.UITabBarItem item) => _itemSelected.OnNext((tabbar, item));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITableViewDelegate"/> into Observables.
    /// </summary>
    public partial class UITableViewDelegateRx : global::UIKit.UITableViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _accessoryButtonTapped = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _cellDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> _didUpdateFocus = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _footerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _headerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> _performAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowDeselected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowHighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowUnhighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _willDisplay = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _willDisplayFooterView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _willDisplayHeaderView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.AccessoryButtonTapped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> AccessoryButtonTappedObs => _accessoryButtonTapped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.CellDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> CellDisplayingEndedObs => _cellDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.DidUpdateFocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> DidUpdateFocusObs => _didUpdateFocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.FooterViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> FooterViewDisplayingEndedObs => _footerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.HeaderViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> HeaderViewDisplayingEndedObs => _headerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.PerformAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> PerformActionObs => _performAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowDeselected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowDeselectedObs => _rowDeselected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowHighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowHighlightedObs => _rowHighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowSelectedObs => _rowSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.RowUnhighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowUnhighlightedObs => _rowUnhighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.WillDisplay"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> WillDisplayObs => _willDisplay;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.WillDisplayFooterView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> WillDisplayFooterViewObs => _willDisplayFooterView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewDelegate.WillDisplayHeaderView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> WillDisplayHeaderViewObs => _willDisplayHeaderView;
        /// <inheritdoc/>
        public override void AccessoryButtonTapped(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _accessoryButtonTapped.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void CellDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _cellDisplayingEnded.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void DidUpdateFocus(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator) => _didUpdateFocus.OnNext((tableView, context, coordinator));
        /// <inheritdoc/>
        public override void FooterViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _footerViewDisplayingEnded.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void HeaderViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _headerViewDisplayingEnded.OnNext((tableView, headerView, section));
        /// <inheritdoc/>
        public override void PerformAction(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender) => _performAction.OnNext((tableView, action, indexPath, sender));
        /// <inheritdoc/>
        public override void RowDeselected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowDeselected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowHighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowHighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void RowSelected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowSelected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowUnhighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowUnhighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void WillDisplay(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _willDisplay.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void WillDisplayFooterView(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _willDisplayFooterView.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void WillDisplayHeaderView(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _willDisplayHeaderView.OnNext((tableView, headerView, section));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITableViewSource"/> into Observables.
    /// </summary>
    public abstract partial class UITableViewSourceRx : global::UIKit.UITableViewSource
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _accessoryButtonTapped = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _cellDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath)> _commitEditingStyle = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> _didUpdateFocus = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _footerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _headerViewDisplayingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath)> _moveRow = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> _performAction = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowDeselected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowHighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> _rowSelected = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> _rowUnhighlighted = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> _willDisplay = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> _willDisplayFooterView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> _willDisplayHeaderView = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.AccessoryButtonTapped"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> AccessoryButtonTappedObs => _accessoryButtonTapped;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.CellDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> CellDisplayingEndedObs => _cellDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.CommitEditingStyle"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath)> CommitEditingStyleObs => _commitEditingStyle;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.DidUpdateFocus"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator)> DidUpdateFocusObs => _didUpdateFocus;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.FooterViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> FooterViewDisplayingEndedObs => _footerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.HeaderViewDisplayingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> HeaderViewDisplayingEndedObs => _headerViewDisplayingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.MoveRow"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath)> MoveRowObs => _moveRow;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.PerformAction"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender)> PerformActionObs => _performAction;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowDeselected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowDeselectedObs => _rowDeselected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowHighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowHighlightedObs => _rowHighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowSelected"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath)> RowSelectedObs => _rowSelected;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.RowUnhighlighted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath)> RowUnhighlightedObs => _rowUnhighlighted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.WillDisplay"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath)> WillDisplayObs => _willDisplay;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.WillDisplayFooterView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section)> WillDisplayFooterViewObs => _willDisplayFooterView;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITableViewSource.WillDisplayHeaderView"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section)> WillDisplayHeaderViewObs => _willDisplayHeaderView;
        /// <inheritdoc/>
        public override void AccessoryButtonTapped(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _accessoryButtonTapped.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void CellDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _cellDisplayingEnded.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void CommitEditingStyle(global::UIKit.UITableView tableView, global::UIKit.UITableViewCellEditingStyle editingStyle, global::Foundation.NSIndexPath indexPath) => _commitEditingStyle.OnNext((tableView, editingStyle, indexPath));
        /// <inheritdoc/>
        public override void DidUpdateFocus(global::UIKit.UITableView tableView, global::UIKit.UITableViewFocusUpdateContext context, global::UIKit.UIFocusAnimationCoordinator coordinator) => _didUpdateFocus.OnNext((tableView, context, coordinator));
        /// <inheritdoc/>
        public override void FooterViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _footerViewDisplayingEnded.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void HeaderViewDisplayingEnded(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _headerViewDisplayingEnded.OnNext((tableView, headerView, section));
        /// <inheritdoc/>
        public override void MoveRow(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath sourceIndexPath, global::Foundation.NSIndexPath destinationIndexPath) => _moveRow.OnNext((tableView, sourceIndexPath, destinationIndexPath));
        /// <inheritdoc/>
        public override void PerformAction(global::UIKit.UITableView tableView, global::ObjCRuntime.Selector action, global::Foundation.NSIndexPath indexPath, global::Foundation.NSObject sender) => _performAction.OnNext((tableView, action, indexPath, sender));
        /// <inheritdoc/>
        public override void RowDeselected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowDeselected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowHighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowHighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void RowSelected(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath indexPath) => _rowSelected.OnNext((tableView, indexPath));
        /// <inheritdoc/>
        public override void RowUnhighlighted(global::UIKit.UITableView tableView, global::Foundation.NSIndexPath rowIndexPath) => _rowUnhighlighted.OnNext((tableView, rowIndexPath));
        /// <inheritdoc/>
        public override void WillDisplay(global::UIKit.UITableView tableView, global::UIKit.UITableViewCell cell, global::Foundation.NSIndexPath indexPath) => _willDisplay.OnNext((tableView, cell, indexPath));
        /// <inheritdoc/>
        public override void WillDisplayFooterView(global::UIKit.UITableView tableView, global::UIKit.UIView footerView, global::System.nint section) => _willDisplayFooterView.OnNext((tableView, footerView, section));
        /// <inheritdoc/>
        public override void WillDisplayHeaderView(global::UIKit.UITableView tableView, global::UIKit.UIView headerView, global::System.nint section) => _willDisplayHeaderView.OnNext((tableView, headerView, section));
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextFieldDelegate"/> into Observables.
    /// </summary>
    public partial class UITextFieldDelegateRx : global::UIKit.UITextFieldDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason)> _editingEnded = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextField> _editingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextField>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextFieldDelegate.EditingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason)> EditingEndedObs => _editingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextFieldDelegate.EditingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextField> EditingStartedObs => _editingStarted;
        /// <inheritdoc/>
        public override void EditingEnded(global::UIKit.UITextField textField, global::UIKit.UITextFieldDidEndEditingReason reason) => _editingEnded.OnNext((textField, reason));
        /// <inheritdoc/>
        public override void EditingStarted(global::UIKit.UITextField textField) => _editingStarted.OnNext(textField);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextInputDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UITextInputDelegateRx : global::UIKit.UITextInputDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _selectionDidChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _selectionWillChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _textDidChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput> _textWillChange = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.IUITextInput>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.SelectionDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> SelectionDidChangeObs => _selectionDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.SelectionWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> SelectionWillChangeObs => _selectionWillChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.TextDidChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> TextDidChangeObs => _textDidChange;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextInputDelegate.TextWillChange"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.IUITextInput> TextWillChangeObs => _textWillChange;
        /// <inheritdoc/>
        public override void SelectionDidChange(global::UIKit.IUITextInput uiTextInput) => _selectionDidChange.OnNext(uiTextInput);
        /// <inheritdoc/>
        public override void SelectionWillChange(global::UIKit.IUITextInput uiTextInput) => _selectionWillChange.OnNext(uiTextInput);
        /// <inheritdoc/>
        public override void TextDidChange(global::UIKit.IUITextInput textInput) => _textDidChange.OnNext(textInput);
        /// <inheritdoc/>
        public override void TextWillChange(global::UIKit.IUITextInput textInput) => _textWillChange.OnNext(textInput);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UITextViewDelegate"/> into Observables.
    /// </summary>
    public partial class UITextViewDelegateRx : global::UIKit.UITextViewDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _changed = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _editingEnded = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _editingStarted = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        private readonly Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView> _selectionChanged = new Pharmacist.Common.SingleAwaitSubject<global::UIKit.UITextView>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.Changed"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> ChangedObs => _changed;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.EditingEnded"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> EditingEndedObs => _editingEnded;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.EditingStarted"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> EditingStartedObs => _editingStarted;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UITextViewDelegate.SelectionChanged"/> method is invoked.
        /// </summary>
        public global::System.IObservable<global::UIKit.UITextView> SelectionChangedObs => _selectionChanged;
        /// <inheritdoc/>
        public override void Changed(global::UIKit.UITextView textView) => _changed.OnNext(textView);
        /// <inheritdoc/>
        public override void EditingEnded(global::UIKit.UITextView textView) => _editingEnded.OnNext(textView);
        /// <inheritdoc/>
        public override void EditingStarted(global::UIKit.UITextView textView) => _editingStarted.OnNext(textView);
        /// <inheritdoc/>
        public override void SelectionChanged(global::UIKit.UITextView textView) => _selectionChanged.OnNext(textView);
    }

    /// <summary>
    /// Wraps delegates events from <see cref = "global::UIKit.UIViewControllerPreviewingDelegate"/> into Observables.
    /// </summary>
    public abstract partial class UIViewControllerPreviewingDelegateRx : global::UIKit.UIViewControllerPreviewingDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit)> _commitViewController = new Pharmacist.Common.SingleAwaitSubject<(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UIKit.UIViewControllerPreviewingDelegate.CommitViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit)> CommitViewControllerObs => _commitViewController;
        /// <inheritdoc/>
        public override void CommitViewController(global::UIKit.IUIViewControllerPreviewing previewingContext, global::UIKit.UIViewController viewControllerToCommit) => _commitViewController.OnNext((previewingContext, viewControllerToCommit));
    }
}

namespace UserNotifications
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::UserNotifications.UNUserNotificationCenterDelegate"/> into Observables.
    /// </summary>
    public partial class UNUserNotificationCenterDelegateRx : global::UserNotifications.UNUserNotificationCenterDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> _willPresentNotification = new Pharmacist.Common.SingleAwaitSubject<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "UserNotifications.UNUserNotificationCenterDelegate.WillPresentNotification"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler)> WillPresentNotificationObs => _willPresentNotification;
        /// <inheritdoc/>
        public override void WillPresentNotification(global::UserNotifications.UNUserNotificationCenter center, global::UserNotifications.UNNotification notification, global::System.Action<global::UserNotifications.UNNotificationPresentationOptions> completionHandler) => _willPresentNotification.OnNext((center, notification, completionHandler));
    }
}

namespace VideoSubscriberAccount
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::VideoSubscriberAccount.VSAccountManagerDelegate"/> into Observables.
    /// </summary>
    public abstract partial class VSAccountManagerDelegateRx : global::VideoSubscriberAccount.VSAccountManagerDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> _dismissViewController = new Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> _presentViewController = new Pharmacist.Common.SingleAwaitSubject<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "VideoSubscriberAccount.VSAccountManagerDelegate.DismissViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> DismissViewControllerObs => _dismissViewController;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "VideoSubscriberAccount.VSAccountManagerDelegate.PresentViewController"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController)> PresentViewControllerObs => _presentViewController;
        /// <inheritdoc/>
        public override void DismissViewController(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController) => _dismissViewController.OnNext((accountManager, viewController));
        /// <inheritdoc/>
        public override void PresentViewController(global::VideoSubscriberAccount.VSAccountManager accountManager, global::UIKit.UIViewController viewController) => _presentViewController.OnNext((accountManager, viewController));
    }
}