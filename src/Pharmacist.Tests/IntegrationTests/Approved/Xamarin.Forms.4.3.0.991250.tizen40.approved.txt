
using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace ElmSharp
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "ElmSharp"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Entry"/> class.
        /// </summary>
        public static RxEntryEvents Events(this global::ElmSharp.Entry item) => new RxEntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.EvasObject"/> class.
        /// </summary>
        public static RxEvasObjectEvents Events(this global::ElmSharp.EvasObject item) => new RxEvasObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Layout"/> class.
        /// </summary>
        public static RxLayoutEvents Events(this global::ElmSharp.Layout item) => new RxLayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Popup"/> class.
        /// </summary>
        public static RxPopupEvents Events(this global::ElmSharp.Popup item) => new RxPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::ElmSharp.Widget"/> class.
        /// </summary>
        public static RxWidgetEvents Events(this global::ElmSharp.Widget item) => new RxWidgetEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Entry"/> class as observables.
    /// </summary>
    public class RxEntryEvents : global::ElmSharp.RxLayoutEvents
    {
        private readonly global::ElmSharp.Entry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Entry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEntryEvents(global::ElmSharp.Entry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Entry.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Entry.ChangedByUser"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ChangedByUser => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChangedByUser += x, x => _data.ChangedByUser -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Entry.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Entry.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.EvasObject"/> class as observables.
    /// </summary>
    public class RxEvasObjectEvents
    {
        private readonly global::ElmSharp.EvasObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.EvasObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEvasObjectEvents(global::ElmSharp.EvasObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.BackButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.Deleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Deleted += x, x => _data.Deleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.EvasKeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.EvasKeyEventArgs>, global::ElmSharp.EvasKeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.EvasKeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.EvasKeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.EvasKeyEventArgs>, global::ElmSharp.EvasKeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.EvasKeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.MoreButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MoreButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MoreButtonPressed += x, x => _data.MoreButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.Moved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Moved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Moved += x, x => _data.Moved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.RenderPost"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RenderPost => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RenderPost += x, x => _data.RenderPost -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.EvasObject.Resized"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Resized += x, x => _data.Resized -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Layout"/> class as observables.
    /// </summary>
    public class RxLayoutEvents : global::ElmSharp.RxWidgetEvents
    {
        private readonly global::ElmSharp.Layout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Layout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLayoutEvents(global::ElmSharp.Layout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Layout.LanguageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LanguageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LanguageChanged += x, x => _data.LanguageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Layout.ThemeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ThemeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ThemeChanged += x, x => _data.ThemeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Popup"/> class as observables.
    /// </summary>
    public class RxPopupEvents : global::ElmSharp.RxLayoutEvents
    {
        private readonly global::ElmSharp.Popup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Popup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPopupEvents(global::ElmSharp.Popup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Popup.Dismissed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Dismissed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Dismissed += x, x => _data.Dismissed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Popup.OutsideClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OutsideClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OutsideClicked += x, x => _data.OutsideClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Popup.ShowAnimationFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShowAnimationFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ShowAnimationFinished += x, x => _data.ShowAnimationFinished -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Popup.TimedOut"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TimedOut => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TimedOut += x, x => _data.TimedOut -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::ElmSharp.Widget"/> class as observables.
    /// </summary>
    public class RxWidgetEvents : global::ElmSharp.RxEvasObjectEvents
    {
        private readonly global::ElmSharp.Widget _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::ElmSharp.Widget"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWidgetEvents(global::ElmSharp.Widget data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Widget.Focused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Focused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Focused += x, x => _data.Focused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::ElmSharp.Widget.Unfocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Unfocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unfocused += x, x => _data.Unfocused -= x);
    }
}

namespace Xamarin.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Application"/> class.
        /// </summary>
        public static RxApplicationEvents Events(this global::Xamarin.Forms.Application item) => new RxApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.BaseShellItem"/> class.
        /// </summary>
        public static RxBaseShellItemEvents Events(this global::Xamarin.Forms.BaseShellItem item) => new RxBaseShellItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.BindableObject"/> class.
        /// </summary>
        public static RxBindableObjectEvents Events(this global::Xamarin.Forms.BindableObject item) => new RxBindableObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Button"/> class.
        /// </summary>
        public static RxButtonEvents Events(this global::Xamarin.Forms.Button item) => new RxButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.CarouselView"/> class.
        /// </summary>
        public static RxCarouselViewEvents Events(this global::Xamarin.Forms.CarouselView item) => new RxCarouselViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Cell"/> class.
        /// </summary>
        public static RxCellEvents Events(this global::Xamarin.Forms.Cell item) => new RxCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.CheckBox"/> class.
        /// </summary>
        public static RxCheckBoxEvents Events(this global::Xamarin.Forms.CheckBox item) => new RxCheckBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer"/> class.
        /// </summary>
        public static RxChildGestureRecognizerEvents Events(this global::Xamarin.Forms.ChildGestureRecognizer item) => new RxChildGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer"/> class.
        /// </summary>
        public static RxClickGestureRecognizerEvents Events(this global::Xamarin.Forms.ClickGestureRecognizer item) => new RxClickGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ColumnDefinition"/> class.
        /// </summary>
        public static RxColumnDefinitionEvents Events(this global::Xamarin.Forms.ColumnDefinition item) => new RxColumnDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Command"/> class.
        /// </summary>
        public static RxCommandEvents Events(this global::Xamarin.Forms.Command item) => new RxCommandEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.DatePicker"/> class.
        /// </summary>
        public static RxDatePickerEvents Events(this global::Xamarin.Forms.DatePicker item) => new RxDatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Editor"/> class.
        /// </summary>
        public static RxEditorEvents Events(this global::Xamarin.Forms.Editor item) => new RxEditorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Element"/> class.
        /// </summary>
        public static RxElementEvents Events(this global::Xamarin.Forms.Element item) => new RxElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Entry"/> class.
        /// </summary>
        public static RxEntryEvents Events(this global::Xamarin.Forms.Entry item) => new RxEntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.EntryCell"/> class.
        /// </summary>
        public static RxEntryCellEvents Events(this global::Xamarin.Forms.EntryCell item) => new RxEntryCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ICellController"/> class.
        /// </summary>
        public static RxICellControllerEvents Events(this global::Xamarin.Forms.ICellController item) => new RxICellControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IDefinition"/> class.
        /// </summary>
        public static RxIDefinitionEvents Events(this global::Xamarin.Forms.IDefinition item) => new RxIDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IElementController"/> class.
        /// </summary>
        public static RxIElementControllerEvents Events(this global::Xamarin.Forms.IElementController item) => new RxIElementControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ILayout"/> class.
        /// </summary>
        public static RxILayoutEvents Events(this global::Xamarin.Forms.ILayout item) => new RxILayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IListProxy"/> class.
        /// </summary>
        public static RxIListProxyEvents Events(this global::Xamarin.Forms.IListProxy item) => new RxIListProxyEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IListViewController"/> class.
        /// </summary>
        public static RxIListViewControllerEvents Events(this global::Xamarin.Forms.IListViewController item) => new RxIListViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ImageButton"/> class.
        /// </summary>
        public static RxImageButtonEvents Events(this global::Xamarin.Forms.ImageButton item) => new RxImageButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IMasterDetailPageController"/> class.
        /// </summary>
        public static RxIMasterDetailPageControllerEvents Events(this global::Xamarin.Forms.IMasterDetailPageController item) => new RxIMasterDetailPageControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.INavigationPageController"/> class.
        /// </summary>
        public static RxINavigationPageControllerEvents Events(this global::Xamarin.Forms.INavigationPageController item) => new RxINavigationPageControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IOpenGlViewController"/> class.
        /// </summary>
        public static RxIOpenGlViewControllerEvents Events(this global::Xamarin.Forms.IOpenGlViewController item) => new RxIOpenGlViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IScrollViewController"/> class.
        /// </summary>
        public static RxIScrollViewControllerEvents Events(this global::Xamarin.Forms.IScrollViewController item) => new RxIScrollViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ISearchHandlerController"/> class.
        /// </summary>
        public static RxISearchHandlerControllerEvents Events(this global::Xamarin.Forms.ISearchHandlerController item) => new RxISearchHandlerControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IShellController"/> class.
        /// </summary>
        public static RxIShellControllerEvents Events(this global::Xamarin.Forms.IShellController item) => new RxIShellControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IShellSectionController"/> class.
        /// </summary>
        public static RxIShellSectionControllerEvents Events(this global::Xamarin.Forms.IShellSectionController item) => new RxIShellSectionControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ITableViewController"/> class.
        /// </summary>
        public static RxITableViewControllerEvents Events(this global::Xamarin.Forms.ITableViewController item) => new RxITableViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ItemsView"/> class.
        /// </summary>
        public static RxItemsViewEvents Events(this global::Xamarin.Forms.ItemsView item) => new RxItemsViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IVisualElementController"/> class.
        /// </summary>
        public static RxIVisualElementControllerEvents Events(this global::Xamarin.Forms.IVisualElementController item) => new RxIVisualElementControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IWebViewController"/> class.
        /// </summary>
        public static RxIWebViewControllerEvents Events(this global::Xamarin.Forms.IWebViewController item) => new RxIWebViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Layout"/> class.
        /// </summary>
        public static RxLayoutEvents Events(this global::Xamarin.Forms.Layout item) => new RxLayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ListView"/> class.
        /// </summary>
        public static RxListViewEvents Events(this global::Xamarin.Forms.ListView item) => new RxListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.MasterDetailPage"/> class.
        /// </summary>
        public static RxMasterDetailPageEvents Events(this global::Xamarin.Forms.MasterDetailPage item) => new RxMasterDetailPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.MenuItem"/> class.
        /// </summary>
        public static RxMenuItemEvents Events(this global::Xamarin.Forms.MenuItem item) => new RxMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.NavigationPage"/> class.
        /// </summary>
        public static RxNavigationPageEvents Events(this global::Xamarin.Forms.NavigationPage item) => new RxNavigationPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.OpenGLView"/> class.
        /// </summary>
        public static RxOpenGLViewEvents Events(this global::Xamarin.Forms.OpenGLView item) => new RxOpenGLViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Page"/> class.
        /// </summary>
        public static RxPageEvents Events(this global::Xamarin.Forms.Page item) => new RxPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.PanGestureRecognizer"/> class.
        /// </summary>
        public static RxPanGestureRecognizerEvents Events(this global::Xamarin.Forms.PanGestureRecognizer item) => new RxPanGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Picker"/> class.
        /// </summary>
        public static RxPickerEvents Events(this global::Xamarin.Forms.Picker item) => new RxPickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer"/> class.
        /// </summary>
        public static RxPinchGestureRecognizerEvents Events(this global::Xamarin.Forms.PinchGestureRecognizer item) => new RxPinchGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.RefreshView"/> class.
        /// </summary>
        public static RxRefreshViewEvents Events(this global::Xamarin.Forms.RefreshView item) => new RxRefreshViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.RowDefinition"/> class.
        /// </summary>
        public static RxRowDefinitionEvents Events(this global::Xamarin.Forms.RowDefinition item) => new RxRowDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ScrollView"/> class.
        /// </summary>
        public static RxScrollViewEvents Events(this global::Xamarin.Forms.ScrollView item) => new RxScrollViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SearchBar"/> class.
        /// </summary>
        public static RxSearchBarEvents Events(this global::Xamarin.Forms.SearchBar item) => new RxSearchBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SearchHandler"/> class.
        /// </summary>
        public static RxSearchHandlerEvents Events(this global::Xamarin.Forms.SearchHandler item) => new RxSearchHandlerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SelectableItemsView"/> class.
        /// </summary>
        public static RxSelectableItemsViewEvents Events(this global::Xamarin.Forms.SelectableItemsView item) => new RxSelectableItemsViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Shell"/> class.
        /// </summary>
        public static RxShellEvents Events(this global::Xamarin.Forms.Shell item) => new RxShellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Slider"/> class.
        /// </summary>
        public static RxSliderEvents Events(this global::Xamarin.Forms.Slider item) => new RxSliderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Stepper"/> class.
        /// </summary>
        public static RxStepperEvents Events(this global::Xamarin.Forms.Stepper item) => new RxStepperEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer"/> class.
        /// </summary>
        public static RxSwipeGestureRecognizerEvents Events(this global::Xamarin.Forms.SwipeGestureRecognizer item) => new RxSwipeGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Switch"/> class.
        /// </summary>
        public static RxSwitchEvents Events(this global::Xamarin.Forms.Switch item) => new RxSwitchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SwitchCell"/> class.
        /// </summary>
        public static RxSwitchCellEvents Events(this global::Xamarin.Forms.SwitchCell item) => new RxSwitchCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.TableView"/> class.
        /// </summary>
        public static RxTableViewEvents Events(this global::Xamarin.Forms.TableView item) => new RxTableViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.TapGestureRecognizer"/> class.
        /// </summary>
        public static RxTapGestureRecognizerEvents Events(this global::Xamarin.Forms.TapGestureRecognizer item) => new RxTapGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ToolbarItem"/> class.
        /// </summary>
        public static RxToolbarItemEvents Events(this global::Xamarin.Forms.ToolbarItem item) => new RxToolbarItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.VisualElement"/> class.
        /// </summary>
        public static RxVisualElementEvents Events(this global::Xamarin.Forms.VisualElement item) => new RxVisualElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.WebView"/> class.
        /// </summary>
        public static RxWebViewEvents Events(this global::Xamarin.Forms.WebView item) => new RxWebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Application"/> class as observables.
    /// </summary>
    public class RxApplicationEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxApplicationEvents(global::Xamarin.Forms.Application data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPoppedEventArgs> ModalPopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPoppedEventArgs>, global::Xamarin.Forms.ModalPoppedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPoppedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPopped += x, x => _data.ModalPopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPopping"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPoppingEventArgs> ModalPopping => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPoppingEventArgs>, global::Xamarin.Forms.ModalPoppingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPoppingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPopping += x, x => _data.ModalPopping -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPushedEventArgs> ModalPushed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPushedEventArgs>, global::Xamarin.Forms.ModalPushedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPushedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPushed += x, x => _data.ModalPushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPushing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPushingEventArgs> ModalPushing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPushingEventArgs>, global::Xamarin.Forms.ModalPushingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPushingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPushing += x, x => _data.ModalPushing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.PageAppearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Page> PageAppearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Page>, global::Xamarin.Forms.Page>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Page e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PageAppearing += x, x => _data.PageAppearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.PageDisappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Page> PageDisappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Page>, global::Xamarin.Forms.Page>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Page e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PageDisappearing += x, x => _data.PageDisappearing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.BaseShellItem"/> class as observables.
    /// </summary>
    public class RxBaseShellItemEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.BaseShellItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.BaseShellItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBaseShellItemEvents(global::Xamarin.Forms.BaseShellItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BaseShellItem.Appearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Appearing += x, x => _data.Appearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BaseShellItem.Disappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Disappearing += x, x => _data.Disappearing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.BindableObject"/> class as observables.
    /// </summary>
    public class RxBindableObjectEvents
    {
        private readonly global::Xamarin.Forms.BindableObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.BindableObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindableObjectEvents(global::Xamarin.Forms.BindableObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BindableObject.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BindableObject.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BindableObject.PropertyChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PropertyChangingEventArgs> PropertyChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Xamarin.Forms.PropertyChangingEventHandler, global::Xamarin.Forms.PropertyChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PropertyChangingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanging += x, x => _data.PropertyChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Button"/> class as observables.
    /// </summary>
    public class RxButtonEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonEvents(global::Xamarin.Forms.Button data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Button.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Button.Pressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Pressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pressed += x, x => _data.Pressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Button.Released"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Released => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Released += x, x => _data.Released -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.CarouselView"/> class as observables.
    /// </summary>
    public class RxCarouselViewEvents : global::Xamarin.Forms.RxItemsViewEvents
    {
        private readonly global::Xamarin.Forms.CarouselView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.CarouselView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCarouselViewEvents(global::Xamarin.Forms.CarouselView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.CarouselView.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.CurrentItemChangedEventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.CurrentItemChangedEventArgs>, global::Xamarin.Forms.CurrentItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.CurrentItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.CarouselView.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PositionChangedEventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.PositionChangedEventArgs>, global::Xamarin.Forms.PositionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PositionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Cell"/> class as observables.
    /// </summary>
    public class RxCellEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.Cell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Cell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCellEvents(global::Xamarin.Forms.Cell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.Appearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Appearing += x, x => _data.Appearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.Disappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Disappearing += x, x => _data.Disappearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.ForceUpdateSizeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForceUpdateSizeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ForceUpdateSizeRequested += x, x => _data.ForceUpdateSizeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.CheckBox"/> class as observables.
    /// </summary>
    public class RxCheckBoxEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.CheckBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.CheckBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCheckBoxEvents(global::Xamarin.Forms.CheckBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.CheckBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.CheckedChangedEventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.CheckedChangedEventArgs>, global::Xamarin.Forms.CheckedChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.CheckedChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer"/> class as observables.
    /// </summary>
    public class RxChildGestureRecognizerEvents
    {
        private readonly global::Xamarin.Forms.ChildGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxChildGestureRecognizerEvents(global::Xamarin.Forms.ChildGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer"/> class as observables.
    /// </summary>
    public class RxClickGestureRecognizerEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.ClickGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxClickGestureRecognizerEvents(global::Xamarin.Forms.ClickGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ColumnDefinition"/> class as observables.
    /// </summary>
    public class RxColumnDefinitionEvents : global::Xamarin.Forms.RxBindableObjectEvents
    {
        private readonly global::Xamarin.Forms.ColumnDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ColumnDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxColumnDefinitionEvents(global::Xamarin.Forms.ColumnDefinition data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ColumnDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Command"/> class as observables.
    /// </summary>
    public class RxCommandEvents
    {
        private readonly global::Xamarin.Forms.Command _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Command"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommandEvents(global::Xamarin.Forms.Command data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Command.CanExecuteChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanExecuteChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CanExecuteChanged += x, x => _data.CanExecuteChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.DatePicker"/> class as observables.
    /// </summary>
    public class RxDatePickerEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDatePickerEvents(global::Xamarin.Forms.DatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.DatePicker.DateSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.DateChangedEventArgs> DateSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.DateChangedEventArgs>, global::Xamarin.Forms.DateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.DateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateSelected += x, x => _data.DateSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Editor"/> class as observables.
    /// </summary>
    public class RxEditorEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Editor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Editor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEditorEvents(global::Xamarin.Forms.Editor data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Editor.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Editor.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Element"/> class as observables.
    /// </summary>
    public class RxElementEvents : global::Xamarin.Forms.RxBindableObjectEvents
    {
        private readonly global::Xamarin.Forms.Element _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Element"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxElementEvents(global::Xamarin.Forms.Element data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.ChildAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> ChildAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildAdded += x, x => _data.ChildAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.ChildRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> ChildRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildRemoved += x, x => _data.ChildRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.DescendantAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> DescendantAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DescendantAdded += x, x => _data.DescendantAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.DescendantRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> DescendantRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DescendantRemoved += x, x => _data.DescendantRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.PlatformSet"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("PlatformSet is obsolete as of 3.5.0. Do not use this event.", false)]
        public global::System.IObservable<global::System.EventArgs> PlatformSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PlatformSet += x, x => _data.PlatformSet -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Entry"/> class as observables.
    /// </summary>
    public class RxEntryEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Entry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Entry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEntryEvents(global::Xamarin.Forms.Entry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Entry.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Entry.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.EntryCell"/> class as observables.
    /// </summary>
    public class RxEntryCellEvents : global::Xamarin.Forms.RxCellEvents
    {
        private readonly global::Xamarin.Forms.EntryCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.EntryCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEntryCellEvents(global::Xamarin.Forms.EntryCell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.EntryCell.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ICellController"/> class as observables.
    /// </summary>
    public class RxICellControllerEvents
    {
        private readonly global::Xamarin.Forms.ICellController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ICellController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxICellControllerEvents(global::Xamarin.Forms.ICellController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ICellController.ForceUpdateSizeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForceUpdateSizeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ForceUpdateSizeRequested += x, x => _data.ForceUpdateSizeRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IDefinition"/> class as observables.
    /// </summary>
    public class RxIDefinitionEvents
    {
        private readonly global::Xamarin.Forms.IDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIDefinitionEvents(global::Xamarin.Forms.IDefinition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IElementController"/> class as observables.
    /// </summary>
    public class RxIElementControllerEvents
    {
        private readonly global::Xamarin.Forms.IElementController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IElementController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIElementControllerEvents(global::Xamarin.Forms.IElementController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IElementController.PlatformSet"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("PlatformSet is obsolete as of 3.5.0. Do not use this event.", false)]
        public global::System.IObservable<global::System.EventArgs> PlatformSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PlatformSet += x, x => _data.PlatformSet -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ILayout"/> class as observables.
    /// </summary>
    public class RxILayoutEvents
    {
        private readonly global::Xamarin.Forms.ILayout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ILayout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxILayoutEvents(global::Xamarin.Forms.ILayout data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ILayout.LayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IListProxy"/> class as observables.
    /// </summary>
    public class RxIListProxyEvents
    {
        private readonly global::Xamarin.Forms.IListProxy _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IListProxy"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIListProxyEvents(global::Xamarin.Forms.IListProxy data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IListProxy.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IListViewController"/> class as observables.
    /// </summary>
    public class RxIListViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IListViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IListViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIListViewControllerEvents(global::Xamarin.Forms.IListViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IListViewController.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ImageButton"/> class as observables.
    /// </summary>
    public class RxImageButtonEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.ImageButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ImageButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxImageButtonEvents(global::Xamarin.Forms.ImageButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ImageButton.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ImageButton.Pressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Pressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pressed += x, x => _data.Pressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ImageButton.Released"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Released => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Released += x, x => _data.Released -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IMasterDetailPageController"/> class as observables.
    /// </summary>
    public class RxIMasterDetailPageControllerEvents
    {
        private readonly global::Xamarin.Forms.IMasterDetailPageController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IMasterDetailPageController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIMasterDetailPageControllerEvents(global::Xamarin.Forms.IMasterDetailPageController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IMasterDetailPageController.BackButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.BackButtonPressedEventArgs> BackButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.BackButtonPressedEventArgs>, global::Xamarin.Forms.BackButtonPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.BackButtonPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.INavigationPageController"/> class as observables.
    /// </summary>
    public class RxINavigationPageControllerEvents
    {
        private readonly global::Xamarin.Forms.INavigationPageController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.INavigationPageController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxINavigationPageControllerEvents(global::Xamarin.Forms.INavigationPageController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.InsertPageBeforeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> InsertPageBeforeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.InsertPageBeforeRequested += x, x => _data.InsertPageBeforeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.PopRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopRequested += x, x => _data.PopRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.PopToRootRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopToRootRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopToRootRequested += x, x => _data.PopToRootRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.PushRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PushRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PushRequested += x, x => _data.PushRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.RemovePageRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> RemovePageRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemovePageRequested += x, x => _data.RemovePageRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IOpenGlViewController"/> class as observables.
    /// </summary>
    public class RxIOpenGlViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IOpenGlViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IOpenGlViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIOpenGlViewControllerEvents(global::Xamarin.Forms.IOpenGlViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IOpenGlViewController.DisplayRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DisplayRequested += x, x => _data.DisplayRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IScrollViewController"/> class as observables.
    /// </summary>
    public class RxIScrollViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IScrollViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IScrollViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIScrollViewControllerEvents(global::Xamarin.Forms.IScrollViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IScrollViewController.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ISearchHandlerController"/> class as observables.
    /// </summary>
    public class RxISearchHandlerControllerEvents
    {
        private readonly global::Xamarin.Forms.ISearchHandlerController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ISearchHandlerController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxISearchHandlerControllerEvents(global::Xamarin.Forms.ISearchHandlerController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ISearchHandlerController.ListProxyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ListProxyChangedEventArgs> ListProxyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ListProxyChangedEventArgs>, global::Xamarin.Forms.ListProxyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ListProxyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ListProxyChanged += x, x => _data.ListProxyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IShellController"/> class as observables.
    /// </summary>
    public class RxIShellControllerEvents
    {
        private readonly global::Xamarin.Forms.IShellController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IShellController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIShellControllerEvents(global::Xamarin.Forms.IShellController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IShellController.StructureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StructureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StructureChanged += x, x => _data.StructureChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IShellSectionController"/> class as observables.
    /// </summary>
    public class RxIShellSectionControllerEvents
    {
        private readonly global::Xamarin.Forms.IShellSectionController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IShellSectionController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIShellSectionControllerEvents(global::Xamarin.Forms.IShellSectionController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IShellSectionController.NavigationRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> NavigationRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NavigationRequested += x, x => _data.NavigationRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ITableViewController"/> class as observables.
    /// </summary>
    public class RxITableViewControllerEvents
    {
        private readonly global::Xamarin.Forms.ITableViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ITableViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxITableViewControllerEvents(global::Xamarin.Forms.ITableViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ITableViewController.ModelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModelChanged += x, x => _data.ModelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ItemsView"/> class as observables.
    /// </summary>
    public class RxItemsViewEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.ItemsView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ItemsView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemsViewEvents(global::Xamarin.Forms.ItemsView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ItemsView.RemainingItemsThresholdReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemainingItemsThresholdReached => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemainingItemsThresholdReached += x, x => _data.RemainingItemsThresholdReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ItemsView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemsViewScrolledEventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemsViewScrolledEventArgs>, global::Xamarin.Forms.ItemsViewScrolledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemsViewScrolledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ItemsView.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestEventArgs>, global::Xamarin.Forms.ScrollToRequestEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IVisualElementController"/> class as observables.
    /// </summary>
    public class RxIVisualElementControllerEvents
    {
        private readonly global::Xamarin.Forms.IVisualElementController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IVisualElementController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIVisualElementControllerEvents(global::Xamarin.Forms.IVisualElementController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IVisualElementController.BatchCommitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>> BatchCommitted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BatchCommitted += x, x => _data.BatchCommitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IVisualElementController.FocusChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.VisualElement.FocusRequestArgs>, global::Xamarin.Forms.VisualElement.FocusRequestArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.VisualElement.FocusRequestArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IWebViewController"/> class as observables.
    /// </summary>
    public class RxIWebViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IWebViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IWebViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIWebViewControllerEvents(global::Xamarin.Forms.IWebViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.EvalRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EvalRequested> EvalRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EvalRequested>, global::Xamarin.Forms.Internals.EvalRequested>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EvalRequested e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EvalRequested += x, x => _data.EvalRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.GoBackRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoBackRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoBackRequested += x, x => _data.GoBackRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.GoForwardRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoForwardRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoForwardRequested += x, x => _data.GoForwardRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.ReloadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReloadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ReloadRequested += x, x => _data.ReloadRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Layout"/> class as observables.
    /// </summary>
    public class RxLayoutEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Layout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Layout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLayoutEvents(global::Xamarin.Forms.Layout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Layout.LayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ListView"/> class as observables.
    /// </summary>
    public class RxListViewEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.ListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListViewEvents(global::Xamarin.Forms.ListView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemAppearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemVisibilityEventArgs> ItemAppearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemVisibilityEventArgs>, global::Xamarin.Forms.ItemVisibilityEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemVisibilityEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemAppearing += x, x => _data.ItemAppearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemDisappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemVisibilityEventArgs> ItemDisappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemVisibilityEventArgs>, global::Xamarin.Forms.ItemVisibilityEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemVisibilityEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemDisappearing += x, x => _data.ItemDisappearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SelectedItemChangedEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SelectedItemChangedEventArgs>, global::Xamarin.Forms.SelectedItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SelectedItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemTappedEventArgs> ItemTapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemTappedEventArgs>, global::Xamarin.Forms.ItemTappedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemTappedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemTapped += x, x => _data.ItemTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.Refreshing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Refreshing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Refreshing += x, x => _data.Refreshing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrolledEventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrolledEventArgs>, global::Xamarin.Forms.ScrolledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrolledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.MasterDetailPage"/> class as observables.
    /// </summary>
    public class RxMasterDetailPageEvents : global::Xamarin.Forms.RxPageEvents
    {
        private readonly global::Xamarin.Forms.MasterDetailPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.MasterDetailPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMasterDetailPageEvents(global::Xamarin.Forms.MasterDetailPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.MasterDetailPage.BackButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.BackButtonPressedEventArgs> BackButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.BackButtonPressedEventArgs>, global::Xamarin.Forms.BackButtonPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.BackButtonPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.MasterDetailPage.IsPresentedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsPresentedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.IsPresentedChanged += x, x => _data.IsPresentedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.MenuItem"/> class as observables.
    /// </summary>
    public class RxMenuItemEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuItemEvents(global::Xamarin.Forms.MenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.MenuItem.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.NavigationPage"/> class as observables.
    /// </summary>
    public class RxNavigationPageEvents : global::Xamarin.Forms.RxPageEvents
    {
        private readonly global::Xamarin.Forms.NavigationPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.NavigationPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationPageEvents(global::Xamarin.Forms.NavigationPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.InsertPageBeforeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> InsertPageBeforeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.InsertPageBeforeRequested += x, x => _data.InsertPageBeforeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.Popped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.NavigationEventArgs> Popped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.NavigationEventArgs>, global::Xamarin.Forms.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Popped += x, x => _data.Popped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PoppedToRoot"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.NavigationEventArgs> PoppedToRoot => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.NavigationEventArgs>, global::Xamarin.Forms.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PoppedToRoot += x, x => _data.PoppedToRoot -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PopRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopRequested += x, x => _data.PopRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PopToRootRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopToRootRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopToRootRequested += x, x => _data.PopToRootRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.Pushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.NavigationEventArgs> Pushed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.NavigationEventArgs>, global::Xamarin.Forms.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pushed += x, x => _data.Pushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PushRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PushRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PushRequested += x, x => _data.PushRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.RemovePageRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> RemovePageRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemovePageRequested += x, x => _data.RemovePageRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.OpenGLView"/> class as observables.
    /// </summary>
    public class RxOpenGLViewEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.OpenGLView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.OpenGLView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxOpenGLViewEvents(global::Xamarin.Forms.OpenGLView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.OpenGLView.DisplayRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DisplayRequested += x, x => _data.DisplayRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Page"/> class as observables.
    /// </summary>
    public class RxPageEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Page _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Page"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPageEvents(global::Xamarin.Forms.Page data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Page.Appearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Appearing += x, x => _data.Appearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Page.Disappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Disappearing += x, x => _data.Disappearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Page.LayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.PanGestureRecognizer"/> class as observables.
    /// </summary>
    public class RxPanGestureRecognizerEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.PanGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.PanGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPanGestureRecognizerEvents(global::Xamarin.Forms.PanGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.PanGestureRecognizer.PanUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PanUpdatedEventArgs> PanUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.PanUpdatedEventArgs>, global::Xamarin.Forms.PanUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PanUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PanUpdated += x, x => _data.PanUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Picker"/> class as observables.
    /// </summary>
    public class RxPickerEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Picker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Picker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPickerEvents(global::Xamarin.Forms.Picker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Picker.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer"/> class as observables.
    /// </summary>
    public class RxPinchGestureRecognizerEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.PinchGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPinchGestureRecognizerEvents(global::Xamarin.Forms.PinchGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer.PinchUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PinchGestureUpdatedEventArgs> PinchUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.PinchGestureUpdatedEventArgs>, global::Xamarin.Forms.PinchGestureUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PinchGestureUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PinchUpdated += x, x => _data.PinchUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.RefreshView"/> class as observables.
    /// </summary>
    public class RxRefreshViewEvents : global::Xamarin.Forms.RxLayoutEvents
    {
        private readonly global::Xamarin.Forms.RefreshView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.RefreshView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRefreshViewEvents(global::Xamarin.Forms.RefreshView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.RefreshView.Refreshing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Refreshing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Refreshing += x, x => _data.Refreshing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.RowDefinition"/> class as observables.
    /// </summary>
    public class RxRowDefinitionEvents : global::Xamarin.Forms.RxBindableObjectEvents
    {
        private readonly global::Xamarin.Forms.RowDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.RowDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRowDefinitionEvents(global::Xamarin.Forms.RowDefinition data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.RowDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ScrollView"/> class as observables.
    /// </summary>
    public class RxScrollViewEvents : global::Xamarin.Forms.RxLayoutEvents
    {
        private readonly global::Xamarin.Forms.ScrollView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ScrollView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollViewEvents(global::Xamarin.Forms.ScrollView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ScrollView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrolledEventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrolledEventArgs>, global::Xamarin.Forms.ScrolledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrolledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ScrollView.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SearchBar"/> class as observables.
    /// </summary>
    public class RxSearchBarEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.SearchBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SearchBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSearchBarEvents(global::Xamarin.Forms.SearchBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchBar.SearchButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SearchButtonPressed += x, x => _data.SearchButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SearchHandler"/> class as observables.
    /// </summary>
    public class RxSearchHandlerEvents : global::Xamarin.Forms.RxBindableObjectEvents
    {
        private readonly global::Xamarin.Forms.SearchHandler _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SearchHandler"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSearchHandlerEvents(global::Xamarin.Forms.SearchHandler data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchHandler.FocusChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.VisualElement.FocusRequestArgs>, global::Xamarin.Forms.VisualElement.FocusRequestArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.VisualElement.FocusRequestArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchHandler.Focused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Focused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Focused += x, x => _data.Focused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchHandler.Unfocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Unfocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unfocused += x, x => _data.Unfocused -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SelectableItemsView"/> class as observables.
    /// </summary>
    public class RxSelectableItemsViewEvents : global::Xamarin.Forms.RxItemsViewEvents
    {
        private readonly global::Xamarin.Forms.SelectableItemsView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SelectableItemsView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSelectableItemsViewEvents(global::Xamarin.Forms.SelectableItemsView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SelectableItemsView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SelectionChangedEventArgs>, global::Xamarin.Forms.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Shell"/> class as observables.
    /// </summary>
    public class RxShellEvents : global::Xamarin.Forms.RxPageEvents
    {
        private readonly global::Xamarin.Forms.Shell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Shell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxShellEvents(global::Xamarin.Forms.Shell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Shell.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ShellNavigatedEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ShellNavigatedEventArgs>, global::Xamarin.Forms.ShellNavigatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ShellNavigatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Shell.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ShellNavigatingEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ShellNavigatingEventArgs>, global::Xamarin.Forms.ShellNavigatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ShellNavigatingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigating += x, x => _data.Navigating -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Slider"/> class as observables.
    /// </summary>
    public class RxSliderEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Slider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Slider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSliderEvents(global::Xamarin.Forms.Slider data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Slider.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragCompleted += x, x => _data.DragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Slider.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStarted += x, x => _data.DragStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Slider.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ValueChangedEventArgs>, global::Xamarin.Forms.ValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Stepper"/> class as observables.
    /// </summary>
    public class RxStepperEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Stepper _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Stepper"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStepperEvents(global::Xamarin.Forms.Stepper data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Stepper.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ValueChangedEventArgs>, global::Xamarin.Forms.ValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer"/> class as observables.
    /// </summary>
    public class RxSwipeGestureRecognizerEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.SwipeGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSwipeGestureRecognizerEvents(global::Xamarin.Forms.SwipeGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer.Swiped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SwipedEventArgs> Swiped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SwipedEventArgs>, global::Xamarin.Forms.SwipedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SwipedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Swiped += x, x => _data.Swiped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Switch"/> class as observables.
    /// </summary>
    public class RxSwitchEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.Switch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Switch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSwitchEvents(global::Xamarin.Forms.Switch data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Switch.Toggled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ToggledEventArgs> Toggled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ToggledEventArgs>, global::Xamarin.Forms.ToggledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ToggledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Toggled += x, x => _data.Toggled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SwitchCell"/> class as observables.
    /// </summary>
    public class RxSwitchCellEvents : global::Xamarin.Forms.RxCellEvents
    {
        private readonly global::Xamarin.Forms.SwitchCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SwitchCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSwitchCellEvents(global::Xamarin.Forms.SwitchCell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SwitchCell.OnChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ToggledEventArgs> OnChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ToggledEventArgs>, global::Xamarin.Forms.ToggledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ToggledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OnChanged += x, x => _data.OnChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.TableView"/> class as observables.
    /// </summary>
    public class RxTableViewEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.TableView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.TableView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTableViewEvents(global::Xamarin.Forms.TableView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.TableView.ModelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModelChanged += x, x => _data.ModelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.TapGestureRecognizer"/> class as observables.
    /// </summary>
    public class RxTapGestureRecognizerEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.TapGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.TapGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTapGestureRecognizerEvents(global::Xamarin.Forms.TapGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.TapGestureRecognizer.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ToolbarItem"/> class as observables.
    /// </summary>
    public class RxToolbarItemEvents : global::Xamarin.Forms.RxMenuItemEvents
    {
        private readonly global::Xamarin.Forms.ToolbarItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ToolbarItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolbarItemEvents(global::Xamarin.Forms.ToolbarItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ToolbarItem.Activated"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Activated is obsolete as of version 1.3.0. Please use Clicked instead.", false)]
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.VisualElement"/> class as observables.
    /// </summary>
    public class RxVisualElementEvents : global::Xamarin.Forms.RxElementEvents
    {
        private readonly global::Xamarin.Forms.VisualElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.VisualElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxVisualElementEvents(global::Xamarin.Forms.VisualElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.BatchCommitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>> BatchCommitted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BatchCommitted += x, x => _data.BatchCommitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.ChildrenReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ChildrenReordered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildrenReordered += x, x => _data.ChildrenReordered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.FocusChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.VisualElement.FocusRequestArgs>, global::Xamarin.Forms.VisualElement.FocusRequestArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.VisualElement.FocusRequestArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.Focused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.FocusEventArgs> Focused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.FocusEventArgs>, global::Xamarin.Forms.FocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.FocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Focused += x, x => _data.Focused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.MeasureInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MeasureInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MeasureInvalidated += x, x => _data.MeasureInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.Unfocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.FocusEventArgs> Unfocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.FocusEventArgs>, global::Xamarin.Forms.FocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.FocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unfocused += x, x => _data.Unfocused -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.WebView"/> class as observables.
    /// </summary>
    public class RxWebViewEvents : global::Xamarin.Forms.RxVisualElementEvents
    {
        private readonly global::Xamarin.Forms.WebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.WebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebViewEvents(global::Xamarin.Forms.WebView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.EvalRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EvalRequested> EvalRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EvalRequested>, global::Xamarin.Forms.Internals.EvalRequested>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EvalRequested e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EvalRequested += x, x => _data.EvalRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.GoBackRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoBackRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoBackRequested += x, x => _data.GoBackRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.GoForwardRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoForwardRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoForwardRequested += x, x => _data.GoForwardRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.WebNavigatedEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.WebNavigatedEventArgs>, global::Xamarin.Forms.WebNavigatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.WebNavigatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.WebNavigatingEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.WebNavigatingEventArgs>, global::Xamarin.Forms.WebNavigatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.WebNavigatingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.ReloadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReloadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ReloadRequested += x, x => _data.ReloadRequested -= x);
    }
}

namespace Xamarin.Forms.Internals
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Internals"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo"/> class.
        /// </summary>
        public static RxDeviceInfoEvents Events(this global::Xamarin.Forms.Internals.DeviceInfo item) => new RxDeviceInfoEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary"/> class.
        /// </summary>
        public static RxIResourceDictionaryEvents Events(this global::Xamarin.Forms.Internals.IResourceDictionary item) => new RxIResourceDictionaryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.TableModel"/> class.
        /// </summary>
        public static RxTableModelEvents Events(this global::Xamarin.Forms.Internals.TableModel item) => new RxTableModelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker"/> class.
        /// </summary>
        public static RxToolbarTrackerEvents Events(this global::Xamarin.Forms.Internals.ToolbarTracker item) => new RxToolbarTrackerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo"/> class as observables.
    /// </summary>
    public class RxDeviceInfoEvents
    {
        private readonly global::Xamarin.Forms.Internals.DeviceInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDeviceInfoEvents(global::Xamarin.Forms.Internals.DeviceInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary"/> class as observables.
    /// </summary>
    public class RxIResourceDictionaryEvents
    {
        private readonly global::Xamarin.Forms.Internals.IResourceDictionary _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIResourceDictionaryEvents(global::Xamarin.Forms.Internals.IResourceDictionary data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary.ValuesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.ResourcesChangedEventArgs> ValuesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.ResourcesChangedEventArgs>, global::Xamarin.Forms.Internals.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValuesChanged += x, x => _data.ValuesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.TableModel"/> class as observables.
    /// </summary>
    public class RxTableModelEvents
    {
        private readonly global::Xamarin.Forms.Internals.TableModel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.TableModel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTableModelEvents(global::Xamarin.Forms.Internals.TableModel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.TableModel.ItemLongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<object>> ItemLongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<object>>, global::Xamarin.Forms.Internals.EventArg<object>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<object> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemLongPressed += x, x => _data.ItemLongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.TableModel.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<object>> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<object>>, global::Xamarin.Forms.Internals.EventArg<object>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<object> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker"/> class as observables.
    /// </summary>
    public class RxToolbarTrackerEvents
    {
        private readonly global::Xamarin.Forms.Internals.ToolbarTracker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolbarTrackerEvents(global::Xamarin.Forms.Internals.ToolbarTracker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }
}

namespace Xamarin.Forms.Platform.Tizen
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Platform.Tizen"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.DefaultPlatform"/> class.
        /// </summary>
        public static RxDefaultPlatformEvents Events(this global::Xamarin.Forms.Platform.Tizen.DefaultPlatform item) => new RxDefaultPlatformEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.GestureHandler"/> class.
        /// </summary>
        public static RxGestureHandlerEvents Events(this global::Xamarin.Forms.Platform.Tizen.GestureHandler item) => new RxGestureHandlerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationDrawer"/> class.
        /// </summary>
        public static RxINavigationDrawerEvents Events(this global::Xamarin.Forms.Platform.Tizen.INavigationDrawer item) => new RxINavigationDrawerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationView"/> class.
        /// </summary>
        public static RxINavigationViewEvents Events(this global::Xamarin.Forms.Platform.Tizen.INavigationView item) => new RxINavigationViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.IShellTabs"/> class.
        /// </summary>
        public static RxIShellTabsEvents Events(this global::Xamarin.Forms.Platform.Tizen.IShellTabs item) => new RxIShellTabsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.ITizenPlatform"/> class.
        /// </summary>
        public static RxITizenPlatformEvents Events(this global::Xamarin.Forms.Platform.Tizen.ITizenPlatform item) => new RxITizenPlatformEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.LightweightPlatform"/> class.
        /// </summary>
        public static RxLightweightPlatformEvents Events(this global::Xamarin.Forms.Platform.Tizen.LightweightPlatform item) => new RxLightweightPlatformEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationDrawer"/> class.
        /// </summary>
        public static RxNavigationDrawerEvents Events(this global::Xamarin.Forms.Platform.Tizen.NavigationDrawer item) => new RxNavigationDrawerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationView"/> class.
        /// </summary>
        public static RxNavigationViewEvents Events(this global::Xamarin.Forms.Platform.Tizen.NavigationView item) => new RxNavigationViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.DefaultPlatform"/> class as observables.
    /// </summary>
    public class RxDefaultPlatformEvents : global::Xamarin.Forms.RxBindableObjectEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.DefaultPlatform _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.DefaultPlatform"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDefaultPlatformEvents(global::Xamarin.Forms.Platform.Tizen.DefaultPlatform data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.DefaultPlatform.RootNativeViewChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs> RootNativeViewChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs>, global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RootNativeViewChanged += x, x => _data.RootNativeViewChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.GestureHandler"/> class as observables.
    /// </summary>
    public class RxGestureHandlerEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.GestureHandler _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.GestureHandler"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGestureHandlerEvents(global::Xamarin.Forms.Platform.Tizen.GestureHandler data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.GestureHandler.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationDrawer"/> class as observables.
    /// </summary>
    public class RxINavigationDrawerEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.INavigationDrawer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationDrawer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxINavigationDrawerEvents(global::Xamarin.Forms.Platform.Tizen.INavigationDrawer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationDrawer.Toggled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Toggled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Toggled += x, x => _data.Toggled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationView"/> class as observables.
    /// </summary>
    public class RxINavigationViewEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.INavigationView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxINavigationViewEvents(global::Xamarin.Forms.Platform.Tizen.INavigationView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.INavigationView.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SelectedItemChangedEventArgs> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SelectedItemChangedEventArgs>, global::Xamarin.Forms.SelectedItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SelectedItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.IShellTabs"/> class as observables.
    /// </summary>
    public class RxIShellTabsEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.IShellTabs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.IShellTabs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIShellTabsEvents(global::Xamarin.Forms.Platform.Tizen.IShellTabs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.IShellTabs.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::ElmSharp.ToolbarItemEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::ElmSharp.ToolbarItemEventArgs>, global::ElmSharp.ToolbarItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::ElmSharp.ToolbarItemEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.ITizenPlatform"/> class as observables.
    /// </summary>
    public class RxITizenPlatformEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.ITizenPlatform _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.ITizenPlatform"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxITizenPlatformEvents(global::Xamarin.Forms.Platform.Tizen.ITizenPlatform data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.ITizenPlatform.RootNativeViewChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs> RootNativeViewChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs>, global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RootNativeViewChanged += x, x => _data.RootNativeViewChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.LightweightPlatform"/> class as observables.
    /// </summary>
    public class RxLightweightPlatformEvents : global::Xamarin.Forms.RxBindableObjectEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.LightweightPlatform _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.LightweightPlatform"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLightweightPlatformEvents(global::Xamarin.Forms.Platform.Tizen.LightweightPlatform data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.LightweightPlatform.RootNativeViewChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs> RootNativeViewChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs>, global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RootNativeViewChanged += x, x => _data.RootNativeViewChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationDrawer"/> class as observables.
    /// </summary>
    public class RxNavigationDrawerEvents : global::Xamarin.Forms.Platform.Tizen.Native.RxBoxEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.NavigationDrawer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationDrawer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationDrawerEvents(global::Xamarin.Forms.Platform.Tizen.NavigationDrawer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationDrawer.Toggled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Toggled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Toggled += x, x => _data.Toggled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationView"/> class as observables.
    /// </summary>
    public class RxNavigationViewEvents : global::Xamarin.Forms.Platform.Tizen.Native.RxBoxEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.NavigationView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNavigationViewEvents(global::Xamarin.Forms.Platform.Tizen.NavigationView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.NavigationView.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SelectedItemChangedEventArgs> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SelectedItemChangedEventArgs>, global::Xamarin.Forms.SelectedItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SelectedItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x);
    }
}

namespace Xamarin.Forms.Platform.Tizen.Native
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Platform.Tizen.Native"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Box"/> class.
        /// </summary>
        public static RxBoxEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.Box item) => new RxBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog"/> class.
        /// </summary>
        public static RxDateTimePickerDialogEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog item) => new RxDateTimePickerDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Dialog"/> class.
        /// </summary>
        public static RxDialogEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.Dialog item) => new RxDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry"/> class.
        /// </summary>
        public static RxEditfieldEntryEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry item) => new RxEditfieldEntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Entry"/> class.
        /// </summary>
        public static RxEntryEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.Entry item) => new RxEntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog"/> class.
        /// </summary>
        public static RxIDateTimeDialogEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog item) => new RxIDateTimeDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IEntry"/> class.
        /// </summary>
        public static RxIEntryEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.IEntry item) => new RxIEntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor"/> class.
        /// </summary>
        public static RxItemAdaptorEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor item) => new RxItemAdaptorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage"/> class.
        /// </summary>
        public static RxMasterDetailPageEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage item) => new RxMasterDetailPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Page"/> class.
        /// </summary>
        public static RxPageEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.Page item) => new RxPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder"/> class.
        /// </summary>
        public static RxViewHolderEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder item) => new RxViewHolderEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Box"/> class as observables.
    /// </summary>
    public class RxBoxEvents : global::ElmSharp.RxWidgetEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.Box _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Box"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBoxEvents(global::Xamarin.Forms.Platform.Tizen.Native.Box data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Box.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs>, global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog"/> class as observables.
    /// </summary>
    public class RxDateTimePickerDialogEvents : global::Xamarin.Forms.Platform.Tizen.Native.RxDialogEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDateTimePickerDialogEvents(global::Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog.DateTimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs> DateTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs>, global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateTimeChanged += x, x => _data.DateTimeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Dialog"/> class as observables.
    /// </summary>
    public class RxDialogEvents : global::ElmSharp.RxPopupEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.Dialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Dialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDialogEvents(global::Xamarin.Forms.Platform.Tizen.Native.Dialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Dialog.Shown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Shown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Shown += x, x => _data.Shown -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry"/> class as observables.
    /// </summary>
    public class RxEditfieldEntryEvents : global::Xamarin.Forms.Platform.Tizen.Native.RxEntryEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEditfieldEntryEvents(global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry.TextBlockFocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextBlockFocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextBlockFocused += x, x => _data.TextBlockFocused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry.TextBlockUnfocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextBlockUnfocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextBlockUnfocused += x, x => _data.TextBlockUnfocused -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Entry"/> class as observables.
    /// </summary>
    public class RxEntryEvents : global::ElmSharp.RxEntryEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.Entry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Entry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxEntryEvents(global::Xamarin.Forms.Platform.Tizen.Native.Entry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Entry.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog"/> class as observables.
    /// </summary>
    public class RxIDateTimeDialogEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIDateTimeDialogEvents(global::Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.DateTimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs> DateTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs>, global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateTimeChanged += x, x => _data.DateTimeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IEntry"/> class as observables.
    /// </summary>
    public class RxIEntryEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.IEntry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IEntry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIEntryEvents(global::Xamarin.Forms.Platform.Tizen.Native.IEntry data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.IEntry.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor"/> class as observables.
    /// </summary>
    public class RxItemAdaptorEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxItemAdaptorEvents(global::Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SelectedItemChangedEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SelectedItemChangedEventArgs>, global::Xamarin.Forms.SelectedItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SelectedItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage"/> class as observables.
    /// </summary>
    public class RxMasterDetailPageEvents : global::Xamarin.Forms.Platform.Tizen.Native.RxBoxEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMasterDetailPageEvents(global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage.IsPresentedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.Native.IsPresentedChangedEventArgs> IsPresentedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.Native.IsPresentedChangedEventArgs>, global::Xamarin.Forms.Platform.Tizen.Native.IsPresentedChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.Native.IsPresentedChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.IsPresentedChanged += x, x => _data.IsPresentedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage.UpdateIsPresentChangeable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.Native.UpdateIsPresentChangeableEventArgs> UpdateIsPresentChangeable => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.Native.UpdateIsPresentChangeableEventArgs>, global::Xamarin.Forms.Platform.Tizen.Native.UpdateIsPresentChangeableEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.Native.UpdateIsPresentChangeableEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.UpdateIsPresentChangeable += x, x => _data.UpdateIsPresentChangeable -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Page"/> class as observables.
    /// </summary>
    public class RxPageEvents : global::ElmSharp.RxLayoutEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.Page _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Page"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPageEvents(global::Xamarin.Forms.Platform.Tizen.Native.Page data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Page.LayoutUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs> LayoutUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs>, global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutUpdated += x, x => _data.LayoutUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder"/> class as observables.
    /// </summary>
    public class RxViewHolderEvents : global::Xamarin.Forms.Platform.Tizen.Native.RxBoxEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxViewHolderEvents(global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder.RequestSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RequestSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RequestSelected += x, x => _data.RequestSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.ViewHolder.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Selected += x, x => _data.Selected -= x);
    }
}

namespace Xamarin.Forms.Platform.Tizen.Native.Watch
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Platform.Tizen.Native.Watch"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog"/> class.
        /// </summary>
        public static RxWatchDataTimePickerDialogEvents Events(this global::Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog item) => new RxWatchDataTimePickerDialogEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog"/> class as observables.
    /// </summary>
    public class RxWatchDataTimePickerDialogEvents : global::ElmSharp.RxPopupEvents
    {
        private readonly global::Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWatchDataTimePickerDialogEvents(global::Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog.DateTimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs> DateTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs>, global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateTimeChanged += x, x => _data.DateTimeChanged -= x);
    }
}

namespace Xamarin.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Xamarin.Forms"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Forms.ViewInitialized"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Xamarin.Forms.ViewInitializedEventArgs> FormsViewInitialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ViewInitializedEventArgs>, global::Xamarin.Forms.ViewInitializedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ViewInitializedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Xamarin.Forms.Forms.ViewInitialized += x, x => global::Xamarin.Forms.Forms.ViewInitialized -= x);
    }
}