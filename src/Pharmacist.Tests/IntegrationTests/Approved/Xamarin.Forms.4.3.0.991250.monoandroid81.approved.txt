using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Android.Support.V4.Widget
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Support.V4.Widget"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Support.V4.Widget.DrawerLayout"/> class.
        /// </summary>
        public static DrawerLayoutEvents Events(this global::Android.Support.V4.Widget.DrawerLayout item) => new DrawerLayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Support.V4.Widget.NestedScrollView"/> class.
        /// </summary>
        public static NestedScrollViewEvents Events(this global::Android.Support.V4.Widget.NestedScrollView item) => new NestedScrollViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Support.V4.Widget.SwipeRefreshLayout"/> class.
        /// </summary>
        public static SwipeRefreshLayoutEvents Events(this global::Android.Support.V4.Widget.SwipeRefreshLayout item) => new SwipeRefreshLayoutEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Support.V4.Widget.DrawerLayout"/> class as observables.
    /// </summary>
    public class DrawerLayoutEvents : global::Android.Views.ViewGroupEvents
    {
        private readonly global::Android.Support.V4.Widget.DrawerLayout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Support.V4.Widget.DrawerLayout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DrawerLayoutEvents(global::Android.Support.V4.Widget.DrawerLayout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Support.V4.Widget.DrawerLayout.DrawerClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Support.V4.Widget.DrawerLayout.DrawerClosedEventArgs> DrawerClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Support.V4.Widget.DrawerLayout.DrawerClosedEventArgs>, global::Android.Support.V4.Widget.DrawerLayout.DrawerClosedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Support.V4.Widget.DrawerLayout.DrawerClosedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DrawerClosed += x, x => _data.DrawerClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Support.V4.Widget.DrawerLayout.DrawerOpened"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Support.V4.Widget.DrawerLayout.DrawerOpenedEventArgs> DrawerOpened => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Support.V4.Widget.DrawerLayout.DrawerOpenedEventArgs>, global::Android.Support.V4.Widget.DrawerLayout.DrawerOpenedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Support.V4.Widget.DrawerLayout.DrawerOpenedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DrawerOpened += x, x => _data.DrawerOpened -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Support.V4.Widget.DrawerLayout.DrawerSlide"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Support.V4.Widget.DrawerLayout.DrawerSlideEventArgs> DrawerSlide => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Support.V4.Widget.DrawerLayout.DrawerSlideEventArgs>, global::Android.Support.V4.Widget.DrawerLayout.DrawerSlideEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Support.V4.Widget.DrawerLayout.DrawerSlideEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DrawerSlide += x, x => _data.DrawerSlide -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Support.V4.Widget.DrawerLayout.DrawerStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Support.V4.Widget.DrawerLayout.DrawerStateChangedEventArgs> DrawerStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Support.V4.Widget.DrawerLayout.DrawerStateChangedEventArgs>, global::Android.Support.V4.Widget.DrawerLayout.DrawerStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Support.V4.Widget.DrawerLayout.DrawerStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DrawerStateChanged += x, x => _data.DrawerStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Support.V4.Widget.NestedScrollView"/> class as observables.
    /// </summary>
    public class NestedScrollViewEvents : global::Android.Views.ViewGroupEvents
    {
        private readonly global::Android.Support.V4.Widget.NestedScrollView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Support.V4.Widget.NestedScrollView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NestedScrollViewEvents(global::Android.Support.V4.Widget.NestedScrollView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Support.V4.Widget.NestedScrollView.ScrollChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Support.V4.Widget.NestedScrollView.ScrollChangeEventArgs> ScrollChange => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Support.V4.Widget.NestedScrollView.ScrollChangeEventArgs>, global::Android.Support.V4.Widget.NestedScrollView.ScrollChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Support.V4.Widget.NestedScrollView.ScrollChangeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollChange += x, x => _data.ScrollChange -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Support.V4.Widget.SwipeRefreshLayout"/> class as observables.
    /// </summary>
    public class SwipeRefreshLayoutEvents : global::Android.Views.ViewGroupEvents
    {
        private readonly global::Android.Support.V4.Widget.SwipeRefreshLayout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Support.V4.Widget.SwipeRefreshLayout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SwipeRefreshLayoutEvents(global::Android.Support.V4.Widget.SwipeRefreshLayout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Support.V4.Widget.SwipeRefreshLayout.Refresh"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Refresh => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Refresh += x, x => _data.Refresh -= x);
    }
}

namespace Android.Views
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Views"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.View"/> class.
        /// </summary>
        public static ViewEvents Events(this global::Android.Views.View item) => new ViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.ViewGroup"/> class.
        /// </summary>
        public static ViewGroupEvents Events(this global::Android.Views.ViewGroup item) => new ViewGroupEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.View"/> class as observables.
    /// </summary>
    public class ViewEvents
    {
        private readonly global::Android.Views.View _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.View"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewEvents(global::Android.Views.View data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.CapturedPointer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.CapturedPointerEventArgs> CapturedPointer => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.CapturedPointerEventArgs>, global::Android.Views.View.CapturedPointerEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.CapturedPointerEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CapturedPointer += x, x => _data.CapturedPointer -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.ContextClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ContextClickEventArgs> ContextClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.ContextClickEventArgs>, global::Android.Views.View.ContextClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.ContextClickEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextClick += x, x => _data.ContextClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.ContextMenuCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.CreateContextMenuEventArgs> ContextMenuCreated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.CreateContextMenuEventArgs>, global::Android.Views.View.CreateContextMenuEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.CreateContextMenuEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ContextMenuCreated += x, x => _data.ContextMenuCreated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.Drag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.DragEventArgs> Drag => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.DragEventArgs>, global::Android.Views.View.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.DragEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Drag += x, x => _data.Drag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.FocusChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.FocusChangeEventArgs> FocusChange => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.FocusChangeEventArgs>, global::Android.Views.View.FocusChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.FocusChangeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChange += x, x => _data.FocusChange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.GenericMotion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.GenericMotionEventArgs> GenericMotion => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.GenericMotionEventArgs>, global::Android.Views.View.GenericMotionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.GenericMotionEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GenericMotion += x, x => _data.GenericMotion -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.Hover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.HoverEventArgs> Hover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.HoverEventArgs>, global::Android.Views.View.HoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.HoverEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Hover += x, x => _data.Hover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.KeyEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.KeyEventArgs>, global::Android.Views.View.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.LayoutChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.LayoutChangeEventArgs> LayoutChange => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.LayoutChangeEventArgs>, global::Android.Views.View.LayoutChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.LayoutChangeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutChange += x, x => _data.LayoutChange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.LongClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.LongClickEventArgs> LongClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.LongClickEventArgs>, global::Android.Views.View.LongClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.LongClickEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LongClick += x, x => _data.LongClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.ScrollChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ScrollChangeEventArgs> ScrollChange => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.ScrollChangeEventArgs>, global::Android.Views.View.ScrollChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.ScrollChangeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollChange += x, x => _data.ScrollChange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.SystemUiVisibilityChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.SystemUiVisibilityChangeEventArgs> SystemUiVisibilityChange => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.SystemUiVisibilityChangeEventArgs>, global::Android.Views.View.SystemUiVisibilityChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.SystemUiVisibilityChangeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SystemUiVisibilityChange += x, x => _data.SystemUiVisibilityChange -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.Touch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.TouchEventArgs> Touch => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.TouchEventArgs>, global::Android.Views.View.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Touch += x, x => _data.Touch -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.ViewAttachedToWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ViewAttachedToWindowEventArgs> ViewAttachedToWindow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.ViewAttachedToWindowEventArgs>, global::Android.Views.View.ViewAttachedToWindowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.ViewAttachedToWindowEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ViewAttachedToWindow += x, x => _data.ViewAttachedToWindow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.View.ViewDetachedFromWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ViewDetachedFromWindowEventArgs> ViewDetachedFromWindow => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.View.ViewDetachedFromWindowEventArgs>, global::Android.Views.View.ViewDetachedFromWindowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.View.ViewDetachedFromWindowEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ViewDetachedFromWindow += x, x => _data.ViewDetachedFromWindow -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.ViewGroup"/> class as observables.
    /// </summary>
    public class ViewGroupEvents : global::Android.Views.ViewEvents
    {
        private readonly global::Android.Views.ViewGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.ViewGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewGroupEvents(global::Android.Views.ViewGroup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.ViewGroup.AnimationEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationEndEventArgs> AnimationEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationEndEventArgs>, global::Android.Views.Animations.Animation.AnimationEndEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.Animations.Animation.AnimationEndEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AnimationEnd += x, x => _data.AnimationEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.ViewGroup.AnimationRepeat"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationRepeatEventArgs> AnimationRepeat => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationRepeatEventArgs>, global::Android.Views.Animations.Animation.AnimationRepeatEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.Animations.Animation.AnimationRepeatEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AnimationRepeat += x, x => _data.AnimationRepeat -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.ViewGroup.AnimationStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationStartEventArgs> AnimationStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationStartEventArgs>, global::Android.Views.Animations.Animation.AnimationStartEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.Animations.Animation.AnimationStartEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AnimationStart += x, x => _data.AnimationStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.ViewGroup.ChildViewAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewGroup.ChildViewAddedEventArgs> ChildViewAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.ViewGroup.ChildViewAddedEventArgs>, global::Android.Views.ViewGroup.ChildViewAddedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.ViewGroup.ChildViewAddedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildViewAdded += x, x => _data.ChildViewAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Views.ViewGroup.ChildViewRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewGroup.ChildViewRemovedEventArgs> ChildViewRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Views.ViewGroup.ChildViewRemovedEventArgs>, global::Android.Views.ViewGroup.ChildViewRemovedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Views.ViewGroup.ChildViewRemovedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildViewRemoved += x, x => _data.ChildViewRemoved -= x);
    }
}

namespace Android.Widget
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Widget"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.CompoundButton"/> class.
        /// </summary>
        public static CompoundButtonEvents Events(this global::Android.Widget.CompoundButton item) => new CompoundButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.TextView"/> class.
        /// </summary>
        public static TextViewEvents Events(this global::Android.Widget.TextView item) => new TextViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.CompoundButton"/> class as observables.
    /// </summary>
    public class CompoundButtonEvents : global::Android.Widget.TextViewEvents
    {
        private readonly global::Android.Widget.CompoundButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.CompoundButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CompoundButtonEvents(global::Android.Widget.CompoundButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Widget.CompoundButton.CheckedChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.CompoundButton.CheckedChangeEventArgs> CheckedChange => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Widget.CompoundButton.CheckedChangeEventArgs>, global::Android.Widget.CompoundButton.CheckedChangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Widget.CompoundButton.CheckedChangeEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CheckedChange += x, x => _data.CheckedChange -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.TextView"/> class as observables.
    /// </summary>
    public class TextViewEvents : global::Android.Views.ViewEvents
    {
        private readonly global::Android.Widget.TextView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.TextView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextViewEvents(global::Android.Widget.TextView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Widget.TextView.AfterTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Text.AfterTextChangedEventArgs> AfterTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Text.AfterTextChangedEventArgs>, global::Android.Text.AfterTextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Text.AfterTextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AfterTextChanged += x, x => _data.AfterTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Widget.TextView.BeforeTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Text.TextChangedEventArgs> BeforeTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Text.TextChangedEventArgs>, global::Android.Text.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Text.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BeforeTextChanged += x, x => _data.BeforeTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Widget.TextView.EditorAction"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.TextView.EditorActionEventArgs> EditorAction => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Widget.TextView.EditorActionEventArgs>, global::Android.Widget.TextView.EditorActionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Widget.TextView.EditorActionEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EditorAction += x, x => _data.EditorAction -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Android.Widget.TextView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Text.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Android.Text.TextChangedEventArgs>, global::Android.Text.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Android.Text.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }
}

namespace Xamarin.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Application"/> class.
        /// </summary>
        public static ApplicationEvents Events(this global::Xamarin.Forms.Application item) => new ApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.BaseShellItem"/> class.
        /// </summary>
        public static BaseShellItemEvents Events(this global::Xamarin.Forms.BaseShellItem item) => new BaseShellItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.BindableObject"/> class.
        /// </summary>
        public static BindableObjectEvents Events(this global::Xamarin.Forms.BindableObject item) => new BindableObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Button"/> class.
        /// </summary>
        public static ButtonEvents Events(this global::Xamarin.Forms.Button item) => new ButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.CarouselView"/> class.
        /// </summary>
        public static CarouselViewEvents Events(this global::Xamarin.Forms.CarouselView item) => new CarouselViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Cell"/> class.
        /// </summary>
        public static CellEvents Events(this global::Xamarin.Forms.Cell item) => new CellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.CheckBox"/> class.
        /// </summary>
        public static CheckBoxEvents Events(this global::Xamarin.Forms.CheckBox item) => new CheckBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer"/> class.
        /// </summary>
        public static ChildGestureRecognizerEvents Events(this global::Xamarin.Forms.ChildGestureRecognizer item) => new ChildGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer"/> class.
        /// </summary>
        public static ClickGestureRecognizerEvents Events(this global::Xamarin.Forms.ClickGestureRecognizer item) => new ClickGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ColumnDefinition"/> class.
        /// </summary>
        public static ColumnDefinitionEvents Events(this global::Xamarin.Forms.ColumnDefinition item) => new ColumnDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Command"/> class.
        /// </summary>
        public static CommandEvents Events(this global::Xamarin.Forms.Command item) => new CommandEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.DatePicker"/> class.
        /// </summary>
        public static DatePickerEvents Events(this global::Xamarin.Forms.DatePicker item) => new DatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Editor"/> class.
        /// </summary>
        public static EditorEvents Events(this global::Xamarin.Forms.Editor item) => new EditorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Element"/> class.
        /// </summary>
        public static ElementEvents Events(this global::Xamarin.Forms.Element item) => new ElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Entry"/> class.
        /// </summary>
        public static EntryEvents Events(this global::Xamarin.Forms.Entry item) => new EntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.EntryCell"/> class.
        /// </summary>
        public static EntryCellEvents Events(this global::Xamarin.Forms.EntryCell item) => new EntryCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ICellController"/> class.
        /// </summary>
        public static ICellControllerEvents Events(this global::Xamarin.Forms.ICellController item) => new ICellControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IDefinition"/> class.
        /// </summary>
        public static IDefinitionEvents Events(this global::Xamarin.Forms.IDefinition item) => new IDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IElementController"/> class.
        /// </summary>
        public static IElementControllerEvents Events(this global::Xamarin.Forms.IElementController item) => new IElementControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ILayout"/> class.
        /// </summary>
        public static ILayoutEvents Events(this global::Xamarin.Forms.ILayout item) => new ILayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IListProxy"/> class.
        /// </summary>
        public static IListProxyEvents Events(this global::Xamarin.Forms.IListProxy item) => new IListProxyEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IListViewController"/> class.
        /// </summary>
        public static IListViewControllerEvents Events(this global::Xamarin.Forms.IListViewController item) => new IListViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ImageButton"/> class.
        /// </summary>
        public static ImageButtonEvents Events(this global::Xamarin.Forms.ImageButton item) => new ImageButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IMasterDetailPageController"/> class.
        /// </summary>
        public static IMasterDetailPageControllerEvents Events(this global::Xamarin.Forms.IMasterDetailPageController item) => new IMasterDetailPageControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.INavigationPageController"/> class.
        /// </summary>
        public static INavigationPageControllerEvents Events(this global::Xamarin.Forms.INavigationPageController item) => new INavigationPageControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IOpenGlViewController"/> class.
        /// </summary>
        public static IOpenGlViewControllerEvents Events(this global::Xamarin.Forms.IOpenGlViewController item) => new IOpenGlViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IScrollViewController"/> class.
        /// </summary>
        public static IScrollViewControllerEvents Events(this global::Xamarin.Forms.IScrollViewController item) => new IScrollViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ISearchHandlerController"/> class.
        /// </summary>
        public static ISearchHandlerControllerEvents Events(this global::Xamarin.Forms.ISearchHandlerController item) => new ISearchHandlerControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IShellController"/> class.
        /// </summary>
        public static IShellControllerEvents Events(this global::Xamarin.Forms.IShellController item) => new IShellControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IShellSectionController"/> class.
        /// </summary>
        public static IShellSectionControllerEvents Events(this global::Xamarin.Forms.IShellSectionController item) => new IShellSectionControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ITableViewController"/> class.
        /// </summary>
        public static ITableViewControllerEvents Events(this global::Xamarin.Forms.ITableViewController item) => new ITableViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ItemsView"/> class.
        /// </summary>
        public static ItemsViewEvents Events(this global::Xamarin.Forms.ItemsView item) => new ItemsViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IVisualElementController"/> class.
        /// </summary>
        public static IVisualElementControllerEvents Events(this global::Xamarin.Forms.IVisualElementController item) => new IVisualElementControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.IWebViewController"/> class.
        /// </summary>
        public static IWebViewControllerEvents Events(this global::Xamarin.Forms.IWebViewController item) => new IWebViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Layout"/> class.
        /// </summary>
        public static LayoutEvents Events(this global::Xamarin.Forms.Layout item) => new LayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ListView"/> class.
        /// </summary>
        public static ListViewEvents Events(this global::Xamarin.Forms.ListView item) => new ListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.MasterDetailPage"/> class.
        /// </summary>
        public static MasterDetailPageEvents Events(this global::Xamarin.Forms.MasterDetailPage item) => new MasterDetailPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.MenuItem"/> class.
        /// </summary>
        public static MenuItemEvents Events(this global::Xamarin.Forms.MenuItem item) => new MenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.NavigationPage"/> class.
        /// </summary>
        public static NavigationPageEvents Events(this global::Xamarin.Forms.NavigationPage item) => new NavigationPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.OpenGLView"/> class.
        /// </summary>
        public static OpenGLViewEvents Events(this global::Xamarin.Forms.OpenGLView item) => new OpenGLViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Page"/> class.
        /// </summary>
        public static PageEvents Events(this global::Xamarin.Forms.Page item) => new PageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.PanGestureRecognizer"/> class.
        /// </summary>
        public static PanGestureRecognizerEvents Events(this global::Xamarin.Forms.PanGestureRecognizer item) => new PanGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Picker"/> class.
        /// </summary>
        public static PickerEvents Events(this global::Xamarin.Forms.Picker item) => new PickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer"/> class.
        /// </summary>
        public static PinchGestureRecognizerEvents Events(this global::Xamarin.Forms.PinchGestureRecognizer item) => new PinchGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.RefreshView"/> class.
        /// </summary>
        public static RefreshViewEvents Events(this global::Xamarin.Forms.RefreshView item) => new RefreshViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.RowDefinition"/> class.
        /// </summary>
        public static RowDefinitionEvents Events(this global::Xamarin.Forms.RowDefinition item) => new RowDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ScrollView"/> class.
        /// </summary>
        public static ScrollViewEvents Events(this global::Xamarin.Forms.ScrollView item) => new ScrollViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SearchBar"/> class.
        /// </summary>
        public static SearchBarEvents Events(this global::Xamarin.Forms.SearchBar item) => new SearchBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SearchHandler"/> class.
        /// </summary>
        public static SearchHandlerEvents Events(this global::Xamarin.Forms.SearchHandler item) => new SearchHandlerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SelectableItemsView"/> class.
        /// </summary>
        public static SelectableItemsViewEvents Events(this global::Xamarin.Forms.SelectableItemsView item) => new SelectableItemsViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Shell"/> class.
        /// </summary>
        public static ShellEvents Events(this global::Xamarin.Forms.Shell item) => new ShellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Slider"/> class.
        /// </summary>
        public static SliderEvents Events(this global::Xamarin.Forms.Slider item) => new SliderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Stepper"/> class.
        /// </summary>
        public static StepperEvents Events(this global::Xamarin.Forms.Stepper item) => new StepperEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer"/> class.
        /// </summary>
        public static SwipeGestureRecognizerEvents Events(this global::Xamarin.Forms.SwipeGestureRecognizer item) => new SwipeGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Switch"/> class.
        /// </summary>
        public static SwitchEvents Events(this global::Xamarin.Forms.Switch item) => new SwitchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.SwitchCell"/> class.
        /// </summary>
        public static SwitchCellEvents Events(this global::Xamarin.Forms.SwitchCell item) => new SwitchCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.TableView"/> class.
        /// </summary>
        public static TableViewEvents Events(this global::Xamarin.Forms.TableView item) => new TableViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.TapGestureRecognizer"/> class.
        /// </summary>
        public static TapGestureRecognizerEvents Events(this global::Xamarin.Forms.TapGestureRecognizer item) => new TapGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.ToolbarItem"/> class.
        /// </summary>
        public static ToolbarItemEvents Events(this global::Xamarin.Forms.ToolbarItem item) => new ToolbarItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.VisualElement"/> class.
        /// </summary>
        public static VisualElementEvents Events(this global::Xamarin.Forms.VisualElement item) => new VisualElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.WebView"/> class.
        /// </summary>
        public static WebViewEvents Events(this global::Xamarin.Forms.WebView item) => new WebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Application"/> class as observables.
    /// </summary>
    public class ApplicationEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ApplicationEvents(global::Xamarin.Forms.Application data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPopped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPoppedEventArgs> ModalPopped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPoppedEventArgs>, global::Xamarin.Forms.ModalPoppedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPoppedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPopped += x, x => _data.ModalPopped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPopping"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPoppingEventArgs> ModalPopping => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPoppingEventArgs>, global::Xamarin.Forms.ModalPoppingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPoppingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPopping += x, x => _data.ModalPopping -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPushedEventArgs> ModalPushed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPushedEventArgs>, global::Xamarin.Forms.ModalPushedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPushedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPushed += x, x => _data.ModalPushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.ModalPushing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ModalPushingEventArgs> ModalPushing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ModalPushingEventArgs>, global::Xamarin.Forms.ModalPushingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ModalPushingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModalPushing += x, x => _data.ModalPushing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.PageAppearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Page> PageAppearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Page>, global::Xamarin.Forms.Page>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Page e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PageAppearing += x, x => _data.PageAppearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Application.PageDisappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Page> PageDisappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Page>, global::Xamarin.Forms.Page>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Page e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PageDisappearing += x, x => _data.PageDisappearing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.BaseShellItem"/> class as observables.
    /// </summary>
    public class BaseShellItemEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.BaseShellItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.BaseShellItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BaseShellItemEvents(global::Xamarin.Forms.BaseShellItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BaseShellItem.Appearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Appearing += x, x => _data.Appearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BaseShellItem.Disappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Disappearing += x, x => _data.Disappearing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.BindableObject"/> class as observables.
    /// </summary>
    public class BindableObjectEvents
    {
        private readonly global::Xamarin.Forms.BindableObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.BindableObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindableObjectEvents(global::Xamarin.Forms.BindableObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BindableObject.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BindableObject.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.BindableObject.PropertyChanging"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PropertyChangingEventArgs> PropertyChanging => global::System.Reactive.Linq.Observable.FromEvent<global::Xamarin.Forms.PropertyChangingEventHandler, global::Xamarin.Forms.PropertyChangingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PropertyChangingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanging += x, x => _data.PropertyChanging -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Button"/> class as observables.
    /// </summary>
    public class ButtonEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonEvents(global::Xamarin.Forms.Button data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Button.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Button.Pressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Pressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pressed += x, x => _data.Pressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Button.Released"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Released => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Released += x, x => _data.Released -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.CarouselView"/> class as observables.
    /// </summary>
    public class CarouselViewEvents : global::Xamarin.Forms.ItemsViewEvents
    {
        private readonly global::Xamarin.Forms.CarouselView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.CarouselView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CarouselViewEvents(global::Xamarin.Forms.CarouselView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.CarouselView.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.CurrentItemChangedEventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.CurrentItemChangedEventArgs>, global::Xamarin.Forms.CurrentItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.CurrentItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.CarouselView.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PositionChangedEventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.PositionChangedEventArgs>, global::Xamarin.Forms.PositionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PositionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Cell"/> class as observables.
    /// </summary>
    public class CellEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.Cell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Cell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CellEvents(global::Xamarin.Forms.Cell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.Appearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Appearing += x, x => _data.Appearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.Disappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Disappearing += x, x => _data.Disappearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.ForceUpdateSizeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForceUpdateSizeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ForceUpdateSizeRequested += x, x => _data.ForceUpdateSizeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Cell.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.CheckBox"/> class as observables.
    /// </summary>
    public class CheckBoxEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.CheckBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.CheckBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CheckBoxEvents(global::Xamarin.Forms.CheckBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.CheckBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.CheckedChangedEventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.CheckedChangedEventArgs>, global::Xamarin.Forms.CheckedChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.CheckedChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer"/> class as observables.
    /// </summary>
    public class ChildGestureRecognizerEvents
    {
        private readonly global::Xamarin.Forms.ChildGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ChildGestureRecognizerEvents(global::Xamarin.Forms.ChildGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ChildGestureRecognizer.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer"/> class as observables.
    /// </summary>
    public class ClickGestureRecognizerEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.ClickGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ClickGestureRecognizerEvents(global::Xamarin.Forms.ClickGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ClickGestureRecognizer.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ColumnDefinition"/> class as observables.
    /// </summary>
    public class ColumnDefinitionEvents : global::Xamarin.Forms.BindableObjectEvents
    {
        private readonly global::Xamarin.Forms.ColumnDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ColumnDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ColumnDefinitionEvents(global::Xamarin.Forms.ColumnDefinition data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ColumnDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Command"/> class as observables.
    /// </summary>
    public class CommandEvents
    {
        private readonly global::Xamarin.Forms.Command _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Command"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CommandEvents(global::Xamarin.Forms.Command data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Command.CanExecuteChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CanExecuteChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CanExecuteChanged += x, x => _data.CanExecuteChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.DatePicker"/> class as observables.
    /// </summary>
    public class DatePickerEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DatePickerEvents(global::Xamarin.Forms.DatePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.DatePicker.DateSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.DateChangedEventArgs> DateSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.DateChangedEventArgs>, global::Xamarin.Forms.DateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.DateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DateSelected += x, x => _data.DateSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Editor"/> class as observables.
    /// </summary>
    public class EditorEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Editor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Editor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EditorEvents(global::Xamarin.Forms.Editor data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Editor.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Editor.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Element"/> class as observables.
    /// </summary>
    public class ElementEvents : global::Xamarin.Forms.BindableObjectEvents
    {
        private readonly global::Xamarin.Forms.Element _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Element"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ElementEvents(global::Xamarin.Forms.Element data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.ChildAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> ChildAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildAdded += x, x => _data.ChildAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.ChildRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> ChildRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildRemoved += x, x => _data.ChildRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.DescendantAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> DescendantAdded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DescendantAdded += x, x => _data.DescendantAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.DescendantRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ElementEventArgs> DescendantRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ElementEventArgs>, global::Xamarin.Forms.ElementEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ElementEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DescendantRemoved += x, x => _data.DescendantRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Element.PlatformSet"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("PlatformSet is obsolete as of 3.5.0. Do not use this event.", false)]
        public global::System.IObservable<global::System.EventArgs> PlatformSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PlatformSet += x, x => _data.PlatformSet -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Entry"/> class as observables.
    /// </summary>
    public class EntryEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Entry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Entry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EntryEvents(global::Xamarin.Forms.Entry data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Entry.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Entry.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.EntryCell"/> class as observables.
    /// </summary>
    public class EntryCellEvents : global::Xamarin.Forms.CellEvents
    {
        private readonly global::Xamarin.Forms.EntryCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.EntryCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EntryCellEvents(global::Xamarin.Forms.EntryCell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.EntryCell.Completed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Completed += x, x => _data.Completed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ICellController"/> class as observables.
    /// </summary>
    public class ICellControllerEvents
    {
        private readonly global::Xamarin.Forms.ICellController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ICellController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ICellControllerEvents(global::Xamarin.Forms.ICellController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ICellController.ForceUpdateSizeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForceUpdateSizeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ForceUpdateSizeRequested += x, x => _data.ForceUpdateSizeRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IDefinition"/> class as observables.
    /// </summary>
    public class IDefinitionEvents
    {
        private readonly global::Xamarin.Forms.IDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IDefinitionEvents(global::Xamarin.Forms.IDefinition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IElementController"/> class as observables.
    /// </summary>
    public class IElementControllerEvents
    {
        private readonly global::Xamarin.Forms.IElementController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IElementController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IElementControllerEvents(global::Xamarin.Forms.IElementController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IElementController.PlatformSet"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("PlatformSet is obsolete as of 3.5.0. Do not use this event.", false)]
        public global::System.IObservable<global::System.EventArgs> PlatformSet => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PlatformSet += x, x => _data.PlatformSet -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ILayout"/> class as observables.
    /// </summary>
    public class ILayoutEvents
    {
        private readonly global::Xamarin.Forms.ILayout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ILayout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ILayoutEvents(global::Xamarin.Forms.ILayout data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ILayout.LayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IListProxy"/> class as observables.
    /// </summary>
    public class IListProxyEvents
    {
        private readonly global::Xamarin.Forms.IListProxy _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IListProxy"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IListProxyEvents(global::Xamarin.Forms.IListProxy data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IListProxy.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.Collections.Specialized.NotifyCollectionChangedEventHandler, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IListViewController"/> class as observables.
    /// </summary>
    public class IListViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IListViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IListViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IListViewControllerEvents(global::Xamarin.Forms.IListViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IListViewController.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ImageButton"/> class as observables.
    /// </summary>
    public class ImageButtonEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.ImageButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ImageButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageButtonEvents(global::Xamarin.Forms.ImageButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ImageButton.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ImageButton.Pressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Pressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pressed += x, x => _data.Pressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ImageButton.Released"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Released => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Released += x, x => _data.Released -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IMasterDetailPageController"/> class as observables.
    /// </summary>
    public class IMasterDetailPageControllerEvents
    {
        private readonly global::Xamarin.Forms.IMasterDetailPageController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IMasterDetailPageController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IMasterDetailPageControllerEvents(global::Xamarin.Forms.IMasterDetailPageController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IMasterDetailPageController.BackButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.BackButtonPressedEventArgs> BackButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.BackButtonPressedEventArgs>, global::Xamarin.Forms.BackButtonPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.BackButtonPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.INavigationPageController"/> class as observables.
    /// </summary>
    public class INavigationPageControllerEvents
    {
        private readonly global::Xamarin.Forms.INavigationPageController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.INavigationPageController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public INavigationPageControllerEvents(global::Xamarin.Forms.INavigationPageController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.InsertPageBeforeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> InsertPageBeforeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.InsertPageBeforeRequested += x, x => _data.InsertPageBeforeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.PopRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopRequested += x, x => _data.PopRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.PopToRootRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopToRootRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopToRootRequested += x, x => _data.PopToRootRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.PushRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PushRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PushRequested += x, x => _data.PushRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.INavigationPageController.RemovePageRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> RemovePageRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemovePageRequested += x, x => _data.RemovePageRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IOpenGlViewController"/> class as observables.
    /// </summary>
    public class IOpenGlViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IOpenGlViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IOpenGlViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IOpenGlViewControllerEvents(global::Xamarin.Forms.IOpenGlViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IOpenGlViewController.DisplayRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DisplayRequested += x, x => _data.DisplayRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IScrollViewController"/> class as observables.
    /// </summary>
    public class IScrollViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IScrollViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IScrollViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IScrollViewControllerEvents(global::Xamarin.Forms.IScrollViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IScrollViewController.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ISearchHandlerController"/> class as observables.
    /// </summary>
    public class ISearchHandlerControllerEvents
    {
        private readonly global::Xamarin.Forms.ISearchHandlerController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ISearchHandlerController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ISearchHandlerControllerEvents(global::Xamarin.Forms.ISearchHandlerController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ISearchHandlerController.ListProxyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ListProxyChangedEventArgs> ListProxyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ListProxyChangedEventArgs>, global::Xamarin.Forms.ListProxyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ListProxyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ListProxyChanged += x, x => _data.ListProxyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IShellController"/> class as observables.
    /// </summary>
    public class IShellControllerEvents
    {
        private readonly global::Xamarin.Forms.IShellController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IShellController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellControllerEvents(global::Xamarin.Forms.IShellController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IShellController.StructureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StructureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.StructureChanged += x, x => _data.StructureChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IShellSectionController"/> class as observables.
    /// </summary>
    public class IShellSectionControllerEvents
    {
        private readonly global::Xamarin.Forms.IShellSectionController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IShellSectionController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellSectionControllerEvents(global::Xamarin.Forms.IShellSectionController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IShellSectionController.NavigationRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> NavigationRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.NavigationRequested += x, x => _data.NavigationRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ITableViewController"/> class as observables.
    /// </summary>
    public class ITableViewControllerEvents
    {
        private readonly global::Xamarin.Forms.ITableViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ITableViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ITableViewControllerEvents(global::Xamarin.Forms.ITableViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ITableViewController.ModelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModelChanged += x, x => _data.ModelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ItemsView"/> class as observables.
    /// </summary>
    public class ItemsViewEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.ItemsView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ItemsView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ItemsViewEvents(global::Xamarin.Forms.ItemsView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ItemsView.RemainingItemsThresholdReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RemainingItemsThresholdReached => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemainingItemsThresholdReached += x, x => _data.RemainingItemsThresholdReached -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ItemsView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemsViewScrolledEventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemsViewScrolledEventArgs>, global::Xamarin.Forms.ItemsViewScrolledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemsViewScrolledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ItemsView.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestEventArgs>, global::Xamarin.Forms.ScrollToRequestEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IVisualElementController"/> class as observables.
    /// </summary>
    public class IVisualElementControllerEvents
    {
        private readonly global::Xamarin.Forms.IVisualElementController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IVisualElementController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IVisualElementControllerEvents(global::Xamarin.Forms.IVisualElementController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IVisualElementController.BatchCommitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>> BatchCommitted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BatchCommitted += x, x => _data.BatchCommitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IVisualElementController.FocusChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.VisualElement.FocusRequestArgs>, global::Xamarin.Forms.VisualElement.FocusRequestArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.VisualElement.FocusRequestArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.IWebViewController"/> class as observables.
    /// </summary>
    public class IWebViewControllerEvents
    {
        private readonly global::Xamarin.Forms.IWebViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.IWebViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IWebViewControllerEvents(global::Xamarin.Forms.IWebViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.EvalRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EvalRequested> EvalRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EvalRequested>, global::Xamarin.Forms.Internals.EvalRequested>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EvalRequested e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EvalRequested += x, x => _data.EvalRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.GoBackRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoBackRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoBackRequested += x, x => _data.GoBackRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.GoForwardRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoForwardRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoForwardRequested += x, x => _data.GoForwardRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.IWebViewController.ReloadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReloadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ReloadRequested += x, x => _data.ReloadRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Layout"/> class as observables.
    /// </summary>
    public class LayoutEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Layout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Layout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LayoutEvents(global::Xamarin.Forms.Layout data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Layout.LayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ListView"/> class as observables.
    /// </summary>
    public class ListViewEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.ListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListViewEvents(global::Xamarin.Forms.ListView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemAppearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemVisibilityEventArgs> ItemAppearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemVisibilityEventArgs>, global::Xamarin.Forms.ItemVisibilityEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemVisibilityEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemAppearing += x, x => _data.ItemAppearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemDisappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemVisibilityEventArgs> ItemDisappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemVisibilityEventArgs>, global::Xamarin.Forms.ItemVisibilityEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemVisibilityEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemDisappearing += x, x => _data.ItemDisappearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SelectedItemChangedEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SelectedItemChangedEventArgs>, global::Xamarin.Forms.SelectedItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SelectedItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ItemTapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ItemTappedEventArgs> ItemTapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ItemTappedEventArgs>, global::Xamarin.Forms.ItemTappedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ItemTappedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemTapped += x, x => _data.ItemTapped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.Refreshing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Refreshing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Refreshing += x, x => _data.Refreshing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrolledEventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrolledEventArgs>, global::Xamarin.Forms.ScrolledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrolledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ListView.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.MasterDetailPage"/> class as observables.
    /// </summary>
    public class MasterDetailPageEvents : global::Xamarin.Forms.PageEvents
    {
        private readonly global::Xamarin.Forms.MasterDetailPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.MasterDetailPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MasterDetailPageEvents(global::Xamarin.Forms.MasterDetailPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.MasterDetailPage.BackButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.BackButtonPressedEventArgs> BackButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.BackButtonPressedEventArgs>, global::Xamarin.Forms.BackButtonPressedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.BackButtonPressedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.MasterDetailPage.IsPresentedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IsPresentedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.IsPresentedChanged += x, x => _data.IsPresentedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.MenuItem"/> class as observables.
    /// </summary>
    public class MenuItemEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MenuItemEvents(global::Xamarin.Forms.MenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.MenuItem.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.NavigationPage"/> class as observables.
    /// </summary>
    public class NavigationPageEvents : global::Xamarin.Forms.PageEvents
    {
        private readonly global::Xamarin.Forms.NavigationPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.NavigationPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NavigationPageEvents(global::Xamarin.Forms.NavigationPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.InsertPageBeforeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> InsertPageBeforeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.InsertPageBeforeRequested += x, x => _data.InsertPageBeforeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.Popped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.NavigationEventArgs> Popped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.NavigationEventArgs>, global::Xamarin.Forms.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Popped += x, x => _data.Popped -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PoppedToRoot"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.NavigationEventArgs> PoppedToRoot => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.NavigationEventArgs>, global::Xamarin.Forms.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PoppedToRoot += x, x => _data.PoppedToRoot -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PopRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopRequested += x, x => _data.PopRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PopToRootRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopToRootRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PopToRootRequested += x, x => _data.PopToRootRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.Pushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.NavigationEventArgs> Pushed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.NavigationEventArgs>, global::Xamarin.Forms.NavigationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.NavigationEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Pushed += x, x => _data.Pushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.PushRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> PushRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PushRequested += x, x => _data.PushRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.NavigationPage.RemovePageRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs> RemovePageRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.NavigationRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.RemovePageRequested += x, x => _data.RemovePageRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.OpenGLView"/> class as observables.
    /// </summary>
    public class OpenGLViewEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.OpenGLView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.OpenGLView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public OpenGLViewEvents(global::Xamarin.Forms.OpenGLView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.OpenGLView.DisplayRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DisplayRequested += x, x => _data.DisplayRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Page"/> class as observables.
    /// </summary>
    public class PageEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Page _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Page"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PageEvents(global::Xamarin.Forms.Page data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Page.Appearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Appearing += x, x => _data.Appearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Page.Disappearing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappearing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Disappearing += x, x => _data.Disappearing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Page.LayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.PanGestureRecognizer"/> class as observables.
    /// </summary>
    public class PanGestureRecognizerEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.PanGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.PanGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PanGestureRecognizerEvents(global::Xamarin.Forms.PanGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.PanGestureRecognizer.PanUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PanUpdatedEventArgs> PanUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.PanUpdatedEventArgs>, global::Xamarin.Forms.PanUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PanUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PanUpdated += x, x => _data.PanUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Picker"/> class as observables.
    /// </summary>
    public class PickerEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Picker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Picker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PickerEvents(global::Xamarin.Forms.Picker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Picker.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer"/> class as observables.
    /// </summary>
    public class PinchGestureRecognizerEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.PinchGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PinchGestureRecognizerEvents(global::Xamarin.Forms.PinchGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.PinchGestureRecognizer.PinchUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.PinchGestureUpdatedEventArgs> PinchUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.PinchGestureUpdatedEventArgs>, global::Xamarin.Forms.PinchGestureUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.PinchGestureUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PinchUpdated += x, x => _data.PinchUpdated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.RefreshView"/> class as observables.
    /// </summary>
    public class RefreshViewEvents : global::Xamarin.Forms.LayoutEvents
    {
        private readonly global::Xamarin.Forms.RefreshView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.RefreshView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RefreshViewEvents(global::Xamarin.Forms.RefreshView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.RefreshView.Refreshing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Refreshing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Refreshing += x, x => _data.Refreshing -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.RowDefinition"/> class as observables.
    /// </summary>
    public class RowDefinitionEvents : global::Xamarin.Forms.BindableObjectEvents
    {
        private readonly global::Xamarin.Forms.RowDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.RowDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RowDefinitionEvents(global::Xamarin.Forms.RowDefinition data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.RowDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ScrollView"/> class as observables.
    /// </summary>
    public class ScrollViewEvents : global::Xamarin.Forms.LayoutEvents
    {
        private readonly global::Xamarin.Forms.ScrollView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ScrollView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollViewEvents(global::Xamarin.Forms.ScrollView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ScrollView.Scrolled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrolledEventArgs> Scrolled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrolledEventArgs>, global::Xamarin.Forms.ScrolledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrolledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Scrolled += x, x => _data.Scrolled -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ScrollView.ScrollToRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ScrollToRequestedEventArgs>, global::Xamarin.Forms.ScrollToRequestedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ScrollToRequestedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SearchBar"/> class as observables.
    /// </summary>
    public class SearchBarEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.SearchBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SearchBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SearchBarEvents(global::Xamarin.Forms.SearchBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchBar.SearchButtonPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchButtonPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SearchButtonPressed += x, x => _data.SearchButtonPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.TextChangedEventArgs>, global::Xamarin.Forms.TextChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.TextChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SearchHandler"/> class as observables.
    /// </summary>
    public class SearchHandlerEvents : global::Xamarin.Forms.BindableObjectEvents
    {
        private readonly global::Xamarin.Forms.SearchHandler _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SearchHandler"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SearchHandlerEvents(global::Xamarin.Forms.SearchHandler data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchHandler.FocusChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.VisualElement.FocusRequestArgs>, global::Xamarin.Forms.VisualElement.FocusRequestArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.VisualElement.FocusRequestArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchHandler.Focused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Focused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Focused += x, x => _data.Focused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SearchHandler.Unfocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Unfocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.EventArgs>, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unfocused += x, x => _data.Unfocused -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SelectableItemsView"/> class as observables.
    /// </summary>
    public class SelectableItemsViewEvents : global::Xamarin.Forms.ItemsViewEvents
    {
        private readonly global::Xamarin.Forms.SelectableItemsView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SelectableItemsView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SelectableItemsViewEvents(global::Xamarin.Forms.SelectableItemsView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SelectableItemsView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SelectionChangedEventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SelectionChangedEventArgs>, global::Xamarin.Forms.SelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Shell"/> class as observables.
    /// </summary>
    public class ShellEvents : global::Xamarin.Forms.PageEvents
    {
        private readonly global::Xamarin.Forms.Shell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Shell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellEvents(global::Xamarin.Forms.Shell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Shell.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ShellNavigatedEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ShellNavigatedEventArgs>, global::Xamarin.Forms.ShellNavigatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ShellNavigatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Shell.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ShellNavigatingEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ShellNavigatingEventArgs>, global::Xamarin.Forms.ShellNavigatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ShellNavigatingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigating += x, x => _data.Navigating -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Slider"/> class as observables.
    /// </summary>
    public class SliderEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Slider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Slider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SliderEvents(global::Xamarin.Forms.Slider data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Slider.DragCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragCompleted += x, x => _data.DragCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Slider.DragStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStarted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.DragStarted += x, x => _data.DragStarted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Slider.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ValueChangedEventArgs>, global::Xamarin.Forms.ValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Stepper"/> class as observables.
    /// </summary>
    public class StepperEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Stepper _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Stepper"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StepperEvents(global::Xamarin.Forms.Stepper data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Stepper.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ValueChangedEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ValueChangedEventArgs>, global::Xamarin.Forms.ValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer"/> class as observables.
    /// </summary>
    public class SwipeGestureRecognizerEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.SwipeGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SwipeGestureRecognizerEvents(global::Xamarin.Forms.SwipeGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SwipeGestureRecognizer.Swiped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.SwipedEventArgs> Swiped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.SwipedEventArgs>, global::Xamarin.Forms.SwipedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.SwipedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Swiped += x, x => _data.Swiped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Switch"/> class as observables.
    /// </summary>
    public class SwitchEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.Switch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Switch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SwitchEvents(global::Xamarin.Forms.Switch data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Switch.Toggled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ToggledEventArgs> Toggled => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ToggledEventArgs>, global::Xamarin.Forms.ToggledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ToggledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Toggled += x, x => _data.Toggled -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.SwitchCell"/> class as observables.
    /// </summary>
    public class SwitchCellEvents : global::Xamarin.Forms.CellEvents
    {
        private readonly global::Xamarin.Forms.SwitchCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.SwitchCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SwitchCellEvents(global::Xamarin.Forms.SwitchCell data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.SwitchCell.OnChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.ToggledEventArgs> OnChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ToggledEventArgs>, global::Xamarin.Forms.ToggledEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ToggledEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.OnChanged += x, x => _data.OnChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.TableView"/> class as observables.
    /// </summary>
    public class TableViewEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.TableView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.TableView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TableViewEvents(global::Xamarin.Forms.TableView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.TableView.ModelChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModelChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ModelChanged += x, x => _data.ModelChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.TapGestureRecognizer"/> class as observables.
    /// </summary>
    public class TapGestureRecognizerEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.TapGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.TapGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TapGestureRecognizerEvents(global::Xamarin.Forms.TapGestureRecognizer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.TapGestureRecognizer.Tapped"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tapped => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Tapped += x, x => _data.Tapped -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.ToolbarItem"/> class as observables.
    /// </summary>
    public class ToolbarItemEvents : global::Xamarin.Forms.MenuItemEvents
    {
        private readonly global::Xamarin.Forms.ToolbarItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.ToolbarItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolbarItemEvents(global::Xamarin.Forms.ToolbarItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.ToolbarItem.Activated"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Activated is obsolete as of version 1.3.0. Please use Clicked instead.", false)]
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Activated += x, x => _data.Activated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.VisualElement"/> class as observables.
    /// </summary>
    public class VisualElementEvents : global::Xamarin.Forms.ElementEvents
    {
        private readonly global::Xamarin.Forms.VisualElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.VisualElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VisualElementEvents(global::Xamarin.Forms.VisualElement data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.BatchCommitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>> BatchCommitted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<global::Xamarin.Forms.VisualElement> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.BatchCommitted += x, x => _data.BatchCommitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.ChildrenReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ChildrenReordered => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ChildrenReordered += x, x => _data.ChildrenReordered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.FocusChangeRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.VisualElement.FocusRequestArgs>, global::Xamarin.Forms.VisualElement.FocusRequestArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.VisualElement.FocusRequestArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.Focused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.FocusEventArgs> Focused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.FocusEventArgs>, global::Xamarin.Forms.FocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.FocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Focused += x, x => _data.Focused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.MeasureInvalidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MeasureInvalidated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.MeasureInvalidated += x, x => _data.MeasureInvalidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.VisualElement.Unfocused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.FocusEventArgs> Unfocused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.FocusEventArgs>, global::Xamarin.Forms.FocusEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.FocusEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Unfocused += x, x => _data.Unfocused -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.WebView"/> class as observables.
    /// </summary>
    public class WebViewEvents : global::Xamarin.Forms.VisualElementEvents
    {
        private readonly global::Xamarin.Forms.WebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.WebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebViewEvents(global::Xamarin.Forms.WebView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.EvalRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EvalRequested> EvalRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EvalRequested>, global::Xamarin.Forms.Internals.EvalRequested>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EvalRequested e) => eventHandler(e);
            return Handler;
        }

        , x => _data.EvalRequested += x, x => _data.EvalRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.GoBackRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoBackRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoBackRequested += x, x => _data.GoBackRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.GoForwardRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GoForwardRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.GoForwardRequested += x, x => _data.GoForwardRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.Navigated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.WebNavigatedEventArgs> Navigated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.WebNavigatedEventArgs>, global::Xamarin.Forms.WebNavigatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.WebNavigatedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigated += x, x => _data.Navigated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.Navigating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.WebNavigatingEventArgs> Navigating => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.WebNavigatingEventArgs>, global::Xamarin.Forms.WebNavigatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.WebNavigatingEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Navigating += x, x => _data.Navigating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.WebView.ReloadRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReloadRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ReloadRequested += x, x => _data.ReloadRequested -= x);
    }
}

namespace Xamarin.Forms.Internals
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Internals"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo"/> class.
        /// </summary>
        public static DeviceInfoEvents Events(this global::Xamarin.Forms.Internals.DeviceInfo item) => new DeviceInfoEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary"/> class.
        /// </summary>
        public static IResourceDictionaryEvents Events(this global::Xamarin.Forms.Internals.IResourceDictionary item) => new IResourceDictionaryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.TableModel"/> class.
        /// </summary>
        public static TableModelEvents Events(this global::Xamarin.Forms.Internals.TableModel item) => new TableModelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker"/> class.
        /// </summary>
        public static ToolbarTrackerEvents Events(this global::Xamarin.Forms.Internals.ToolbarTracker item) => new ToolbarTrackerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo"/> class as observables.
    /// </summary>
    public class DeviceInfoEvents
    {
        private readonly global::Xamarin.Forms.Internals.DeviceInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DeviceInfoEvents(global::Xamarin.Forms.Internals.DeviceInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.DeviceInfo.PropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.ComponentModel.PropertyChangedEventHandler, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary"/> class as observables.
    /// </summary>
    public class IResourceDictionaryEvents
    {
        private readonly global::Xamarin.Forms.Internals.IResourceDictionary _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IResourceDictionaryEvents(global::Xamarin.Forms.Internals.IResourceDictionary data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.IResourceDictionary.ValuesChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.ResourcesChangedEventArgs> ValuesChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.ResourcesChangedEventArgs>, global::Xamarin.Forms.Internals.ResourcesChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.ResourcesChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ValuesChanged += x, x => _data.ValuesChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.TableModel"/> class as observables.
    /// </summary>
    public class TableModelEvents
    {
        private readonly global::Xamarin.Forms.Internals.TableModel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.TableModel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TableModelEvents(global::Xamarin.Forms.Internals.TableModel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.TableModel.ItemLongPressed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<object>> ItemLongPressed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<object>>, global::Xamarin.Forms.Internals.EventArg<object>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<object> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemLongPressed += x, x => _data.ItemLongPressed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.TableModel.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Internals.EventArg<object>> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Internals.EventArg<object>>, global::Xamarin.Forms.Internals.EventArg<object>>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Internals.EventArg<object> e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker"/> class as observables.
    /// </summary>
    public class ToolbarTrackerEvents
    {
        private readonly global::Xamarin.Forms.Internals.ToolbarTracker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolbarTrackerEvents(global::Xamarin.Forms.Internals.ToolbarTracker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Internals.ToolbarTracker.CollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x);
    }
}

namespace Xamarin.Forms.Platform.Android
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Platform.Android"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase"/> class.
        /// </summary>
        public static CheckBoxRendererBaseEvents Events(this global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase item) => new CheckBoxRendererBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity"/> class.
        /// </summary>
        public static FormsAppCompatActivityEvents Events(this global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity item) => new FormsAppCompatActivityEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FormsApplicationActivity"/> class.
        /// </summary>
        public static FormsApplicationActivityEvents Events(this global::Xamarin.Forms.Platform.Android.FormsApplicationActivity item) => new FormsApplicationActivityEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer"/> class.
        /// </summary>
        public static IBorderVisualElementRendererEvents Events(this global::Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer item) => new IBorderVisualElementRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IButtonLayoutRenderer"/> class.
        /// </summary>
        public static IButtonLayoutRendererEvents Events(this global::Xamarin.Forms.Platform.Android.IButtonLayoutRenderer item) => new IButtonLayoutRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IDeviceInfoProvider"/> class.
        /// </summary>
        public static IDeviceInfoProviderEvents Events(this global::Xamarin.Forms.Platform.Android.IDeviceInfoProvider item) => new IDeviceInfoProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ImageButtonRenderer"/> class.
        /// </summary>
        public static ImageButtonRendererEvents Events(this global::Xamarin.Forms.Platform.Android.ImageButtonRenderer item) => new ImageButtonRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IShellItemRenderer"/> class.
        /// </summary>
        public static IShellItemRendererEvents Events(this global::Xamarin.Forms.Platform.Android.IShellItemRenderer item) => new IShellItemRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IShellObservableFragment"/> class.
        /// </summary>
        public static IShellObservableFragmentEvents Events(this global::Xamarin.Forms.Platform.Android.IShellObservableFragment item) => new IShellObservableFragmentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IShellSearchView"/> class.
        /// </summary>
        public static IShellSearchViewEvents Events(this global::Xamarin.Forms.Platform.Android.IShellSearchView item) => new IShellSearchViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IVisualElementRenderer"/> class.
        /// </summary>
        public static IVisualElementRendererEvents Events(this global::Xamarin.Forms.Platform.Android.IVisualElementRenderer item) => new IVisualElementRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.MasterDetailRenderer"/> class.
        /// </summary>
        public static MasterDetailRendererEvents Events(this global::Xamarin.Forms.Platform.Android.MasterDetailRenderer item) => new MasterDetailRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.RefreshViewRenderer"/> class.
        /// </summary>
        public static RefreshViewRendererEvents Events(this global::Xamarin.Forms.Platform.Android.RefreshViewRenderer item) => new RefreshViewRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ScrollViewRenderer"/> class.
        /// </summary>
        public static ScrollViewRendererEvents Events(this global::Xamarin.Forms.Platform.Android.ScrollViewRenderer item) => new ScrollViewRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.SelectableViewHolder"/> class.
        /// </summary>
        public static SelectableViewHolderEvents Events(this global::Xamarin.Forms.Platform.Android.SelectableViewHolder item) => new SelectableViewHolderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellContentFragment"/> class.
        /// </summary>
        public static ShellContentFragmentEvents Events(this global::Xamarin.Forms.Platform.Android.ShellContentFragment item) => new ShellContentFragmentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellItemRendererBase"/> class.
        /// </summary>
        public static ShellItemRendererBaseEvents Events(this global::Xamarin.Forms.Platform.Android.ShellItemRendererBase item) => new ShellItemRendererBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSearchView"/> class.
        /// </summary>
        public static ShellSearchViewEvents Events(this global::Xamarin.Forms.Platform.Android.ShellSearchView item) => new ShellSearchViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSectionRenderer"/> class.
        /// </summary>
        public static ShellSectionRendererEvents Events(this global::Xamarin.Forms.Platform.Android.ShellSectionRenderer item) => new ShellSectionRendererEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase"/> class as observables.
    /// </summary>
    public class CheckBoxRendererBaseEvents : global::Android.Widget.CompoundButtonEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CheckBoxRendererBaseEvents(global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.CheckBoxRendererBase.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity"/> class as observables.
    /// </summary>
    public class FormsAppCompatActivityEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FormsAppCompatActivityEvents(global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity.ConfigurationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ConfigurationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ConfigurationChanged += x, x => _data.ConfigurationChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FormsApplicationActivity"/> class as observables.
    /// </summary>
    public class FormsApplicationActivityEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.FormsApplicationActivity _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.FormsApplicationActivity"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FormsApplicationActivityEvents(global::Xamarin.Forms.Platform.Android.FormsApplicationActivity data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FormsApplicationActivity.ConfigurationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ConfigurationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ConfigurationChanged += x, x => _data.ConfigurationChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer"/> class as observables.
    /// </summary>
    public class IBorderVisualElementRendererEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IBorderVisualElementRendererEvents(global::Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IButtonLayoutRenderer"/> class as observables.
    /// </summary>
    public class IButtonLayoutRendererEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.IButtonLayoutRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.IButtonLayoutRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IButtonLayoutRendererEvents(global::Xamarin.Forms.Platform.Android.IButtonLayoutRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IDeviceInfoProvider"/> class as observables.
    /// </summary>
    public class IDeviceInfoProviderEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.IDeviceInfoProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.IDeviceInfoProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IDeviceInfoProviderEvents(global::Xamarin.Forms.Platform.Android.IDeviceInfoProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IDeviceInfoProvider.ConfigurationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ConfigurationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ConfigurationChanged += x, x => _data.ConfigurationChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ImageButtonRenderer"/> class as observables.
    /// </summary>
    public class ImageButtonRendererEvents : global::Android.Views.ViewEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.ImageButtonRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.ImageButtonRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageButtonRendererEvents(global::Xamarin.Forms.Platform.Android.ImageButtonRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.ImageButtonRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.ImageButtonRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IShellItemRenderer"/> class as observables.
    /// </summary>
    public class IShellItemRendererEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.IShellItemRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.IShellItemRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellItemRendererEvents(global::Xamarin.Forms.Platform.Android.IShellItemRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IShellItemRenderer.Destroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Destroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Destroyed += x, x => _data.Destroyed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IShellObservableFragment"/> class as observables.
    /// </summary>
    public class IShellObservableFragmentEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.IShellObservableFragment _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.IShellObservableFragment"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellObservableFragmentEvents(global::Xamarin.Forms.Platform.Android.IShellObservableFragment data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IShellObservableFragment.AnimationFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AnimationFinished += x, x => _data.AnimationFinished -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IShellSearchView"/> class as observables.
    /// </summary>
    public class IShellSearchViewEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.IShellSearchView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.IShellSearchView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellSearchViewEvents(global::Xamarin.Forms.Platform.Android.IShellSearchView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IShellSearchView.SearchConfirmed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchConfirmed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SearchConfirmed += x, x => _data.SearchConfirmed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.IVisualElementRenderer"/> class as observables.
    /// </summary>
    public class IVisualElementRendererEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.IVisualElementRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.IVisualElementRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IVisualElementRendererEvents(global::Xamarin.Forms.Platform.Android.IVisualElementRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IVisualElementRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.IVisualElementRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.MasterDetailRenderer"/> class as observables.
    /// </summary>
    public class MasterDetailRendererEvents : global::Android.Support.V4.Widget.DrawerLayoutEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.MasterDetailRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.MasterDetailRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MasterDetailRendererEvents(global::Xamarin.Forms.Platform.Android.MasterDetailRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.MasterDetailRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.RefreshViewRenderer"/> class as observables.
    /// </summary>
    public class RefreshViewRendererEvents : global::Android.Support.V4.Widget.SwipeRefreshLayoutEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.RefreshViewRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.RefreshViewRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RefreshViewRendererEvents(global::Xamarin.Forms.Platform.Android.RefreshViewRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.RefreshViewRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.RefreshViewRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ScrollViewRenderer"/> class as observables.
    /// </summary>
    public class ScrollViewRendererEvents : global::Android.Support.V4.Widget.NestedScrollViewEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.ScrollViewRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.ScrollViewRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollViewRendererEvents(global::Xamarin.Forms.Platform.Android.ScrollViewRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.ScrollViewRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.SelectableViewHolder"/> class as observables.
    /// </summary>
    public class SelectableViewHolderEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.SelectableViewHolder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.SelectableViewHolder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SelectableViewHolderEvents(global::Xamarin.Forms.Platform.Android.SelectableViewHolder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.SelectableViewHolder.Clicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<int> Clicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<int>, int>(eventHandler =>
        {
            void Handler(object sender, int e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Clicked += x, x => _data.Clicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellContentFragment"/> class as observables.
    /// </summary>
    public class ShellContentFragmentEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.ShellContentFragment _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.ShellContentFragment"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellContentFragmentEvents(global::Xamarin.Forms.Platform.Android.ShellContentFragment data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.ShellContentFragment.AnimationFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AnimationFinished += x, x => _data.AnimationFinished -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellItemRendererBase"/> class as observables.
    /// </summary>
    public class ShellItemRendererBaseEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.ShellItemRendererBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.ShellItemRendererBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellItemRendererBaseEvents(global::Xamarin.Forms.Platform.Android.ShellItemRendererBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.ShellItemRendererBase.Destroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Destroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.Destroyed += x, x => _data.Destroyed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSearchView"/> class as observables.
    /// </summary>
    public class ShellSearchViewEvents : global::Android.Views.ViewGroupEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.ShellSearchView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSearchView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellSearchViewEvents(global::Xamarin.Forms.Platform.Android.ShellSearchView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSearchView.SearchConfirmed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchConfirmed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.SearchConfirmed += x, x => _data.SearchConfirmed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSectionRenderer"/> class as observables.
    /// </summary>
    public class ShellSectionRendererEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.ShellSectionRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSectionRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellSectionRendererEvents(global::Xamarin.Forms.Platform.Android.ShellSectionRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.ShellSectionRenderer.AnimationFinished"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationFinished => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.AnimationFinished += x, x => _data.AnimationFinished -= x);
    }
}

namespace Xamarin.Forms.Platform.Android.FastRenderers
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer"/> class.
        /// </summary>
        public static ButtonRendererEvents Events(this global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer item) => new ButtonRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer"/> class.
        /// </summary>
        public static FrameRendererEvents Events(this global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer item) => new FrameRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer"/> class.
        /// </summary>
        public static ImageRendererEvents Events(this global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer item) => new ImageRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer"/> class.
        /// </summary>
        public static LabelRendererEvents Events(this global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer item) => new LabelRendererEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer"/> class as observables.
    /// </summary>
    public class ButtonRendererEvents : global::Android.Widget.TextViewEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonRendererEvents(global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer"/> class as observables.
    /// </summary>
    public class FrameRendererEvents : global::Android.Views.ViewGroupEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FrameRendererEvents(global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer"/> class as observables.
    /// </summary>
    public class ImageRendererEvents : global::Android.Views.ViewEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageRendererEvents(global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer"/> class as observables.
    /// </summary>
    public class LabelRendererEvents : global::Android.Widget.TextViewEvents
    {
        private readonly global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LabelRendererEvents(global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementChanged += x, x => _data.ElementChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::System.ComponentModel.PropertyChangedEventArgs>, global::System.ComponentModel.PropertyChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x);
    }
}

namespace Xamarin.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Xamarin.Forms"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Xamarin.Forms.Forms.ViewInitialized"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Xamarin.Forms.ViewInitializedEventArgs> FormsViewInitialized => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Xamarin.Forms.ViewInitializedEventArgs>, global::Xamarin.Forms.ViewInitializedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Xamarin.Forms.ViewInitializedEventArgs e) => eventHandler(e);
            return Handler;
        }

        , x => global::Xamarin.Forms.Forms.ViewInitialized += x, x => global::Xamarin.Forms.Forms.ViewInitialized -= x);
    }
}