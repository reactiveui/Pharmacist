// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;

using global::Pharmacist.Common;

namespace Android.AccessibilityServices
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.AccessibilityServices"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController"/> class.
        /// </summary>
        public static SoftKeyboardControllerEvents Events(this global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController item) => new SoftKeyboardControllerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController"/> class as observables.
    /// </summary>
    public class SoftKeyboardControllerEvents
    {
        private readonly global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SoftKeyboardControllerEvents(global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChangedEventArgs> ShowModeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChangedEventArgs>, global::Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChangedEventArgs>(x => _data.ShowModeChanged += x, x => _data.ShowModeChanged -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Accounts
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Accounts"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Accounts.AccountManager"/> class.
        /// </summary>
        public static AccountManagerEvents Events(this global::Android.Accounts.AccountManager item) => new AccountManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Accounts.AccountManager"/> class as observables.
    /// </summary>
    public class AccountManagerEvents
    {
        private readonly global::Android.Accounts.AccountManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Accounts.AccountManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AccountManagerEvents(global::Android.Accounts.AccountManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Accounts.AccountManager.AccountsUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Accounts.AccountsUpdateEventArgs> AccountsUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Accounts.AccountsUpdateEventArgs>, global::Android.Accounts.AccountsUpdateEventArgs>(x => _data.AccountsUpdated += x, x => _data.AccountsUpdated -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Animation
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Animation"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Animation.Animator"/> class.
        /// </summary>
        public static AnimatorEvents Events(this global::Android.Animation.Animator item) => new AnimatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Animation.LayoutTransition"/> class.
        /// </summary>
        public static LayoutTransitionEvents Events(this global::Android.Animation.LayoutTransition item) => new LayoutTransitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Animation.TimeAnimator"/> class.
        /// </summary>
        public static TimeAnimatorEvents Events(this global::Android.Animation.TimeAnimator item) => new TimeAnimatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Animation.ValueAnimator"/> class.
        /// </summary>
        public static ValueAnimatorEvents Events(this global::Android.Animation.ValueAnimator item) => new ValueAnimatorEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Animation.Animator"/> class as observables.
    /// </summary>
    public class AnimatorEvents
    {
        private readonly global::Android.Animation.Animator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Animation.Animator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AnimatorEvents(global::Android.Animation.Animator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.Animator.AnimationCancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationCancel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationCancel += x, x => _data.AnimationCancel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.Animator.AnimationEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationEnd += x, x => _data.AnimationEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.Animator.AnimationPause"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Animation.Animator.AnimationPauseEventArgs> AnimationPause => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Animation.Animator.AnimationPauseEventArgs>, global::Android.Animation.Animator.AnimationPauseEventArgs>(x => _data.AnimationPause += x, x => _data.AnimationPause -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.Animator.AnimationRepeat"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationRepeat => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationRepeat += x, x => _data.AnimationRepeat -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.Animator.AnimationResume"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Animation.Animator.AnimationResumeEventArgs> AnimationResume => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Animation.Animator.AnimationResumeEventArgs>, global::Android.Animation.Animator.AnimationResumeEventArgs>(x => _data.AnimationResume += x, x => _data.AnimationResume -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.Animator.AnimationStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AnimationStart => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.AnimationStart += x, x => _data.AnimationStart -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Animation.LayoutTransition"/> class as observables.
    /// </summary>
    public class LayoutTransitionEvents
    {
        private readonly global::Android.Animation.LayoutTransition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Animation.LayoutTransition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LayoutTransitionEvents(global::Android.Animation.LayoutTransition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.LayoutTransition.EndTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Animation.LayoutTransition.EndTransitionEventArgs> EndTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Animation.LayoutTransition.EndTransitionEventArgs>, global::Android.Animation.LayoutTransition.EndTransitionEventArgs>(x => _data.EndTransition += x, x => _data.EndTransition -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.LayoutTransition.StartTransition"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Animation.LayoutTransition.StartTransitionEventArgs> StartTransition => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Animation.LayoutTransition.StartTransitionEventArgs>, global::Android.Animation.LayoutTransition.StartTransitionEventArgs>(x => _data.StartTransition += x, x => _data.StartTransition -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Animation.TimeAnimator"/> class as observables.
    /// </summary>
    public class TimeAnimatorEvents
    {
        private readonly global::Android.Animation.TimeAnimator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Animation.TimeAnimator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TimeAnimatorEvents(global::Android.Animation.TimeAnimator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.TimeAnimator.Time"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Animation.TimeAnimator.TimeEventArgs> Time => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Animation.TimeAnimator.TimeEventArgs>, global::Android.Animation.TimeAnimator.TimeEventArgs>(x => _data.Time += x, x => _data.Time -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Animation.ValueAnimator"/> class as observables.
    /// </summary>
    public class ValueAnimatorEvents
    {
        private readonly global::Android.Animation.ValueAnimator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Animation.ValueAnimator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ValueAnimatorEvents(global::Android.Animation.ValueAnimator data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Animation.ValueAnimator.Update"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Animation.ValueAnimator.AnimatorUpdateEventArgs> Update => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Animation.ValueAnimator.AnimatorUpdateEventArgs>, global::Android.Animation.ValueAnimator.AnimatorUpdateEventArgs>(x => _data.Update += x, x => _data.Update -= x).Select(x => x.EventArgs);
    }
}

namespace Android.App
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.App"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.ActionBar"/> class.
        /// </summary>
        public static ActionBarEvents Events(this global::Android.App.ActionBar item) => new ActionBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.AlertDialog.Builder"/> class.
        /// </summary>
        public static BuilderEvents Events(this global::Android.App.AlertDialog.Builder item) => new BuilderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.DatePickerDialog"/> class.
        /// </summary>
        public static DatePickerDialogEvents Events(this global::Android.App.DatePickerDialog item) => new DatePickerDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.Dialog"/> class.
        /// </summary>
        public static DialogEvents Events(this global::Android.App.Dialog item) => new DialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.FragmentBreadCrumbs"/> class.
        /// </summary>
        [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
        public static FragmentBreadCrumbsEvents Events(this global::Android.App.FragmentBreadCrumbs item) => new FragmentBreadCrumbsEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.FragmentManager"/> class.
        /// </summary>
        public static FragmentManagerEvents Events(this global::Android.App.FragmentManager item) => new FragmentManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.MediaRouteActionProvider"/> class.
        /// </summary>
        public static MediaRouteActionProviderEvents Events(this global::Android.App.MediaRouteActionProvider item) => new MediaRouteActionProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.MediaRouteButton"/> class.
        /// </summary>
        public static MediaRouteButtonEvents Events(this global::Android.App.MediaRouteButton item) => new MediaRouteButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.SearchManager"/> class.
        /// </summary>
        public static SearchManagerEvents Events(this global::Android.App.SearchManager item) => new SearchManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.ActionBar.Tab"/> class.
        /// </summary>
        [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
        public static TabEvents Events(this global::Android.App.ActionBar.Tab item) => new TabEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.App.UiAutomation"/> class.
        /// </summary>
        public static UiAutomationEvents Events(this global::Android.App.UiAutomation item) => new UiAutomationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.ActionBar"/> class as observables.
    /// </summary>
    public class ActionBarEvents
    {
        private readonly global::Android.App.ActionBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.ActionBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ActionBarEvents(global::Android.App.ActionBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.ActionBar.MenuVisibility"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.App.ActionBar.MenuVisibilityEventArgs> MenuVisibility => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.App.ActionBar.MenuVisibilityEventArgs>, global::Android.App.ActionBar.MenuVisibilityEventArgs>(x => _data.MenuVisibility += x, x => _data.MenuVisibility -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.AlertDialog.Builder"/> class as observables.
    /// </summary>
    public class BuilderEvents
    {
        private readonly global::Android.App.AlertDialog.Builder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.AlertDialog.Builder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BuilderEvents(global::Android.App.AlertDialog.Builder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.AlertDialog.Builder.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemSelectedEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemSelectedEventArgs>, global::Android.Widget.AdapterView.ItemSelectedEventArgs>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.AlertDialog.Builder.ItemSelectionCleared"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use NothingSelected event instead", false)]
        public global::System.IObservable<global::System.EventArgs> ItemSelectionCleared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ItemSelectionCleared += x, x => _data.ItemSelectionCleared -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.AlertDialog.Builder.NothingSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.NothingSelectedEventArgs> NothingSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.NothingSelectedEventArgs>, global::Android.Widget.AdapterView.NothingSelectedEventArgs>(x => _data.NothingSelected += x, x => _data.NothingSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.DatePickerDialog"/> class as observables.
    /// </summary>
    public class DatePickerDialogEvents
    {
        private readonly global::Android.App.DatePickerDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.DatePickerDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DatePickerDialogEvents(global::Android.App.DatePickerDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.DatePickerDialog.DateSet"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.App.DatePickerDialog.DateSetEventArgs> DateSet => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.App.DatePickerDialog.DateSetEventArgs>, global::Android.App.DatePickerDialog.DateSetEventArgs>(x => _data.DateSet += x, x => _data.DateSet -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.Dialog"/> class as observables.
    /// </summary>
    public class DialogEvents
    {
        private readonly global::Android.App.Dialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.Dialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DialogEvents(global::Android.App.Dialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.Dialog.CancelEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CancelEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CancelEvent += x, x => _data.CancelEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.Dialog.DismissEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DismissEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DismissEvent += x, x => _data.DismissEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.Dialog.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Content.DialogKeyEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Content.DialogKeyEventArgs>, global::Android.Content.DialogKeyEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.Dialog.ShowEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShowEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ShowEvent += x, x => _data.ShowEvent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.FragmentBreadCrumbs"/> class as observables.
    /// </summary>
    [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
    public class FragmentBreadCrumbsEvents
    {
        private readonly global::Android.App.FragmentBreadCrumbs _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.FragmentBreadCrumbs"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FragmentBreadCrumbsEvents(global::Android.App.FragmentBreadCrumbs data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.FragmentBreadCrumbs.BreadCrumbClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.App.FragmentBreadCrumbs.BreadCrumbClickEventArgs> BreadCrumbClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.App.FragmentBreadCrumbs.BreadCrumbClickEventArgs>, global::Android.App.FragmentBreadCrumbs.BreadCrumbClickEventArgs>(x => _data.BreadCrumbClick += x, x => _data.BreadCrumbClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.FragmentManager"/> class as observables.
    /// </summary>
    public class FragmentManagerEvents
    {
        private readonly global::Android.App.FragmentManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.FragmentManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FragmentManagerEvents(global::Android.App.FragmentManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.FragmentManager.BackStackChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackStackChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BackStackChanged += x, x => _data.BackStackChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.MediaRouteActionProvider"/> class as observables.
    /// </summary>
    public class MediaRouteActionProviderEvents
    {
        private readonly global::Android.App.MediaRouteActionProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.MediaRouteActionProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaRouteActionProviderEvents(global::Android.App.MediaRouteActionProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.MediaRouteActionProvider.ExtendedSettingsClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ExtendedSettingsClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ExtendedSettingsClick += x, x => _data.ExtendedSettingsClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.MediaRouteButton"/> class as observables.
    /// </summary>
    public class MediaRouteButtonEvents
    {
        private readonly global::Android.App.MediaRouteButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.MediaRouteButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaRouteButtonEvents(global::Android.App.MediaRouteButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.MediaRouteButton.ExtendedSettingsClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ExtendedSettingsClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ExtendedSettingsClick += x, x => _data.ExtendedSettingsClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.SearchManager"/> class as observables.
    /// </summary>
    public class SearchManagerEvents
    {
        private readonly global::Android.App.SearchManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.SearchManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SearchManagerEvents(global::Android.App.SearchManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.SearchManager.Cancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Cancel => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Cancel += x, x => _data.Cancel -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.SearchManager.Dismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Dismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Dismiss += x, x => _data.Dismiss -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.ActionBar.Tab"/> class as observables.
    /// </summary>
    [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
    public class TabEvents
    {
        private readonly global::Android.App.ActionBar.Tab _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.ActionBar.Tab"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TabEvents(global::Android.App.ActionBar.Tab data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.ActionBar.Tab.TabReselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.App.ActionBar.TabEventArgs> TabReselected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.App.ActionBar.TabEventArgs>, global::Android.App.ActionBar.TabEventArgs>(x => _data.TabReselected += x, x => _data.TabReselected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.ActionBar.Tab.TabSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.App.ActionBar.TabEventArgs> TabSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.App.ActionBar.TabEventArgs>, global::Android.App.ActionBar.TabEventArgs>(x => _data.TabSelected += x, x => _data.TabSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.ActionBar.Tab.TabUnselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.App.ActionBar.TabEventArgs> TabUnselected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.App.ActionBar.TabEventArgs>, global::Android.App.ActionBar.TabEventArgs>(x => _data.TabUnselected += x, x => _data.TabUnselected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.App.UiAutomation"/> class as observables.
    /// </summary>
    public class UiAutomationEvents
    {
        private readonly global::Android.App.UiAutomation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.App.UiAutomation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public UiAutomationEvents(global::Android.App.UiAutomation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.App.UiAutomation.AccessibilityEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.App.UiAutomation.AccessibilityEventEventArgs> AccessibilityEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.App.UiAutomation.AccessibilityEventEventArgs>, global::Android.App.UiAutomation.AccessibilityEventEventArgs>(x => _data.AccessibilityEvent += x, x => _data.AccessibilityEvent -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Content
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Content"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Content.ClipboardManager"/> class.
        /// </summary>
        public static ClipboardManagerEvents Events(this global::Android.Content.ClipboardManager item) => new ClipboardManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Content.ClipboardManager"/> class as observables.
    /// </summary>
    public class ClipboardManagerEvents
    {
        private readonly global::Android.Content.ClipboardManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Content.ClipboardManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ClipboardManagerEvents(global::Android.Content.ClipboardManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Content.ClipboardManager.PrimaryClipChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PrimaryClipChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PrimaryClipChanged += x, x => _data.PrimaryClipChanged -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Drm
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Drm"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Drm.DrmManagerClient"/> class.
        /// </summary>
        public static DrmManagerClientEvents Events(this global::Android.Drm.DrmManagerClient item) => new DrmManagerClientEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Drm.DrmManagerClient"/> class as observables.
    /// </summary>
    public class DrmManagerClientEvents
    {
        private readonly global::Android.Drm.DrmManagerClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Drm.DrmManagerClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DrmManagerClientEvents(global::Android.Drm.DrmManagerClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Drm.DrmManagerClient.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Drm.DrmManagerClient.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Drm.DrmManagerClient.ErrorEventArgs>, global::Android.Drm.DrmManagerClient.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Drm.DrmManagerClient.Event"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Drm.DrmManagerClient.EventEventArgs> Event => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Drm.DrmManagerClient.EventEventArgs>, global::Android.Drm.DrmManagerClient.EventEventArgs>(x => _data.Event += x, x => _data.Event -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Drm.DrmManagerClient.Info"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Drm.DrmManagerClient.InfoEventArgs> Info => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Drm.DrmManagerClient.InfoEventArgs>, global::Android.Drm.DrmManagerClient.InfoEventArgs>(x => _data.Info += x, x => _data.Info -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Gestures
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Gestures"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Gestures.GestureOverlayView"/> class.
        /// </summary>
        public static GestureOverlayViewEvents Events(this global::Android.Gestures.GestureOverlayView item) => new GestureOverlayViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Gestures.GestureOverlayView"/> class as observables.
    /// </summary>
    public class GestureOverlayViewEvents
    {
        private readonly global::Android.Gestures.GestureOverlayView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Gestures.GestureOverlayView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GestureOverlayViewEvents(global::Android.Gestures.GestureOverlayView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Gestures.GestureOverlayView.GestureCancelled"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Gestures.GestureOverlayView.GestureCancelledEventArgs> GestureCancelled => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Gestures.GestureOverlayView.GestureCancelledEventArgs>, global::Android.Gestures.GestureOverlayView.GestureCancelledEventArgs>(x => _data.GestureCancelled += x, x => _data.GestureCancelled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Gestures.GestureOverlayView.GestureEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Gestures.GestureOverlayView.GestureEndedEventArgs> GestureEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Gestures.GestureOverlayView.GestureEndedEventArgs>, global::Android.Gestures.GestureOverlayView.GestureEndedEventArgs>(x => _data.GestureEnded += x, x => _data.GestureEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Gestures.GestureOverlayView.GestureEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Gestures.GestureOverlayView.GestureEventArgs> GestureEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Gestures.GestureOverlayView.GestureEventArgs>, global::Android.Gestures.GestureOverlayView.GestureEventArgs>(x => _data.GestureEvent += x, x => _data.GestureEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Gestures.GestureOverlayView.GesturePerformed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Gestures.GestureOverlayView.GesturePerformedEventArgs> GesturePerformed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Gestures.GestureOverlayView.GesturePerformedEventArgs>, global::Android.Gestures.GestureOverlayView.GesturePerformedEventArgs>(x => _data.GesturePerformed += x, x => _data.GesturePerformed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Gestures.GestureOverlayView.GestureStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Gestures.GestureOverlayView.GestureStartedEventArgs> GestureStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Gestures.GestureOverlayView.GestureStartedEventArgs>, global::Android.Gestures.GestureOverlayView.GestureStartedEventArgs>(x => _data.GestureStarted += x, x => _data.GestureStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Gestures.GestureOverlayView.GesturingEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Gestures.GestureOverlayView.GesturingEndedEventArgs> GesturingEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Gestures.GestureOverlayView.GesturingEndedEventArgs>, global::Android.Gestures.GestureOverlayView.GesturingEndedEventArgs>(x => _data.GesturingEnded += x, x => _data.GesturingEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Gestures.GestureOverlayView.GesturingStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Gestures.GestureOverlayView.GesturingStartedEventArgs> GesturingStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Gestures.GestureOverlayView.GesturingStartedEventArgs>, global::Android.Gestures.GestureOverlayView.GesturingStartedEventArgs>(x => _data.GesturingStarted += x, x => _data.GesturingStarted -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Graphics
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Graphics"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Graphics.SurfaceTexture"/> class.
        /// </summary>
        public static SurfaceTextureEvents Events(this global::Android.Graphics.SurfaceTexture item) => new SurfaceTextureEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Graphics.SurfaceTexture"/> class as observables.
    /// </summary>
    public class SurfaceTextureEvents
    {
        private readonly global::Android.Graphics.SurfaceTexture _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Graphics.SurfaceTexture"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SurfaceTextureEvents(global::Android.Graphics.SurfaceTexture data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Graphics.SurfaceTexture.FrameAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Graphics.SurfaceTexture.FrameAvailableEventArgs> FrameAvailable => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Graphics.SurfaceTexture.FrameAvailableEventArgs>, global::Android.Graphics.SurfaceTexture.FrameAvailableEventArgs>(x => _data.FrameAvailable += x, x => _data.FrameAvailable -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Hardware
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Hardware"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Hardware.Camera"/> class.
        /// </summary>
        [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
        public static CameraEvents Events(this global::Android.Hardware.Camera item) => new CameraEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Hardware.Camera"/> class as observables.
    /// </summary>
    [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
    public class CameraEvents
    {
        private readonly global::Android.Hardware.Camera _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Hardware.Camera"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CameraEvents(global::Android.Hardware.Camera data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Hardware.Camera.FaceDetection"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Hardware.Camera.FaceDetectionEventArgs> FaceDetection => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Hardware.Camera.FaceDetectionEventArgs>, global::Android.Hardware.Camera.FaceDetectionEventArgs>(x => _data.FaceDetection += x, x => _data.FaceDetection -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Hardware.Camera.ZoomChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Hardware.Camera.ZoomChangeEventArgs> ZoomChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Hardware.Camera.ZoomChangeEventArgs>, global::Android.Hardware.Camera.ZoomChangeEventArgs>(x => _data.ZoomChange += x, x => _data.ZoomChange -= x).Select(x => x.EventArgs);
    }
}

namespace Android.InputMethodServices
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.InputMethodServices"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.InputMethodServices.KeyboardView"/> class.
        /// </summary>
        public static KeyboardViewEvents Events(this global::Android.InputMethodServices.KeyboardView item) => new KeyboardViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.InputMethodServices.KeyboardView"/> class as observables.
    /// </summary>
    public class KeyboardViewEvents
    {
        private readonly global::Android.InputMethodServices.KeyboardView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.InputMethodServices.KeyboardView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public KeyboardViewEvents(global::Android.InputMethodServices.KeyboardView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.Key"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.InputMethodServices.KeyboardView.KeyEventArgs> Key => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.InputMethodServices.KeyboardView.KeyEventArgs>, global::Android.InputMethodServices.KeyboardView.KeyEventArgs>(x => _data.Key += x, x => _data.Key -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.Press"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.InputMethodServices.KeyboardView.PressEventArgs> Press => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.InputMethodServices.KeyboardView.PressEventArgs>, global::Android.InputMethodServices.KeyboardView.PressEventArgs>(x => _data.Press += x, x => _data.Press -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.Release"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.InputMethodServices.KeyboardView.ReleaseEventArgs> Release => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.InputMethodServices.KeyboardView.ReleaseEventArgs>, global::Android.InputMethodServices.KeyboardView.ReleaseEventArgs>(x => _data.Release += x, x => _data.Release -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.SwipeDownEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SwipeDownEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SwipeDownEvent += x, x => _data.SwipeDownEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.SwipeLeftEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SwipeLeftEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SwipeLeftEvent += x, x => _data.SwipeLeftEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.SwipeRightEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SwipeRightEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SwipeRightEvent += x, x => _data.SwipeRightEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.SwipeUpEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SwipeUpEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SwipeUpEvent += x, x => _data.SwipeUpEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.InputMethodServices.KeyboardView.Text"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.InputMethodServices.KeyboardView.TextEventArgs> Text => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.InputMethodServices.KeyboardView.TextEventArgs>, global::Android.InputMethodServices.KeyboardView.TextEventArgs>(x => _data.Text += x, x => _data.Text -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Media
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Media"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.AudioRecord"/> class.
        /// </summary>
        public static AudioRecordEvents Events(this global::Android.Media.AudioRecord item) => new AudioRecordEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.AudioTrack"/> class.
        /// </summary>
        public static AudioTrackEvents Events(this global::Android.Media.AudioTrack item) => new AudioTrackEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.JetPlayer"/> class.
        /// </summary>
        public static JetPlayerEvents Events(this global::Android.Media.JetPlayer item) => new JetPlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.MediaDrm"/> class.
        /// </summary>
        public static MediaDrmEvents Events(this global::Android.Media.MediaDrm item) => new MediaDrmEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.MediaPlayer"/> class.
        /// </summary>
        public static MediaPlayerEvents Events(this global::Android.Media.MediaPlayer item) => new MediaPlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.MediaRecorder"/> class.
        /// </summary>
        public static MediaRecorderEvents Events(this global::Android.Media.MediaRecorder item) => new MediaRecorderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.RemoteControlClient"/> class.
        /// </summary>
        [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
        public static RemoteControlClientEvents Events(this global::Android.Media.RemoteControlClient item) => new RemoteControlClientEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.SoundPool"/> class.
        /// </summary>
        public static SoundPoolEvents Events(this global::Android.Media.SoundPool item) => new SoundPoolEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.AudioRecord"/> class as observables.
    /// </summary>
    public class AudioRecordEvents
    {
        private readonly global::Android.Media.AudioRecord _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.AudioRecord"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioRecordEvents(global::Android.Media.AudioRecord data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.AudioRecord.MarkerReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.AudioRecord.MarkerReachedEventArgs> MarkerReached => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.AudioRecord.MarkerReachedEventArgs>, global::Android.Media.AudioRecord.MarkerReachedEventArgs>(x => _data.MarkerReached += x, x => _data.MarkerReached -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.AudioRecord.PeriodicNotification"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.AudioRecord.PeriodicNotificationEventArgs> PeriodicNotification => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.AudioRecord.PeriodicNotificationEventArgs>, global::Android.Media.AudioRecord.PeriodicNotificationEventArgs>(x => _data.PeriodicNotification += x, x => _data.PeriodicNotification -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.AudioTrack"/> class as observables.
    /// </summary>
    public class AudioTrackEvents
    {
        private readonly global::Android.Media.AudioTrack _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.AudioTrack"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioTrackEvents(global::Android.Media.AudioTrack data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.AudioTrack.MarkerReached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.AudioTrack.MarkerReachedEventArgs> MarkerReached => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.AudioTrack.MarkerReachedEventArgs>, global::Android.Media.AudioTrack.MarkerReachedEventArgs>(x => _data.MarkerReached += x, x => _data.MarkerReached -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.AudioTrack.PeriodicNotification"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.AudioTrack.PeriodicNotificationEventArgs> PeriodicNotification => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.AudioTrack.PeriodicNotificationEventArgs>, global::Android.Media.AudioTrack.PeriodicNotificationEventArgs>(x => _data.PeriodicNotification += x, x => _data.PeriodicNotification -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.JetPlayer"/> class as observables.
    /// </summary>
    public class JetPlayerEvents
    {
        private readonly global::Android.Media.JetPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.JetPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public JetPlayerEvents(global::Android.Media.JetPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.JetPlayer.JetEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.JetPlayer.JetEventEventArgs> JetEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.JetPlayer.JetEventEventArgs>, global::Android.Media.JetPlayer.JetEventEventArgs>(x => _data.JetEvent += x, x => _data.JetEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.JetPlayer.JetNumQueuedSegmentUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.JetPlayer.JetNumQueuedSegmentUpdateEventArgs> JetNumQueuedSegmentUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.JetPlayer.JetNumQueuedSegmentUpdateEventArgs>, global::Android.Media.JetPlayer.JetNumQueuedSegmentUpdateEventArgs>(x => _data.JetNumQueuedSegmentUpdate += x, x => _data.JetNumQueuedSegmentUpdate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.JetPlayer.JetPauseUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.JetPlayer.JetPauseUpdateEventArgs> JetPauseUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.JetPlayer.JetPauseUpdateEventArgs>, global::Android.Media.JetPlayer.JetPauseUpdateEventArgs>(x => _data.JetPauseUpdate += x, x => _data.JetPauseUpdate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.JetPlayer.JetUserIdUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.JetPlayer.JetUserIdUpdateEventArgs> JetUserIdUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.JetPlayer.JetUserIdUpdateEventArgs>, global::Android.Media.JetPlayer.JetUserIdUpdateEventArgs>(x => _data.JetUserIdUpdate += x, x => _data.JetUserIdUpdate -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.MediaDrm"/> class as observables.
    /// </summary>
    public class MediaDrmEvents
    {
        private readonly global::Android.Media.MediaDrm _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.MediaDrm"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaDrmEvents(global::Android.Media.MediaDrm data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaDrm.MediaDrmEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaDrm.MediaDrmEventArgs> MediaDrmEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaDrm.MediaDrmEventArgs>, global::Android.Media.MediaDrm.MediaDrmEventArgs>(x => _data.MediaDrmEvent += x, x => _data.MediaDrmEvent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.MediaPlayer"/> class as observables.
    /// </summary>
    public class MediaPlayerEvents
    {
        private readonly global::Android.Media.MediaPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.MediaPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaPlayerEvents(global::Android.Media.MediaPlayer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.BufferingUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.BufferingUpdateEventArgs> BufferingUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.BufferingUpdateEventArgs>, global::Android.Media.MediaPlayer.BufferingUpdateEventArgs>(x => _data.BufferingUpdate += x, x => _data.BufferingUpdate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.Completion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Completion += x, x => _data.Completion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.DrmInfoEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.DrmInfoEventArgs> DrmInfoEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.DrmInfoEventArgs>, global::Android.Media.MediaPlayer.DrmInfoEventArgs>(x => _data.DrmInfoEvent += x, x => _data.DrmInfoEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.DrmPrepared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.DrmPreparedEventArgs> DrmPrepared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.DrmPreparedEventArgs>, global::Android.Media.MediaPlayer.DrmPreparedEventArgs>(x => _data.DrmPrepared += x, x => _data.DrmPrepared -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.ErrorEventArgs>, global::Android.Media.MediaPlayer.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.Info"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.InfoEventArgs> Info => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.InfoEventArgs>, global::Android.Media.MediaPlayer.InfoEventArgs>(x => _data.Info += x, x => _data.Info -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.Prepared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Prepared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Prepared += x, x => _data.Prepared -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.SeekComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SeekComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SeekComplete += x, x => _data.SeekComplete -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.TimedMetaDataAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs> TimedMetaDataAvailable => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs>, global::Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs>(x => _data.TimedMetaDataAvailable += x, x => _data.TimedMetaDataAvailable -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.TimedText"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.TimedTextEventArgs> TimedText => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.TimedTextEventArgs>, global::Android.Media.MediaPlayer.TimedTextEventArgs>(x => _data.TimedText += x, x => _data.TimedText -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaPlayer.VideoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.VideoSizeChangedEventArgs> VideoSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.VideoSizeChangedEventArgs>, global::Android.Media.MediaPlayer.VideoSizeChangedEventArgs>(x => _data.VideoSizeChanged += x, x => _data.VideoSizeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.MediaRecorder"/> class as observables.
    /// </summary>
    public class MediaRecorderEvents
    {
        private readonly global::Android.Media.MediaRecorder _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.MediaRecorder"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaRecorderEvents(global::Android.Media.MediaRecorder data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaRecorder.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaRecorder.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaRecorder.ErrorEventArgs>, global::Android.Media.MediaRecorder.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.MediaRecorder.Info"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaRecorder.InfoEventArgs> Info => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaRecorder.InfoEventArgs>, global::Android.Media.MediaRecorder.InfoEventArgs>(x => _data.Info += x, x => _data.Info -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.RemoteControlClient"/> class as observables.
    /// </summary>
    [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
    public class RemoteControlClientEvents
    {
        private readonly global::Android.Media.RemoteControlClient _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.RemoteControlClient"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RemoteControlClientEvents(global::Android.Media.RemoteControlClient data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.RemoteControlClient.MetadataUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.RemoteControlClient.MetadataUpdateEventArgs> MetadataUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.RemoteControlClient.MetadataUpdateEventArgs>, global::Android.Media.RemoteControlClient.MetadataUpdateEventArgs>(x => _data.MetadataUpdate += x, x => _data.MetadataUpdate -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.RemoteControlClient.PlaybackPositionUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.RemoteControlClient.PlaybackPositionUpdateEventArgs> PlaybackPositionUpdate => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.RemoteControlClient.PlaybackPositionUpdateEventArgs>, global::Android.Media.RemoteControlClient.PlaybackPositionUpdateEventArgs>(x => _data.PlaybackPositionUpdate += x, x => _data.PlaybackPositionUpdate -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.SoundPool"/> class as observables.
    /// </summary>
    public class SoundPoolEvents
    {
        private readonly global::Android.Media.SoundPool _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.SoundPool"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SoundPoolEvents(global::Android.Media.SoundPool data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.SoundPool.LoadComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.SoundPool.LoadCompleteEventArgs> LoadComplete => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.SoundPool.LoadCompleteEventArgs>, global::Android.Media.SoundPool.LoadCompleteEventArgs>(x => _data.LoadComplete += x, x => _data.LoadComplete -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Media.Audiofx
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Media.Audiofx"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.Audiofx.AudioEffect"/> class.
        /// </summary>
        public static AudioEffectEvents Events(this global::Android.Media.Audiofx.AudioEffect item) => new AudioEffectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.Audiofx.BassBoost"/> class.
        /// </summary>
        public static BassBoostEvents Events(this global::Android.Media.Audiofx.BassBoost item) => new BassBoostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.Audiofx.EnvironmentalReverb"/> class.
        /// </summary>
        public static EnvironmentalReverbEvents Events(this global::Android.Media.Audiofx.EnvironmentalReverb item) => new EnvironmentalReverbEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.Audiofx.Equalizer"/> class.
        /// </summary>
        public static EqualizerEvents Events(this global::Android.Media.Audiofx.Equalizer item) => new EqualizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.Audiofx.PresetReverb"/> class.
        /// </summary>
        public static PresetReverbEvents Events(this global::Android.Media.Audiofx.PresetReverb item) => new PresetReverbEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.Audiofx.Virtualizer"/> class.
        /// </summary>
        public static VirtualizerEvents Events(this global::Android.Media.Audiofx.Virtualizer item) => new VirtualizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.Audiofx.AudioEffect"/> class as observables.
    /// </summary>
    public class AudioEffectEvents
    {
        private readonly global::Android.Media.Audiofx.AudioEffect _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.Audiofx.AudioEffect"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AudioEffectEvents(global::Android.Media.Audiofx.AudioEffect data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Audiofx.AudioEffect.ControlStatus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Audiofx.AudioEffect.ControlStatusChangeEventArgs> ControlStatus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Audiofx.AudioEffect.ControlStatusChangeEventArgs>, global::Android.Media.Audiofx.AudioEffect.ControlStatusChangeEventArgs>(x => _data.ControlStatus += x, x => _data.ControlStatus -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Audiofx.AudioEffect.EnableStatus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Audiofx.AudioEffect.EnableStatusChangeEventArgs> EnableStatus => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Audiofx.AudioEffect.EnableStatusChangeEventArgs>, global::Android.Media.Audiofx.AudioEffect.EnableStatusChangeEventArgs>(x => _data.EnableStatus += x, x => _data.EnableStatus -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.Audiofx.BassBoost"/> class as observables.
    /// </summary>
    public class BassBoostEvents
    {
        private readonly global::Android.Media.Audiofx.BassBoost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.Audiofx.BassBoost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BassBoostEvents(global::Android.Media.Audiofx.BassBoost data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Audiofx.BassBoost.Parameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Audiofx.BassBoost.ParameterChangeEventArgs> Parameter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Audiofx.BassBoost.ParameterChangeEventArgs>, global::Android.Media.Audiofx.BassBoost.ParameterChangeEventArgs>(x => _data.Parameter += x, x => _data.Parameter -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.Audiofx.EnvironmentalReverb"/> class as observables.
    /// </summary>
    public class EnvironmentalReverbEvents
    {
        private readonly global::Android.Media.Audiofx.EnvironmentalReverb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.Audiofx.EnvironmentalReverb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EnvironmentalReverbEvents(global::Android.Media.Audiofx.EnvironmentalReverb data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Audiofx.EnvironmentalReverb.Parameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Audiofx.EnvironmentalReverb.ParameterChangeEventArgs> Parameter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Audiofx.EnvironmentalReverb.ParameterChangeEventArgs>, global::Android.Media.Audiofx.EnvironmentalReverb.ParameterChangeEventArgs>(x => _data.Parameter += x, x => _data.Parameter -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.Audiofx.Equalizer"/> class as observables.
    /// </summary>
    public class EqualizerEvents
    {
        private readonly global::Android.Media.Audiofx.Equalizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.Audiofx.Equalizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EqualizerEvents(global::Android.Media.Audiofx.Equalizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Audiofx.Equalizer.Parameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Audiofx.Equalizer.ParameterChangeEventArgs> Parameter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Audiofx.Equalizer.ParameterChangeEventArgs>, global::Android.Media.Audiofx.Equalizer.ParameterChangeEventArgs>(x => _data.Parameter += x, x => _data.Parameter -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.Audiofx.PresetReverb"/> class as observables.
    /// </summary>
    public class PresetReverbEvents
    {
        private readonly global::Android.Media.Audiofx.PresetReverb _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.Audiofx.PresetReverb"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PresetReverbEvents(global::Android.Media.Audiofx.PresetReverb data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Audiofx.PresetReverb.Parameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Audiofx.PresetReverb.ParameterChangeEventArgs> Parameter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Audiofx.PresetReverb.ParameterChangeEventArgs>, global::Android.Media.Audiofx.PresetReverb.ParameterChangeEventArgs>(x => _data.Parameter += x, x => _data.Parameter -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.Audiofx.Virtualizer"/> class as observables.
    /// </summary>
    public class VirtualizerEvents
    {
        private readonly global::Android.Media.Audiofx.Virtualizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.Audiofx.Virtualizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VirtualizerEvents(global::Android.Media.Audiofx.Virtualizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Audiofx.Virtualizer.Parameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Audiofx.Virtualizer.ParameterChangeEventArgs> Parameter => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Audiofx.Virtualizer.ParameterChangeEventArgs>, global::Android.Media.Audiofx.Virtualizer.ParameterChangeEventArgs>(x => _data.Parameter += x, x => _data.Parameter -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Media.Effect
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Media.Effect"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.Effect.Effect"/> class.
        /// </summary>
        public static EffectEvents Events(this global::Android.Media.Effect.Effect item) => new EffectEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.Effect.Effect"/> class as observables.
    /// </summary>
    public class EffectEvents
    {
        private readonly global::Android.Media.Effect.Effect _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.Effect.Effect"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EffectEvents(global::Android.Media.Effect.Effect data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.Effect.Effect.Update"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.Effect.EffectUpdateEventArgs> Update => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.Effect.EffectUpdateEventArgs>, global::Android.Media.Effect.EffectUpdateEventArgs>(x => _data.Update += x, x => _data.Update -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Media.TV
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Media.TV"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Media.TV.TvView"/> class.
        /// </summary>
        public static TvViewEvents Events(this global::Android.Media.TV.TvView item) => new TvViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Media.TV.TvView"/> class as observables.
    /// </summary>
    public class TvViewEvents
    {
        private readonly global::Android.Media.TV.TvView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Media.TV.TvView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TvViewEvents(global::Android.Media.TV.TvView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Media.TV.TvView.UnhandledInputEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.TV.TvView.UnhandledInputEventEventArgs> UnhandledInputEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.TV.TvView.UnhandledInputEventEventArgs>, global::Android.Media.TV.TvView.UnhandledInputEventEventArgs>(x => _data.UnhandledInputEvent += x, x => _data.UnhandledInputEvent -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Net
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Net"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Net.ConnectivityManager"/> class.
        /// </summary>
        public static ConnectivityManagerEvents Events(this global::Android.Net.ConnectivityManager item) => new ConnectivityManagerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Net.ConnectivityManager"/> class as observables.
    /// </summary>
    public class ConnectivityManagerEvents
    {
        private readonly global::Android.Net.ConnectivityManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Net.ConnectivityManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ConnectivityManagerEvents(global::Android.Net.ConnectivityManager data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Net.ConnectivityManager.DefaultNetworkActive"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DefaultNetworkActive => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DefaultNetworkActive += x, x => _data.DefaultNetworkActive -= x).Select(x => x.EventArgs);
    }
}

namespace Android.OS
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.OS"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.OS.CancellationSignal"/> class.
        /// </summary>
        public static CancellationSignalEvents Events(this global::Android.OS.CancellationSignal item) => new CancellationSignalEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.OS.CancellationSignal"/> class as observables.
    /// </summary>
    public class CancellationSignalEvents
    {
        private readonly global::Android.OS.CancellationSignal _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.OS.CancellationSignal"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CancellationSignalEvents(global::Android.OS.CancellationSignal data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.OS.CancellationSignal.CancelEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CancelEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.CancelEvent += x, x => _data.CancelEvent -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Preferences
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Preferences"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Preferences.Preference"/> class.
        /// </summary>
        public static PreferenceEvents Events(this global::Android.Preferences.Preference item) => new PreferenceEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Preferences.Preference"/> class as observables.
    /// </summary>
    public class PreferenceEvents
    {
        private readonly global::Android.Preferences.Preference _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Preferences.Preference"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PreferenceEvents(global::Android.Preferences.Preference data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Preferences.Preference.PreferenceChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Preferences.Preference.PreferenceChangeEventArgs> PreferenceChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Preferences.Preference.PreferenceChangeEventArgs>, global::Android.Preferences.Preference.PreferenceChangeEventArgs>(x => _data.PreferenceChange += x, x => _data.PreferenceChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Preferences.Preference.PreferenceClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Preferences.Preference.PreferenceClickEventArgs> PreferenceClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Preferences.Preference.PreferenceClickEventArgs>, global::Android.Preferences.Preference.PreferenceClickEventArgs>(x => _data.PreferenceClick += x, x => _data.PreferenceClick -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Renderscripts
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Renderscripts"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Renderscripts.Allocation"/> class.
        /// </summary>
        public static AllocationEvents Events(this global::Android.Renderscripts.Allocation item) => new AllocationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Renderscripts.Allocation"/> class as observables.
    /// </summary>
    public class AllocationEvents
    {
        private readonly global::Android.Renderscripts.Allocation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Renderscripts.Allocation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AllocationEvents(global::Android.Renderscripts.Allocation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Renderscripts.Allocation.BufferAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Renderscripts.Allocation.BufferAvailableEventArgs> BufferAvailable => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Renderscripts.Allocation.BufferAvailableEventArgs>, global::Android.Renderscripts.Allocation.BufferAvailableEventArgs>(x => _data.BufferAvailable += x, x => _data.BufferAvailable -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Sax
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Sax"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Sax.Element"/> class.
        /// </summary>
        public static ElementEvents Events(this global::Android.Sax.Element item) => new ElementEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Sax.Element"/> class as observables.
    /// </summary>
    public class ElementEvents
    {
        private readonly global::Android.Sax.Element _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Sax.Element"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ElementEvents(global::Android.Sax.Element data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Sax.Element.EndElement"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndElement => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndElement += x, x => _data.EndElement -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Sax.Element.EndTextElement"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Sax.EndTextElementEventArgs> EndTextElement => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Sax.EndTextElementEventArgs>, global::Android.Sax.EndTextElementEventArgs>(x => _data.EndTextElement += x, x => _data.EndTextElement -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Sax.Element.StartElement"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Sax.StartElementEventArgs> StartElement => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Sax.StartElementEventArgs>, global::Android.Sax.StartElementEventArgs>(x => _data.StartElement += x, x => _data.StartElement -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Speech
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Speech"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Speech.SpeechRecognizer"/> class.
        /// </summary>
        public static SpeechRecognizerEvents Events(this global::Android.Speech.SpeechRecognizer item) => new SpeechRecognizerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Speech.SpeechRecognizer"/> class as observables.
    /// </summary>
    public class SpeechRecognizerEvents
    {
        private readonly global::Android.Speech.SpeechRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Speech.SpeechRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SpeechRecognizerEvents(global::Android.Speech.SpeechRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.BeginningOfSpeech"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BeginningOfSpeech => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.BeginningOfSpeech += x, x => _data.BeginningOfSpeech -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.BufferReceived"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Speech.BufferReceivedEventArgs> BufferReceived => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Speech.BufferReceivedEventArgs>, global::Android.Speech.BufferReceivedEventArgs>(x => _data.BufferReceived += x, x => _data.BufferReceived -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.EndOfSpeech"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndOfSpeech => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.EndOfSpeech += x, x => _data.EndOfSpeech -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Speech.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Speech.ErrorEventArgs>, global::Android.Speech.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.Event"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Speech.EventEventArgs> Event => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Speech.EventEventArgs>, global::Android.Speech.EventEventArgs>(x => _data.Event += x, x => _data.Event -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.PartialResults"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Speech.PartialResultsEventArgs> PartialResults => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Speech.PartialResultsEventArgs>, global::Android.Speech.PartialResultsEventArgs>(x => _data.PartialResults += x, x => _data.PartialResults -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.ReadyForSpeech"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Speech.ReadyForSpeechEventArgs> ReadyForSpeech => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Speech.ReadyForSpeechEventArgs>, global::Android.Speech.ReadyForSpeechEventArgs>(x => _data.ReadyForSpeech += x, x => _data.ReadyForSpeech -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.Results"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Speech.ResultsEventArgs> Results => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Speech.ResultsEventArgs>, global::Android.Speech.ResultsEventArgs>(x => _data.Results += x, x => _data.Results -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Speech.SpeechRecognizer.RmsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Speech.RmsChangedEventArgs> RmsChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Speech.RmsChangedEventArgs>, global::Android.Speech.RmsChangedEventArgs>(x => _data.RmsChanged += x, x => _data.RmsChanged -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Views
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Views"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.ActionProvider"/> class.
        /// </summary>
        public static ActionProviderEvents Events(this global::Android.Views.ActionProvider item) => new ActionProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.GestureDetector"/> class.
        /// </summary>
        public static GestureDetectorEvents Events(this global::Android.Views.GestureDetector item) => new GestureDetectorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.TextureView"/> class.
        /// </summary>
        public static TextureViewEvents Events(this global::Android.Views.TextureView item) => new TextureViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.View"/> class.
        /// </summary>
        public static ViewEvents Events(this global::Android.Views.View item) => new ViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.ViewGroup"/> class.
        /// </summary>
        public static ViewGroupEvents Events(this global::Android.Views.ViewGroup item) => new ViewGroupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.ViewStub"/> class.
        /// </summary>
        public static ViewStubEvents Events(this global::Android.Views.ViewStub item) => new ViewStubEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.ViewTreeObserver"/> class.
        /// </summary>
        public static ViewTreeObserverEvents Events(this global::Android.Views.ViewTreeObserver item) => new ViewTreeObserverEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.Window"/> class.
        /// </summary>
        public static WindowEvents Events(this global::Android.Views.Window item) => new WindowEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.ActionProvider"/> class as observables.
    /// </summary>
    public class ActionProviderEvents
    {
        private readonly global::Android.Views.ActionProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.ActionProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ActionProviderEvents(global::Android.Views.ActionProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ActionProvider.Visibility"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ActionProvider.VisibilityEventArgs> Visibility => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ActionProvider.VisibilityEventArgs>, global::Android.Views.ActionProvider.VisibilityEventArgs>(x => _data.Visibility += x, x => _data.Visibility -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.GestureDetector"/> class as observables.
    /// </summary>
    public class GestureDetectorEvents
    {
        private readonly global::Android.Views.GestureDetector _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.GestureDetector"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public GestureDetectorEvents(global::Android.Views.GestureDetector data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.GestureDetector.ContextClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.GestureDetector.ContextClickEventArgs> ContextClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.GestureDetector.ContextClickEventArgs>, global::Android.Views.GestureDetector.ContextClickEventArgs>(x => _data.ContextClick += x, x => _data.ContextClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.GestureDetector.DoubleTap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.GestureDetector.DoubleTapEventArgs> DoubleTap => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.GestureDetector.DoubleTapEventArgs>, global::Android.Views.GestureDetector.DoubleTapEventArgs>(x => _data.DoubleTap += x, x => _data.DoubleTap -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.GestureDetector.DoubleTapEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.GestureDetector.DoubleTapEventEventArgs> DoubleTapEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.GestureDetector.DoubleTapEventEventArgs>, global::Android.Views.GestureDetector.DoubleTapEventEventArgs>(x => _data.DoubleTapEvent += x, x => _data.DoubleTapEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.GestureDetector.SingleTapConfirmed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.GestureDetector.SingleTapConfirmedEventArgs> SingleTapConfirmed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.GestureDetector.SingleTapConfirmedEventArgs>, global::Android.Views.GestureDetector.SingleTapConfirmedEventArgs>(x => _data.SingleTapConfirmed += x, x => _data.SingleTapConfirmed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.TextureView"/> class as observables.
    /// </summary>
    public class TextureViewEvents
    {
        private readonly global::Android.Views.TextureView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.TextureView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextureViewEvents(global::Android.Views.TextureView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.TextureView.SurfaceTextureAvailable"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.TextureView.SurfaceTextureAvailableEventArgs> SurfaceTextureAvailable => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.TextureView.SurfaceTextureAvailableEventArgs>, global::Android.Views.TextureView.SurfaceTextureAvailableEventArgs>(x => _data.SurfaceTextureAvailable += x, x => _data.SurfaceTextureAvailable -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.TextureView.SurfaceTextureDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.TextureView.SurfaceTextureDestroyedEventArgs> SurfaceTextureDestroyed => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.TextureView.SurfaceTextureDestroyedEventArgs>, global::Android.Views.TextureView.SurfaceTextureDestroyedEventArgs>(x => _data.SurfaceTextureDestroyed += x, x => _data.SurfaceTextureDestroyed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.TextureView.SurfaceTextureSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs> SurfaceTextureSizeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs>, global::Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs>(x => _data.SurfaceTextureSizeChanged += x, x => _data.SurfaceTextureSizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.TextureView.SurfaceTextureUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.TextureView.SurfaceTextureUpdatedEventArgs> SurfaceTextureUpdated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.TextureView.SurfaceTextureUpdatedEventArgs>, global::Android.Views.TextureView.SurfaceTextureUpdatedEventArgs>(x => _data.SurfaceTextureUpdated += x, x => _data.SurfaceTextureUpdated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.View"/> class as observables.
    /// </summary>
    public class ViewEvents
    {
        private readonly global::Android.Views.View _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.View"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewEvents(global::Android.Views.View data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.CapturedPointer"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.CapturedPointerEventArgs> CapturedPointer => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.CapturedPointerEventArgs>, global::Android.Views.View.CapturedPointerEventArgs>(x => _data.CapturedPointer += x, x => _data.CapturedPointer -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Click += x, x => _data.Click -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.ContextClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ContextClickEventArgs> ContextClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.ContextClickEventArgs>, global::Android.Views.View.ContextClickEventArgs>(x => _data.ContextClick += x, x => _data.ContextClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.ContextMenuCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.CreateContextMenuEventArgs> ContextMenuCreated => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.CreateContextMenuEventArgs>, global::Android.Views.View.CreateContextMenuEventArgs>(x => _data.ContextMenuCreated += x, x => _data.ContextMenuCreated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.Drag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.DragEventArgs> Drag => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.DragEventArgs>, global::Android.Views.View.DragEventArgs>(x => _data.Drag += x, x => _data.Drag -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.FocusChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.FocusChangeEventArgs> FocusChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.FocusChangeEventArgs>, global::Android.Views.View.FocusChangeEventArgs>(x => _data.FocusChange += x, x => _data.FocusChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.GenericMotion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.GenericMotionEventArgs> GenericMotion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.GenericMotionEventArgs>, global::Android.Views.View.GenericMotionEventArgs>(x => _data.GenericMotion += x, x => _data.GenericMotion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.Hover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.HoverEventArgs> Hover => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.HoverEventArgs>, global::Android.Views.View.HoverEventArgs>(x => _data.Hover += x, x => _data.Hover -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.KeyEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.KeyEventArgs>, global::Android.Views.View.KeyEventArgs>(x => _data.KeyPress += x, x => _data.KeyPress -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.LayoutChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.LayoutChangeEventArgs> LayoutChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.LayoutChangeEventArgs>, global::Android.Views.View.LayoutChangeEventArgs>(x => _data.LayoutChange += x, x => _data.LayoutChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.LongClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.LongClickEventArgs> LongClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.LongClickEventArgs>, global::Android.Views.View.LongClickEventArgs>(x => _data.LongClick += x, x => _data.LongClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.ScrollChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ScrollChangeEventArgs> ScrollChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.ScrollChangeEventArgs>, global::Android.Views.View.ScrollChangeEventArgs>(x => _data.ScrollChange += x, x => _data.ScrollChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.SystemUiVisibilityChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.SystemUiVisibilityChangeEventArgs> SystemUiVisibilityChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.SystemUiVisibilityChangeEventArgs>, global::Android.Views.View.SystemUiVisibilityChangeEventArgs>(x => _data.SystemUiVisibilityChange += x, x => _data.SystemUiVisibilityChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.Touch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.TouchEventArgs> Touch => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.TouchEventArgs>, global::Android.Views.View.TouchEventArgs>(x => _data.Touch += x, x => _data.Touch -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.ViewAttachedToWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ViewAttachedToWindowEventArgs> ViewAttachedToWindow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.ViewAttachedToWindowEventArgs>, global::Android.Views.View.ViewAttachedToWindowEventArgs>(x => _data.ViewAttachedToWindow += x, x => _data.ViewAttachedToWindow -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.ViewDetachedFromWindow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.ViewDetachedFromWindowEventArgs> ViewDetachedFromWindow => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.ViewDetachedFromWindowEventArgs>, global::Android.Views.View.ViewDetachedFromWindowEventArgs>(x => _data.ViewDetachedFromWindow += x, x => _data.ViewDetachedFromWindow -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.ViewGroup"/> class as observables.
    /// </summary>
    public class ViewGroupEvents
    {
        private readonly global::Android.Views.ViewGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.ViewGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewGroupEvents(global::Android.Views.ViewGroup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewGroup.AnimationEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationEndEventArgs> AnimationEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationEndEventArgs>, global::Android.Views.Animations.Animation.AnimationEndEventArgs>(x => _data.AnimationEnd += x, x => _data.AnimationEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewGroup.AnimationRepeat"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationRepeatEventArgs> AnimationRepeat => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationRepeatEventArgs>, global::Android.Views.Animations.Animation.AnimationRepeatEventArgs>(x => _data.AnimationRepeat += x, x => _data.AnimationRepeat -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewGroup.AnimationStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationStartEventArgs> AnimationStart => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationStartEventArgs>, global::Android.Views.Animations.Animation.AnimationStartEventArgs>(x => _data.AnimationStart += x, x => _data.AnimationStart -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewGroup.ChildViewAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewGroup.ChildViewAddedEventArgs> ChildViewAdded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ViewGroup.ChildViewAddedEventArgs>, global::Android.Views.ViewGroup.ChildViewAddedEventArgs>(x => _data.ChildViewAdded += x, x => _data.ChildViewAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewGroup.ChildViewRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewGroup.ChildViewRemovedEventArgs> ChildViewRemoved => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ViewGroup.ChildViewRemovedEventArgs>, global::Android.Views.ViewGroup.ChildViewRemovedEventArgs>(x => _data.ChildViewRemoved += x, x => _data.ChildViewRemoved -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.ViewStub"/> class as observables.
    /// </summary>
    public class ViewStubEvents
    {
        private readonly global::Android.Views.ViewStub _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.ViewStub"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewStubEvents(global::Android.Views.ViewStub data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewStub.InflateEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewStub.InflateEventArgs> InflateEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ViewStub.InflateEventArgs>, global::Android.Views.ViewStub.InflateEventArgs>(x => _data.InflateEvent += x, x => _data.InflateEvent -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.ViewTreeObserver"/> class as observables.
    /// </summary>
    public class ViewTreeObserverEvents
    {
        private readonly global::Android.Views.ViewTreeObserver _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.ViewTreeObserver"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ViewTreeObserverEvents(global::Android.Views.ViewTreeObserver data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.Draw"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Draw => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Draw += x, x => _data.Draw -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.GlobalFocusChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs> GlobalFocusChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs>, global::Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs>(x => _data.GlobalFocusChange += x, x => _data.GlobalFocusChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.GlobalLayout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GlobalLayout => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.GlobalLayout += x, x => _data.GlobalLayout -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.PreDraw"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewTreeObserver.PreDrawEventArgs> PreDraw => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ViewTreeObserver.PreDrawEventArgs>, global::Android.Views.ViewTreeObserver.PreDrawEventArgs>(x => _data.PreDraw += x, x => _data.PreDraw -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.ScrollChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScrollChanged += x, x => _data.ScrollChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.TouchModeChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewTreeObserver.TouchModeChangeEventArgs> TouchModeChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ViewTreeObserver.TouchModeChangeEventArgs>, global::Android.Views.ViewTreeObserver.TouchModeChangeEventArgs>(x => _data.TouchModeChange += x, x => _data.TouchModeChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.WindowAttached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WindowAttached => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WindowAttached += x, x => _data.WindowAttached -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.WindowDetached"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WindowDetached => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.WindowDetached += x, x => _data.WindowDetached -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.ViewTreeObserver.WindowFocusChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs> WindowFocusChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs>, global::Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs>(x => _data.WindowFocusChange += x, x => _data.WindowFocusChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.Window"/> class as observables.
    /// </summary>
    public class WindowEvents
    {
        private readonly global::Android.Views.Window _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.Window"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WindowEvents(global::Android.Views.Window data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.Window.RestrictedCaptionArea"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Window.RestrictedCaptionAreaChangedEventArgs> RestrictedCaptionArea => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.Window.RestrictedCaptionAreaChangedEventArgs>, global::Android.Views.Window.RestrictedCaptionAreaChangedEventArgs>(x => _data.RestrictedCaptionArea += x, x => _data.RestrictedCaptionArea -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Views.Animations
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Views.Animations"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Views.Animations.Animation"/> class.
        /// </summary>
        public static AnimationEvents Events(this global::Android.Views.Animations.Animation item) => new AnimationEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Views.Animations.Animation"/> class as observables.
    /// </summary>
    public class AnimationEvents
    {
        private readonly global::Android.Views.Animations.Animation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Views.Animations.Animation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AnimationEvents(global::Android.Views.Animations.Animation data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.Animations.Animation.AnimationEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationEndEventArgs> AnimationEnd => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationEndEventArgs>, global::Android.Views.Animations.Animation.AnimationEndEventArgs>(x => _data.AnimationEnd += x, x => _data.AnimationEnd -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.Animations.Animation.AnimationRepeat"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationRepeatEventArgs> AnimationRepeat => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationRepeatEventArgs>, global::Android.Views.Animations.Animation.AnimationRepeatEventArgs>(x => _data.AnimationRepeat += x, x => _data.AnimationRepeat -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.Animations.Animation.AnimationStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.Animations.Animation.AnimationStartEventArgs> AnimationStart => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.Animations.Animation.AnimationStartEventArgs>, global::Android.Views.Animations.Animation.AnimationStartEventArgs>(x => _data.AnimationStart += x, x => _data.AnimationStart -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Webkit
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Webkit"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Webkit.WebView"/> class.
        /// </summary>
        public static WebViewEvents Events(this global::Android.Webkit.WebView item) => new WebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Webkit.WebView"/> class as observables.
    /// </summary>
    public class WebViewEvents
    {
        private readonly global::Android.Webkit.WebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Webkit.WebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebViewEvents(global::Android.Webkit.WebView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Webkit.WebView.Download"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Webkit.DownloadEventArgs> Download => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Webkit.DownloadEventArgs>, global::Android.Webkit.DownloadEventArgs>(x => _data.Download += x, x => _data.Download -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Webkit.WebView.Find"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Webkit.WebView.FindEventArgs> Find => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Webkit.WebView.FindEventArgs>, global::Android.Webkit.WebView.FindEventArgs>(x => _data.Find += x, x => _data.Find -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Webkit.WebView.Picture"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Webkit.WebView.PictureEventArgs> Picture => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Webkit.WebView.PictureEventArgs>, global::Android.Webkit.WebView.PictureEventArgs>(x => _data.Picture += x, x => _data.Picture -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Widget
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Android.Widget"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.AbsListView"/> class.
        /// </summary>
        public static AbsListViewEvents Events(this global::Android.Widget.AbsListView item) => new AbsListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.ActionMenuView"/> class.
        /// </summary>
        public static ActionMenuViewEvents Events(this global::Android.Widget.ActionMenuView item) => new ActionMenuViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.AdapterView"/> class.
        /// </summary>
        public static AdapterViewEvents Events(this global::Android.Widget.AdapterView item) => new AdapterViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.AutoCompleteTextView"/> class.
        /// </summary>
        public static AutoCompleteTextViewEvents Events(this global::Android.Widget.AutoCompleteTextView item) => new AutoCompleteTextViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.CalendarView"/> class.
        /// </summary>
        public static CalendarViewEvents Events(this global::Android.Widget.CalendarView item) => new CalendarViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.Chronometer"/> class.
        /// </summary>
        public static ChronometerEvents Events(this global::Android.Widget.Chronometer item) => new ChronometerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.CompoundButton"/> class.
        /// </summary>
        public static CompoundButtonEvents Events(this global::Android.Widget.CompoundButton item) => new CompoundButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.DatePicker"/> class.
        /// </summary>
        public static DatePickerEvents Events(this global::Android.Widget.DatePicker item) => new DatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.ExpandableListView"/> class.
        /// </summary>
        public static ExpandableListViewEvents Events(this global::Android.Widget.ExpandableListView item) => new ExpandableListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.ListPopupWindow"/> class.
        /// </summary>
        public static ListPopupWindowEvents Events(this global::Android.Widget.ListPopupWindow item) => new ListPopupWindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.MediaController"/> class.
        /// </summary>
        public static MediaControllerEvents Events(this global::Android.Widget.MediaController item) => new MediaControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.NumberPicker"/> class.
        /// </summary>
        public static NumberPickerEvents Events(this global::Android.Widget.NumberPicker item) => new NumberPickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.PopupMenu"/> class.
        /// </summary>
        public static PopupMenuEvents Events(this global::Android.Widget.PopupMenu item) => new PopupMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.PopupWindow"/> class.
        /// </summary>
        public static PopupWindowEvents Events(this global::Android.Widget.PopupWindow item) => new PopupWindowEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.RadioGroup"/> class.
        /// </summary>
        public static RadioGroupEvents Events(this global::Android.Widget.RadioGroup item) => new RadioGroupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.RatingBar"/> class.
        /// </summary>
        public static RatingBarEvents Events(this global::Android.Widget.RatingBar item) => new RatingBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.SearchView"/> class.
        /// </summary>
        public static SearchViewEvents Events(this global::Android.Widget.SearchView item) => new SearchViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.SeekBar"/> class.
        /// </summary>
        public static SeekBarEvents Events(this global::Android.Widget.SeekBar item) => new SeekBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.ShareActionProvider"/> class.
        /// </summary>
        public static ShareActionProviderEvents Events(this global::Android.Widget.ShareActionProvider item) => new ShareActionProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.SlidingDrawer"/> class.
        /// </summary>
        [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
        public static SlidingDrawerEvents Events(this global::Android.Widget.SlidingDrawer item) => new SlidingDrawerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.TabHost"/> class.
        /// </summary>
        public static TabHostEvents Events(this global::Android.Widget.TabHost item) => new TabHostEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.TextView"/> class.
        /// </summary>
        public static TextViewEvents Events(this global::Android.Widget.TextView item) => new TextViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.TimePicker"/> class.
        /// </summary>
        public static TimePickerEvents Events(this global::Android.Widget.TimePicker item) => new TimePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.Toolbar"/> class.
        /// </summary>
        public static ToolbarEvents Events(this global::Android.Widget.Toolbar item) => new ToolbarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.VideoView"/> class.
        /// </summary>
        public static VideoViewEvents Events(this global::Android.Widget.VideoView item) => new VideoViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.ZoomButtonsController"/> class.
        /// </summary>
        [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
        public static ZoomButtonsControllerEvents Events(this global::Android.Widget.ZoomButtonsController item) => new ZoomButtonsControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Android.Widget.ZoomControls"/> class.
        /// </summary>
        public static ZoomControlsEvents Events(this global::Android.Widget.ZoomControls item) => new ZoomControlsEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.AbsListView"/> class as observables.
    /// </summary>
    public class AbsListViewEvents
    {
        private readonly global::Android.Widget.AbsListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.AbsListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AbsListViewEvents(global::Android.Widget.AbsListView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AbsListView.Recycler"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AbsListView.RecyclerEventArgs> Recycler => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AbsListView.RecyclerEventArgs>, global::Android.Widget.AbsListView.RecyclerEventArgs>(x => _data.Recycler += x, x => _data.Recycler -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AbsListView.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AbsListView.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AbsListView.ScrollEventArgs>, global::Android.Widget.AbsListView.ScrollEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AbsListView.ScrollStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AbsListView.ScrollStateChangedEventArgs> ScrollStateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AbsListView.ScrollStateChangedEventArgs>, global::Android.Widget.AbsListView.ScrollStateChangedEventArgs>(x => _data.ScrollStateChanged += x, x => _data.ScrollStateChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.ActionMenuView"/> class as observables.
    /// </summary>
    public class ActionMenuViewEvents
    {
        private readonly global::Android.Widget.ActionMenuView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.ActionMenuView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ActionMenuViewEvents(global::Android.Widget.ActionMenuView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ActionMenuView.MenuItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ActionMenuView.MenuItemClickEventArgs> MenuItemClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ActionMenuView.MenuItemClickEventArgs>, global::Android.Widget.ActionMenuView.MenuItemClickEventArgs>(x => _data.MenuItemClick += x, x => _data.MenuItemClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.AdapterView"/> class as observables.
    /// </summary>
    public class AdapterViewEvents
    {
        private readonly global::Android.Widget.AdapterView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.AdapterView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AdapterViewEvents(global::Android.Widget.AdapterView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AdapterView.ItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemClickEventArgs> ItemClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemClickEventArgs>, global::Android.Widget.AdapterView.ItemClickEventArgs>(x => _data.ItemClick += x, x => _data.ItemClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AdapterView.ItemLongClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemLongClickEventArgs> ItemLongClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemLongClickEventArgs>, global::Android.Widget.AdapterView.ItemLongClickEventArgs>(x => _data.ItemLongClick += x, x => _data.ItemLongClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AdapterView.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemSelectedEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemSelectedEventArgs>, global::Android.Widget.AdapterView.ItemSelectedEventArgs>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AdapterView.ItemSelectionCleared"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use NothingSelected event instead", false)]
        public global::System.IObservable<global::System.EventArgs> ItemSelectionCleared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ItemSelectionCleared += x, x => _data.ItemSelectionCleared -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AdapterView.NothingSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.NothingSelectedEventArgs> NothingSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.NothingSelectedEventArgs>, global::Android.Widget.AdapterView.NothingSelectedEventArgs>(x => _data.NothingSelected += x, x => _data.NothingSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.AutoCompleteTextView"/> class as observables.
    /// </summary>
    public class AutoCompleteTextViewEvents
    {
        private readonly global::Android.Widget.AutoCompleteTextView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.AutoCompleteTextView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public AutoCompleteTextViewEvents(global::Android.Widget.AutoCompleteTextView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AutoCompleteTextView.Dismiss"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Dismiss => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Dismiss += x, x => _data.Dismiss -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AutoCompleteTextView.ItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemClickEventArgs> ItemClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemClickEventArgs>, global::Android.Widget.AdapterView.ItemClickEventArgs>(x => _data.ItemClick += x, x => _data.ItemClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AutoCompleteTextView.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemSelectedEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemSelectedEventArgs>, global::Android.Widget.AdapterView.ItemSelectedEventArgs>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AutoCompleteTextView.ItemSelectionCleared"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("Use NothingSelected event instead", false)]
        public global::System.IObservable<global::System.EventArgs> ItemSelectionCleared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ItemSelectionCleared += x, x => _data.ItemSelectionCleared -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.AutoCompleteTextView.NothingSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.NothingSelectedEventArgs> NothingSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.NothingSelectedEventArgs>, global::Android.Widget.AdapterView.NothingSelectedEventArgs>(x => _data.NothingSelected += x, x => _data.NothingSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.CalendarView"/> class as observables.
    /// </summary>
    public class CalendarViewEvents
    {
        private readonly global::Android.Widget.CalendarView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.CalendarView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CalendarViewEvents(global::Android.Widget.CalendarView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.CalendarView.DateChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.CalendarView.DateChangeEventArgs> DateChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.CalendarView.DateChangeEventArgs>, global::Android.Widget.CalendarView.DateChangeEventArgs>(x => _data.DateChange += x, x => _data.DateChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.Chronometer"/> class as observables.
    /// </summary>
    public class ChronometerEvents
    {
        private readonly global::Android.Widget.Chronometer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.Chronometer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ChronometerEvents(global::Android.Widget.Chronometer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.Chronometer.ChronometerTick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ChronometerTick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ChronometerTick += x, x => _data.ChronometerTick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.CompoundButton"/> class as observables.
    /// </summary>
    public class CompoundButtonEvents
    {
        private readonly global::Android.Widget.CompoundButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.CompoundButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CompoundButtonEvents(global::Android.Widget.CompoundButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.CompoundButton.CheckedChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.CompoundButton.CheckedChangeEventArgs> CheckedChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.CompoundButton.CheckedChangeEventArgs>, global::Android.Widget.CompoundButton.CheckedChangeEventArgs>(x => _data.CheckedChange += x, x => _data.CheckedChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.DatePicker"/> class as observables.
    /// </summary>
    public class DatePickerEvents
    {
        private readonly global::Android.Widget.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DatePickerEvents(global::Android.Widget.DatePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.DatePicker.DateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.DatePicker.DateChangedEventArgs> DateChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.DatePicker.DateChangedEventArgs>, global::Android.Widget.DatePicker.DateChangedEventArgs>(x => _data.DateChanged += x, x => _data.DateChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.ExpandableListView"/> class as observables.
    /// </summary>
    public class ExpandableListViewEvents
    {
        private readonly global::Android.Widget.ExpandableListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.ExpandableListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ExpandableListViewEvents(global::Android.Widget.ExpandableListView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ExpandableListView.ChildClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ExpandableListView.ChildClickEventArgs> ChildClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ExpandableListView.ChildClickEventArgs>, global::Android.Widget.ExpandableListView.ChildClickEventArgs>(x => _data.ChildClick += x, x => _data.ChildClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ExpandableListView.GroupClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ExpandableListView.GroupClickEventArgs> GroupClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ExpandableListView.GroupClickEventArgs>, global::Android.Widget.ExpandableListView.GroupClickEventArgs>(x => _data.GroupClick += x, x => _data.GroupClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ExpandableListView.GroupCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ExpandableListView.GroupCollapseEventArgs> GroupCollapse => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ExpandableListView.GroupCollapseEventArgs>, global::Android.Widget.ExpandableListView.GroupCollapseEventArgs>(x => _data.GroupCollapse += x, x => _data.GroupCollapse -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ExpandableListView.GroupExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ExpandableListView.GroupExpandEventArgs> GroupExpand => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ExpandableListView.GroupExpandEventArgs>, global::Android.Widget.ExpandableListView.GroupExpandEventArgs>(x => _data.GroupExpand += x, x => _data.GroupExpand -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.ListPopupWindow"/> class as observables.
    /// </summary>
    public class ListPopupWindowEvents
    {
        private readonly global::Android.Widget.ListPopupWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.ListPopupWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListPopupWindowEvents(global::Android.Widget.ListPopupWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ListPopupWindow.DismissEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DismissEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DismissEvent += x, x => _data.DismissEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ListPopupWindow.ItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemClickEventArgs> ItemClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemClickEventArgs>, global::Android.Widget.AdapterView.ItemClickEventArgs>(x => _data.ItemClick += x, x => _data.ItemClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ListPopupWindow.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.ItemSelectedEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.ItemSelectedEventArgs>, global::Android.Widget.AdapterView.ItemSelectedEventArgs>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ListPopupWindow.NothingSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.AdapterView.NothingSelectedEventArgs> NothingSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.AdapterView.NothingSelectedEventArgs>, global::Android.Widget.AdapterView.NothingSelectedEventArgs>(x => _data.NothingSelected += x, x => _data.NothingSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.MediaController"/> class as observables.
    /// </summary>
    public class MediaControllerEvents
    {
        private readonly global::Android.Widget.MediaController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.MediaController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MediaControllerEvents(global::Android.Widget.MediaController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.MediaController.NextClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> NextClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.NextClick += x, x => _data.NextClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.MediaController.PreviousClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PreviousClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.PreviousClick += x, x => _data.PreviousClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.NumberPicker"/> class as observables.
    /// </summary>
    public class NumberPickerEvents
    {
        private readonly global::Android.Widget.NumberPicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.NumberPicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NumberPickerEvents(global::Android.Widget.NumberPicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.NumberPicker.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.NumberPicker.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.NumberPicker.ScrollEventArgs>, global::Android.Widget.NumberPicker.ScrollEventArgs>(x => _data.Scroll += x, x => _data.Scroll -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.NumberPicker.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.NumberPicker.ValueChangeEventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.NumberPicker.ValueChangeEventArgs>, global::Android.Widget.NumberPicker.ValueChangeEventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.PopupMenu"/> class as observables.
    /// </summary>
    public class PopupMenuEvents
    {
        private readonly global::Android.Widget.PopupMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.PopupMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PopupMenuEvents(global::Android.Widget.PopupMenu data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.PopupMenu.DismissEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.PopupMenu.DismissEventArgs> DismissEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.PopupMenu.DismissEventArgs>, global::Android.Widget.PopupMenu.DismissEventArgs>(x => _data.DismissEvent += x, x => _data.DismissEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.PopupMenu.MenuItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.PopupMenu.MenuItemClickEventArgs> MenuItemClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.PopupMenu.MenuItemClickEventArgs>, global::Android.Widget.PopupMenu.MenuItemClickEventArgs>(x => _data.MenuItemClick += x, x => _data.MenuItemClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.PopupWindow"/> class as observables.
    /// </summary>
    public class PopupWindowEvents
    {
        private readonly global::Android.Widget.PopupWindow _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.PopupWindow"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PopupWindowEvents(global::Android.Widget.PopupWindow data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.PopupWindow.DismissEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DismissEvent => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DismissEvent += x, x => _data.DismissEvent -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.PopupWindow.TouchIntercepted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.TouchEventArgs> TouchIntercepted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.TouchEventArgs>, global::Android.Views.View.TouchEventArgs>(x => _data.TouchIntercepted += x, x => _data.TouchIntercepted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.RadioGroup"/> class as observables.
    /// </summary>
    public class RadioGroupEvents
    {
        private readonly global::Android.Widget.RadioGroup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.RadioGroup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RadioGroupEvents(global::Android.Widget.RadioGroup data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.RadioGroup.CheckedChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.RadioGroup.CheckedChangeEventArgs> CheckedChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.RadioGroup.CheckedChangeEventArgs>, global::Android.Widget.RadioGroup.CheckedChangeEventArgs>(x => _data.CheckedChange += x, x => _data.CheckedChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.RatingBar"/> class as observables.
    /// </summary>
    public class RatingBarEvents
    {
        private readonly global::Android.Widget.RatingBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.RatingBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RatingBarEvents(global::Android.Widget.RatingBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.RatingBar.RatingBarChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.RatingBar.RatingBarChangeEventArgs> RatingBarChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.RatingBar.RatingBarChangeEventArgs>, global::Android.Widget.RatingBar.RatingBarChangeEventArgs>(x => _data.RatingBarChange += x, x => _data.RatingBarChange -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.SearchView"/> class as observables.
    /// </summary>
    public class SearchViewEvents
    {
        private readonly global::Android.Widget.SearchView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.SearchView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SearchViewEvents(global::Android.Widget.SearchView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SearchView.Close"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SearchView.CloseEventArgs> Close => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SearchView.CloseEventArgs>, global::Android.Widget.SearchView.CloseEventArgs>(x => _data.Close += x, x => _data.Close -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SearchView.QueryTextChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SearchView.QueryTextChangeEventArgs> QueryTextChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SearchView.QueryTextChangeEventArgs>, global::Android.Widget.SearchView.QueryTextChangeEventArgs>(x => _data.QueryTextChange += x, x => _data.QueryTextChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SearchView.QueryTextFocusChange"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Views.View.FocusChangeEventArgs> QueryTextFocusChange => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Views.View.FocusChangeEventArgs>, global::Android.Views.View.FocusChangeEventArgs>(x => _data.QueryTextFocusChange += x, x => _data.QueryTextFocusChange -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SearchView.QueryTextSubmit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SearchView.QueryTextSubmitEventArgs> QueryTextSubmit => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SearchView.QueryTextSubmitEventArgs>, global::Android.Widget.SearchView.QueryTextSubmitEventArgs>(x => _data.QueryTextSubmit += x, x => _data.QueryTextSubmit -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SearchView.SearchClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SearchClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.SearchClick += x, x => _data.SearchClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SearchView.SuggestionClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SearchView.SuggestionClickEventArgs> SuggestionClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SearchView.SuggestionClickEventArgs>, global::Android.Widget.SearchView.SuggestionClickEventArgs>(x => _data.SuggestionClick += x, x => _data.SuggestionClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SearchView.SuggestionSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SearchView.SuggestionSelectEventArgs> SuggestionSelect => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SearchView.SuggestionSelectEventArgs>, global::Android.Widget.SearchView.SuggestionSelectEventArgs>(x => _data.SuggestionSelect += x, x => _data.SuggestionSelect -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.SeekBar"/> class as observables.
    /// </summary>
    public class SeekBarEvents
    {
        private readonly global::Android.Widget.SeekBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.SeekBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SeekBarEvents(global::Android.Widget.SeekBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SeekBar.ProgressChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SeekBar.ProgressChangedEventArgs> ProgressChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SeekBar.ProgressChangedEventArgs>, global::Android.Widget.SeekBar.ProgressChangedEventArgs>(x => _data.ProgressChanged += x, x => _data.ProgressChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SeekBar.StartTrackingTouch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SeekBar.StartTrackingTouchEventArgs> StartTrackingTouch => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SeekBar.StartTrackingTouchEventArgs>, global::Android.Widget.SeekBar.StartTrackingTouchEventArgs>(x => _data.StartTrackingTouch += x, x => _data.StartTrackingTouch -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SeekBar.StopTrackingTouch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.SeekBar.StopTrackingTouchEventArgs> StopTrackingTouch => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.SeekBar.StopTrackingTouchEventArgs>, global::Android.Widget.SeekBar.StopTrackingTouchEventArgs>(x => _data.StopTrackingTouch += x, x => _data.StopTrackingTouch -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.ShareActionProvider"/> class as observables.
    /// </summary>
    public class ShareActionProviderEvents
    {
        private readonly global::Android.Widget.ShareActionProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.ShareActionProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShareActionProviderEvents(global::Android.Widget.ShareActionProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ShareActionProvider.ShareTargetSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ShareActionProvider.ShareTargetSelectedEventArgs> ShareTargetSelected => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ShareActionProvider.ShareTargetSelectedEventArgs>, global::Android.Widget.ShareActionProvider.ShareTargetSelectedEventArgs>(x => _data.ShareTargetSelected += x, x => _data.ShareTargetSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.SlidingDrawer"/> class as observables.
    /// </summary>
    [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
    public class SlidingDrawerEvents
    {
        private readonly global::Android.Widget.SlidingDrawer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.SlidingDrawer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SlidingDrawerEvents(global::Android.Widget.SlidingDrawer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SlidingDrawer.DrawerClose"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DrawerClose => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DrawerClose += x, x => _data.DrawerClose -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SlidingDrawer.DrawerOpen"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DrawerOpen => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.DrawerOpen += x, x => _data.DrawerOpen -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SlidingDrawer.ScrollEnded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollEnded => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScrollEnded += x, x => _data.ScrollEnded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.SlidingDrawer.ScrollStarted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollStarted => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ScrollStarted += x, x => _data.ScrollStarted -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.TabHost"/> class as observables.
    /// </summary>
    public class TabHostEvents
    {
        private readonly global::Android.Widget.TabHost _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.TabHost"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TabHostEvents(global::Android.Widget.TabHost data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.TabHost.TabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.TabHost.TabChangeEventArgs> TabChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.TabHost.TabChangeEventArgs>, global::Android.Widget.TabHost.TabChangeEventArgs>(x => _data.TabChanged += x, x => _data.TabChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.TextView"/> class as observables.
    /// </summary>
    public class TextViewEvents
    {
        private readonly global::Android.Widget.TextView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.TextView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TextViewEvents(global::Android.Widget.TextView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.TextView.AfterTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Text.AfterTextChangedEventArgs> AfterTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Text.AfterTextChangedEventArgs>, global::Android.Text.AfterTextChangedEventArgs>(x => _data.AfterTextChanged += x, x => _data.AfterTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.TextView.BeforeTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Text.TextChangedEventArgs> BeforeTextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Text.TextChangedEventArgs>, global::Android.Text.TextChangedEventArgs>(x => _data.BeforeTextChanged += x, x => _data.BeforeTextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.TextView.EditorAction"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.TextView.EditorActionEventArgs> EditorAction => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.TextView.EditorActionEventArgs>, global::Android.Widget.TextView.EditorActionEventArgs>(x => _data.EditorAction += x, x => _data.EditorAction -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.TextView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Text.TextChangedEventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Text.TextChangedEventArgs>, global::Android.Text.TextChangedEventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.TimePicker"/> class as observables.
    /// </summary>
    public class TimePickerEvents
    {
        private readonly global::Android.Widget.TimePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.TimePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TimePickerEvents(global::Android.Widget.TimePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.TimePicker.TimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.TimePicker.TimeChangedEventArgs> TimeChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.TimePicker.TimeChangedEventArgs>, global::Android.Widget.TimePicker.TimeChangedEventArgs>(x => _data.TimeChanged += x, x => _data.TimeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.Toolbar"/> class as observables.
    /// </summary>
    public class ToolbarEvents
    {
        private readonly global::Android.Widget.Toolbar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.Toolbar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolbarEvents(global::Android.Widget.Toolbar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.Toolbar.MenuItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.Toolbar.MenuItemClickEventArgs> MenuItemClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.Toolbar.MenuItemClickEventArgs>, global::Android.Widget.Toolbar.MenuItemClickEventArgs>(x => _data.MenuItemClick += x, x => _data.MenuItemClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.Toolbar.NavigationOnClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> NavigationOnClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.NavigationOnClick += x, x => _data.NavigationOnClick -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.VideoView"/> class as observables.
    /// </summary>
    public class VideoViewEvents
    {
        private readonly global::Android.Widget.VideoView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.VideoView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VideoViewEvents(global::Android.Widget.VideoView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.VideoView.Completion"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Completion => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Completion += x, x => _data.Completion -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.VideoView.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.ErrorEventArgs>, global::Android.Media.MediaPlayer.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.VideoView.Info"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Media.MediaPlayer.InfoEventArgs> Info => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Media.MediaPlayer.InfoEventArgs>, global::Android.Media.MediaPlayer.InfoEventArgs>(x => _data.Info += x, x => _data.Info -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.VideoView.Prepared"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Prepared => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.Prepared += x, x => _data.Prepared -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.ZoomButtonsController"/> class as observables.
    /// </summary>
    [global::System.ObsoleteAttribute("This class is obsoleted in this android platform", false)]
    public class ZoomButtonsControllerEvents
    {
        private readonly global::Android.Widget.ZoomButtonsController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.ZoomButtonsController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ZoomButtonsControllerEvents(global::Android.Widget.ZoomButtonsController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ZoomButtonsController.VisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ZoomButtonsController.VisibilityChangedEventArgs> VisibilityChanged => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ZoomButtonsController.VisibilityChangedEventArgs>, global::Android.Widget.ZoomButtonsController.VisibilityChangedEventArgs>(x => _data.VisibilityChanged += x, x => _data.VisibilityChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ZoomButtonsController.Zoom"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Android.Widget.ZoomButtonsController.ZoomEventArgs> Zoom => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Widget.ZoomButtonsController.ZoomEventArgs>, global::Android.Widget.ZoomButtonsController.ZoomEventArgs>(x => _data.Zoom += x, x => _data.Zoom -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Android.Widget.ZoomControls"/> class as observables.
    /// </summary>
    public class ZoomControlsEvents
    {
        private readonly global::Android.Widget.ZoomControls _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Android.Widget.ZoomControls"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ZoomControlsEvents(global::Android.Widget.ZoomControls data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ZoomControls.ZoomInClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ZoomInClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ZoomInClick += x, x => _data.ZoomInClick -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Widget.ZoomControls.ZoomOutClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ZoomOutClick => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler, global::System.EventArgs>(x => _data.ZoomOutClick += x, x => _data.ZoomOutClick -= x).Select(x => x.EventArgs);
    }
}

namespace Javax.Xml.Transform
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Javax.Xml.Transform"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Javax.Xml.Transform.Transformer"/> class.
        /// </summary>
        public static TransformerEvents Events(this global::Javax.Xml.Transform.Transformer item) => new TransformerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Javax.Xml.Transform.TransformerFactory"/> class.
        /// </summary>
        public static TransformerFactoryEvents Events(this global::Javax.Xml.Transform.TransformerFactory item) => new TransformerFactoryEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Javax.Xml.Transform.Transformer"/> class as observables.
    /// </summary>
    public class TransformerEvents
    {
        private readonly global::Javax.Xml.Transform.Transformer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Javax.Xml.Transform.Transformer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TransformerEvents(global::Javax.Xml.Transform.Transformer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Javax.Xml.Transform.Transformer.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Javax.Xml.Transform.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Javax.Xml.Transform.ErrorEventArgs>, global::Javax.Xml.Transform.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Javax.Xml.Transform.Transformer.FatalError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Javax.Xml.Transform.FatalErrorEventArgs> FatalError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Javax.Xml.Transform.FatalErrorEventArgs>, global::Javax.Xml.Transform.FatalErrorEventArgs>(x => _data.FatalError += x, x => _data.FatalError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Javax.Xml.Transform.Transformer.Warning"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Javax.Xml.Transform.WarningEventArgs> Warning => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Javax.Xml.Transform.WarningEventArgs>, global::Javax.Xml.Transform.WarningEventArgs>(x => _data.Warning += x, x => _data.Warning -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Javax.Xml.Transform.TransformerFactory"/> class as observables.
    /// </summary>
    public class TransformerFactoryEvents
    {
        private readonly global::Javax.Xml.Transform.TransformerFactory _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Javax.Xml.Transform.TransformerFactory"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TransformerFactoryEvents(global::Javax.Xml.Transform.TransformerFactory data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Javax.Xml.Transform.TransformerFactory.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Javax.Xml.Transform.ErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Javax.Xml.Transform.ErrorEventArgs>, global::Javax.Xml.Transform.ErrorEventArgs>(x => _data.Error += x, x => _data.Error -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Javax.Xml.Transform.TransformerFactory.FatalError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Javax.Xml.Transform.FatalErrorEventArgs> FatalError => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Javax.Xml.Transform.FatalErrorEventArgs>, global::Javax.Xml.Transform.FatalErrorEventArgs>(x => _data.FatalError += x, x => _data.FatalError -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Javax.Xml.Transform.TransformerFactory.Warning"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Javax.Xml.Transform.WarningEventArgs> Warning => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Javax.Xml.Transform.WarningEventArgs>, global::Javax.Xml.Transform.WarningEventArgs>(x => _data.Warning += x, x => _data.Warning -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Runtime
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Android.Runtime"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Runtime.AndroidEnvironment.UnhandledExceptionRaiser"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Android.Runtime.RaiseThrowableEventArgs> AndroidEnvironmentUnhandledExceptionRaiser => global::System.Reactive.Linq.Observable.FromEventPattern<global::System.EventHandler<global::Android.Runtime.RaiseThrowableEventArgs>, global::Android.Runtime.RaiseThrowableEventArgs>(x => global::Android.Runtime.AndroidEnvironment.UnhandledExceptionRaiser += x, x => global::Android.Runtime.AndroidEnvironment.UnhandledExceptionRaiser -= x).Select(x => x.EventArgs);
    }
}

namespace Android.Views
{
    /// <summary>
    /// Wraps delegates events from <see cref = "global::Android.Views.View.AccessibilityDelegate"/> into Observables.
    /// </summary>
    public partial class AccessibilityDelegateRx : global::Android.Views.View.AccessibilityDelegate
    {
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info, string extraDataKey, global::Android.OS.Bundle arguments)> _addExtraDataToAccessibilityNodeInfo = new Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info, string extraDataKey, global::Android.OS.Bundle arguments)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)> _onInitializeAccessibilityEvent = new Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info)> _onInitializeAccessibilityNodeInfo = new Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)> _onPopulateAccessibilityEvent = new Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.EventTypes eventType)> _sendAccessibilityEvent = new Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.EventTypes eventType)>();
        private readonly Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)> _sendAccessibilityEventUnchecked = new Pharmacist.Common.SingleAwaitSubject<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)>();
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.AccessibilityDelegate.AddExtraDataToAccessibilityNodeInfo"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info, string extraDataKey, global::Android.OS.Bundle arguments)> AddExtraDataToAccessibilityNodeInfoObs => _addExtraDataToAccessibilityNodeInfo;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.AccessibilityDelegate.OnInitializeAccessibilityEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)> OnInitializeAccessibilityEventObs => _onInitializeAccessibilityEvent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.AccessibilityDelegate.OnInitializeAccessibilityNodeInfo"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info)> OnInitializeAccessibilityNodeInfoObs => _onInitializeAccessibilityNodeInfo;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.AccessibilityDelegate.OnPopulateAccessibilityEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)> OnPopulateAccessibilityEventObs => _onPopulateAccessibilityEvent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.AccessibilityDelegate.SendAccessibilityEvent"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Android.Views.View host, global::Android.Views.Accessibility.EventTypes eventType)> SendAccessibilityEventObs => _sendAccessibilityEvent;
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Android.Views.View.AccessibilityDelegate.SendAccessibilityEventUnchecked"/> method is invoked.
        /// </summary>
        public global::System.IObservable<(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e)> SendAccessibilityEventUncheckedObs => _sendAccessibilityEventUnchecked;
        /// <inheritdoc/>
        public override void AddExtraDataToAccessibilityNodeInfo(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info, string extraDataKey, global::Android.OS.Bundle arguments) => _addExtraDataToAccessibilityNodeInfo.OnNext((host, info, extraDataKey, arguments));
        /// <inheritdoc/>
        public override void OnInitializeAccessibilityEvent(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e) => _onInitializeAccessibilityEvent.OnNext((host, e));
        /// <inheritdoc/>
        public override void OnInitializeAccessibilityNodeInfo(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityNodeInfo info) => _onInitializeAccessibilityNodeInfo.OnNext((host, info));
        /// <inheritdoc/>
        public override void OnPopulateAccessibilityEvent(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e) => _onPopulateAccessibilityEvent.OnNext((host, e));
        /// <inheritdoc/>
        public override void SendAccessibilityEvent(global::Android.Views.View host, global::Android.Views.Accessibility.EventTypes eventType) => _sendAccessibilityEvent.OnNext((host, eventType));
        /// <inheritdoc/>
        public override void SendAccessibilityEventUnchecked(global::Android.Views.View host, global::Android.Views.Accessibility.AccessibilityEvent e) => _sendAccessibilityEventUnchecked.OnNext((host, e));
    }
}