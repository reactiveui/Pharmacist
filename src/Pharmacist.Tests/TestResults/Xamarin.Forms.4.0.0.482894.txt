namespace Xamarin.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Application"/> class.
        /// </summary>
        public static ApplicationEvents Events(this Xamarin.Forms.Application item) => new ApplicationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.BindableObject"/> class.
        /// </summary>
        public static BindableObjectEvents Events(this Xamarin.Forms.BindableObject item) => new BindableObjectEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Button"/> class.
        /// </summary>
        public static ButtonEvents Events(this Xamarin.Forms.Button item) => new ButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Cell"/> class.
        /// </summary>
        public static CellEvents Events(this Xamarin.Forms.Cell item) => new CellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ChildGestureRecognizer"/> class.
        /// </summary>
        public static ChildGestureRecognizerEvents Events(this Xamarin.Forms.ChildGestureRecognizer item) => new ChildGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ClickGestureRecognizer"/> class.
        /// </summary>
        public static ClickGestureRecognizerEvents Events(this Xamarin.Forms.ClickGestureRecognizer item) => new ClickGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ColumnDefinition"/> class.
        /// </summary>
        public static ColumnDefinitionEvents Events(this Xamarin.Forms.ColumnDefinition item) => new ColumnDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Command"/> class.
        /// </summary>
        public static CommandEvents Events(this Xamarin.Forms.Command item) => new CommandEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.DatePicker"/> class.
        /// </summary>
        public static DatePickerEvents Events(this Xamarin.Forms.DatePicker item) => new DatePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Editor"/> class.
        /// </summary>
        public static EditorEvents Events(this Xamarin.Forms.Editor item) => new EditorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Element"/> class.
        /// </summary>
        public static ElementEvents Events(this Xamarin.Forms.Element item) => new ElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Entry"/> class.
        /// </summary>
        public static EntryEvents Events(this Xamarin.Forms.Entry item) => new EntryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.EntryCell"/> class.
        /// </summary>
        public static EntryCellEvents Events(this Xamarin.Forms.EntryCell item) => new EntryCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ICellController"/> class.
        /// </summary>
        public static ICellControllerEvents Events(this Xamarin.Forms.ICellController item) => new ICellControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IDefinition"/> class.
        /// </summary>
        public static IDefinitionEvents Events(this Xamarin.Forms.IDefinition item) => new IDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IElementController"/> class.
        /// </summary>
        public static IElementControllerEvents Events(this Xamarin.Forms.IElementController item) => new IElementControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ILayout"/> class.
        /// </summary>
        public static ILayoutEvents Events(this Xamarin.Forms.ILayout item) => new ILayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IListProxy"/> class.
        /// </summary>
        public static IListProxyEvents Events(this Xamarin.Forms.IListProxy item) => new IListProxyEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IListViewController"/> class.
        /// </summary>
        public static IListViewControllerEvents Events(this Xamarin.Forms.IListViewController item) => new IListViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ImageButton"/> class.
        /// </summary>
        public static ImageButtonEvents Events(this Xamarin.Forms.ImageButton item) => new ImageButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IMasterDetailPageController"/> class.
        /// </summary>
        public static IMasterDetailPageControllerEvents Events(this Xamarin.Forms.IMasterDetailPageController item) => new IMasterDetailPageControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.INavigationPageController"/> class.
        /// </summary>
        public static INavigationPageControllerEvents Events(this Xamarin.Forms.INavigationPageController item) => new INavigationPageControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IOpenGlViewController"/> class.
        /// </summary>
        public static IOpenGlViewControllerEvents Events(this Xamarin.Forms.IOpenGlViewController item) => new IOpenGlViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IScrollViewController"/> class.
        /// </summary>
        public static IScrollViewControllerEvents Events(this Xamarin.Forms.IScrollViewController item) => new IScrollViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ISearchHandlerController"/> class.
        /// </summary>
        public static ISearchHandlerControllerEvents Events(this Xamarin.Forms.ISearchHandlerController item) => new ISearchHandlerControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IShellController"/> class.
        /// </summary>
        public static IShellControllerEvents Events(this Xamarin.Forms.IShellController item) => new IShellControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IShellSectionController"/> class.
        /// </summary>
        public static IShellSectionControllerEvents Events(this Xamarin.Forms.IShellSectionController item) => new IShellSectionControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ITableViewController"/> class.
        /// </summary>
        public static ITableViewControllerEvents Events(this Xamarin.Forms.ITableViewController item) => new ITableViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ItemsView"/> class.
        /// </summary>
        public static ItemsViewEvents Events(this Xamarin.Forms.ItemsView item) => new ItemsViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IVisualElementController"/> class.
        /// </summary>
        public static IVisualElementControllerEvents Events(this Xamarin.Forms.IVisualElementController item) => new IVisualElementControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.IWebViewController"/> class.
        /// </summary>
        public static IWebViewControllerEvents Events(this Xamarin.Forms.IWebViewController item) => new IWebViewControllerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Layout"/> class.
        /// </summary>
        public static LayoutEvents Events(this Xamarin.Forms.Layout item) => new LayoutEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ListView"/> class.
        /// </summary>
        public static ListViewEvents Events(this Xamarin.Forms.ListView item) => new ListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.MasterDetailPage"/> class.
        /// </summary>
        public static MasterDetailPageEvents Events(this Xamarin.Forms.MasterDetailPage item) => new MasterDetailPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.MenuItem"/> class.
        /// </summary>
        public static MenuItemEvents Events(this Xamarin.Forms.MenuItem item) => new MenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.NavigationPage"/> class.
        /// </summary>
        public static NavigationPageEvents Events(this Xamarin.Forms.NavigationPage item) => new NavigationPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.OpenGLView"/> class.
        /// </summary>
        public static OpenGLViewEvents Events(this Xamarin.Forms.OpenGLView item) => new OpenGLViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Page"/> class.
        /// </summary>
        public static PageEvents Events(this Xamarin.Forms.Page item) => new PageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.PanGestureRecognizer"/> class.
        /// </summary>
        public static PanGestureRecognizerEvents Events(this Xamarin.Forms.PanGestureRecognizer item) => new PanGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Picker"/> class.
        /// </summary>
        public static PickerEvents Events(this Xamarin.Forms.Picker item) => new PickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.PinchGestureRecognizer"/> class.
        /// </summary>
        public static PinchGestureRecognizerEvents Events(this Xamarin.Forms.PinchGestureRecognizer item) => new PinchGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.RowDefinition"/> class.
        /// </summary>
        public static RowDefinitionEvents Events(this Xamarin.Forms.RowDefinition item) => new RowDefinitionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ScrollView"/> class.
        /// </summary>
        public static ScrollViewEvents Events(this Xamarin.Forms.ScrollView item) => new ScrollViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.SearchBar"/> class.
        /// </summary>
        public static SearchBarEvents Events(this Xamarin.Forms.SearchBar item) => new SearchBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.SearchHandler"/> class.
        /// </summary>
        public static SearchHandlerEvents Events(this Xamarin.Forms.SearchHandler item) => new SearchHandlerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.SelectableItemsView"/> class.
        /// </summary>
        public static SelectableItemsViewEvents Events(this Xamarin.Forms.SelectableItemsView item) => new SelectableItemsViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Shell"/> class.
        /// </summary>
        public static ShellEvents Events(this Xamarin.Forms.Shell item) => new ShellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Slider"/> class.
        /// </summary>
        public static SliderEvents Events(this Xamarin.Forms.Slider item) => new SliderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Stepper"/> class.
        /// </summary>
        public static StepperEvents Events(this Xamarin.Forms.Stepper item) => new StepperEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.SwipeGestureRecognizer"/> class.
        /// </summary>
        public static SwipeGestureRecognizerEvents Events(this Xamarin.Forms.SwipeGestureRecognizer item) => new SwipeGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Switch"/> class.
        /// </summary>
        public static SwitchEvents Events(this Xamarin.Forms.Switch item) => new SwitchEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.SwitchCell"/> class.
        /// </summary>
        public static SwitchCellEvents Events(this Xamarin.Forms.SwitchCell item) => new SwitchCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.TableView"/> class.
        /// </summary>
        public static TableViewEvents Events(this Xamarin.Forms.TableView item) => new TableViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.TapGestureRecognizer"/> class.
        /// </summary>
        public static TapGestureRecognizerEvents Events(this Xamarin.Forms.TapGestureRecognizer item) => new TapGestureRecognizerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.ToolbarItem"/> class.
        /// </summary>
        public static ToolbarItemEvents Events(this Xamarin.Forms.ToolbarItem item) => new ToolbarItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.VisualElement"/> class.
        /// </summary>
        public static VisualElementEvents Events(this Xamarin.Forms.VisualElement item) => new VisualElementEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.WebView"/> class.
        /// </summary>
        public static WebViewEvents Events(this Xamarin.Forms.WebView item) => new WebViewEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Application"/> class as observables.
    /// </summary>
    public class ApplicationEvents
    {
        private readonly Xamarin.Forms.Application _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Application"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ApplicationEvents(Xamarin.Forms.Application data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Application.ModalPopped"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ModalPoppedEventArgs> ModalPopped => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ModalPoppedEventArgs>, Xamarin.Forms.ModalPoppedEventArgs>(x => _data.ModalPopped += x, x => _data.ModalPopped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Application.ModalPopping"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ModalPoppingEventArgs> ModalPopping => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ModalPoppingEventArgs>, Xamarin.Forms.ModalPoppingEventArgs>(x => _data.ModalPopping += x, x => _data.ModalPopping -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Application.ModalPushed"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ModalPushedEventArgs> ModalPushed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ModalPushedEventArgs>, Xamarin.Forms.ModalPushedEventArgs>(x => _data.ModalPushed += x, x => _data.ModalPushed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Application.ModalPushing"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ModalPushingEventArgs> ModalPushing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ModalPushingEventArgs>, Xamarin.Forms.ModalPushingEventArgs>(x => _data.ModalPushing += x, x => _data.ModalPushing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Application.PageAppearing"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Page> PageAppearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Page>, Xamarin.Forms.Page>(x => _data.PageAppearing += x, x => _data.PageAppearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Application.PageDisappearing"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Page> PageDisappearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Page>, Xamarin.Forms.Page>(x => _data.PageDisappearing += x, x => _data.PageDisappearing -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.BindableObject"/> class as observables.
    /// </summary>
    public class BindableObjectEvents
    {
        private readonly Xamarin.Forms.BindableObject _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.BindableObject"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public BindableObjectEvents(Xamarin.Forms.BindableObject data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.BindableObject.BindingContextChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> BindingContextChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.BindableObject.PropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.ComponentModel.PropertyChangedEventHandler, System.ComponentModel.PropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.BindableObject.PropertyChanging"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.PropertyChangingEventArgs> PropertyChanging => System.Reactive.Linq.Observable.FromEventPattern<Xamarin.Forms.PropertyChangingEventHandler, Xamarin.Forms.PropertyChangingEventArgs>(x => _data.PropertyChanging += x, x => _data.PropertyChanging -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Button"/> class as observables.
    /// </summary>
    public class ButtonEvents
    {
        private readonly Xamarin.Forms.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonEvents(Xamarin.Forms.Button data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Button.Clicked"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Clicked => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Button.Pressed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Pressed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Pressed += x, x => _data.Pressed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Button.Released"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Released => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Released += x, x => _data.Released -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Cell"/> class as observables.
    /// </summary>
    public class CellEvents
    {
        private readonly Xamarin.Forms.Cell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Cell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CellEvents(Xamarin.Forms.Cell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Cell.Appearing"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Appearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Appearing += x, x => _data.Appearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Cell.Disappearing"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Disappearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Disappearing += x, x => _data.Disappearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Cell.ForceUpdateSizeRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ForceUpdateSizeRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ForceUpdateSizeRequested += x, x => _data.ForceUpdateSizeRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Cell.Tapped"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Tapped => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Tapped += x, x => _data.Tapped -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ChildGestureRecognizer"/> class as observables.
    /// </summary>
    public class ChildGestureRecognizerEvents
    {
        private readonly Xamarin.Forms.ChildGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ChildGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ChildGestureRecognizerEvents(Xamarin.Forms.ChildGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ChildGestureRecognizer.PropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.ComponentModel.PropertyChangedEventHandler, System.ComponentModel.PropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ClickGestureRecognizer"/> class as observables.
    /// </summary>
    public class ClickGestureRecognizerEvents
    {
        private readonly Xamarin.Forms.ClickGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ClickGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ClickGestureRecognizerEvents(Xamarin.Forms.ClickGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ClickGestureRecognizer.Clicked"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Clicked => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ColumnDefinition"/> class as observables.
    /// </summary>
    public class ColumnDefinitionEvents
    {
        private readonly Xamarin.Forms.ColumnDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ColumnDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ColumnDefinitionEvents(Xamarin.Forms.ColumnDefinition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ColumnDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SizeChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SizeChanged += x, x => _data.SizeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Command"/> class as observables.
    /// </summary>
    public class CommandEvents
    {
        private readonly Xamarin.Forms.Command _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Command"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public CommandEvents(Xamarin.Forms.Command data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Command.CanExecuteChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> CanExecuteChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.CanExecuteChanged += x, x => _data.CanExecuteChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.DatePicker"/> class as observables.
    /// </summary>
    public class DatePickerEvents
    {
        private readonly Xamarin.Forms.DatePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.DatePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DatePickerEvents(Xamarin.Forms.DatePicker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.DatePicker.DateSelected"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.DateChangedEventArgs> DateSelected => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.DateChangedEventArgs>, Xamarin.Forms.DateChangedEventArgs>(x => _data.DateSelected += x, x => _data.DateSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Editor"/> class as observables.
    /// </summary>
    public class EditorEvents
    {
        private readonly Xamarin.Forms.Editor _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Editor"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EditorEvents(Xamarin.Forms.Editor data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Editor.Completed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Completed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Editor.TextChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.TextChangedEventArgs> TextChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.TextChangedEventArgs>, Xamarin.Forms.TextChangedEventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Element"/> class as observables.
    /// </summary>
    public class ElementEvents
    {
        private readonly Xamarin.Forms.Element _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Element"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ElementEvents(Xamarin.Forms.Element data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Element.ChildAdded"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ElementEventArgs> ChildAdded => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ElementEventArgs>, Xamarin.Forms.ElementEventArgs>(x => _data.ChildAdded += x, x => _data.ChildAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Element.ChildRemoved"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ElementEventArgs> ChildRemoved => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ElementEventArgs>, Xamarin.Forms.ElementEventArgs>(x => _data.ChildRemoved += x, x => _data.ChildRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Element.DescendantAdded"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ElementEventArgs> DescendantAdded => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ElementEventArgs>, Xamarin.Forms.ElementEventArgs>(x => _data.DescendantAdded += x, x => _data.DescendantAdded -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Element.DescendantRemoved"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ElementEventArgs> DescendantRemoved => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ElementEventArgs>, Xamarin.Forms.ElementEventArgs>(x => _data.DescendantRemoved += x, x => _data.DescendantRemoved -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Element.PlatformSet"/> event triggers.
        /// </summary>
        [System.ObsoleteAttribute("PlatformSet is obsolete as of 3.5.0. Do not use this event.", false)]
        public System.IObservable<System.EventArgs> PlatformSet => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.PlatformSet += x, x => _data.PlatformSet -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Entry"/> class as observables.
    /// </summary>
    public class EntryEvents
    {
        private readonly Xamarin.Forms.Entry _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Entry"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EntryEvents(Xamarin.Forms.Entry data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Entry.Completed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Completed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Entry.TextChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.TextChangedEventArgs> TextChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.TextChangedEventArgs>, Xamarin.Forms.TextChangedEventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.EntryCell"/> class as observables.
    /// </summary>
    public class EntryCellEvents
    {
        private readonly Xamarin.Forms.EntryCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.EntryCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public EntryCellEvents(Xamarin.Forms.EntryCell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.EntryCell.Completed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Completed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Completed += x, x => _data.Completed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ICellController"/> class as observables.
    /// </summary>
    public class ICellControllerEvents
    {
        private readonly Xamarin.Forms.ICellController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ICellController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ICellControllerEvents(Xamarin.Forms.ICellController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ICellController.ForceUpdateSizeRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ForceUpdateSizeRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ForceUpdateSizeRequested += x, x => _data.ForceUpdateSizeRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IDefinition"/> class as observables.
    /// </summary>
    public class IDefinitionEvents
    {
        private readonly Xamarin.Forms.IDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IDefinitionEvents(Xamarin.Forms.IDefinition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SizeChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SizeChanged += x, x => _data.SizeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IElementController"/> class as observables.
    /// </summary>
    public class IElementControllerEvents
    {
        private readonly Xamarin.Forms.IElementController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IElementController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IElementControllerEvents(Xamarin.Forms.IElementController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IElementController.PlatformSet"/> event triggers.
        /// </summary>
        [System.ObsoleteAttribute("PlatformSet is obsolete as of 3.5.0. Do not use this event.", false)]
        public System.IObservable<System.EventArgs> PlatformSet => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.PlatformSet += x, x => _data.PlatformSet -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ILayout"/> class as observables.
    /// </summary>
    public class ILayoutEvents
    {
        private readonly Xamarin.Forms.ILayout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ILayout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ILayoutEvents(Xamarin.Forms.ILayout data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ILayout.LayoutChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> LayoutChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IListProxy"/> class as observables.
    /// </summary>
    public class IListProxyEvents
    {
        private readonly Xamarin.Forms.IListProxy _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IListProxy"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IListProxyEvents(Xamarin.Forms.IListProxy data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IListProxy.CollectionChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged => System.Reactive.Linq.Observable.FromEventPattern<System.Collections.Specialized.NotifyCollectionChangedEventHandler, System.Collections.Specialized.NotifyCollectionChangedEventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IListViewController"/> class as observables.
    /// </summary>
    public class IListViewControllerEvents
    {
        private readonly Xamarin.Forms.IListViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IListViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IListViewControllerEvents(Xamarin.Forms.IListViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IListViewController.ScrollToRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ScrollToRequestedEventArgs>, Xamarin.Forms.ScrollToRequestedEventArgs>(x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ImageButton"/> class as observables.
    /// </summary>
    public class ImageButtonEvents
    {
        private readonly Xamarin.Forms.ImageButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ImageButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageButtonEvents(Xamarin.Forms.ImageButton data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ImageButton.Clicked"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Clicked => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ImageButton.Pressed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Pressed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Pressed += x, x => _data.Pressed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ImageButton.Released"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Released => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Released += x, x => _data.Released -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IMasterDetailPageController"/> class as observables.
    /// </summary>
    public class IMasterDetailPageControllerEvents
    {
        private readonly Xamarin.Forms.IMasterDetailPageController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IMasterDetailPageController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IMasterDetailPageControllerEvents(Xamarin.Forms.IMasterDetailPageController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IMasterDetailPageController.BackButtonPressed"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.BackButtonPressedEventArgs> BackButtonPressed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.BackButtonPressedEventArgs>, Xamarin.Forms.BackButtonPressedEventArgs>(x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.INavigationPageController"/> class as observables.
    /// </summary>
    public class INavigationPageControllerEvents
    {
        private readonly Xamarin.Forms.INavigationPageController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.INavigationPageController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public INavigationPageControllerEvents(Xamarin.Forms.INavigationPageController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.INavigationPageController.InsertPageBeforeRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> InsertPageBeforeRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.InsertPageBeforeRequested += x, x => _data.InsertPageBeforeRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.INavigationPageController.PopRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.PopRequested += x, x => _data.PopRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.INavigationPageController.PopToRootRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopToRootRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.PopToRootRequested += x, x => _data.PopToRootRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.INavigationPageController.PushRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> PushRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.PushRequested += x, x => _data.PushRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.INavigationPageController.RemovePageRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> RemovePageRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.RemovePageRequested += x, x => _data.RemovePageRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IOpenGlViewController"/> class as observables.
    /// </summary>
    public class IOpenGlViewControllerEvents
    {
        private readonly Xamarin.Forms.IOpenGlViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IOpenGlViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IOpenGlViewControllerEvents(Xamarin.Forms.IOpenGlViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IOpenGlViewController.DisplayRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> DisplayRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.DisplayRequested += x, x => _data.DisplayRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IScrollViewController"/> class as observables.
    /// </summary>
    public class IScrollViewControllerEvents
    {
        private readonly Xamarin.Forms.IScrollViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IScrollViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IScrollViewControllerEvents(Xamarin.Forms.IScrollViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IScrollViewController.ScrollToRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ScrollToRequestedEventArgs>, Xamarin.Forms.ScrollToRequestedEventArgs>(x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ISearchHandlerController"/> class as observables.
    /// </summary>
    public class ISearchHandlerControllerEvents
    {
        private readonly Xamarin.Forms.ISearchHandlerController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ISearchHandlerController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ISearchHandlerControllerEvents(Xamarin.Forms.ISearchHandlerController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ISearchHandlerController.ListProxyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ListProxyChangedEventArgs> ListProxyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ListProxyChangedEventArgs>, Xamarin.Forms.ListProxyChangedEventArgs>(x => _data.ListProxyChanged += x, x => _data.ListProxyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IShellController"/> class as observables.
    /// </summary>
    public class IShellControllerEvents
    {
        private readonly Xamarin.Forms.IShellController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IShellController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellControllerEvents(Xamarin.Forms.IShellController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IShellController.StructureChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> StructureChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.StructureChanged += x, x => _data.StructureChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IShellSectionController"/> class as observables.
    /// </summary>
    public class IShellSectionControllerEvents
    {
        private readonly Xamarin.Forms.IShellSectionController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IShellSectionController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellSectionControllerEvents(Xamarin.Forms.IShellSectionController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IShellSectionController.NavigationRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> NavigationRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.NavigationRequested += x, x => _data.NavigationRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ITableViewController"/> class as observables.
    /// </summary>
    public class ITableViewControllerEvents
    {
        private readonly Xamarin.Forms.ITableViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ITableViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ITableViewControllerEvents(Xamarin.Forms.ITableViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ITableViewController.ModelChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ModelChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ModelChanged += x, x => _data.ModelChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ItemsView"/> class as observables.
    /// </summary>
    public class ItemsViewEvents
    {
        private readonly Xamarin.Forms.ItemsView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ItemsView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ItemsViewEvents(Xamarin.Forms.ItemsView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ItemsView.ScrollToRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ScrollToRequestEventArgs> ScrollToRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ScrollToRequestEventArgs>, Xamarin.Forms.ScrollToRequestEventArgs>(x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IVisualElementController"/> class as observables.
    /// </summary>
    public class IVisualElementControllerEvents
    {
        private readonly Xamarin.Forms.IVisualElementController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IVisualElementController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IVisualElementControllerEvents(Xamarin.Forms.IVisualElementController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IVisualElementController.BatchCommitted"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> BatchCommitted => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>>, Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>>(x => _data.BatchCommitted += x, x => _data.BatchCommitted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IVisualElementController.FocusChangeRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs>, Xamarin.Forms.VisualElement.FocusRequestArgs>(x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.IWebViewController"/> class as observables.
    /// </summary>
    public class IWebViewControllerEvents
    {
        private readonly Xamarin.Forms.IWebViewController _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.IWebViewController"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IWebViewControllerEvents(Xamarin.Forms.IWebViewController data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IWebViewController.EvalRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.EvalRequested> EvalRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.EvalRequested>, Xamarin.Forms.Internals.EvalRequested>(x => _data.EvalRequested += x, x => _data.EvalRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IWebViewController.GoBackRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> GoBackRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.GoBackRequested += x, x => _data.GoBackRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IWebViewController.GoForwardRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> GoForwardRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.GoForwardRequested += x, x => _data.GoForwardRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.IWebViewController.ReloadRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ReloadRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ReloadRequested += x, x => _data.ReloadRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Layout"/> class as observables.
    /// </summary>
    public class LayoutEvents
    {
        private readonly Xamarin.Forms.Layout _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Layout"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LayoutEvents(Xamarin.Forms.Layout data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Layout.LayoutChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> LayoutChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ListView"/> class as observables.
    /// </summary>
    public class ListViewEvents
    {
        private readonly Xamarin.Forms.ListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ListViewEvents(Xamarin.Forms.ListView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ListView.ItemAppearing"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ItemVisibilityEventArgs> ItemAppearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>, Xamarin.Forms.ItemVisibilityEventArgs>(x => _data.ItemAppearing += x, x => _data.ItemAppearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ListView.ItemDisappearing"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ItemVisibilityEventArgs> ItemDisappearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>, Xamarin.Forms.ItemVisibilityEventArgs>(x => _data.ItemDisappearing += x, x => _data.ItemDisappearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ListView.ItemSelected"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.SelectedItemChangedEventArgs> ItemSelected => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>, Xamarin.Forms.SelectedItemChangedEventArgs>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ListView.ItemTapped"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ItemTappedEventArgs> ItemTapped => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>, Xamarin.Forms.ItemTappedEventArgs>(x => _data.ItemTapped += x, x => _data.ItemTapped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ListView.Refreshing"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Refreshing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Refreshing += x, x => _data.Refreshing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ListView.ScrollToRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ScrollToRequestedEventArgs>, Xamarin.Forms.ScrollToRequestedEventArgs>(x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.MasterDetailPage"/> class as observables.
    /// </summary>
    public class MasterDetailPageEvents
    {
        private readonly Xamarin.Forms.MasterDetailPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.MasterDetailPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MasterDetailPageEvents(Xamarin.Forms.MasterDetailPage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.MasterDetailPage.BackButtonPressed"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.BackButtonPressedEventArgs> BackButtonPressed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.BackButtonPressedEventArgs>, Xamarin.Forms.BackButtonPressedEventArgs>(x => _data.BackButtonPressed += x, x => _data.BackButtonPressed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.MasterDetailPage.IsPresentedChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> IsPresentedChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.IsPresentedChanged += x, x => _data.IsPresentedChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.MenuItem"/> class as observables.
    /// </summary>
    public class MenuItemEvents
    {
        private readonly Xamarin.Forms.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MenuItemEvents(Xamarin.Forms.MenuItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.MenuItem.Clicked"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Clicked => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Clicked += x, x => _data.Clicked -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.NavigationPage"/> class as observables.
    /// </summary>
    public class NavigationPageEvents
    {
        private readonly Xamarin.Forms.NavigationPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.NavigationPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public NavigationPageEvents(Xamarin.Forms.NavigationPage data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.InsertPageBeforeRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> InsertPageBeforeRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.InsertPageBeforeRequested += x, x => _data.InsertPageBeforeRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.Popped"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.NavigationEventArgs> Popped => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.NavigationEventArgs>, Xamarin.Forms.NavigationEventArgs>(x => _data.Popped += x, x => _data.Popped -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.PoppedToRoot"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.NavigationEventArgs> PoppedToRoot => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.NavigationEventArgs>, Xamarin.Forms.NavigationEventArgs>(x => _data.PoppedToRoot += x, x => _data.PoppedToRoot -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.PopRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.PopRequested += x, x => _data.PopRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.PopToRootRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> PopToRootRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.PopToRootRequested += x, x => _data.PopToRootRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.Pushed"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.NavigationEventArgs> Pushed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.NavigationEventArgs>, Xamarin.Forms.NavigationEventArgs>(x => _data.Pushed += x, x => _data.Pushed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.PushRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> PushRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.PushRequested += x, x => _data.PushRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.NavigationPage.RemovePageRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.NavigationRequestedEventArgs> RemovePageRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.NavigationRequestedEventArgs>, Xamarin.Forms.Internals.NavigationRequestedEventArgs>(x => _data.RemovePageRequested += x, x => _data.RemovePageRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.OpenGLView"/> class as observables.
    /// </summary>
    public class OpenGLViewEvents
    {
        private readonly Xamarin.Forms.OpenGLView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.OpenGLView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public OpenGLViewEvents(Xamarin.Forms.OpenGLView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.OpenGLView.DisplayRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> DisplayRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.DisplayRequested += x, x => _data.DisplayRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Page"/> class as observables.
    /// </summary>
    public class PageEvents
    {
        private readonly Xamarin.Forms.Page _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Page"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PageEvents(Xamarin.Forms.Page data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Page.Appearing"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Appearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Appearing += x, x => _data.Appearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Page.Disappearing"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Disappearing => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Disappearing += x, x => _data.Disappearing -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Page.LayoutChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> LayoutChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.LayoutChanged += x, x => _data.LayoutChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.PanGestureRecognizer"/> class as observables.
    /// </summary>
    public class PanGestureRecognizerEvents
    {
        private readonly Xamarin.Forms.PanGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.PanGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PanGestureRecognizerEvents(Xamarin.Forms.PanGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.PanGestureRecognizer.PanUpdated"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.PanUpdatedEventArgs> PanUpdated => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.PanUpdatedEventArgs>, Xamarin.Forms.PanUpdatedEventArgs>(x => _data.PanUpdated += x, x => _data.PanUpdated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Picker"/> class as observables.
    /// </summary>
    public class PickerEvents
    {
        private readonly Xamarin.Forms.Picker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Picker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PickerEvents(Xamarin.Forms.Picker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Picker.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SelectedIndexChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.PinchGestureRecognizer"/> class as observables.
    /// </summary>
    public class PinchGestureRecognizerEvents
    {
        private readonly Xamarin.Forms.PinchGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.PinchGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public PinchGestureRecognizerEvents(Xamarin.Forms.PinchGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.PinchGestureRecognizer.PinchUpdated"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.PinchGestureUpdatedEventArgs> PinchUpdated => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.PinchGestureUpdatedEventArgs>, Xamarin.Forms.PinchGestureUpdatedEventArgs>(x => _data.PinchUpdated += x, x => _data.PinchUpdated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.RowDefinition"/> class as observables.
    /// </summary>
    public class RowDefinitionEvents
    {
        private readonly Xamarin.Forms.RowDefinition _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.RowDefinition"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RowDefinitionEvents(Xamarin.Forms.RowDefinition data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.RowDefinition.SizeChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SizeChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SizeChanged += x, x => _data.SizeChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ScrollView"/> class as observables.
    /// </summary>
    public class ScrollViewEvents
    {
        private readonly Xamarin.Forms.ScrollView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ScrollView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollViewEvents(Xamarin.Forms.ScrollView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ScrollView.Scrolled"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ScrolledEventArgs> Scrolled => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ScrolledEventArgs>, Xamarin.Forms.ScrolledEventArgs>(x => _data.Scrolled += x, x => _data.Scrolled -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ScrollView.ScrollToRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ScrollToRequestedEventArgs> ScrollToRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ScrollToRequestedEventArgs>, Xamarin.Forms.ScrollToRequestedEventArgs>(x => _data.ScrollToRequested += x, x => _data.ScrollToRequested -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.SearchBar"/> class as observables.
    /// </summary>
    public class SearchBarEvents
    {
        private readonly Xamarin.Forms.SearchBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.SearchBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SearchBarEvents(Xamarin.Forms.SearchBar data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SearchBar.SearchButtonPressed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SearchButtonPressed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SearchButtonPressed += x, x => _data.SearchButtonPressed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SearchBar.TextChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.TextChangedEventArgs> TextChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.TextChangedEventArgs>, Xamarin.Forms.TextChangedEventArgs>(x => _data.TextChanged += x, x => _data.TextChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.SearchHandler"/> class as observables.
    /// </summary>
    public class SearchHandlerEvents
    {
        private readonly Xamarin.Forms.SearchHandler _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.SearchHandler"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SearchHandlerEvents(Xamarin.Forms.SearchHandler data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SearchHandler.FocusChangeRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs>, Xamarin.Forms.VisualElement.FocusRequestArgs>(x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SearchHandler.Focused"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Focused => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.EventArgs>, System.EventArgs>(x => _data.Focused += x, x => _data.Focused -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SearchHandler.Unfocused"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Unfocused => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.EventArgs>, System.EventArgs>(x => _data.Unfocused += x, x => _data.Unfocused -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.SelectableItemsView"/> class as observables.
    /// </summary>
    public class SelectableItemsViewEvents
    {
        private readonly Xamarin.Forms.SelectableItemsView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.SelectableItemsView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SelectableItemsViewEvents(Xamarin.Forms.SelectableItemsView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SelectableItemsView.SelectionChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.SelectionChangedEventArgs> SelectionChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.SelectionChangedEventArgs>, Xamarin.Forms.SelectionChangedEventArgs>(x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Shell"/> class as observables.
    /// </summary>
    public class ShellEvents
    {
        private readonly Xamarin.Forms.Shell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Shell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellEvents(Xamarin.Forms.Shell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Shell.Navigated"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ShellNavigatedEventArgs> Navigated => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ShellNavigatedEventArgs>, Xamarin.Forms.ShellNavigatedEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Shell.Navigating"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ShellNavigatingEventArgs> Navigating => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ShellNavigatingEventArgs>, Xamarin.Forms.ShellNavigatingEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Slider"/> class as observables.
    /// </summary>
    public class SliderEvents
    {
        private readonly Xamarin.Forms.Slider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Slider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SliderEvents(Xamarin.Forms.Slider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Slider.DragCompleted"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> DragCompleted => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.DragCompleted += x, x => _data.DragCompleted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Slider.DragStarted"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> DragStarted => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.DragStarted += x, x => _data.DragStarted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Slider.ValueChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ValueChangedEventArgs> ValueChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>, Xamarin.Forms.ValueChangedEventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Stepper"/> class as observables.
    /// </summary>
    public class StepperEvents
    {
        private readonly Xamarin.Forms.Stepper _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Stepper"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public StepperEvents(Xamarin.Forms.Stepper data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Stepper.ValueChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ValueChangedEventArgs> ValueChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>, Xamarin.Forms.ValueChangedEventArgs>(x => _data.ValueChanged += x, x => _data.ValueChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.SwipeGestureRecognizer"/> class as observables.
    /// </summary>
    public class SwipeGestureRecognizerEvents
    {
        private readonly Xamarin.Forms.SwipeGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.SwipeGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SwipeGestureRecognizerEvents(Xamarin.Forms.SwipeGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SwipeGestureRecognizer.Swiped"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.SwipedEventArgs> Swiped => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.SwipedEventArgs>, Xamarin.Forms.SwipedEventArgs>(x => _data.Swiped += x, x => _data.Swiped -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Switch"/> class as observables.
    /// </summary>
    public class SwitchEvents
    {
        private readonly Xamarin.Forms.Switch _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Switch"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SwitchEvents(Xamarin.Forms.Switch data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Switch.Toggled"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ToggledEventArgs> Toggled => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ToggledEventArgs>, Xamarin.Forms.ToggledEventArgs>(x => _data.Toggled += x, x => _data.Toggled -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.SwitchCell"/> class as observables.
    /// </summary>
    public class SwitchCellEvents
    {
        private readonly Xamarin.Forms.SwitchCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.SwitchCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public SwitchCellEvents(Xamarin.Forms.SwitchCell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.SwitchCell.OnChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.ToggledEventArgs> OnChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ToggledEventArgs>, Xamarin.Forms.ToggledEventArgs>(x => _data.OnChanged += x, x => _data.OnChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.TableView"/> class as observables.
    /// </summary>
    public class TableViewEvents
    {
        private readonly Xamarin.Forms.TableView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.TableView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TableViewEvents(Xamarin.Forms.TableView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.TableView.ModelChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ModelChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ModelChanged += x, x => _data.ModelChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.TapGestureRecognizer"/> class as observables.
    /// </summary>
    public class TapGestureRecognizerEvents
    {
        private readonly Xamarin.Forms.TapGestureRecognizer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.TapGestureRecognizer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TapGestureRecognizerEvents(Xamarin.Forms.TapGestureRecognizer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.TapGestureRecognizer.Tapped"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Tapped => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Tapped += x, x => _data.Tapped -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.ToolbarItem"/> class as observables.
    /// </summary>
    public class ToolbarItemEvents
    {
        private readonly Xamarin.Forms.ToolbarItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.ToolbarItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolbarItemEvents(Xamarin.Forms.ToolbarItem data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.ToolbarItem.Activated"/> event triggers.
        /// </summary>
        [System.ObsoleteAttribute("Activated is obsolete as of version 1.3.0. Please use Clicked instead.", false)]
        public System.IObservable<System.EventArgs> Activated => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Activated += x, x => _data.Activated -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.VisualElement"/> class as observables.
    /// </summary>
    public class VisualElementEvents
    {
        private readonly Xamarin.Forms.VisualElement _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.VisualElement"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public VisualElementEvents(Xamarin.Forms.VisualElement data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.VisualElement.BatchCommitted"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> BatchCommitted => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>>, Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>>(x => _data.BatchCommitted += x, x => _data.BatchCommitted -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.VisualElement.ChildrenReordered"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ChildrenReordered => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ChildrenReordered += x, x => _data.ChildrenReordered -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.VisualElement.FocusChangeRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.VisualElement.FocusRequestArgs> FocusChangeRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs>, Xamarin.Forms.VisualElement.FocusRequestArgs>(x => _data.FocusChangeRequested += x, x => _data.FocusChangeRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.VisualElement.Focused"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.FocusEventArgs> Focused => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.FocusEventArgs>, Xamarin.Forms.FocusEventArgs>(x => _data.Focused += x, x => _data.Focused -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.VisualElement.MeasureInvalidated"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> MeasureInvalidated => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.MeasureInvalidated += x, x => _data.MeasureInvalidated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.VisualElement.SizeChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SizeChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SizeChanged += x, x => _data.SizeChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.VisualElement.Unfocused"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.FocusEventArgs> Unfocused => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.FocusEventArgs>, Xamarin.Forms.FocusEventArgs>(x => _data.Unfocused += x, x => _data.Unfocused -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.WebView"/> class as observables.
    /// </summary>
    public class WebViewEvents
    {
        private readonly Xamarin.Forms.WebView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.WebView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public WebViewEvents(Xamarin.Forms.WebView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.WebView.EvalRequested"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.EvalRequested> EvalRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.EvalRequested>, Xamarin.Forms.Internals.EvalRequested>(x => _data.EvalRequested += x, x => _data.EvalRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.WebView.GoBackRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> GoBackRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.GoBackRequested += x, x => _data.GoBackRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.WebView.GoForwardRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> GoForwardRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.GoForwardRequested += x, x => _data.GoForwardRequested -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.WebView.Navigated"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.WebNavigatedEventArgs> Navigated => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.WebNavigatedEventArgs>, Xamarin.Forms.WebNavigatedEventArgs>(x => _data.Navigated += x, x => _data.Navigated -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.WebView.Navigating"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.WebNavigatingEventArgs> Navigating => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.WebNavigatingEventArgs>, Xamarin.Forms.WebNavigatingEventArgs>(x => _data.Navigating += x, x => _data.Navigating -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.WebView.ReloadRequested"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ReloadRequested => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ReloadRequested += x, x => _data.ReloadRequested -= x).Select(x => x.EventArgs);
    }
}

namespace Xamarin.Forms.Internals
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Internals"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Internals.DeviceInfo"/> class.
        /// </summary>
        public static DeviceInfoEvents Events(this Xamarin.Forms.Internals.DeviceInfo item) => new DeviceInfoEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Internals.IResourceDictionary"/> class.
        /// </summary>
        public static IResourceDictionaryEvents Events(this Xamarin.Forms.Internals.IResourceDictionary item) => new IResourceDictionaryEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Internals.TableModel"/> class.
        /// </summary>
        public static TableModelEvents Events(this Xamarin.Forms.Internals.TableModel item) => new TableModelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Internals.ToolbarTracker"/> class.
        /// </summary>
        public static ToolbarTrackerEvents Events(this Xamarin.Forms.Internals.ToolbarTracker item) => new ToolbarTrackerEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Internals.DeviceInfo"/> class as observables.
    /// </summary>
    public class DeviceInfoEvents
    {
        private readonly Xamarin.Forms.Internals.DeviceInfo _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Internals.DeviceInfo"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public DeviceInfoEvents(Xamarin.Forms.Internals.DeviceInfo data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Internals.DeviceInfo.PropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> PropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.ComponentModel.PropertyChangedEventHandler, System.ComponentModel.PropertyChangedEventArgs>(x => _data.PropertyChanged += x, x => _data.PropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Internals.IResourceDictionary"/> class as observables.
    /// </summary>
    public class IResourceDictionaryEvents
    {
        private readonly Xamarin.Forms.Internals.IResourceDictionary _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Internals.IResourceDictionary"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IResourceDictionaryEvents(Xamarin.Forms.Internals.IResourceDictionary data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Internals.IResourceDictionary.ValuesChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.ResourcesChangedEventArgs> ValuesChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.ResourcesChangedEventArgs>, Xamarin.Forms.Internals.ResourcesChangedEventArgs>(x => _data.ValuesChanged += x, x => _data.ValuesChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Internals.TableModel"/> class as observables.
    /// </summary>
    public class TableModelEvents
    {
        private readonly Xamarin.Forms.Internals.TableModel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Internals.TableModel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public TableModelEvents(Xamarin.Forms.Internals.TableModel data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Internals.TableModel.ItemLongPressed"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.EventArg<object>> ItemLongPressed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.EventArg<object>>, Xamarin.Forms.Internals.EventArg<object>>(x => _data.ItemLongPressed += x, x => _data.ItemLongPressed -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Internals.TableModel.ItemSelected"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Internals.EventArg<object>> ItemSelected => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Internals.EventArg<object>>, Xamarin.Forms.Internals.EventArg<object>>(x => _data.ItemSelected += x, x => _data.ItemSelected -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Internals.ToolbarTracker"/> class as observables.
    /// </summary>
    public class ToolbarTrackerEvents
    {
        private readonly Xamarin.Forms.Internals.ToolbarTracker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Internals.ToolbarTracker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ToolbarTrackerEvents(Xamarin.Forms.Internals.ToolbarTracker data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Internals.ToolbarTracker.CollectionChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> CollectionChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.CollectionChanged += x, x => _data.CollectionChanged -= x).Select(x => x.EventArgs);
    }
}

namespace Xamarin.Forms.Platform.Android
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Platform.Android"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FormsAppCompatActivity"/> class.
        /// </summary>
        public static FormsAppCompatActivityEvents Events(this Xamarin.Forms.Platform.Android.FormsAppCompatActivity item) => new FormsAppCompatActivityEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FormsApplicationActivity"/> class.
        /// </summary>
        public static FormsApplicationActivityEvents Events(this Xamarin.Forms.Platform.Android.FormsApplicationActivity item) => new FormsApplicationActivityEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer"/> class.
        /// </summary>
        public static IBorderVisualElementRendererEvents Events(this Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer item) => new IBorderVisualElementRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IButtonLayoutRenderer"/> class.
        /// </summary>
        public static IButtonLayoutRendererEvents Events(this Xamarin.Forms.Platform.Android.IButtonLayoutRenderer item) => new IButtonLayoutRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IDeviceInfoProvider"/> class.
        /// </summary>
        public static IDeviceInfoProviderEvents Events(this Xamarin.Forms.Platform.Android.IDeviceInfoProvider item) => new IDeviceInfoProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ImageButtonRenderer"/> class.
        /// </summary>
        public static ImageButtonRendererEvents Events(this Xamarin.Forms.Platform.Android.ImageButtonRenderer item) => new ImageButtonRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IShellItemRenderer"/> class.
        /// </summary>
        public static IShellItemRendererEvents Events(this Xamarin.Forms.Platform.Android.IShellItemRenderer item) => new IShellItemRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IShellObservableFragment"/> class.
        /// </summary>
        public static IShellObservableFragmentEvents Events(this Xamarin.Forms.Platform.Android.IShellObservableFragment item) => new IShellObservableFragmentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IShellSearchView"/> class.
        /// </summary>
        public static IShellSearchViewEvents Events(this Xamarin.Forms.Platform.Android.IShellSearchView item) => new IShellSearchViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ItemsViewRenderer"/> class.
        /// </summary>
        public static ItemsViewRendererEvents Events(this Xamarin.Forms.Platform.Android.ItemsViewRenderer item) => new ItemsViewRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IVisualElementRenderer"/> class.
        /// </summary>
        public static IVisualElementRendererEvents Events(this Xamarin.Forms.Platform.Android.IVisualElementRenderer item) => new IVisualElementRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.MasterDetailRenderer"/> class.
        /// </summary>
        public static MasterDetailRendererEvents Events(this Xamarin.Forms.Platform.Android.MasterDetailRenderer item) => new MasterDetailRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ScrollViewRenderer"/> class.
        /// </summary>
        public static ScrollViewRendererEvents Events(this Xamarin.Forms.Platform.Android.ScrollViewRenderer item) => new ScrollViewRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellContentFragment"/> class.
        /// </summary>
        public static ShellContentFragmentEvents Events(this Xamarin.Forms.Platform.Android.ShellContentFragment item) => new ShellContentFragmentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellItemRendererBase"/> class.
        /// </summary>
        public static ShellItemRendererBaseEvents Events(this Xamarin.Forms.Platform.Android.ShellItemRendererBase item) => new ShellItemRendererBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellSearchView"/> class.
        /// </summary>
        public static ShellSearchViewEvents Events(this Xamarin.Forms.Platform.Android.ShellSearchView item) => new ShellSearchViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellSectionRenderer"/> class.
        /// </summary>
        public static ShellSectionRendererEvents Events(this Xamarin.Forms.Platform.Android.ShellSectionRenderer item) => new ShellSectionRendererEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FormsAppCompatActivity"/> class as observables.
    /// </summary>
    public class FormsAppCompatActivityEvents
    {
        private readonly Xamarin.Forms.Platform.Android.FormsAppCompatActivity _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.FormsAppCompatActivity"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FormsAppCompatActivityEvents(Xamarin.Forms.Platform.Android.FormsAppCompatActivity data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FormsAppCompatActivity.ConfigurationChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ConfigurationChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ConfigurationChanged += x, x => _data.ConfigurationChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FormsApplicationActivity"/> class as observables.
    /// </summary>
    public class FormsApplicationActivityEvents
    {
        private readonly Xamarin.Forms.Platform.Android.FormsApplicationActivity _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.FormsApplicationActivity"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FormsApplicationActivityEvents(Xamarin.Forms.Platform.Android.FormsApplicationActivity data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FormsApplicationActivity.ConfigurationChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ConfigurationChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ConfigurationChanged += x, x => _data.ConfigurationChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer"/> class as observables.
    /// </summary>
    public class IBorderVisualElementRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IBorderVisualElementRendererEvents(Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IButtonLayoutRenderer"/> class as observables.
    /// </summary>
    public class IButtonLayoutRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.IButtonLayoutRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.IButtonLayoutRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IButtonLayoutRendererEvents(Xamarin.Forms.Platform.Android.IButtonLayoutRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IDeviceInfoProvider"/> class as observables.
    /// </summary>
    public class IDeviceInfoProviderEvents
    {
        private readonly Xamarin.Forms.Platform.Android.IDeviceInfoProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.IDeviceInfoProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IDeviceInfoProviderEvents(Xamarin.Forms.Platform.Android.IDeviceInfoProvider data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IDeviceInfoProvider.ConfigurationChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> ConfigurationChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.ConfigurationChanged += x, x => _data.ConfigurationChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ImageButtonRenderer"/> class as observables.
    /// </summary>
    public class ImageButtonRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.ImageButtonRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.ImageButtonRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageButtonRendererEvents(Xamarin.Forms.Platform.Android.ImageButtonRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ImageButtonRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ImageButtonRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>, System.ComponentModel.PropertyChangedEventArgs>(x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IShellItemRenderer"/> class as observables.
    /// </summary>
    public class IShellItemRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.IShellItemRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.IShellItemRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellItemRendererEvents(Xamarin.Forms.Platform.Android.IShellItemRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IShellItemRenderer.Destroyed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Destroyed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Destroyed += x, x => _data.Destroyed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IShellObservableFragment"/> class as observables.
    /// </summary>
    public class IShellObservableFragmentEvents
    {
        private readonly Xamarin.Forms.Platform.Android.IShellObservableFragment _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.IShellObservableFragment"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellObservableFragmentEvents(Xamarin.Forms.Platform.Android.IShellObservableFragment data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IShellObservableFragment.AnimationFinished"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> AnimationFinished => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.AnimationFinished += x, x => _data.AnimationFinished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IShellSearchView"/> class as observables.
    /// </summary>
    public class IShellSearchViewEvents
    {
        private readonly Xamarin.Forms.Platform.Android.IShellSearchView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.IShellSearchView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IShellSearchViewEvents(Xamarin.Forms.Platform.Android.IShellSearchView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IShellSearchView.SearchConfirmed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SearchConfirmed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SearchConfirmed += x, x => _data.SearchConfirmed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ItemsViewRenderer"/> class as observables.
    /// </summary>
    public class ItemsViewRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.ItemsViewRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.ItemsViewRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ItemsViewRendererEvents(Xamarin.Forms.Platform.Android.ItemsViewRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ItemsViewRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ItemsViewRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>, System.ComponentModel.PropertyChangedEventArgs>(x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.IVisualElementRenderer"/> class as observables.
    /// </summary>
    public class IVisualElementRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.IVisualElementRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.IVisualElementRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public IVisualElementRendererEvents(Xamarin.Forms.Platform.Android.IVisualElementRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IVisualElementRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.IVisualElementRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>, System.ComponentModel.PropertyChangedEventArgs>(x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.MasterDetailRenderer"/> class as observables.
    /// </summary>
    public class MasterDetailRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.MasterDetailRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.MasterDetailRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public MasterDetailRendererEvents(Xamarin.Forms.Platform.Android.MasterDetailRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.MasterDetailRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ScrollViewRenderer"/> class as observables.
    /// </summary>
    public class ScrollViewRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.ScrollViewRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.ScrollViewRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ScrollViewRendererEvents(Xamarin.Forms.Platform.Android.ScrollViewRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ScrollViewRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellContentFragment"/> class as observables.
    /// </summary>
    public class ShellContentFragmentEvents
    {
        private readonly Xamarin.Forms.Platform.Android.ShellContentFragment _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.ShellContentFragment"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellContentFragmentEvents(Xamarin.Forms.Platform.Android.ShellContentFragment data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ShellContentFragment.AnimationFinished"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> AnimationFinished => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.AnimationFinished += x, x => _data.AnimationFinished -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellItemRendererBase"/> class as observables.
    /// </summary>
    public class ShellItemRendererBaseEvents
    {
        private readonly Xamarin.Forms.Platform.Android.ShellItemRendererBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.ShellItemRendererBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellItemRendererBaseEvents(Xamarin.Forms.Platform.Android.ShellItemRendererBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ShellItemRendererBase.Destroyed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> Destroyed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.Destroyed += x, x => _data.Destroyed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellSearchView"/> class as observables.
    /// </summary>
    public class ShellSearchViewEvents
    {
        private readonly Xamarin.Forms.Platform.Android.ShellSearchView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.ShellSearchView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellSearchViewEvents(Xamarin.Forms.Platform.Android.ShellSearchView data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ShellSearchView.SearchConfirmed"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> SearchConfirmed => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.SearchConfirmed += x, x => _data.SearchConfirmed -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.ShellSectionRenderer"/> class as observables.
    /// </summary>
    public class ShellSectionRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.ShellSectionRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.ShellSectionRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ShellSectionRendererEvents(Xamarin.Forms.Platform.Android.ShellSectionRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.ShellSectionRenderer.AnimationFinished"/> event triggers.
        /// </summary>
        public System.IObservable<System.EventArgs> AnimationFinished => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler, System.EventArgs>(x => _data.AnimationFinished += x, x => _data.AnimationFinished -= x).Select(x => x.EventArgs);
    }
}

namespace Xamarin.Forms.Platform.Android.FastRenderers
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer"/> class.
        /// </summary>
        public static ButtonRendererEvents Events(this Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer item) => new ButtonRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer"/> class.
        /// </summary>
        public static FrameRendererEvents Events(this Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer item) => new FrameRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer"/> class.
        /// </summary>
        public static ImageRendererEvents Events(this Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer item) => new ImageRendererEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer"/> class.
        /// </summary>
        public static LabelRendererEvents Events(this Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer item) => new LabelRendererEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer"/> class as observables.
    /// </summary>
    public class ButtonRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ButtonRendererEvents(Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>, System.ComponentModel.PropertyChangedEventArgs>(x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer"/> class as observables.
    /// </summary>
    public class FrameRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public FrameRendererEvents(Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>, System.ComponentModel.PropertyChangedEventArgs>(x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer"/> class as observables.
    /// </summary>
    public class ImageRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public ImageRendererEvents(Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>, System.ComponentModel.PropertyChangedEventArgs>(x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x).Select(x => x.EventArgs);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer"/> class as observables.
    /// </summary>
    public class LabelRendererEvents
    {
        private readonly Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public LabelRendererEvents(Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer.ElementChanged"/> event triggers.
        /// </summary>
        public System.IObservable<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs> ElementChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>, Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs>(x => _data.ElementChanged += x, x => _data.ElementChanged -= x).Select(x => x.EventArgs);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer.ElementPropertyChanged"/> event triggers.
        /// </summary>
        public System.IObservable<System.ComponentModel.PropertyChangedEventArgs> ElementPropertyChanged => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>, System.ComponentModel.PropertyChangedEventArgs>(x => _data.ElementPropertyChanged += x, x => _data.ElementPropertyChanged -= x).Select(x => x.EventArgs);
    }
}

namespace Xamarin.Forms
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Xamarin.Forms"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "Xamarin.Forms.Forms.ViewInitialized"/> event triggers.
        /// </summary>
        public static System.IObservable<Xamarin.Forms.ViewInitializedEventArgs> FormsViewInitialized => System.Reactive.Linq.Observable.FromEventPattern<System.EventHandler<Xamarin.Forms.ViewInitializedEventArgs>, Xamarin.Forms.ViewInitializedEventArgs>(x => Xamarin.Forms.Forms.ViewInitialized += x, x => Xamarin.Forms.Forms.ViewInitialized -= x).Select(x => x.EventArgs);
    }
}
